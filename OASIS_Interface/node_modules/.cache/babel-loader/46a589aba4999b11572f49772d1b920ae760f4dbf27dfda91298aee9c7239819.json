{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { ConsumableBuffer } from './consumable-buffer.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function wrapHash(hashFn) {\n  function hashing(value) {\n    if (value instanceof InfiniteHash) {\n      // already a hash. return it\n      return value;\n    } else {\n      return new InfiniteHash(value, hashFn);\n    }\n  }\n  return hashing;\n}\nexport class InfiniteHash {\n  constructor(value, hashFn) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error('can only hash Uint8Arrays');\n    }\n    this._value = value;\n    this._hashFn = hashFn;\n    this._depth = -1;\n    this._availableBits = 0;\n    this._currentBufferIndex = 0;\n    this._buffers = [];\n  }\n  async take(bits) {\n    let pendingBits = bits;\n    while (this._availableBits < pendingBits) {\n      await this._produceMoreBits();\n    }\n    let result = 0;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const available = Math.min(hash.availableBits(), pendingBits);\n      const took = hash.take(available);\n      result = (result << available) + took;\n      pendingBits -= available;\n      this._availableBits -= available;\n      if (hash.availableBits() === 0) {\n        this._currentBufferIndex++;\n      }\n    }\n    return result;\n  }\n  untake(bits) {\n    let pendingBits = bits;\n    while (pendingBits > 0) {\n      const hash = this._buffers[this._currentBufferIndex];\n      const availableForUntake = Math.min(hash.totalBits() - hash.availableBits(), pendingBits);\n      hash.untake(availableForUntake);\n      pendingBits -= availableForUntake;\n      this._availableBits += availableForUntake;\n      if (this._currentBufferIndex > 0 && hash.totalBits() === hash.availableBits()) {\n        this._depth--;\n        this._currentBufferIndex--;\n      }\n    }\n  }\n  async _produceMoreBits() {\n    this._depth++;\n    const value = this._depth > 0 ? uint8ArrayConcat([this._value, Uint8Array.from([this._depth])]) : this._value;\n    const hashValue = await this._hashFn(value);\n    const buffer = new ConsumableBuffer(hashValue);\n    this._buffers.push(buffer);\n    this._availableBits += buffer.availableBits();\n  }\n}","map":{"version":3,"names":["ConsumableBuffer","concat","uint8ArrayConcat","wrapHash","hashFn","hashing","value","InfiniteHash","constructor","Uint8Array","Error","_value","_hashFn","_depth","_availableBits","_currentBufferIndex","_buffers","take","bits","pendingBits","_produceMoreBits","result","hash","available","Math","min","availableBits","took","untake","availableForUntake","totalBits","from","hashValue","buffer","push"],"sources":["../../src/consumable-hash.ts"],"sourcesContent":[null],"mappings":";;;;AAAA,SAASA,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,oBAAoB;AAE/D,OAAM,SAAUC,QAAQA,CAAEC,MAAkD;EAC1E,SAASC,OAAOA,CAAEC,KAAgC;IAChD,IAAIA,KAAK,YAAYC,YAAY,EAAE;MACjC;MACA,OAAOD,KAAK;KACb,MAAM;MACL,OAAO,IAAIC,YAAY,CAACD,KAAK,EAAEF,MAAM,CAAC;;EAE1C;EAEA,OAAOC,OAAO;AAChB;AAEA,OAAM,MAAOE,YAAY;EAQvBC,YAAaF,KAAiB,EAAEF,MAAkD;IAChF,IAAI,EAAEE,KAAK,YAAYG,UAAU,CAAC,EAAE;MAClC,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;;IAG9C,IAAI,CAACC,MAAM,GAAGL,KAAK;IACnB,IAAI,CAACM,OAAO,GAAGR,MAAM;IACrB,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,mBAAmB,GAAG,CAAC;IAC5B,IAAI,CAACC,QAAQ,GAAG,EAAE;EACpB;EAEA,MAAMC,IAAIA,CAAEC,IAAY;IACtB,IAAIC,WAAW,GAAGD,IAAI;IAEtB,OAAO,IAAI,CAACJ,cAAc,GAAGK,WAAW,EAAE;MACxC,MAAM,IAAI,CAACC,gBAAgB,EAAE;;IAG/B,IAAIC,MAAM,GAAG,CAAC;IAEd,OAAOF,WAAW,GAAG,CAAC,EAAE;MACtB,MAAMG,IAAI,GAAG,IAAI,CAACN,QAAQ,CAAC,IAAI,CAACD,mBAAmB,CAAC;MACpD,MAAMQ,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACH,IAAI,CAACI,aAAa,EAAE,EAAEP,WAAW,CAAC;MAC7D,MAAMQ,IAAI,GAAGL,IAAI,CAACL,IAAI,CAACM,SAAS,CAAC;MACjCF,MAAM,GAAG,CAACA,MAAM,IAAIE,SAAS,IAAII,IAAI;MACrCR,WAAW,IAAII,SAAS;MACxB,IAAI,CAACT,cAAc,IAAIS,SAAS;MAEhC,IAAID,IAAI,CAACI,aAAa,EAAE,KAAK,CAAC,EAAE;QAC9B,IAAI,CAACX,mBAAmB,EAAE;;;IAI9B,OAAOM,MAAM;EACf;EAEAO,MAAMA,CAAEV,IAAY;IAClB,IAAIC,WAAW,GAAGD,IAAI;IAEtB,OAAOC,WAAW,GAAG,CAAC,EAAE;MACtB,MAAMG,IAAI,GAAG,IAAI,CAACN,QAAQ,CAAC,IAAI,CAACD,mBAAmB,CAAC;MACpD,MAAMc,kBAAkB,GAAGL,IAAI,CAACC,GAAG,CAACH,IAAI,CAACQ,SAAS,EAAE,GAAGR,IAAI,CAACI,aAAa,EAAE,EAAEP,WAAW,CAAC;MACzFG,IAAI,CAACM,MAAM,CAACC,kBAAkB,CAAC;MAC/BV,WAAW,IAAIU,kBAAkB;MACjC,IAAI,CAACf,cAAc,IAAIe,kBAAkB;MAEzC,IAAI,IAAI,CAACd,mBAAmB,GAAG,CAAC,IAAIO,IAAI,CAACQ,SAAS,EAAE,KAAKR,IAAI,CAACI,aAAa,EAAE,EAAE;QAC7E,IAAI,CAACb,MAAM,EAAE;QACb,IAAI,CAACE,mBAAmB,EAAE;;;EAGhC;EAEA,MAAMK,gBAAgBA,CAAA;IACpB,IAAI,CAACP,MAAM,EAAE;IAEb,MAAMP,KAAK,GAAG,IAAI,CAACO,MAAM,GAAG,CAAC,GAAGX,gBAAgB,CAAC,CAAC,IAAI,CAACS,MAAM,EAAEF,UAAU,CAACsB,IAAI,CAAC,CAAC,IAAI,CAAClB,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAACF,MAAM;IAC7G,MAAMqB,SAAS,GAAG,MAAM,IAAI,CAACpB,OAAO,CAACN,KAAK,CAAC;IAC3C,MAAM2B,MAAM,GAAG,IAAIjC,gBAAgB,CAACgC,SAAS,CAAC;IAE9C,IAAI,CAAChB,QAAQ,CAACkB,IAAI,CAACD,MAAM,CAAC;IAC1B,IAAI,CAACnB,cAAc,IAAImB,MAAM,CAACP,aAAa,EAAE;EAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}