{"ast":null,"code":"import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nimport { getToken, setMnemonic, checkUserExist, setAuthenticationMetaInformation, forgetMnemonic, resetMnemonic } from \"@/api/axios/user\";\nimport CryptoJS from \"crypto-js\";\nexport default {\n  data() {\n    return {\n      //****ËÅäÂ§©Ê†è******//\n      isOpen: false,\n      UserImageList: [],\n      avatar: \"\",\n      //*********************//\n      //ÊñπÊ≥ï\n      echartChange: null,\n      //ËøûÊé•Èí±ÂåÖ\n      user: {\n        encryptedPassword: \"\"\n      },\n      changeingAccount: false,\n      anmiate1: true,\n      animate2: false,\n      animate3: false,\n      animate4: false,\n      animate5: false,\n      EmpowerSignForm: {\n        sp1: \"\",\n        sp2: \"\",\n        sp3: \"\"\n      },\n      isGetToken: false,\n      CopyTips: \"ÁÇπÂáªÂ§çÂà∂\",\n      CopySuccess: \"Â§çÂà∂ÊàêÂäüÔºÅ\",\n      isCopy: false,\n      isRepeatClick: true,\n      newMnemonic: \"\",\n      isUnlocked: false\n    };\n  },\n  async mounted() {},\n  methods: {\n    async empower(opt) {\n      if (opt == 2) {\n        if (this.EmpowerSignForm.sp1 == \"\" || this.EmpowerSignForm.sp2 == \"\" || this.EmpowerSignForm.sp3 == \"\" || this.EmpowerSignForm.sp4 == \"\" || this.EmpowerSignForm.sp5 == \"\" || this.user.encryptedPassword == \"\") {\n          this.$notify({\n            title: \"‰ø°ÊÅØ‰∏çËÉΩ‰∏∫Á©∫\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n          return;\n        }\n      }\n      this.user.encryptedPassword = CryptoJS.SHA256(this.user.encryptedPassword).toString();\n      await setMnemonic(this.user);\n      this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n      await setAuthenticationMetaInformation(this.EmpowerSignForm);\n      await getToken(this.user).then(async re => {\n        localStorage.clear();\n        if (re.data.data == null) {\n          this.$notify({\n            title: \"ÂØÜÁ†ÅÈîôËØØ\",\n            type: \"waring\",\n            position: \"top-left\",\n            offset: 200\n          });\n        } else {\n          localStorage.setItem(\"token\", re.data.data);\n          let currentAddress = {\n            ownerAddress: this.EmpowerSignForm.userAddress\n          };\n          await postOwnerContractList(currentAddress).then(re => {\n            this.$store.commit(\"setOwnerNFTList\", re.data.data);\n          });\n          this.giveChatInitToWalletConnect();\n          this.$store.commit(\"connection\", true);\n          this.$store.commit(\"setEmpower\", true);\n          this.isGetToken = false;\n          this.$notify({\n            title: \"üéâ ËøûÊé•ÊàêÂäü\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      });\n    },\n    async backPassword() {\n      this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n      forgetMnemonic(this.EmpowerSignForm).then(re => {\n        if (re.data.data) {\n          this.animate5 = true;\n          this.animate4 = false;\n          this.$notify({\n            title: \"ÂØÜ‰øùÊ≠£Á°Æ\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n        } else {\n          this.$notify({\n            title: \"ÂØÜ‰øùÈîôËØØ\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      });\n    },\n    async resetMnemonic() {\n      this.EmpowerSignForm.newMnemonic = CryptoJS.SHA256(this.newMnemonic).toString();\n      this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n      await checkUserExist(this.EmpowerSignForm).then(re => {\n        if (re.data.data == this.EmpowerSignForm.encryptedPassword) {\n          this.$notify({\n            title: \"‰∏çËÉΩ‰∏éÊóßÂØÜÁ†ÅÈáçÂ§ç\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n          return;\n        } else {\n          resetMnemonic(this.EmpowerSignForm).then(re => {\n            if (re.data.data == null) {\n              this.$notify.error({\n                title: \"Á≥ªÁªüÂºÇÂ∏∏\",\n                position: \"top-left\",\n                offset: 200\n              });\n            }\n            this.$notify({\n              title: \"üéâ ÈáçËÆæÊàêÂäü\",\n              position: \"top-left\",\n              offset: 200\n            });\n            this.animate2 = true;\n            this.animate5 = false;\n          });\n        }\n      });\n    },\n    canacelEmpover() {\n      this.isGetToken = false;\n      this.$store.commit(\"connection\", true);\n    },\n    giveChatInitToWalletConnect() {\n      console.log(\"ËÅäÂ§©Ê†èÊ≠£ÂàùÂßãÂåñ.......\");\n      this.$refs.ChatMemu.init();\n    },\n    setEchartChange(data) {\n      this.echartChange = data;\n      console.log(this.echartChange);\n    },\n    Copy() {\n      navigator.clipboard.writeText(this.$store.state.currentAddress).then(() => {\n        this.isCopy = true;\n        setTimeout(() => {\n          this.isCopy = false;\n        }, 3000);\n      });\n    },\n    GETHashAvatar() {\n      if (this.$store.state.isconnect) {\n        this.avatar = \"data:image/png;base64,\" + new this.Identicon(this.$store.state.currentAddress, 120).toString();\n        this.$refs.avatar.width = 60;\n        this.$refs.avatar.height = 60;\n      } else {\n        this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n        this.$refs.avatar.width = 40;\n        this.$refs.avatar.height = 40;\n      }\n    }\n  }\n};","map":{"version":3,"names":["postOwnerContractList","getToken","setMnemonic","checkUserExist","setAuthenticationMetaInformation","forgetMnemonic","resetMnemonic","CryptoJS","data","isOpen","UserImageList","avatar","echartChange","user","encryptedPassword","changeingAccount","anmiate1","animate2","animate3","animate4","animate5","EmpowerSignForm","sp1","sp2","sp3","isGetToken","CopyTips","CopySuccess","isCopy","isRepeatClick","newMnemonic","isUnlocked","mounted","methods","empower","opt","sp4","sp5","$notify","title","type","position","offset","SHA256","toString","userAddress","$store","state","currentAddress","then","re","localStorage","clear","setItem","ownerAddress","commit","giveChatInitToWalletConnect","backPassword","error","canacelEmpover","console","log","$refs","ChatMemu","init","setEchartChange","Copy","navigator","clipboard","writeText","setTimeout","GETHashAvatar","isconnect","Identicon","width","height","require"],"sources":["src/views/bar/walletConnect.vue"],"sourcesContent":["<template>\n  <div class=\"Walletbox\">\n    <div\n      class=\"WalletInnerBox\"\n      @click.stop=\"Copy\"\n    >\n      <span\n        class=\"avatarBox\"\n        @click=\"openEmpower\"\n      >\n        <img\n          class=\"avatar\"\n          :src=\"$store.state.avatar\"\n          alt=\"\"\n          ref=\"avatar\"\n          slot=\"reference\"\n        >\n      </span>\n      <!-- <span class=\"address\">{{ \n        $store.state.currentAddress==\"\"?\"MetaMask is not connected\":`${this.$store.state.currentAddress.slice(\n          0,\n          5\n        )}...${this.$store.state.currentAddress.slice(-5)}`\n      }}\n      </span> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nimport {\n    getToken,\n    setMnemonic,\n    checkUserExist,\n    setAuthenticationMetaInformation,\n    forgetMnemonic,\n    resetMnemonic,\n  } from \"@/api/axios/user\";\n  import CryptoJS from \"crypto-js\";\n  export default {\n    data() {\n      return {\n        //****ËÅäÂ§©Ê†è******//\n        isOpen: false,\n        UserImageList: [],\n        avatar: \"\",\n        //*********************//\n        //ÊñπÊ≥ï\n        echartChange: null,\n        //ËøûÊé•Èí±ÂåÖ\n        user: {\n          encryptedPassword: \"\",\n        },\n        changeingAccount: false,\n        anmiate1: true,\n        animate2: false,\n        animate3: false,\n        animate4: false,\n        animate5: false,\n        EmpowerSignForm: {\n          sp1: \"\",\n          sp2: \"\",\n          sp3: \"\",\n        },\n        isGetToken: false,\n        CopyTips: \"ÁÇπÂáªÂ§çÂà∂\",\n        CopySuccess: \"Â§çÂà∂ÊàêÂäüÔºÅ\",\n        isCopy: false,\n        isRepeatClick: true,\n        newMnemonic: \"\",\n        isUnlocked: false,\n      };\n  },\n  async mounted() {\n\n    },\n  methods: {\n \n      async empower(opt) {\n        if (opt == 2) {\n          if (\n            this.EmpowerSignForm.sp1 == \"\" ||\n            this.EmpowerSignForm.sp2 == \"\" ||\n            this.EmpowerSignForm.sp3 == \"\" ||\n            this.EmpowerSignForm.sp4 == \"\" ||\n            this.EmpowerSignForm.sp5 == \"\" ||\n            this.user.encryptedPassword == \"\"\n          ) {\n            this.$notify({\n              title: \"‰ø°ÊÅØ‰∏çËÉΩ‰∏∫Á©∫\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            return;\n          }\n        }\n        this.user.encryptedPassword = CryptoJS.SHA256(\n          this.user.encryptedPassword\n        ).toString();\n        await setMnemonic(this.user);\n        this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n        await setAuthenticationMetaInformation(this.EmpowerSignForm);\n        await getToken(this.user).then(async (re) => {\n          localStorage.clear();\n          if (re.data.data == null) {\n            this.$notify({\n              title: \"ÂØÜÁ†ÅÈîôËØØ\",\n              type: \"waring\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          } else {\n            localStorage.setItem(\"token\", re.data.data);\n            let currentAddress = {\n              ownerAddress: this.EmpowerSignForm.userAddress,\n            };\n            await postOwnerContractList(currentAddress).then((re) => {\n              this.$store.commit(\"setOwnerNFTList\", re.data.data);\n            });\n            this.giveChatInitToWalletConnect();\n            this.$store.commit(\"connection\", true);\n            this.$store.commit(\"setEmpower\", true);\n            this.isGetToken = false;\n            this.$notify({\n              title: \"üéâ ËøûÊé•ÊàêÂäü\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        });\n      },\n\n\n\n      async backPassword() {\n        this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n        forgetMnemonic(this.EmpowerSignForm).then((re) => {\n          if (re.data.data) {\n            this.animate5 = true;\n            this.animate4 = false;\n            this.$notify({\n              title: \"ÂØÜ‰øùÊ≠£Á°Æ\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          } else {\n            this.$notify({\n              title: \"ÂØÜ‰øùÈîôËØØ\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        });\n      },\n      async resetMnemonic() {\n        this.EmpowerSignForm.newMnemonic = CryptoJS.SHA256(\n          this.newMnemonic\n        ).toString();\n        this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n        await checkUserExist(this.EmpowerSignForm).then((re) => {\n          if (re.data.data == this.EmpowerSignForm.encryptedPassword) {\n            this.$notify({\n              title: \"‰∏çËÉΩ‰∏éÊóßÂØÜÁ†ÅÈáçÂ§ç\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            return;\n          } else {\n            resetMnemonic(this.EmpowerSignForm).then((re) => {\n              if (re.data.data == null) {\n                this.$notify.error({\n                  title: \"Á≥ªÁªüÂºÇÂ∏∏\",\n                  position: \"top-left\",\n                  offset: 200,\n                });\n              }\n              this.$notify({\n                title: \"üéâ ÈáçËÆæÊàêÂäü\",\n                position: \"top-left\",\n                offset: 200,\n              });\n              this.animate2 = true;\n              this.animate5 = false;\n            });\n          }\n        });\n      },\n      canacelEmpover() {\n        this.isGetToken = false;\n        this.$store.commit(\"connection\", true);\n      },\n      giveChatInitToWalletConnect() {\n        console.log(\"ËÅäÂ§©Ê†èÊ≠£ÂàùÂßãÂåñ.......\");\n        this.$refs.ChatMemu.init();\n      },\n      \n      setEchartChange(data) {\n        this.echartChange = data;\n        console.log(this.echartChange);\n      },\n\n      Copy() {\n        navigator.clipboard\n          .writeText(this.$store.state.currentAddress)\n          .then(() => {\n            this.isCopy = true;\n            setTimeout(() => {\n              this.isCopy = false;\n            }, 3000);\n          });\n      },\n      GETHashAvatar() {\n        if (this.$store.state.isconnect) {\n          this.avatar =\n            \"data:image/png;base64,\" +\n            new this.Identicon(this.$store.state.currentAddress, 120).toString();\n          this.$refs.avatar.width = 60;\n          this.$refs.avatar.height = 60;\n        } else {\n          this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n          this.$refs.avatar.width = 40;\n          this.$refs.avatar.height = 40;\n        }\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/topMenu/walletConnect.scss\";\n\n.MetaMaskAvatar {\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.BOX {\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.address {\n  margin-left: 5%;\n  color: var(--Dark--);\n  font-weight: 800;\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  border-radius: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(238, 238, 238, 0.1);\n    transition: all 0.3s ease-in-out;\n  }\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}