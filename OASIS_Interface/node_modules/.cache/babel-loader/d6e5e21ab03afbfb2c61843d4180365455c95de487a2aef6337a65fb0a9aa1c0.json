{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform, util } from '@tensorflow/tfjs-core';\nexport function transform(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    image,\n    transforms\n  } = inputs;\n  const {\n    interpolation,\n    fillMode,\n    fillValue,\n    outputShape\n  } = attrs;\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n  const outVals = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(outShape));\n  outVals.fill(fillValue);\n  const imageVals = backend.data.get(image.dataId).values;\n  const transformVals = backend.data.get(transforms.dataId).values;\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ? transformVals : transformVals.subarray(b * 8, b * 8 + 8);\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n          const inX = (transform[0] * outX + transform[1] * outY + transform[2]) / projection;\n          const inY = (transform[3] * outX + transform[4] * outY + transform[5]) / projection;\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(`Error in Transform: Expect 'nearest' or ` + `'bilinear', but got ${interpolation}`);\n          }\n          const ind = b * batchStride + outY * rowStride + outX * colStride + channel;\n          outVals[ind] = val;\n        }\n      }\n    }\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {\n    dataId,\n    shape: image.shape,\n    dtype: image.dtype\n  };\n}\nexport const transformConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform\n};\nfunction mapCoord(outCoord, len, mode) {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\nfunction mapCoordReflect(outCoord, len) {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordWrap(outCoord, len) {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordConstant(outCoord, len) {\n  return outCoord;\n}\nfunction mapCoordNearest(outCoord, len) {\n  return util.clamp(0, outCoord, len - 1);\n}\nfunction readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\nfunction nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n  return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);\n}\nfunction bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil = (xCeil - x) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) + (x - xFloor) * readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}","map":{"version":3,"names":["Transform","util","transform","args","inputs","attrs","backend","image","transforms","interpolation","fillMode","fillValue","outputShape","batch","imageHeight","imageWidth","numChannels","shape","outHeight","outWidth","outShape","strides","computeStrides","batchStride","rowStride","colStride","outVals","getTypedArrayFromDType","dtype","sizeFromShape","fill","imageVals","data","get","dataId","values","transformVals","b","subarray","outY","outX","channel","val","projection","inX","inY","x","mapCoord","y","nearestInterpolation","bilinearInterpolation","Error","ind","makeTensorInfo","write","transformConfig","kernelName","backendName","kernelFunc","outCoord","len","mode","mapCoordReflect","mapCoordWrap","mapCoordNearest","mapCoordConstant","inCoord","sz2","Math","trunc","clamp","sz","readWithFillValue","$y","round","$x","yFloor","floor","xFloor","yCeil","xCeil","valueYFloor","valueYCeil"],"sources":["../../../../../../tfjs-backend-cpu/src/kernels/Transform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, Transform, TransformAttrs, TransformInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function transform(args: {\n  inputs: TransformInputs,\n  attrs: TransformAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {image, transforms} = inputs;\n  const {interpolation, fillMode, fillValue, outputShape} = attrs;\n\n  const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n  const [outHeight, outWidth] =\n      outputShape != null ? outputShape : [imageHeight, imageWidth];\n  const outShape = [batch, outHeight, outWidth, numChannels];\n\n  const strides = util.computeStrides(image.shape);\n  const batchStride = strides[0];\n  const rowStride = strides[1];\n  const colStride = strides[2];\n\n  const outVals = util.getTypedArrayFromDType(\n      image.dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  outVals.fill(fillValue);\n\n  const imageVals = backend.data.get(image.dataId).values as TypedArray;\n  const transformVals =\n      backend.data.get(transforms.dataId).values as TypedArray;\n\n  // Ref TF implementation:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n  for (let b = 0; b < batch; ++b) {\n    const transform = transforms.shape[0] === 1 ?\n        transformVals :\n        transformVals.subarray(b * 8, b * 8 + 8);\n\n    for (let outY = 0; outY < outHeight; ++outY) {\n      for (let outX = 0; outX < outWidth; ++outX) {\n        for (let channel = 0; channel < numChannels; ++channel) {\n          let val;\n\n          const projection = transform[6] * outX + transform[7] * outY + 1;\n\n          if (projection === 0) {\n            // Return the fill value for infinite coordinates,\n            // which are outside the input image\n            continue;\n          }\n\n          const inX =\n              (transform[0] * outX + transform[1] * outY + transform[2]) /\n              projection;\n          const inY =\n              (transform[3] * outX + transform[4] * outY + transform[5]) /\n              projection;\n\n          const x = mapCoord(inX, imageWidth, fillMode);\n          const y = mapCoord(inY, imageHeight, fillMode);\n\n          switch (interpolation) {\n            case 'nearest':\n              val = nearestInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            case 'bilinear':\n              val = bilinearInterpolation(\n                  imageVals, imageHeight, imageWidth, batchStride, rowStride,\n                  colStride, b, y, x, channel, fillValue);\n              break;\n            default:\n              throw new Error(\n                  `Error in Transform: Expect 'nearest' or ` +\n                  `'bilinear', but got ${interpolation}`);\n          }\n\n          const ind =\n              b * batchStride + outY * rowStride + outX * colStride + channel;\n\n          outVals[ind] = val;\n        }\n      }\n    }\n\n    return backend.makeTensorInfo(outShape, image.dtype, outVals);\n  }\n\n  const dataId = backend.write(outVals, outShape, image.dtype);\n  return {dataId, shape: image.shape, dtype: image.dtype};\n}\n\nexport const transformConfig: KernelConfig = {\n  kernelName: Transform,\n  backendName: 'cpu',\n  kernelFunc: transform as {} as KernelFunc\n};\n\nfunction mapCoord(\n    outCoord: number, len: number,\n    mode: 'constant'|'reflect'|'wrap'|'nearest') {\n  switch (mode) {\n    case 'reflect':\n      return mapCoordReflect(outCoord, len);\n    case 'wrap':\n      return mapCoordWrap(outCoord, len);\n    case 'nearest':\n      return mapCoordNearest(outCoord, len);\n    case 'constant':\n    default:\n      return mapCoordConstant(outCoord, len);\n  }\n}\n\nfunction mapCoordReflect(outCoord: number, len: number): number {\n  // Reflect [abcd] to [dcba|abcd|dcba].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      if (inCoord < sz2) {\n        inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n      }\n      inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz2 = 2 * len;\n      inCoord -= sz2 * Math.trunc(inCoord / sz2);\n      if (inCoord >= len) {\n        inCoord = sz2 - inCoord - 1;\n      }\n    }\n  }\n  // clamp is necessary because when outCoord = 3.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordWrap(outCoord: number, len: number): number {\n  // Wrap [abcd] to [abcd|abcd|abcd].\n  let inCoord = outCoord;\n  if (inCoord < 0) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n    }\n  } else if (inCoord > len - 1) {\n    if (len <= 1) {\n      inCoord = 0;\n    } else {\n      const sz = len - 1;\n      inCoord -= len * Math.trunc(inCoord / sz);\n    }\n  }\n  // clamp is necessary because when outCoord = -0.5 and len = 4,\n  // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n  return util.clamp(0, inCoord, len - 1);\n}\n\nfunction mapCoordConstant(outCoord: number, len: number): number {\n  return outCoord;\n}\n\nfunction mapCoordNearest(outCoord: number, len: number): number {\n  return util.clamp(0, outCoord, len - 1);\n}\n\nfunction readWithFillValue(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n  if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n    return imageVals[ind];\n  } else {\n    return fillValue;\n  }\n}\n\nfunction nearestInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number): number {\n  const $y = Math.round(y);\n  const $x = Math.round(x);\n\n  return readWithFillValue(\n      imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride,\n      batch, $y, $x, channel, fillValue);\n}\n\nfunction bilinearInterpolation(\n    imageVals: TypedArray, imageHeight: number, imageWidth: number,\n    batchStride: number, rowStride: number, colStride: number, batch: number,\n    y: number, x: number, channel: number, fillValue: number) {\n  const yFloor = Math.floor(y);\n  const xFloor = Math.floor(x);\n  const yCeil = yFloor + 1;\n  const xCeil = xFloor + 1;\n  // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n  //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n  const valueYFloor =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yFloor, xCeil, channel, fillValue);\n  // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n  //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n  const valueYCeil =\n      (xCeil - x) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xFloor, channel, fillValue) +\n      (x - xFloor) *\n          readWithFillValue(\n              imageVals, imageHeight, imageWidth, batchStride, rowStride,\n              colStride, batch, yCeil, xCeil, channel, fillValue);\n  // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n  //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n  return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}