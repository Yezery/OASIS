{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport 'node-forge/lib/util.js';\nimport 'node-forge/lib/jsbn.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport function bigIntegerToUintBase64url(num, len) {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n  buf = buf[0] === 0 ? buf.subarray(1) : buf;\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n  return uint8ArrayToString(buf, 'base64url');\n}\n// Convert a base64url encoded string to a BigInteger\nexport function base64urlToBigInteger(str) {\n  const buf = base64urlToBuffer(str);\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n}\nexport function base64urlToBuffer(str, len) {\n  let buf = uint8ArrayFromString(str, 'base64urlpad');\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n  return buf;\n}","map":{"version":3,"names":["forge","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","toString","uint8ArrayToString","bigIntegerToUintBase64url","num","len","buf","Uint8Array","from","abs","toByteArray","subarray","length","Error","base64urlToBigInteger","str","base64urlToBuffer","jsbn","BigInteger"],"sources":["../../src/util.ts"],"sourcesContent":[null],"mappings":";;;AAAA,OAAO,wBAAwB;AAC/B,OAAO,wBAAwB;AAC/B;AACA,OAAOA,KAAK,MAAM,yBAAyB;AAC3C,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,oBAAoB;AAC/D,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AAEtE,OAAM,SAAUC,yBAAyBA,CAAEC,GAAuB,EAAEC,GAAY;EAC9E;EACA,IAAIC,GAAG,GAAGC,UAAU,CAACC,IAAI,CAACJ,GAAG,CAACK,GAAG,EAAE,CAACC,WAAW,EAAE,CAAC,EAAC;EAEnD;EACA;EACA;EACA;EACAJ,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,GAAGA,GAAG,CAACK,QAAQ,CAAC,CAAC,CAAC,GAAGL,GAAG;EAE1C,IAAID,GAAG,IAAI,IAAI,EAAE;IACf,IAAIC,GAAG,CAACM,MAAM,GAAGP,GAAG,EAAE,MAAM,IAAIQ,KAAK,CAAC,uCAAuC,CAAC;IAC9EP,GAAG,GAAGR,gBAAgB,CAAC,CAAC,IAAIS,UAAU,CAACF,GAAG,GAAGC,GAAG,CAACM,MAAM,CAAC,EAAEN,GAAG,CAAC,CAAC;;EAGjE,OAAOJ,kBAAkB,CAACI,GAAG,EAAE,WAAW,CAAC;AAC7C;AAEA;AACA,OAAM,SAAUQ,qBAAqBA,CAAEC,GAAW;EAChD,MAAMT,GAAG,GAAGU,iBAAiB,CAACD,GAAG,CAAC;EAClC,OAAO,IAAInB,KAAK,CAACqB,IAAI,CAACC,UAAU,CAAChB,kBAAkB,CAACI,GAAG,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC;AACzE;AAEA,OAAM,SAAUU,iBAAiBA,CAAED,GAAW,EAAEV,GAAY;EAC1D,IAAIC,GAAG,GAAGN,oBAAoB,CAACe,GAAG,EAAE,cAAc,CAAC;EAEnD,IAAIV,GAAG,IAAI,IAAI,EAAE;IACf,IAAIC,GAAG,CAACM,MAAM,GAAGP,GAAG,EAAE,MAAM,IAAIQ,KAAK,CAAC,uCAAuC,CAAC;IAC9EP,GAAG,GAAGR,gBAAgB,CAAC,CAAC,IAAIS,UAAU,CAACF,GAAG,GAAGC,GAAG,CAACM,MAAM,CAAC,EAAEN,GAAG,CAAC,CAAC;;EAGjE,OAAOA,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}