{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport first from 'it-first';\nimport last from 'it-last';\nimport { resolve } from '../../utils.js';\nimport errCode from 'err-code';\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet({\n  codecs,\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get(cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid);\n    }\n    if (options.path) {\n      const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, repo, options)) : await last(resolve(cid, options.path, codecs, repo, options));\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = entry;\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n      }\n      return result;\n    }\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n    return {\n      value: node,\n      remainderPath: ''\n    };\n  };\n  return withTimeoutOption(get);\n}","map":{"version":3,"names":["withTimeoutOption","first","last","resolve","errCode","createGet","codecs","repo","preload","get","cid","options","path","entry","localResolve","result","Error","codec","getCodec","code","block","blocks","node","decode","value","remainderPath"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/dag/get.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { resolve } from '../../utils.js'\nimport errCode from 'err-code'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ codecs, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;AACvE,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,IAAI,MAAM,SAAS;AAC1B,SAASC,OAAO,QAAQ,gBAAgB;AACxC,OAAOC,OAAO,MAAM,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,MAAM;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EACpD;AACF;AACA;EACE,MAAMC,GAAG,GAAG,eAAeA,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjD,IAAIA,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;MAC7BA,OAAO,CAACE,GAAG,CAAC;IACd;IAEA,IAAIC,OAAO,CAACC,IAAI,EAAE;MAChB,MAAMC,KAAK,GAAGF,OAAO,CAACG,YAAY,GAC9B,MAAMb,KAAK,CAACE,OAAO,CAACO,GAAG,EAAEC,OAAO,CAACC,IAAI,EAAEN,MAAM,EAAEC,IAAI,EAAEI,OAAO,CAAC,CAAC,GAC9D,MAAMT,IAAI,CAACC,OAAO,CAACO,GAAG,EAAEC,OAAO,CAACC,IAAI,EAAEN,MAAM,EAAEC,IAAI,EAAEI,OAAO,CAAC,CAAC;MACjE;MACA,MAAMI,MAAM,GAAIF,KAAM;MAEtB,IAAI,CAACE,MAAM,EAAE;QACX,MAAMX,OAAO,CAAC,IAAIY,KAAK,CAAC,WAAW,CAAC,EAAE,eAAe,CAAC;MACxD;MAEA,OAAOD,MAAM;IACf;IAEA,MAAME,KAAK,GAAG,MAAMX,MAAM,CAACY,QAAQ,CAACR,GAAG,CAACS,IAAI,CAAC;IAC7C,MAAMC,KAAK,GAAG,MAAMb,IAAI,CAACc,MAAM,CAACZ,GAAG,CAACC,GAAG,EAAEC,OAAO,CAAC;IACjD,MAAMW,IAAI,GAAGL,KAAK,CAACM,MAAM,CAACH,KAAK,CAAC;IAEhC,OAAO;MACLI,KAAK,EAAEF,IAAI;MACXG,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EAED,OAAOzB,iBAAiB,CAACS,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}