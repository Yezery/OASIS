{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer(peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json();\n    return (res.Keys || []).map(( /** @type {{ '/': string }} */k) => CID.parse(k['/']));\n  }\n  return wantlistForPeer;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createWantlistForPeer","api","wantlistForPeer","peerId","options","res","post","signal","searchParams","peer","toString","headers","json","Keys","map","k","parse"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/bitswap/wantlist-for-peer.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createWantlistForPeer = configure(api => {\n  /**\n   * @type {BitswapAPI[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const res = await (await api.post('bitswap/wantlist', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        peer: peerId.toString()\n      }),\n      headers: options.headers\n    })).json()\n\n    return (res.Keys || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/']))\n  }\n  return wantlistForPeer\n})\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,qBAAqB,GAAGF,SAAS,CAACG,GAAG,IAAI;EACpD;AACF;AACA;EACE,eAAeC,eAAeA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpD,MAAMC,GAAG,GAAG,MAAM,CAAC,MAAMJ,GAAG,CAACK,IAAI,CAAC,kBAAkB,EAAE;MACpDC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAET,iBAAiB,CAAC;QAC9B,GAAGK,OAAO;QACVK,IAAI,EAAEN,MAAM,CAACO,QAAQ,CAAC;MACxB,CAAC,CAAC;MACFC,OAAO,EAAEP,OAAO,CAACO;IACnB,CAAC,CAAC,EAAEC,IAAI,CAAC,CAAC;IAEV,OAAO,CAACP,GAAG,CAACQ,IAAI,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC,8BAA+BC,CAAC,KAAKlB,GAAG,CAACmB,KAAK,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACtF;EACA,OAAOb,eAAe;AACxB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}