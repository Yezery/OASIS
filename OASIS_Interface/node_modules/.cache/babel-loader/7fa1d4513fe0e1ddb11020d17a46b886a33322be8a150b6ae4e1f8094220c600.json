{"ast":null,"code":"export const symbol = Symbol.for('@libp2p/transport');\nexport function isTransport(other) {\n  return other != null && Boolean(other[symbol]);\n}\n/**\n * Enum Transport Manager Fault Tolerance values\n */\nexport var FaultTolerance;\n(function (FaultTolerance) {\n  /**\n   * should be used for failing in any listen circumstance\n   */\n  FaultTolerance[FaultTolerance[\"FATAL_ALL\"] = 0] = \"FATAL_ALL\";\n  /**\n   * should be used for not failing when not listening\n   */\n  FaultTolerance[FaultTolerance[\"NO_FATAL\"] = 1] = \"NO_FATAL\";\n})(FaultTolerance || (FaultTolerance = {}));","map":{"version":3,"names":["symbol","Symbol","for","isTransport","other","Boolean","FaultTolerance"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAOA,OAAO,MAAMA,MAAM,GAAGC,MAAM,CAACC,GAAG,CAAC,mBAAmB,CAAC;AAgGrD,OAAM,SAAUC,WAAWA,CAAEC,KAAU;EACrC,OAAOA,KAAK,IAAI,IAAI,IAAIC,OAAO,CAACD,KAAK,CAACJ,MAAM,CAAC,CAAC;AAChD;AAkBA;;;AAGA,WAAYM,cAUX;AAVD,WAAYA,cAAc;EACxB;;;EAGAA,cAAA,CAAAA,cAAA,gCAAa;EAEb;;;EAGAA,cAAA,CAAAA,cAAA,8BAAQ;AACV,CAAC,EAVWA,cAAc,KAAdA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}