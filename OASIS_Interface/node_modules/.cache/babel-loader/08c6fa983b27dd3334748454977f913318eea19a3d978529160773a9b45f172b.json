{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { coerce, equals as equalBytes } from '../bytes.js';\nimport * as varint from '../varint.js';\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */b;\n    return a.code === data.code && a.size === data.size && data.bytes instanceof Uint8Array && equalBytes(a.bytes, data.bytes);\n  }\n};\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","map":{"version":3,"names":["coerce","equals","equalBytes","varint","create","code","digest","size","byteLength","sizeOffset","encodingLength","digestOffset","bytes","Uint8Array","encodeTo","set","Digest","decode","multihash","subarray","Error","a","b","data","constructor"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/multiformats@12.1.2/node_modules/multiformats/src/hashes/digest.js"],"sourcesContent":["import { coerce, equals as equalBytes } from '../bytes.js'\nimport * as varint from '../varint.js'\n\n/**\n * Creates a multihash digest.\n *\n * @template {number} Code\n * @param {Code} code\n * @param {Uint8Array} digest\n */\nexport const create = (code, digest) => {\n  const size = digest.byteLength\n  const sizeOffset = varint.encodingLength(code)\n  const digestOffset = sizeOffset + varint.encodingLength(size)\n\n  const bytes = new Uint8Array(digestOffset + size)\n  varint.encodeTo(code, bytes, 0)\n  varint.encodeTo(size, bytes, sizeOffset)\n  bytes.set(digest, digestOffset)\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * Turns bytes representation of multihash digest into an instance.\n *\n * @param {Uint8Array} multihash\n * @returns {MultihashDigest}\n */\nexport const decode = (multihash) => {\n  const bytes = coerce(multihash)\n  const [code, sizeOffset] = varint.decode(bytes)\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset))\n  const digest = bytes.subarray(sizeOffset + digestOffset)\n\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length')\n  }\n\n  return new Digest(code, size, digest, bytes)\n}\n\n/**\n * @param {MultihashDigest} a\n * @param {unknown} b\n * @returns {b is MultihashDigest}\n */\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true\n  } else {\n    const data = /** @type {{code?:unknown, size?:unknown, bytes?:unknown}} */(b)\n\n    return (\n      a.code === data.code &&\n      a.size === data.size &&\n      data.bytes instanceof Uint8Array &&\n      equalBytes(a.bytes, data.bytes)\n    )\n  }\n}\n\n/**\n * @typedef {import('./interface.js').MultihashDigest} MultihashDigest\n */\n\n/**\n * Represents a multihash digest which carries information about the\n * hashing algorithm and an actual hash digest.\n *\n * @template {number} Code\n * @template {number} Size\n * @class\n * @implements {MultihashDigest}\n */\nexport class Digest {\n  /**\n   * Creates a multihash digest.\n   *\n   * @param {Code} code\n   * @param {Size} size\n   * @param {Uint8Array} digest\n   * @param {Uint8Array} bytes\n   */\n  constructor (code, size, digest, bytes) {\n    this.code = code\n    this.size = size\n    this.digest = digest\n    this.bytes = bytes\n  }\n}\n"],"mappings":";;;AAAA,SAASA,MAAM,EAAEC,MAAM,IAAIC,UAAU,QAAQ,aAAa;AAC1D,OAAO,KAAKC,MAAM,MAAM,cAAc;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAGA,CAACC,IAAI,EAAEC,MAAM,KAAK;EACtC,MAAMC,IAAI,GAAGD,MAAM,CAACE,UAAU;EAC9B,MAAMC,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACL,IAAI,CAAC;EAC9C,MAAMM,YAAY,GAAGF,UAAU,GAAGN,MAAM,CAACO,cAAc,CAACH,IAAI,CAAC;EAE7D,MAAMK,KAAK,GAAG,IAAIC,UAAU,CAACF,YAAY,GAAGJ,IAAI,CAAC;EACjDJ,MAAM,CAACW,QAAQ,CAACT,IAAI,EAAEO,KAAK,EAAE,CAAC,CAAC;EAC/BT,MAAM,CAACW,QAAQ,CAACP,IAAI,EAAEK,KAAK,EAAEH,UAAU,CAAC;EACxCG,KAAK,CAACG,GAAG,CAACT,MAAM,EAAEK,YAAY,CAAC;EAE/B,OAAO,IAAIK,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,MAAM,GAAIC,SAAS,IAAK;EACnC,MAAMN,KAAK,GAAGZ,MAAM,CAACkB,SAAS,CAAC;EAC/B,MAAM,CAACb,IAAI,EAAEI,UAAU,CAAC,GAAGN,MAAM,CAACc,MAAM,CAACL,KAAK,CAAC;EAC/C,MAAM,CAACL,IAAI,EAAEI,YAAY,CAAC,GAAGR,MAAM,CAACc,MAAM,CAACL,KAAK,CAACO,QAAQ,CAACV,UAAU,CAAC,CAAC;EACtE,MAAMH,MAAM,GAAGM,KAAK,CAACO,QAAQ,CAACV,UAAU,GAAGE,YAAY,CAAC;EAExD,IAAIL,MAAM,CAACE,UAAU,KAAKD,IAAI,EAAE;IAC9B,MAAM,IAAIa,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,OAAO,IAAIJ,MAAM,CAACX,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMX,MAAM,GAAGA,CAACoB,CAAC,EAAEC,CAAC,KAAK;EAC9B,IAAID,CAAC,KAAKC,CAAC,EAAE;IACX,OAAO,IAAI;EACb,CAAC,MAAM;IACL,MAAMC,IAAI,GAAG,6DAA8DD,CAAE;IAE7E,OACED,CAAC,CAAChB,IAAI,KAAKkB,IAAI,CAAClB,IAAI,IACpBgB,CAAC,CAACd,IAAI,KAAKgB,IAAI,CAAChB,IAAI,IACpBgB,IAAI,CAACX,KAAK,YAAYC,UAAU,IAChCX,UAAU,CAACmB,CAAC,CAACT,KAAK,EAAEW,IAAI,CAACX,KAAK,CAAC;EAEnC;AACF,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,MAAM,CAAC;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEQ,WAAWA,CAAEnB,IAAI,EAAEE,IAAI,EAAED,MAAM,EAAEM,KAAK,EAAE;IACtC,IAAI,CAACP,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACE,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACM,KAAK,GAAGA,KAAK;EACpB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}