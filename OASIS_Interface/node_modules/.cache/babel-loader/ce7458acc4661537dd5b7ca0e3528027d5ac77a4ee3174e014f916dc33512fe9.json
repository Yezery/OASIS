{"ast":null,"code":"import { RoutingTable } from './routing-table/index.js';\nimport { RoutingTableRefresh } from './routing-table/refresh.js';\nimport { Network } from './network.js';\nimport { ContentFetching } from './content-fetching/index.js';\nimport { ContentRouting } from './content-routing/index.js';\nimport { PeerRouting } from './peer-routing/index.js';\nimport { Providers } from './providers.js';\nimport { QueryManager } from './query/manager.js';\nimport { RPC } from './rpc/index.js';\nimport { TopologyListener } from './topology-listener.js';\nimport { QuerySelf } from './query-self.js';\nimport { removePrivateAddresses, removePublicAddresses } from './utils.js';\nimport { logger } from '@libp2p/logger';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { validators as recordValidators } from '@libp2p/record/validators';\nimport { selectors as recordSelectors } from '@libp2p/record/selectors';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nimport { PROTOCOL_DHT, PROTOCOL_PREFIX, LAN_PREFIX } from './constants.js';\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * A DHT implementation modelled after Kademlia with S/Kademlia modifications.\n * Original implementation in go: https://github.com/libp2p/go-libp2p-kad-dht.\n */\nexport class KadDHT extends EventEmitter {\n  /**\n   * Create a new KadDHT\n   */\n  constructor(components, init) {\n    super();\n    const {\n      kBucketSize,\n      clientMode,\n      validators,\n      selectors,\n      querySelfInterval,\n      lan,\n      protocolPrefix,\n      pingTimeout,\n      pingConcurrency,\n      maxInboundStreams,\n      maxOutboundStreams,\n      providers: providersInit\n    } = init;\n    this.running = false;\n    this.components = components;\n    this.lan = Boolean(lan);\n    this.log = logger(`libp2p:kad-dht:${lan === true ? 'lan' : 'wan'}`);\n    this.protocol = `${protocolPrefix ?? PROTOCOL_PREFIX}${lan === true ? LAN_PREFIX : ''}${PROTOCOL_DHT}`;\n    this.kBucketSize = kBucketSize ?? 20;\n    this.clientMode = clientMode ?? true;\n    this.maxInboundStreams = maxInboundStreams ?? DEFAULT_MAX_INBOUND_STREAMS;\n    this.maxOutboundStreams = maxOutboundStreams ?? DEFAULT_MAX_OUTBOUND_STREAMS;\n    this.routingTable = new RoutingTable(components, {\n      kBucketSize,\n      lan: this.lan,\n      pingTimeout,\n      pingConcurrency,\n      protocol: this.protocol\n    });\n    this.providers = new Providers(components, providersInit ?? {});\n    this.validators = {\n      ...recordValidators,\n      ...validators\n    };\n    this.selectors = {\n      ...recordSelectors,\n      ...selectors\n    };\n    this.network = new Network(components, {\n      protocol: this.protocol,\n      lan: this.lan\n    });\n    this.queryManager = new QueryManager(components, {\n      // Number of disjoint query paths to use - This is set to `kBucketSize/2` per the S/Kademlia paper\n      disjointPaths: Math.ceil(this.kBucketSize / 2),\n      lan\n    });\n    // DHT components\n    this.peerRouting = new PeerRouting(components, {\n      routingTable: this.routingTable,\n      network: this.network,\n      validators: this.validators,\n      queryManager: this.queryManager,\n      lan: this.lan\n    });\n    this.contentFetching = new ContentFetching(components, {\n      validators: this.validators,\n      selectors: this.selectors,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      routingTable: this.routingTable,\n      network: this.network,\n      lan: this.lan\n    });\n    this.contentRouting = new ContentRouting(components, {\n      network: this.network,\n      peerRouting: this.peerRouting,\n      queryManager: this.queryManager,\n      routingTable: this.routingTable,\n      providers: this.providers,\n      lan: this.lan\n    });\n    this.routingTableRefresh = new RoutingTableRefresh({\n      peerRouting: this.peerRouting,\n      routingTable: this.routingTable,\n      lan: this.lan\n    });\n    this.rpc = new RPC(components, {\n      routingTable: this.routingTable,\n      providers: this.providers,\n      peerRouting: this.peerRouting,\n      validators: this.validators,\n      lan: this.lan\n    });\n    this.topologyListener = new TopologyListener(components, {\n      protocol: this.protocol,\n      lan: this.lan\n    });\n    this.querySelf = new QuerySelf(components, {\n      peerRouting: this.peerRouting,\n      interval: querySelfInterval,\n      lan: this.lan\n    });\n    // handle peers being discovered during processing of DHT messages\n    this.network.addEventListener('peer', evt => {\n      const peerData = evt.detail;\n      this.onPeerConnect(peerData).catch(err => {\n        this.log.error('could not add %p to routing table', peerData.id, err);\n      });\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: peerData\n      }));\n    });\n    // handle peers being discovered via other peer discovery mechanisms\n    this.topologyListener.addEventListener('peer', evt => {\n      const peerId = evt.detail;\n      Promise.resolve().then(async () => {\n        const multiaddrs = await this.components.peerStore.addressBook.get(peerId);\n        const peerData = {\n          id: peerId,\n          multiaddrs: multiaddrs.map(addr => addr.multiaddr),\n          protocols: []\n        };\n        await this.onPeerConnect(peerData);\n      }).catch(err => {\n        this.log.error('could not add %p to routing table', peerId, err);\n      });\n    });\n  }\n  get [symbol]() {\n    return true;\n  }\n  get [Symbol.toStringTag]() {\n    return '@libp2p/kad-dht';\n  }\n  async onPeerConnect(peerData) {\n    this.log('peer %p connected with protocols %s', peerData.id, peerData.protocols);\n    if (this.lan) {\n      peerData = removePublicAddresses(peerData);\n    } else {\n      peerData = removePrivateAddresses(peerData);\n    }\n    if (peerData.multiaddrs.length === 0) {\n      this.log('ignoring %p as they do not have any %s addresses in %s', peerData.id, this.lan ? 'private' : 'public', peerData.multiaddrs.map(addr => addr.toString()));\n      return;\n    }\n    try {\n      await this.routingTable.add(peerData.id);\n    } catch (err) {\n      this.log.error('could not add %p to routing table', peerData.id, err);\n    }\n  }\n  /**\n   * Is this DHT running.\n   */\n  isStarted() {\n    return this.running;\n  }\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  async getMode() {\n    return this.clientMode ? 'client' : 'server';\n  }\n  /**\n   * If 'server' this node will respond to DHT queries, if 'client' this node will not\n   */\n  async setMode(mode) {\n    await this.components.registrar.unhandle(this.protocol);\n    if (mode === 'client') {\n      this.log('enabling client mode');\n      this.clientMode = true;\n    } else {\n      this.log('enabling server mode');\n      this.clientMode = false;\n      await this.components.registrar.handle(this.protocol, this.rpc.onIncomingStream.bind(this.rpc), {\n        maxInboundStreams: this.maxInboundStreams,\n        maxOutboundStreams: this.maxOutboundStreams\n      });\n    }\n  }\n  /**\n   * Start listening to incoming connections.\n   */\n  async start() {\n    this.running = true;\n    // Only respond to queries when not in client mode\n    await this.setMode(this.clientMode ? 'client' : 'server');\n    await Promise.all([this.providers.start(), this.queryManager.start(), this.network.start(), this.routingTable.start(), this.topologyListener.start(), this.querySelf.start()]);\n    await this.routingTableRefresh.start();\n  }\n  /**\n   * Stop accepting incoming connections and sending outgoing\n   * messages.\n   */\n  async stop() {\n    this.running = false;\n    await Promise.all([this.providers.stop(), this.queryManager.stop(), this.network.stop(), this.routingTable.stop(), this.routingTableRefresh.stop(), this.topologyListener.stop(), this.querySelf.stop()]);\n  }\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async *put(key, value, options = {}) {\n    yield* this.contentFetching.put(key, value, options);\n  }\n  /**\n   * Get the value that corresponds to the passed key\n   */\n  async *get(key, options = {}) {\n    yield* this.contentFetching.get(key, options);\n  }\n  // ----------- Content Routing\n  /**\n   * Announce to the network that we can provide given key's value\n   */\n  async *provide(key, options = {}) {\n    yield* this.contentRouting.provide(key, this.components.addressManager.getAddresses(), options);\n  }\n  /**\n   * Search the dht for providers of the given CID\n   */\n  async *findProviders(key, options = {}) {\n    yield* this.contentRouting.findProviders(key, options);\n  }\n  // ----------- Peer Routing -----------\n  /**\n   * Search for a peer with the given ID\n   */\n  async *findPeer(id, options = {}) {\n    yield* this.peerRouting.findPeer(id, options);\n  }\n  /**\n   * Kademlia 'node lookup' operation\n   */\n  async *getClosestPeers(key, options = {}) {\n    yield* this.peerRouting.getClosestPeers(key, options);\n  }\n  async refreshRoutingTable() {\n    this.routingTableRefresh.refreshTable(true);\n  }\n}","map":{"version":3,"names":["RoutingTable","RoutingTableRefresh","Network","ContentFetching","ContentRouting","PeerRouting","Providers","QueryManager","RPC","TopologyListener","QuerySelf","removePrivateAddresses","removePublicAddresses","logger","CustomEvent","EventEmitter","validators","recordValidators","selectors","recordSelectors","symbol","PROTOCOL_DHT","PROTOCOL_PREFIX","LAN_PREFIX","DEFAULT_MAX_INBOUND_STREAMS","DEFAULT_MAX_OUTBOUND_STREAMS","KadDHT","constructor","components","init","kBucketSize","clientMode","querySelfInterval","lan","protocolPrefix","pingTimeout","pingConcurrency","maxInboundStreams","maxOutboundStreams","providers","providersInit","running","Boolean","log","protocol","routingTable","network","queryManager","disjointPaths","Math","ceil","peerRouting","contentFetching","contentRouting","routingTableRefresh","rpc","topologyListener","querySelf","interval","addEventListener","evt","peerData","detail","onPeerConnect","catch","err","error","id","dispatchEvent","peerId","Promise","resolve","then","multiaddrs","peerStore","addressBook","get","map","addr","multiaddr","protocols","Symbol","toStringTag","length","toString","add","isStarted","getMode","setMode","mode","registrar","unhandle","handle","onIncomingStream","bind","start","all","stop","put","key","value","options","provide","addressManager","getAddresses","findProviders","findPeer","getClosestPeers","refreshRoutingTable","refreshTable"],"sources":["../../src/kad-dht.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}