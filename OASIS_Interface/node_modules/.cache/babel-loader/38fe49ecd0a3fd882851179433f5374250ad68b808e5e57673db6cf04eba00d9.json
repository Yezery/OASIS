{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport http from 'http';\nimport https from 'https';\nimport { logger } from '@libp2p/logger';\nconst log = logger('nat-port-mapper:upnp:fetch');\nfunction initRequest(url, init) {\n  if (url.protocol === 'http:') {\n    return http.request(url, {\n      method: init.method,\n      headers: init.headers,\n      signal: init.signal\n    });\n  } else if (url.protocol === 'https:') {\n    return https.request(url, {\n      method: init.method,\n      headers: init.headers,\n      rejectUnauthorized: false,\n      signal: init.signal\n    });\n  } else {\n    throw new Error('Invalid protocol ' + url.protocol);\n  }\n}\nexport async function fetchXML(url, init) {\n  return new Promise((resolve, reject) => {\n    const request = initRequest(url, init);\n    if (init.body != null) {\n      request.write(init.body);\n    }\n    request.end();\n    request.on('error', err => {\n      reject(err);\n    });\n    request.on('response', response => {\n      if (response.statusCode === 302 && response.headers.location != null) {\n        log('Redirecting to %s', response.headers.location);\n        fetchXML(new URL(response.headers.location), init).then(resolve, reject);\n        return;\n      }\n      if (response.statusCode !== 200) {\n        throw new Error(`Request failed: ${response.statusCode}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n      }\n\n      if (response.headers['content-type'] != null && !response.headers['content-type'].includes('/xml')) {\n        reject(new Error('Bad content type ' + response.headers['content-type']));\n        return;\n      }\n      let body = '';\n      response.on('data', chunk => {\n        body += chunk.toString();\n      });\n      response.on('end', () => {\n        resolve(body);\n      });\n      response.on('error', err => {\n        reject(err);\n      });\n    });\n  });\n}","map":{"version":3,"names":["http","https","logger","log","initRequest","url","init","protocol","request","method","headers","signal","rejectUnauthorized","Error","fetchXML","Promise","resolve","reject","body","write","end","on","err","response","statusCode","location","URL","then","includes","chunk","toString"],"sources":["../../../src/upnp/fetch.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}