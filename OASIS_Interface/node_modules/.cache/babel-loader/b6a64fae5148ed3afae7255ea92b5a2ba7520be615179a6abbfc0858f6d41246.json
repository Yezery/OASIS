{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { logger } from '@libp2p/logger';\nimport pSettle from 'p-settle';\nimport { codes } from './errors.js';\nimport errCode from 'err-code';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { trackedMap } from '@libp2p/tracked-map';\nconst log = logger('libp2p:transports');\nexport class DefaultTransportManager extends EventEmitter {\n  constructor(components, init = {}) {\n    super();\n    this.components = components;\n    this.started = false;\n    this.transports = new Map();\n    this.listeners = trackedMap({\n      name: 'libp2p_transport_manager_listeners',\n      metrics: this.components.metrics\n    });\n    this.faultTolerance = init.faultTolerance ?? FaultTolerance.FATAL_ALL;\n  }\n  /**\n   * Adds a `Transport` to the manager\n   */\n  add(transport) {\n    const tag = transport[Symbol.toStringTag];\n    if (tag == null) {\n      throw errCode(new Error('Transport must have a valid tag'), codes.ERR_INVALID_KEY);\n    }\n    if (this.transports.has(tag)) {\n      throw errCode(new Error('There is already a transport with this tag'), codes.ERR_DUPLICATE_TRANSPORT);\n    }\n    log('adding transport %s', tag);\n    this.transports.set(tag, transport);\n    if (!this.listeners.has(tag)) {\n      this.listeners.set(tag, []);\n    }\n  }\n  isStarted() {\n    return this.started;\n  }\n  async start() {\n    // Listen on the provided transports for the provided addresses\n    const addrs = this.components.addressManager.getListenAddrs();\n    await this.listen(addrs);\n    this.started = true;\n  }\n  /**\n   * Stops all listeners\n   */\n  async stop() {\n    const tasks = [];\n    for (const [key, listeners] of this.listeners) {\n      log('closing listeners for %s', key);\n      while (listeners.length > 0) {\n        const listener = listeners.pop();\n        if (listener == null) {\n          continue;\n        }\n        tasks.push(listener.close());\n      }\n    }\n    await Promise.all(tasks);\n    log('all listeners closed');\n    for (const key of this.listeners.keys()) {\n      this.listeners.set(key, []);\n    }\n    this.started = false;\n  }\n  /**\n   * Dials the given Multiaddr over it's supported transport\n   */\n  async dial(ma, options) {\n    const transport = this.transportForMultiaddr(ma);\n    if (transport == null) {\n      throw errCode(new Error(`No transport available for address ${String(ma)}`), codes.ERR_TRANSPORT_UNAVAILABLE);\n    }\n    try {\n      return await transport.dial(ma, {\n        ...options,\n        upgrader: this.components.upgrader\n      });\n    } catch (err) {\n      if (err.code == null) {\n        err.code = codes.ERR_TRANSPORT_DIAL_FAILED;\n      }\n      throw err;\n    }\n  }\n  /**\n   * Returns all Multiaddr's the listeners are using\n   */\n  getAddrs() {\n    let addrs = [];\n    for (const listeners of this.listeners.values()) {\n      for (const listener of listeners) {\n        addrs = [...addrs, ...listener.getAddrs()];\n      }\n    }\n    return addrs;\n  }\n  /**\n   * Returns all the transports instances\n   */\n  getTransports() {\n    return Array.of(...this.transports.values());\n  }\n  /**\n   * Finds a transport that matches the given Multiaddr\n   */\n  transportForMultiaddr(ma) {\n    for (const transport of this.transports.values()) {\n      const addrs = transport.filter([ma]);\n      if (addrs.length > 0) {\n        return transport;\n      }\n    }\n  }\n  /**\n   * Starts listeners for each listen Multiaddr\n   */\n  async listen(addrs) {\n    if (addrs == null || addrs.length === 0) {\n      log('no addresses were provided for listening, this node is dial only');\n      return;\n    }\n    const couldNotListen = [];\n    for (const [key, transport] of this.transports.entries()) {\n      const supportedAddrs = transport.filter(addrs);\n      const tasks = [];\n      // For each supported multiaddr, create a listener\n      for (const addr of supportedAddrs) {\n        log('creating listener for %s on %s', key, addr);\n        const listener = transport.createListener({\n          upgrader: this.components.upgrader\n        });\n        let listeners = this.listeners.get(key);\n        if (listeners == null) {\n          listeners = [];\n          this.listeners.set(key, listeners);\n        }\n        listeners.push(listener);\n        // Track listen/close events\n        listener.addEventListener('listening', () => {\n          this.dispatchEvent(new CustomEvent('listener:listening', {\n            detail: listener\n          }));\n        });\n        listener.addEventListener('close', () => {\n          this.dispatchEvent(new CustomEvent('listener:close', {\n            detail: listener\n          }));\n        });\n        // We need to attempt to listen on everything\n        tasks.push(listener.listen(addr));\n      }\n      // Keep track of transports we had no addresses for\n      if (tasks.length === 0) {\n        couldNotListen.push(key);\n        continue;\n      }\n      const results = await pSettle(tasks);\n      // If we are listening on at least 1 address, succeed.\n      // TODO: we should look at adding a retry (`p-retry`) here to better support\n      // listening on remote addresses as they may be offline. We could then potentially\n      // just wait for any (`p-any`) listener to succeed on each transport before returning\n      const isListening = results.find(r => r.isFulfilled);\n      if (isListening == null && this.faultTolerance !== FaultTolerance.NO_FATAL) {\n        throw errCode(new Error(`Transport (${key}) could not listen on any available address`), codes.ERR_NO_VALID_ADDRESSES);\n      }\n    }\n    // If no transports were able to listen, throw an error. This likely\n    // means we were given addresses we do not have transports for\n    if (couldNotListen.length === this.transports.size) {\n      const message = `no valid addresses were provided for transports [${couldNotListen.join(', ')}]`;\n      if (this.faultTolerance === FaultTolerance.FATAL_ALL) {\n        throw errCode(new Error(message), codes.ERR_NO_VALID_ADDRESSES);\n      }\n      log(`libp2p in dial mode only: ${message}`);\n    }\n  }\n  /**\n   * Removes the given transport from the manager.\n   * If a transport has any running listeners, they will be closed.\n   */\n  async remove(key) {\n    log('removing %s', key);\n    // Close any running listeners\n    for (const listener of this.listeners.get(key) ?? []) {\n      await listener.close();\n    }\n    this.transports.delete(key);\n    this.listeners.delete(key);\n  }\n  /**\n   * Removes all transports from the manager.\n   * If any listeners are running, they will be closed.\n   *\n   * @async\n   */\n  async removeAll() {\n    const tasks = [];\n    for (const key of this.transports.keys()) {\n      tasks.push(this.remove(key));\n    }\n    await Promise.all(tasks);\n  }\n}","map":{"version":3,"names":["logger","pSettle","codes","errCode","FaultTolerance","CustomEvent","EventEmitter","trackedMap","log","DefaultTransportManager","constructor","components","init","started","transports","Map","listeners","name","metrics","faultTolerance","FATAL_ALL","add","transport","tag","Symbol","toStringTag","Error","ERR_INVALID_KEY","has","ERR_DUPLICATE_TRANSPORT","set","isStarted","start","addrs","addressManager","getListenAddrs","listen","stop","tasks","key","length","listener","pop","push","close","Promise","all","keys","dial","ma","options","transportForMultiaddr","String","ERR_TRANSPORT_UNAVAILABLE","upgrader","err","code","ERR_TRANSPORT_DIAL_FAILED","getAddrs","values","getTransports","Array","of","filter","couldNotListen","entries","supportedAddrs","addr","createListener","get","addEventListener","dispatchEvent","detail","results","isListening","find","r","isFulfilled","NO_FATAL","ERR_NO_VALID_ADDRESSES","size","message","join","remove","delete","removeAll"],"sources":["../../src/transport-manager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}