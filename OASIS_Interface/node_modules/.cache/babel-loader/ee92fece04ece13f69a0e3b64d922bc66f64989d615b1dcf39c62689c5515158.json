{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      UserNFTList: [],\n      UserNFTListInf: [],\n      MintNFTContractAbi: this.$store.state.MintNFTContractAbi,\n      contractAddress: \"\",\n      NTFList: [],\n      contract: null\n    };\n  },\n  methods: {\n    async GETNFTContract(contractAddress) {\n      let NewContract = await new this.$store.state.Web3.eth.Contract(this.MintNFTContractAbi, contractAddress);\n      this.contractAddress = contractAddress;\n      await NewContract.methods.getNFTsByOwner(this.$store.state.currentAddress).call().then(re => {\n        this.UserNFTList = re;\n      });\n      return NewContract;\n    },\n    async GetNFTInf() {\n      let Contract = await this.GETNFTContract(this.contractAddress);\n      for (let index = 0; index < this.UserNFTList.length; index++) {\n        var NFTURI;\n        var NFTNAME;\n        await Contract.methods.tokenURI(Number(this.UserNFTList[index])).call().then(res => {\n          NFTURI = res;\n        });\n        await Contract.methods.name().call().then(res => {\n          NFTNAME = res;\n        });\n        let web3 = new this.Web3(window.ethereum);\n        this.contract = new web3.eth.Contract(this.$store.state.MarketContractAbi, this.$store.state.MarketContractAddress);\n        await this.contract.methods.fetchMyNFTs().call().then(res => {\n          this.NTFList = res;\n        });\n        console.log(await this.contract.methods.fetchMyNFTs().call());\n        var NFT = {\n          NFTURI: NFTURI,\n          NFTNAME: NFTNAME,\n          NFTAddress: Contract._address,\n          NFTTokenId: this.UserNFTList[index]\n        };\n        this.UserNFTListInf.push(NFT);\n      }\n    },\n    async upSale(NFT) {\n      this.$prompt(\"请输入价格\", \"上架提醒\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        inputPattern: /^[1-9]\\d*$/,\n        inputErrorMessage: \"不能为0\"\n      }).then(async ({\n        value\n      }) => {\n        let NFTContract = await this.GETNFTContract(NFT.NFTAddress);\n        let MarketContract = this.$store.state.MarketContract;\n        //授权\n        NFTContract.methods.approve(this.$store.state.MarketContractAddress, NFT.NFTTokenId).send({\n          from: this.$store.state.currentAddress\n        });\n\n        // 上架\n        let Value;\n        await MarketContract.methods.getListingPrice().call().then(res => {\n          Value = res;\n        });\n        await MarketContract.methods.createMarketplaceItem(NFT.NFTAddress, 1, 1).send({\n          from: this.$store.state.currentAddress,\n          // value: Value\n          value: this.$store.state.Web3.utils.toWei(Value, \"wei\")\n        });\n        this.$message({\n          type: \"success\",\n          message: \"你的邮箱是: \" + value\n        });\n      }).catch(res => {\n        this.$message({\n          type: \"info\",\n          message: \"取消输入\"\n        });\n        console.log(res);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","UserNFTList","UserNFTListInf","MintNFTContractAbi","$store","state","contractAddress","NTFList","contract","methods","GETNFTContract","NewContract","Web3","eth","Contract","getNFTsByOwner","currentAddress","call","then","re","GetNFTInf","index","length","NFTURI","NFTNAME","tokenURI","Number","res","name","web3","window","ethereum","MarketContractAbi","MarketContractAddress","fetchMyNFTs","console","log","NFT","NFTAddress","_address","NFTTokenId","push","upSale","$prompt","confirmButtonText","cancelButtonText","inputPattern","inputErrorMessage","value","NFTContract","MarketContract","approve","send","from","Value","getListingPrice","createMarketplaceItem","utils","toWei","$message","type","message","catch"],"sources":["src/views/ToSellView.vue"],"sourcesContent":["<template>\n  <div class=\"ToSellMain\">\n    <div class=\"ToSellHeaderBox\">\n      <div class=\"ToSellHeader\">\n        Your NFT\n      </div>\n    </div>\n\n    <input type=\"text\" v-model=\"contractAddress\" />\n    <!-- <button @click=\"GetNFTInf\">GetNFTInf</button>\n    <div class=\"NFTInf\" v-for=\"inf in 6\" :key=\"inf\">\n      <div class=\"imageBox\">\n        <img class=\"NFTImage\" src=\"../assets/MetaMask.png\" alt=\"\" />\n      </div>\n      <div class=\"Inf\">\n        <div class=\"NFTName\">{{ \"inf.NFTNAME\" }} </div>\n        <div class=\"ownerAndToSell\">\n          <div class=\"ToSellBox\">\n            <div class=\"ToSellinnerBox\">\n              <i class=\"el-icon-sell\"></i>\n              <span class=\"apporve\" > 上架 </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>-->\n    <div class=\"ToSellMain\">\n      <input type=\"text\" v-model=\"contractAddress\" />\n      <button @click=\"GetNFTInf\">GetNFTInf</button>\n      <div class=\"NFTInf\" v-for=\"inf in UserNFTListInf\" :key=\"inf.NFTURI\">\n        <div class=\"imageBox\">\n          <img class=\"NFTImage\" :src=\"inf.NFTURI\" alt=\"\" />\n        </div>\n        <div class=\"Inf\">\n          <div class=\"NFTName\">{{ inf.NFTNAME }}</div>\n          <div class=\"ownerAndToSell\">\n            <div class=\"ToSellBox\">\n              <div class=\"ToSellinnerBox\">\n                <i class=\"el-icon-sort\"></i>\n                <span class=\"apporve\" @click=\"upSale(inf)\"> 上架 </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</template>\n\n<script>\n  export default {\n    data() {\n      return {\n        UserNFTList: [],\n        UserNFTListInf: [],\n        MintNFTContractAbi: this.$store.state.MintNFTContractAbi,\n        contractAddress: \"\",\n        NTFList: [],\n        contract: null,\n      };\n    },\n    methods: {\n      async GETNFTContract(contractAddress) {\n        let NewContract = await new this.$store.state.Web3.eth.Contract(\n          this.MintNFTContractAbi,\n          contractAddress\n        );\n        this.contractAddress = contractAddress;\n        await NewContract.methods\n          .getNFTsByOwner(this.$store.state.currentAddress)\n          .call()\n          .then((re) => {\n            this.UserNFTList = re;\n          });\n        return NewContract;\n      },\n      async GetNFTInf() {\n        let Contract = await this.GETNFTContract(this.contractAddress);\n        for (let index = 0; index < this.UserNFTList.length; index++) {\n          var NFTURI;\n          var NFTNAME;\n          await Contract.methods\n            .tokenURI(Number(this.UserNFTList[index]))\n            .call()\n            .then((res) => {\n              NFTURI = res;\n            });\n          await Contract.methods\n            .name()\n            .call()\n            .then((res) => {\n              NFTNAME = res;\n            });\n          let web3 = new this.Web3(window.ethereum);\n          this.contract = new web3.eth.Contract(\n            this.$store.state.MarketContractAbi,\n            this.$store.state.MarketContractAddress\n          );\n          await this.contract.methods\n            .fetchMyNFTs()\n            .call()\n            .then((res) => {\n              this.NTFList = res;\n            });\n          console.log(await this.contract.methods.fetchMyNFTs().call());\n          var NFT = {\n            NFTURI: NFTURI,\n            NFTNAME: NFTNAME,\n            NFTAddress: Contract._address,\n            NFTTokenId: this.UserNFTList[index],\n          };\n\n          this.UserNFTListInf.push(NFT);\n        }\n      },\n      async upSale(NFT) {\n        this.$prompt(\"请输入价格\", \"上架提醒\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          inputPattern: /^[1-9]\\d*$/,\n          inputErrorMessage: \"不能为0\",\n        })\n          .then(async ({ value }) => {\n            let NFTContract = await this.GETNFTContract(NFT.NFTAddress);\n            let MarketContract = this.$store.state.MarketContract;\n            //授权\n            NFTContract.methods\n              .approve(this.$store.state.MarketContractAddress, NFT.NFTTokenId)\n              .send({ from: this.$store.state.currentAddress });\n\n            // 上架\n            let Value;\n            await MarketContract.methods\n              .getListingPrice()\n              .call()\n              .then((res) => {\n                Value = res;\n              });\n            await MarketContract.methods\n              .createMarketplaceItem(NFT.NFTAddress, 1, 1)\n              .send({\n                from: this.$store.state.currentAddress,\n                // value: Value\n                value: this.$store.state.Web3.utils.toWei(Value, \"wei\"),\n              });\n            this.$message({\n              type: \"success\",\n              message: \"你的邮箱是: \" + value,\n            });\n          })\n          .catch((res) => {\n            this.$message({\n              type: \"info\",\n              message: \"取消输入\",\n            });\n            console.log(res);\n          });\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.ToSellMain {\n  height: 100%;\n  text-align: center;\n  width: 100%;\n  font-family: Arial, Helvetica, sans-serif;\n}\n.NFTInf {\n  background-color: var(--White--);\n\n  border-radius: 30px;\n  width: 200px;\n  height: auto;\n  padding-bottom: 2%;\n  display: inline-block;\n  overflow: hidden;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,\n      rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;\n    transition: all 0.3s ease-in-out;\n  }\n}\n.NFTInf:nth-child(n + 1) {\n  margin-right: 2%;\n  margin-left: 2%;\n  margin-bottom: 4%;\n  margin-top: 1.2%;\n}\n.NFTInf:nth-child(n) {\n  margin-bottom: 4%;\n  margin-top: 1.2%;\n}\n\n@media screen and (max-width: 1600px) and (min-width: 1600px) {\n  .ToSellMain {\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    display: flex;\n  }\n}\n.imageBox {\n  width: 100%;\n  height: 63%;\n  border-radius: 30px;\n\n  z-index: 1;\n  overflow: hidden;\n}\n.Inf {\n  width: 100%;\n  height: 100%;\n  position: relative;\n}\n.NFTImage {\n  object-fit: cover;\n  width: 100%;\n  transition: all 0.6s;\n  cursor: pointer;\n\n  overflow: hidden;\n  &:hover {\n    transform: scale(1.1);\n\n    transition: all 0.6s;\n  }\n}\n.NFTName {\n  display: inline-block;\n  color: var(--Dark--);\n  font-weight: 800;\n  text-align: left;\n  margin-top: 20px;\n  font-size: 13px;\n}\n.ownerAndToSell {\n  width: 100%;\n  display: flex;\n  margin-top: 18px;\n  justify-content: center;\n  align-items: center;\n}\n.ToSellBox {\n  // display: flex;\n  // justify-content: flex-start;\n  // align-items: center;\n}\n\n.ToSellinnerBox {\n  width: 82.79px;\n  padding: 8px 0px 8px 0px;\n  color: #55c960;\n  background-color: rgba(85, 201, 96, 0.12);\n  border-radius: 10px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(85, 201, 96, 0.24);\n    transition: all 0.3s ease-in-out;\n  }\n}\n.apporve {\n  font-size: 12px;\n  font-weight: 800;\n}\n.ToSellHeader {\n  width: 95%;\n  height: 10%;\n  font-size: 25px;\n  margin-top: 3%;\n  background-color: var(--White--);\n  border-radius: 30px;\n  padding: 10px;\n  font-weight: 800;\n  color: var(--Dark--);\n}\n.ToSellHeaderBox {\n  width: 100%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n"],"mappings":";AAmDA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,cAAA;MACAC,kBAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,kBAAA;MACAG,eAAA;MACAC,OAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,eAAAJ,eAAA;MACA,IAAAK,WAAA,kBAAAP,MAAA,CAAAC,KAAA,CAAAO,IAAA,CAAAC,GAAA,CAAAC,QAAA,CACA,KAAAX,kBAAA,EACAG,eACA;MACA,KAAAA,eAAA,GAAAA,eAAA;MACA,MAAAK,WAAA,CAAAF,OAAA,CACAM,cAAA,MAAAX,MAAA,CAAAC,KAAA,CAAAW,cAAA,EACAC,IAAA,GACAC,IAAA,CAAAC,EAAA;QACA,KAAAlB,WAAA,GAAAkB,EAAA;MACA;MACA,OAAAR,WAAA;IACA;IACA,MAAAS,UAAA;MACA,IAAAN,QAAA,cAAAJ,cAAA,MAAAJ,eAAA;MACA,SAAAe,KAAA,MAAAA,KAAA,QAAApB,WAAA,CAAAqB,MAAA,EAAAD,KAAA;QACA,IAAAE,MAAA;QACA,IAAAC,OAAA;QACA,MAAAV,QAAA,CAAAL,OAAA,CACAgB,QAAA,CAAAC,MAAA,MAAAzB,WAAA,CAAAoB,KAAA,IACAJ,IAAA,GACAC,IAAA,CAAAS,GAAA;UACAJ,MAAA,GAAAI,GAAA;QACA;QACA,MAAAb,QAAA,CAAAL,OAAA,CACAmB,IAAA,GACAX,IAAA,GACAC,IAAA,CAAAS,GAAA;UACAH,OAAA,GAAAG,GAAA;QACA;QACA,IAAAE,IAAA,YAAAjB,IAAA,CAAAkB,MAAA,CAAAC,QAAA;QACA,KAAAvB,QAAA,OAAAqB,IAAA,CAAAhB,GAAA,CAAAC,QAAA,CACA,KAAAV,MAAA,CAAAC,KAAA,CAAA2B,iBAAA,EACA,KAAA5B,MAAA,CAAAC,KAAA,CAAA4B,qBACA;QACA,WAAAzB,QAAA,CAAAC,OAAA,CACAyB,WAAA,GACAjB,IAAA,GACAC,IAAA,CAAAS,GAAA;UACA,KAAApB,OAAA,GAAAoB,GAAA;QACA;QACAQ,OAAA,CAAAC,GAAA,YAAA5B,QAAA,CAAAC,OAAA,CAAAyB,WAAA,GAAAjB,IAAA;QACA,IAAAoB,GAAA;UACAd,MAAA,EAAAA,MAAA;UACAC,OAAA,EAAAA,OAAA;UACAc,UAAA,EAAAxB,QAAA,CAAAyB,QAAA;UACAC,UAAA,OAAAvC,WAAA,CAAAoB,KAAA;QACA;QAEA,KAAAnB,cAAA,CAAAuC,IAAA,CAAAJ,GAAA;MACA;IACA;IACA,MAAAK,OAAAL,GAAA;MACA,KAAAM,OAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,YAAA;QACAC,iBAAA;MACA,GACA7B,IAAA;QAAA8B;MAAA;QACA,IAAAC,WAAA,cAAAvC,cAAA,CAAA2B,GAAA,CAAAC,UAAA;QACA,IAAAY,cAAA,QAAA9C,MAAA,CAAAC,KAAA,CAAA6C,cAAA;QACA;QACAD,WAAA,CAAAxC,OAAA,CACA0C,OAAA,MAAA/C,MAAA,CAAAC,KAAA,CAAA4B,qBAAA,EAAAI,GAAA,CAAAG,UAAA,EACAY,IAAA;UAAAC,IAAA,OAAAjD,MAAA,CAAAC,KAAA,CAAAW;QAAA;;QAEA;QACA,IAAAsC,KAAA;QACA,MAAAJ,cAAA,CAAAzC,OAAA,CACA8C,eAAA,GACAtC,IAAA,GACAC,IAAA,CAAAS,GAAA;UACA2B,KAAA,GAAA3B,GAAA;QACA;QACA,MAAAuB,cAAA,CAAAzC,OAAA,CACA+C,qBAAA,CAAAnB,GAAA,CAAAC,UAAA,QACAc,IAAA;UACAC,IAAA,OAAAjD,MAAA,CAAAC,KAAA,CAAAW,cAAA;UACA;UACAgC,KAAA,OAAA5C,MAAA,CAAAC,KAAA,CAAAO,IAAA,CAAA6C,KAAA,CAAAC,KAAA,CAAAJ,KAAA;QACA;QACA,KAAAK,QAAA;UACAC,IAAA;UACAC,OAAA,cAAAb;QACA;MACA,GACAc,KAAA,CAAAnC,GAAA;QACA,KAAAgC,QAAA;UACAC,IAAA;UACAC,OAAA;QACA;QACA1B,OAAA,CAAAC,GAAA,CAAAT,GAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}