{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport * as lp from 'it-length-prefixed';\nimport { FetchRequest, FetchResponse } from './pb/proto.js';\nimport { PROTOCOL_NAME, PROTOCOL_VERSION } from './constants.js';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { pipe } from 'it-pipe';\nimport first from 'it-first';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nimport { fromString as uint8arrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8arrayToString } from 'uint8arrays/to-string';\nconst log = logger('libp2p:fetch');\n/**\n * A simple libp2p protocol for requesting a value corresponding to a key from a peer.\n * Developers can register one or more lookup function for retrieving the value corresponding to\n * a given key.  Each lookup function must act on a distinct part of the overall key space, defined\n * by a fixed prefix that all keys that should be routed to that lookup function will start with.\n */\nexport class FetchService {\n  constructor(components, init) {\n    this.started = false;\n    this.components = components;\n    this.protocol = `/${init.protocolPrefix ?? 'libp2p'}/${PROTOCOL_NAME}/${PROTOCOL_VERSION}`;\n    this.lookupFunctions = new Map(); // Maps key prefix to value lookup function\n    this.handleMessage = this.handleMessage.bind(this);\n    this.init = init;\n  }\n  async start() {\n    await this.components.registrar.handle(this.protocol, data => {\n      void this.handleMessage(data).catch(err => {\n        log.error(err);\n      }).finally(() => {\n        data.stream.close();\n      });\n    }, {\n      maxInboundStreams: this.init.maxInboundStreams,\n      maxOutboundStreams: this.init.maxOutboundStreams\n    });\n    this.started = true;\n  }\n  async stop() {\n    await this.components.registrar.unhandle(this.protocol);\n    this.started = false;\n  }\n  isStarted() {\n    return this.started;\n  }\n  /**\n   * Sends a request to fetch the value associated with the given key from the given peer\n   */\n  async fetch(peer, key, options = {}) {\n    log('dialing %s to %p', this.protocol, peer);\n    const connection = await this.components.connectionManager.openConnection(peer, options);\n    let timeoutController;\n    let signal = options.signal;\n    let stream;\n    // create a timeout if no abort signal passed\n    if (signal == null) {\n      log('using default timeout of %d ms', this.init.timeout);\n      timeoutController = new TimeoutController(this.init.timeout);\n      signal = timeoutController.signal;\n      try {\n        // fails on node < 15.4\n        setMaxListeners?.(Infinity, timeoutController.signal);\n      } catch {}\n    }\n    try {\n      stream = await connection.newStream(this.protocol, {\n        signal\n      });\n      // make stream abortable\n      const source = abortableDuplex(stream, signal);\n      log('fetch %s', key);\n      const result = await pipe([FetchRequest.encode({\n        identifier: key\n      })], lp.encode(), source, lp.decode(), async function (source) {\n        const buf = await first(source);\n        if (buf == null) {\n          throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n        }\n        const response = FetchResponse.decode(buf);\n        switch (response.status) {\n          case FetchResponse.StatusCode.OK:\n            {\n              log('received status for %s ok', key);\n              return response.data;\n            }\n          case FetchResponse.StatusCode.NOT_FOUND:\n            {\n              log('received status for %s not found', key);\n              return null;\n            }\n          case FetchResponse.StatusCode.ERROR:\n            {\n              log('received status for %s error', key);\n              const errmsg = uint8arrayToString(response.data);\n              throw errCode(new Error('Error in fetch protocol response: ' + errmsg), codes.ERR_INVALID_PARAMETERS);\n            }\n          default:\n            {\n              log('received status for %s unknown', key);\n              throw errCode(new Error('Unknown response status'), codes.ERR_INVALID_MESSAGE);\n            }\n        }\n      });\n      return result ?? null;\n    } finally {\n      if (timeoutController != null) {\n        timeoutController.clear();\n      }\n      if (stream != null) {\n        stream.close();\n      }\n    }\n  }\n  /**\n   * Invoked when a fetch request is received.  Reads the request message off the given stream and\n   * responds based on looking up the key in the request via the lookup callback that corresponds\n   * to the key's prefix.\n   */\n  async handleMessage(data) {\n    const {\n      stream\n    } = data;\n    const self = this;\n    await pipe(stream, lp.decode(), async function* (source) {\n      const buf = await first(source);\n      if (buf == null) {\n        throw errCode(new Error('No data received'), codes.ERR_INVALID_MESSAGE);\n      }\n      // for await (const buf of source) {\n      const request = FetchRequest.decode(buf);\n      let response;\n      const lookup = self._getLookupFunction(request.identifier);\n      if (lookup != null) {\n        log('look up data with identifier %s', request.identifier);\n        const data = await lookup(request.identifier);\n        if (data != null) {\n          log('sending status for %s ok', request.identifier);\n          response = {\n            status: FetchResponse.StatusCode.OK,\n            data\n          };\n        } else {\n          log('sending status for %s not found', request.identifier);\n          response = {\n            status: FetchResponse.StatusCode.NOT_FOUND,\n            data: new Uint8Array(0)\n          };\n        }\n      } else {\n        log('sending status for %s error', request.identifier);\n        const errmsg = uint8arrayFromString(`No lookup function registered for key: ${request.identifier}`);\n        response = {\n          status: FetchResponse.StatusCode.ERROR,\n          data: errmsg\n        };\n      }\n      yield FetchResponse.encode(response);\n    }, lp.encode(), stream);\n  }\n  /**\n   * Given a key, finds the appropriate function for looking up its corresponding value, based on\n   * the key's prefix.\n   */\n  _getLookupFunction(key) {\n    for (const prefix of this.lookupFunctions.keys()) {\n      if (key.startsWith(prefix)) {\n        return this.lookupFunctions.get(prefix);\n      }\n    }\n  }\n  /**\n   * Registers a new lookup callback that can map keys to values, for a given set of keys that\n   * share the same prefix\n   *\n   * @example\n   *\n   * ```js\n   * // ...\n   * libp2p.fetchService.registerLookupFunction('/prefix', (key) => { ... })\n   * ```\n   */\n  registerLookupFunction(prefix, lookup) {\n    if (this.lookupFunctions.has(prefix)) {\n      throw errCode(new Error(\"Fetch protocol handler for key prefix '\" + prefix + \"' already registered\"), codes.ERR_KEY_ALREADY_EXISTS);\n    }\n    this.lookupFunctions.set(prefix, lookup);\n  }\n  /**\n   * Registers a new lookup callback that can map keys to values, for a given set of keys that\n   * share the same prefix.\n   *\n   * @example\n   *\n   * ```js\n   * // ...\n   * libp2p.fetchService.unregisterLookupFunction('/prefix')\n   * ```\n   */\n  unregisterLookupFunction(prefix, lookup) {\n    if (lookup != null) {\n      const existingLookup = this.lookupFunctions.get(prefix);\n      if (existingLookup !== lookup) {\n        return;\n      }\n    }\n    this.lookupFunctions.delete(prefix);\n  }\n}","map":{"version":3,"names":["logger","errCode","codes","lp","FetchRequest","FetchResponse","PROTOCOL_NAME","PROTOCOL_VERSION","abortableDuplex","pipe","first","TimeoutController","setMaxListeners","fromString","uint8arrayFromString","toString","uint8arrayToString","log","FetchService","constructor","components","init","started","protocol","protocolPrefix","lookupFunctions","Map","handleMessage","bind","start","registrar","handle","data","catch","err","error","finally","stream","close","maxInboundStreams","maxOutboundStreams","stop","unhandle","isStarted","fetch","peer","key","options","connection","connectionManager","openConnection","timeoutController","signal","timeout","Infinity","newStream","source","result","encode","identifier","decode","buf","Error","ERR_INVALID_MESSAGE","response","status","StatusCode","OK","NOT_FOUND","ERROR","errmsg","ERR_INVALID_PARAMETERS","clear","self","request","lookup","_getLookupFunction","Uint8Array","prefix","keys","startsWith","get","registerLookupFunction","has","ERR_KEY_ALREADY_EXISTS","set","unregisterLookupFunction","existingLookup","delete"],"sources":["../../../src/fetch/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}