{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { murmur3128 } from '@multiformats/murmur3';\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn(buf) {\n  return (await murmur3128.encode(buf)\n  // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n  // implementation only uses the first 64, so we must do the same\n  // for parity..\n  ).slice(0, 8)\n  // Invert buffer because that's how Go impl does it\n  .reverse();\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file',\n  // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653,\n  // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n};\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default ((options = {}) => {\n  const defaults = mergeOptions.bind({\n    ignoreUndefined: true\n  });\n  return defaults(defaultOptions, options);\n});","map":{"version":3,"names":["mergeOptions","sha256","murmur3128","hamtHashFn","buf","encode","slice","reverse","defaultOptions","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","hasher","leafType","cidVersion","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","recursive","hidden","timeout","undefined","hamtHashCode","hamtBucketBits","options","defaults","bind","ignoreUndefined"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/options.js"],"sourcesContent":["import mergeOptions from 'merge-options'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653, // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n}\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true })\n  return defaults(defaultOptions, options)\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;AACxC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;AACA;AACA;AACA,eAAeC,UAAUA,CAAEC,GAAG,EAAE;EAC9B,OAAO,CAAC,MAAMF,UAAU,CAACG,MAAM,CAACD,GAAG;EACjC;EACA;EACA;EAAA,EACCE,KAAK,CAAC,CAAC,EAAE,CAAC;EACX;EAAA,CACCC,OAAO,CAAC,CAAC;AACd;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,OAAO,EAAE,OAAO;EAChBC,QAAQ,EAAE,UAAU;EAAE;EACtBC,SAAS,EAAE,KAAK;EAChBC,QAAQ,EAAE,KAAK;EACfC,sBAAsB,EAAE,IAAI;EAC5BC,MAAM,EAAEb,MAAM;EACdc,QAAQ,EAAE,MAAM;EAAE;EAClBC,UAAU,EAAE,CAAC;EACbC,QAAQ,EAAEA,CAAA,KAAM,MAAM,CAAC,CAAC;EACxBC,mBAAmB,EAAE,IAAI;EACzBC,qBAAqB,EAAE,EAAE;EACzBC,qBAAqB,EAAE,EAAE;EACzBC,YAAY,EAAE,MAAM;EACpBC,YAAY,EAAE,MAAM;EACpBC,YAAY,EAAE,MAAM;EACpBC,MAAM,EAAE,EAAE;EACV;EACA;EACAC,UAAU,EAAE,iBAAiB;EAAE;EAC/BC,kBAAkB,EAAE,GAAG;EACvBC,WAAW,EAAE,CAAC;EACdC,iBAAiB,EAAE,KAAK;EACxBC,SAAS,EAAE,KAAK;EAChBC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAEC,SAAS;EAClB7B,UAAU;EACV8B,YAAY,EAAE,IAAI;EAClBC,cAAc,EAAE;AAClB,CAAC;;AAED;AACA;AACA;AACA;AACA,gBAAe,CAACC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC/B,MAAMC,QAAQ,GAAGpC,YAAY,CAACqC,IAAI,CAAC;IAAEC,eAAe,EAAE;EAAK,CAAC,CAAC;EAC7D,OAAOF,QAAQ,CAAC5B,cAAc,EAAE2B,OAAO,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}