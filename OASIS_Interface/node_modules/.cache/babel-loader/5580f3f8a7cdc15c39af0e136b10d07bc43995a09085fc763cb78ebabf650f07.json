{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { IPv4Len, IPv6Len } from \"./ip.js\";\nexport function allFF(a, from, to) {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== 0xff) return false;\n    i++;\n  }\n  return true;\n}\nexport function deepEqual(a, b, from, to) {\n  let i = 0;\n  for (const e of a) {\n    if (i < from) continue;\n    if (i > to) break;\n    if (e !== b[i]) return false;\n    i++;\n  }\n  return true;\n}\n/***\n * Returns long ip format\n */\nexport function ipToString(ip) {\n  switch (ip.length) {\n    case IPv4Len:\n      {\n        return ip.join(\".\");\n      }\n    case IPv6Len:\n      {\n        const result = [];\n        for (let i = 0; i < ip.length; i++) {\n          if (i % 2 === 0) {\n            result.push(ip[i].toString(16).padStart(2, \"0\") + ip[i + 1].toString(16).padStart(2, \"0\"));\n          }\n        }\n        return result.join(\":\");\n      }\n    default:\n      {\n        throw new Error(\"Invalid ip length\");\n      }\n  }\n}\n/**\n * If mask is a sequence of 1 bits followed by 0 bits, return number of 1 bits else -1\n */\nexport function simpleMaskLength(mask) {\n  let ones = 0;\n  // eslint-disable-next-line prefer-const\n  for (let [index, byte] of mask.entries()) {\n    if (byte === 0xff) {\n      ones += 8;\n      continue;\n    }\n    while ((byte & 0x80) != 0) {\n      ones++;\n      byte = byte << 1;\n    }\n    if ((byte & 0x80) != 0) {\n      return -1;\n    }\n    for (let i = index + 1; i < mask.length; i++) {\n      if (mask[i] != 0) {\n        return -1;\n      }\n    }\n    break;\n  }\n  return ones;\n}\nexport function maskToHex(mask) {\n  let hex = \"0x\";\n  for (const byte of mask) {\n    hex += (byte >> 4).toString(16) + (byte & 0x0f).toString(16);\n  }\n  return hex;\n}","map":{"version":3,"names":["IPv4Len","IPv6Len","allFF","a","from","to","i","e","deepEqual","b","ipToString","ip","length","join","result","push","toString","padStart","Error","simpleMaskLength","mask","ones","index","byte","entries","maskToHex","hex"],"sources":["../../src/util.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}