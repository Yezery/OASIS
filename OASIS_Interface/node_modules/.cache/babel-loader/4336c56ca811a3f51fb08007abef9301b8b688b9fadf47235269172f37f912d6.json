{"ast":null,"code":"// 格式化日期格式\nexport function parseTime(date, format) {\n  let curDate = new Date(date);\n  const o = {\n    \"M+\": curDate.getMonth() + 1,\n    // 月份\n    \"d+\": curDate.getDate(),\n    // 日\n    \"h+\": curDate.getHours() >= 10 ? curDate.getHours() : \"0\" + curDate.getHours(),\n    // 小时\n    \"m+\": curDate.getMinutes() >= 10 ? curDate.getMinutes() : \"0\" + curDate.getMinutes(),\n    // 分\n    \"s+\": curDate.getSeconds() >= 10 ? curDate.getSeconds() : \"0\" + curDate.getSeconds(),\n    // 秒\n    \"q+\": Math.floor((curDate.getMonth() + 3) / 3),\n    // 季度\n    S: curDate.getMilliseconds() // 毫秒\n  };\n\n  if (/(y+)/.test(format)) {\n    format = format.replace(RegExp.$1, (curDate.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n  }\n  for (let k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(format)) {\n      format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n    }\n  }\n  return format;\n}","map":{"version":3,"names":["parseTime","date","format","curDate","Date","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","S","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","k"],"sources":["/Users/yezery/OASIS/OASIS_Interface/src/utils/Time.js"],"sourcesContent":["// 格式化日期格式\nexport function parseTime(date, format) {\n  let curDate = new Date(date);\n  const o = {\n    \"M+\": curDate.getMonth() + 1, // 月份\n    \"d+\": curDate.getDate(), // 日\n    \"h+\":\n      curDate.getHours() >= 10\n        ? curDate.getHours()\n        : \"0\" + curDate.getHours(), // 小时\n    \"m+\":\n      curDate.getMinutes() >= 10\n        ? curDate.getMinutes()\n        : \"0\" + curDate.getMinutes(), // 分\n    \"s+\":\n      curDate.getSeconds() >= 10\n        ? curDate.getSeconds()\n        : \"0\" + curDate.getSeconds(), // 秒\n    \"q+\": Math.floor((curDate.getMonth() + 3) / 3), // 季度\n    S: curDate.getMilliseconds(), // 毫秒\n  };\n  if (/(y+)/.test(format)) {\n    format = format.replace(\n      RegExp.$1,\n      (curDate.getFullYear() + \"\").substr(4 - RegExp.$1.length)\n    );\n  }\n  for (let k in o) {\n    if (new RegExp(\"(\" + k + \")\").test(format)) {\n      format = format.replace(\n        RegExp.$1,\n        RegExp.$1.length === 1\n          ? o[k]\n          : (\"00\" + o[k]).substr((\"\" + o[k]).length)\n      );\n    }\n  }\n  return format;\n}"],"mappings":"AAAA;AACA,OAAO,SAASA,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACtC,IAAIC,OAAO,GAAG,IAAIC,IAAI,CAACH,IAAI,CAAC;EAC5B,MAAMI,CAAC,GAAG;IACR,IAAI,EAAEF,OAAO,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC;IAAE;IAC9B,IAAI,EAAEH,OAAO,CAACI,OAAO,CAAC,CAAC;IAAE;IACzB,IAAI,EACFJ,OAAO,CAACK,QAAQ,CAAC,CAAC,IAAI,EAAE,GACpBL,OAAO,CAACK,QAAQ,CAAC,CAAC,GAClB,GAAG,GAAGL,OAAO,CAACK,QAAQ,CAAC,CAAC;IAAE;IAChC,IAAI,EACFL,OAAO,CAACM,UAAU,CAAC,CAAC,IAAI,EAAE,GACtBN,OAAO,CAACM,UAAU,CAAC,CAAC,GACpB,GAAG,GAAGN,OAAO,CAACM,UAAU,CAAC,CAAC;IAAE;IAClC,IAAI,EACFN,OAAO,CAACO,UAAU,CAAC,CAAC,IAAI,EAAE,GACtBP,OAAO,CAACO,UAAU,CAAC,CAAC,GACpB,GAAG,GAAGP,OAAO,CAACO,UAAU,CAAC,CAAC;IAAE;IAClC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAAC,CAACT,OAAO,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAAE;IAChDO,CAAC,EAAEV,OAAO,CAACW,eAAe,CAAC,CAAC,CAAE;EAChC,CAAC;;EACD,IAAI,MAAM,CAACC,IAAI,CAACb,MAAM,CAAC,EAAE;IACvBA,MAAM,GAAGA,MAAM,CAACc,OAAO,CACrBC,MAAM,CAACC,EAAE,EACT,CAACf,OAAO,CAACgB,WAAW,CAAC,CAAC,GAAG,EAAE,EAAEC,MAAM,CAAC,CAAC,GAAGH,MAAM,CAACC,EAAE,CAACG,MAAM,CAC1D,CAAC;EACH;EACA,KAAK,IAAIC,CAAC,IAAIjB,CAAC,EAAE;IACf,IAAI,IAAIY,MAAM,CAAC,GAAG,GAAGK,CAAC,GAAG,GAAG,CAAC,CAACP,IAAI,CAACb,MAAM,CAAC,EAAE;MAC1CA,MAAM,GAAGA,MAAM,CAACc,OAAO,CACrBC,MAAM,CAACC,EAAE,EACTD,MAAM,CAACC,EAAE,CAACG,MAAM,KAAK,CAAC,GAClBhB,CAAC,CAACiB,CAAC,CAAC,GACJ,CAAC,IAAI,GAAGjB,CAAC,CAACiB,CAAC,CAAC,EAAEF,MAAM,CAAC,CAAC,EAAE,GAAGf,CAAC,CAACiB,CAAC,CAAC,EAAED,MAAM,CAC7C,CAAC;IACH;EACF;EACA,OAAOnB,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}