{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet socket;\nimport { newWebSocket } from \"@/utils/webStocket\";\nexport default {\n  data() {\n    return {\n      // Chat\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: \"\",\n      text: \"\",\n      messages: [],\n      content: \"\"\n    };\n  },\n  components: {},\n  methods: {\n    // 更新弹窗位置\n    upDatePosition() {\n      this.$nextTick(() => {\n        this.$refs.popoverRef.updatePopper();\n      });\n    },\n    OpenAndClose() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$refs.logo.classList.add(\"animate__swing\");\n        this.$refs.logo2.classList.add(\"animate__swing\");\n      } else {\n        this.$refs.logo.classList.remove(\"animate__swing\");\n        this.$refs.logo2.classList.remove(\"animate__swing\");\n      }\n    },\n    GETHashAvatar(UserAddress) {\n      return \"data:image/png;base64,\" + new this.Identicon(UserAddress, 120).toString();\n    },\n    send() {\n      console.log(this.user.username);\n      console.log(this.chatUser);\n      if (!this.chatUser) {\n        this.$message({\n          type: \"warning\",\n          message: \"请选择聊天对象\"\n        });\n        return;\n      }\n      if (!this.text) {\n        this.$message({\n          type: \"warning\",\n          message: \"请输入内容\"\n        });\n      } else {\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          // 组装待发送的消息 json\n          // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n          let message = {\n            from: this.user.username,\n            to: this.chatUser,\n            text: this.text\n          };\n          socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n          // 由服务端进行转发\n          this.messages.push({\n            user: this.user.username,\n            text: this.text\n          });\n\n          // 构建消息内容，本人消息\n          this.createContent(null, this.user.username, this.text);\n          this.text = \"\";\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {\n      // 这个方法是用来将 json的聊天消息数据转换成 html的。\n      let html;\n      // 当前用户消息\n      if (nowUser) {\n        // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n        html = ` <div class=\"el-row \" style=\"padding: 25px 0px 10px 120px\">\n                                          <div class=\"currentTime\" style=\"padding-left:45px;\">${this.parseTiem(Date(), \"hh:mm:ss\")}</div>\n                                          <div class=\"el-col el-col-22\" style=\"text-align: left\">\n                                            <div\n                                              class=\"tip left\"\n                                            >\n                                              ${text}\n                                            </div>\n                                          </div>\n                                        </div>`;\n      } else if (remoteUser) {\n        // remoteUser表示远程用户聊天消息，蓝色的气泡\n        html = `  <div class=\"el-row\" style=\"padding: 25px 0px 0px 20px\">\n                                          <div class=\"currentTime\" style=\"padding-left:-30px;\">${this.parseTiem(Date(), \"hh:mm:ss\")}</div>\n                                          <div\n                                            class=\"el-col el-col-22\"\n                                            style=\"text-align: left;\"\n                                          >\n                                            <div class=\"tip right\" >\n                                           ${text}\n                                            </div>\n                                          </div>\n                                        </div>`;\n      }\n      // console.log(html);\n      this.content += html;\n      this.$nextTick(() => {\n        let msg = document.getElementById(\"CHAT\"); // 获取对象\n        msg.scrollTop = msg.scrollHeight; // 滚动高度\n      });\n    },\n\n    init() {\n      // let array = [\"username:admin\",\"username:admin2\"]\n      let object = {\n        username: this.$store.state.currentAddress\n      };\n      localStorage.setItem(\"user\", JSON.stringify(object));\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n      let username = this.user.username;\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = newWebSocket(\"/OasisChat/\", username);\n\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          console.log(\"收到数据====\" + msg.data);\n          let data = JSON.parse(msg.data); // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n          if (data.users) {\n            // 获取在线人员信息\n            _this.users = data.users.filter(user => user.username !== username); // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n          } else {\n            // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n            //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n            if (data.from === _this.chatUser) {\n              _this.messages.push(data);\n              // 构建消息内容\n              console.log(data.text);\n              _this.createContent(data.from, null, data.text);\n            }\n          }\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    },\n    // 格式化日期格式\n    parseTiem(date, format) {\n      let curDate = new Date(date);\n      const o = {\n        \"M+\": curDate.getMonth() + 1,\n        // 月份\n        \"d+\": curDate.getDate(),\n        // 日\n        \"h+\": curDate.getHours() >= 10 ? curDate.getHours() : \"0\" + curDate.getHours(),\n        // 小时\n        \"m+\": curDate.getMinutes() >= 10 ? curDate.getMinutes() : \"0\" + curDate.getMinutes(),\n        // 分\n        \"s+\": curDate.getSeconds() >= 10 ? curDate.getSeconds() : \"0\" + curDate.getSeconds(),\n        // 秒\n        \"q+\": Math.floor((curDate.getMonth() + 3) / 3),\n        // 季度\n        S: curDate.getMilliseconds() // 毫秒\n      };\n\n      if (/(y+)/.test(format)) {\n        format = format.replace(RegExp.$1, (curDate.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n      }\n      for (let k in o) {\n        if (new RegExp(\"(\" + k + \")\").test(format)) {\n          format = format.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length));\n        }\n      }\n      return format;\n    }\n  }\n};","map":{"version":3,"names":["socket","newWebSocket","data","user","isCollapse","users","chatUser","text","messages","content","components","methods","upDatePosition","$nextTick","$refs","popoverRef","updatePopper","OpenAndClose","isOpen","logo","classList","add","logo2","remove","GETHashAvatar","UserAddress","Identicon","toString","send","console","log","username","$message","type","message","WebSocket","from","to","JSON","stringify","push","createContent","remoteUser","nowUser","html","parseTiem","Date","msg","document","getElementById","scrollTop","scrollHeight","init","object","$store","state","currentAddress","localStorage","setItem","getItem","parse","_this","close","onopen","onmessage","filter","onclose","onerror","date","format","curDate","o","getMonth","getDate","getHours","getMinutes","getSeconds","Math","floor","S","getMilliseconds","test","replace","RegExp","$1","getFullYear","substr","length","k"],"sources":["src/views/chat/ChatMemu.vue"],"sourcesContent":["<template>\n  <div class=\"ChatMemu \" ref=\"ChatMemu\" @mouseenter=\"OpenAndClose\" @mouseleave=\"OpenAndClose\">\n    <div class=\"logobox\">\n      <div class=\"logo animate__animated\">\n        <div style=\"display: inline; font-size: 3.2vh\" class=\"animate__animated\" ref=\"logo\">\n          OAS\n        </div>\n        <div style=\"display: inline;  font-size: 3vh\" class=\"animate__animated\" ref=\"logo2\">\n          🌴S\n        </div>\n      </div>\n    </div>\n\n    <template>\n      <div v-for=\"user in users\" :key=\"user.username\">\n        <el-popover placement=\"right\" width=\"309px\" trigger=\"click\" popper-class=\"monitor-yt-popover\">\n          <div style=\"\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n            \">\n            <div class=\"ChatWindowBox\" style=\"width: 309px; height: 499px\">\n              <el-container>\n                <el-header>\n                  <div class=\"topBox\">\n                    <div style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \">\n                      <span class=\"el-avatar el-avatar--circle\" style=\"height: 48px; width: 48px\" v-if=\"chatUser != ''\">\n                        <img :src=\"GETHashAvatar(user.username)\" style=\"object-fit: cover\" />\n                      </span>\n                    </div>\n                    <div style=\"flex: 7; text-align: left; height: 48px\">\n                      <div style=\"margin-left: 5px\">\n                        <div class=\"ChatUserName\">\n                          {{\n                                                        chatUser.slice(0, 5) + \"...\" + chatUser.slice(37)\n                                                    }}\n                        </div>\n                        <div style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \" v-if=\"chatUser != ''\">\n                          <i class=\"el-icon-loading\"></i> Chatting...\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </el-header>\n                <el-main>\n                  <div style=\"height: 355px; overflow: auto\" id=\"CHAT\" v-html=\"content\"></div>\n                </el-main>\n                <el-footer>\n                  <div class=\"inputer\">\n                    <textarea v-model=\"text\" class=\"inputarea\"></textarea>\n                    <button @click=\"send\">\n                      <i class=\"el-icon-thumb\" style=\"font-size: 27px\"></i>\n                    </button>\n                  </div>\n                </el-footer>\n              </el-container>\n            </div>\n          </div>\n\n          <div class=\"ChatPeople animate__animated animate__fadeInRight\" slot=\"reference\" @click=\"chatUser = user.username\">\n            <div class=\"ChatWindow\">\n              <img :src=\"GETHashAvatar(user.username)\" width=\"50px\" height=\"50px\" alt=\"\" style=\"object-fit: contain\" />\n            </div>\n            <span class=\"friendname animate__animated animate__fadeInRight\">{{\n                            user.username.slice(0, 3) + \"...\" + user.username.slice(39)\n                        }}</span>\n          </div>\n        </el-popover>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\n  let socket;\n  import { newWebSocket } from \"@/utils/webStocket\";\n  export default {\n    data() {\n      return {\n        // Chat\n        user: {},\n        isCollapse: false,\n        users: [],\n        chatUser: \"\",\n        text: \"\",\n        messages: [],\n        content: \"\",\n      };\n    },\n    components: {},\n    methods: {\n      // 更新弹窗位置\n      upDatePosition() {\n        this.$nextTick(() => {\n          this.$refs.popoverRef.updatePopper();\n        });\n      },\n      OpenAndClose() {\n        this.isOpen = !this.isOpen;\n        if (this.isOpen) {\n          this.$refs.logo.classList.add(\"animate__swing\");\n          this.$refs.logo2.classList.add(\"animate__swing\");\n        } else {\n          this.$refs.logo.classList.remove(\"animate__swing\");\n          this.$refs.logo2.classList.remove(\"animate__swing\");\n        }\n      },\n      GETHashAvatar(UserAddress) {\n        return (\n          \"data:image/png;base64,\" +\n          new this.Identicon(UserAddress, 120).toString()\n        );\n      },\n      send() {\n        console.log(this.user.username);\n        console.log(this.chatUser);\n        if (!this.chatUser) {\n          this.$message({ type: \"warning\", message: \"请选择聊天对象\" });\n          return;\n        }\n        if (!this.text) {\n          this.$message({ type: \"warning\", message: \"请输入内容\" });\n        } else {\n          if (typeof WebSocket == \"undefined\") {\n            console.log(\"您的浏览器不支持WebSocket\");\n          } else {\n            console.log(\"您的浏览器支持WebSocket\");\n            // 组装待发送的消息 json\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n            let message = {\n              from: this.user.username,\n              to: this.chatUser,\n              text: this.text,\n            };\n            socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n            // 由服务端进行转发\n            this.messages.push({\n              user: this.user.username,\n              text: this.text,\n            });\n\n            // 构建消息内容，本人消息\n            this.createContent(null, this.user.username, this.text);\n            this.text = \"\";\n          }\n        }\n      },\n      createContent(remoteUser, nowUser, text) {\n        // 这个方法是用来将 json的聊天消息数据转换成 html的。\n        let html;\n        // 当前用户消息\n        if (nowUser) {\n          // nowUser 表示是否显示当前用户发送的聊天消息，绿色气泡\n          html = ` <div class=\"el-row \" style=\"padding: 25px 0px 10px 120px\">\n                                          <div class=\"currentTime\" style=\"padding-left:45px;\">${this.parseTiem(\n                                            Date(),\n                                            \"hh:mm:ss\"\n                                          )}</div>\n                                          <div class=\"el-col el-col-22\" style=\"text-align: left\">\n                                            <div\n                                              class=\"tip left\"\n                                            >\n                                              ${text}\n                                            </div>\n                                          </div>\n                                        </div>`;\n        } else if (remoteUser) {\n          // remoteUser表示远程用户聊天消息，蓝色的气泡\n          html = `  <div class=\"el-row\" style=\"padding: 25px 0px 0px 20px\">\n                                          <div class=\"currentTime\" style=\"padding-left:-30px;\">${this.parseTiem(\n                                            Date(),\n                                            \"hh:mm:ss\"\n                                          )}</div>\n                                          <div\n                                            class=\"el-col el-col-22\"\n                                            style=\"text-align: left;\"\n                                          >\n                                            <div class=\"tip right\" >\n                                           ${text}\n                                            </div>\n                                          </div>\n                                        </div>`;\n        }\n        // console.log(html);\n        this.content += html;\n        this.$nextTick(() => {\n          let msg = document.getElementById(\"CHAT\"); // 获取对象\n          msg.scrollTop = msg.scrollHeight; // 滚动高度\n        });\n      },\n\n      init() {\n        // let array = [\"username:admin\",\"username:admin2\"]\n        let object = {\n          username: this.$store.state.currentAddress,\n        };\n        localStorage.setItem(\"user\", JSON.stringify(object));\n\n        this.user = localStorage.getItem(\"user\")\n          ? JSON.parse(localStorage.getItem(\"user\"))\n          : {};\n        let username = this.user.username;\n\n        let _this = this;\n\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          if (socket != null) {\n            socket.close();\n            socket = null;\n          }\n          // 开启一个websocket服务\n          socket = newWebSocket(\"/OasisChat/\", username);\n\n          //打开事件\n          socket.onopen = function () {\n            console.log(\"websocket已打开\");\n          };\n          //  浏览器端收消息，获得从服务端发送过来的文本消息\n          socket.onmessage = function (msg) {\n            console.log(\"收到数据====\" + msg.data);\n            let data = JSON.parse(msg.data); // 对收到的json数据进行解析， 类似这样的： {\"users\": [{\"username\": \"zhang\"},{ \"username\": \"admin\"}]}\n            if (data.users) {\n              // 获取在线人员信息\n              _this.users = data.users.filter(\n                (user) => user.username !== username\n              ); // 获取当前连接的所有用户信息，并且排除自身，自己不会出现在自己的聊天列表里\n            } else {\n              // 如果服务器端发送过来的json数据 不包含 users 这个key，那么发送过来的就是聊天文本json数据\n              //  // {\"from\": \"zhang\", \"text\": \"hello\"}\n              if (data.from === _this.chatUser) {\n                _this.messages.push(data);\n                // 构建消息内容\n                console.log(data.text);\n\n                _this.createContent(data.from, null, data.text);\n              }\n            }\n          };\n          //关闭事件\n          socket.onclose = function () {\n            console.log(\"websocket已关闭\");\n          };\n          //发生了错误事件\n          socket.onerror = function () {\n            console.log(\"websocket发生了错误\");\n          };\n        }\n      },\n      // 格式化日期格式\n      parseTiem(date, format) {\n        let curDate = new Date(date);\n        const o = {\n          \"M+\": curDate.getMonth() + 1, // 月份\n          \"d+\": curDate.getDate(), // 日\n          \"h+\":\n            curDate.getHours() >= 10\n              ? curDate.getHours()\n              : \"0\" + curDate.getHours(), // 小时\n          \"m+\":\n            curDate.getMinutes() >= 10\n              ? curDate.getMinutes()\n              : \"0\" + curDate.getMinutes(), // 分\n          \"s+\":\n            curDate.getSeconds() >= 10\n              ? curDate.getSeconds()\n              : \"0\" + curDate.getSeconds(), // 秒\n          \"q+\": Math.floor((curDate.getMonth() + 3) / 3), // 季度\n          S: curDate.getMilliseconds(), // 毫秒\n        };\n        if (/(y+)/.test(format)) {\n          format = format.replace(\n            RegExp.$1,\n            (curDate.getFullYear() + \"\").substr(4 - RegExp.$1.length)\n          );\n        }\n        for (let k in o) {\n          if (new RegExp(\"(\" + k + \")\").test(format)) {\n            format = format.replace(\n              RegExp.$1,\n              RegExp.$1.length === 1\n                ? o[k]\n                : (\"00\" + o[k]).substr((\"\" + o[k]).length)\n            );\n          }\n        }\n        return format;\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n.ChatMemu {\n  font-family: \"Transformers_Movie\";\n  width: 8vh;\n  height: 90vh;\n  transition: all 0.5s ease-in-out;\n  transition-delay: 0.5s;\n  position: relative;\n  overflow: visible;\n\n  &:hover {\n    width: 10vw;\n    transition: all 0.5s ease-in-out;\n    transition-delay: 0s;\n  }\n\n  &:hover .ChatWindow {\n    transform: translateX(-70%);\n    transition: all 0.5s ease-in-out;\n    transition-delay: 0s;\n    // :nth-child(1){\n    //     box-shadow: 0 0 20px var(--Selected-button1-blue-black);\n    //     border: 2px solid var(--Selected-button-blue1-black);\n    //     display: n;\n    // }\n    // :nth-child(2){\n    //     box-shadow: 0 0 20px var(--Selected-button-blue-black);\n    //     border: 2px solid var(--Selected-button-blue-black);\n    // }\n    // :nth-child(3){\n    //     box-shadow: 0 0 20px var(--Selected-button-blue-black);\n    //     border: 2px solid var(--Selected-button-blue-black);\n    // }\n    // :nth-child(4){\n    //     box-shadow: 0 0 20px var(--Selected-button-blue-black);\n    //     border: 2px solid var(--Selected-button-blue-black);\n    // }\n    // :nth-child(5){\n    //     box-shadow: 0 0 20px var(--Selected-button-blue-black);\n    //     border: 2px solid var(--Selected-button-blue-black);\n    // }\n  }\n\n  &:hover .ChatPeople {\n    transition: all 0.5s ease-in-out;\n    transition-delay: 0s;\n  }\n\n  &:hover .friendname {\n    left: 48%;\n    transition: all 0.5s ease-in-out;\n    transition-delay: 0s;\n    font-weight: 800;\n  }\n}\n\n.ChatPeople {\n  margin-top: 35px;\n  transition: all 0.3s ease-in-out;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition-delay: 2s;\n\n  &:before {\n    top: 50%;\n    transform: translate(-50%, -50%);\n    left: -2px;\n    position: absolute;\n    display: block;\n    width: 11px;\n    height: 11px;\n    border-radius: 50%;\n    background: var(--Dark--);\n    content: \"\";\n    transition: all 0.3s ease-in-out;\n  }\n}\n\n.ChatWindow {\n  position: relative;\n  border-radius: 50%;\n  overflow: hidden;\n  height: 50px;\n  width: 50px;\n  transition-delay: 0s;\n  transition: all 0.3s ease-in-out;\n  border: 2px solid transparent;\n  // box-shadow: 0 0 8px var(--HomeBackgrounde-blue-green--);\n  // box-shadow: 0 0 10px var(--HomeBackgrounde-blue-green--);\n}\n\n.friendname {\n  font-size: 15px;\n  color: var(--Dark--);\n  position: absolute;\n  font-weight: 800;\n  left: 250px;\n  transition-delay: 0s;\n  transition: all 0.3s ease-in-out;\n}\n\n.popoverDiv {\n  color: #fff;\n  background-color: #409eff;\n}\n\n.logobox {\n  width: 100%;\n  margin-top: 20px;\n  display: flex;\n\n  .logo {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    color: var(--Dark--);\n    transition: all 0.8s ease-in-out;\n\n    &::after {\n      position: absolute;\n      top: 63%;\n      margin-top: 29px;\n      display: flex;\n      content: \"\";\n      width: 50%;\n      border-bottom: 3px solid var(--Dark--);\n      border-radius: 5px;\n      transition: all 0.8s ease-in-out;\n    }\n\n    &:before {\n      top: 0px;\n      left: -7px;\n      position: absolute;\n      display: block;\n      width: 10px;\n      height: 100%;\n      border-radius: 5px;\n      background: var(--Dark--);\n      content: \"\";\n      transition: all 0.8s ease-in-out;\n    }\n  }\n}\n</style>\n\n<style lang=\"scss\" >\n.el-popover.monitor-yt-popover {\n  background-color: var(--ChatWindow--);\n  border-radius: 40px;\n  border: 1px solid rgba(255, 255, 255, 0);\n  transition: all 0.3s ease-in-out;\n\n  &:hover {\n    box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,\n      rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;\n    transition: all 0.3s ease-in-out;\n  }\n}\n\n.monitor-yt-popover .el-popover__title {\n  background-color: var(--ChatWindow--);\n}\n\n.el-popper[x-placement^=\"right\"] .popper__arrow {\n  display: none;\n}\n</style>\n\n<style>\n.tip {\n  font-family: sans-serif;\n  padding: 14px;\n  margin: 0;\n  white-space: normal;\n  word-break: break-all;\n  word-wrap: break-word;\n  height: auto;\n  display: flex;\n  width: 120px;\n  font-size: 12px;\n  color: #e1e1e6;\n  font-weight: 800;\n}\n\n.right {\n  background-color: #633bbc;\n  max-width: auto;\n  border-top-right-radius: 8px;\n  border-bottom-right-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n\n.left {\n  background-color: #07847e;\n  max-width: auto;\n  border-top-right-radius: 8px;\n  border-top-left-radius: 8px;\n  border-bottom-left-radius: 8px;\n}\n</style>\n<style scoped lang=\"scss\">\n.ChatWindowBox {\n  background-color: var(--ChatWindow--);\n\n  & .el-footer {\n    color: var(--ChatWindow--);\n    justify-content: center;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    position: relative;\n    height: 70px !important;\n  }\n\n  & .el-footer button {\n    color: #e1e1e6;\n    background-color: #282843;\n    border: 1px solid rgba(0, 0, 0, 0);\n    border-radius: 50%;\n    height: 37px;\n    justify-content: center;\n    align-items: center;\n    width: 40px;\n    display: inline-flex;\n  }\n\n  & .el-header {\n    background-color: var(--ChatWindow--) !important;\n    height: 75px !important;\n  }\n\n  & .el-aside {\n    color: var(--ChatWindow--);\n    text-align: center;\n  }\n\n  & .el-main {\n    background-color: var(--ChatWindow--);\n    text-align: center;\n    padding: 0px 0px 5px 0px;\n  }\n}\n\n.topBox {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n}\n\n.inputarea {\n  height: 4vh;\n  width: 65%;\n  resize: none;\n  outline: none;\n  border: none;\n  vertical-align: top;\n  font-size: 2vw;\n  text-align: left;\n  background-color: var(--Chatinput--);\n  color: var(--Dark--);\n}\n\n.inputer {\n  text-align: center;\n  width: 90%;\n  padding: 10px 0px 10px 0px;\n  margin-bottom: 10px;\n  margin-top: 10px;\n  border-radius: 40px;\n  background-color: var(--Chatinput--);\n  transition: all 0.3s ease-in-out;\n  box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\n\n  & i {\n    color: var(--Dark--);\n    transition: all 0.3s ease-in-out;\n\n    &:hover {\n      animation: send 1s infinite alternate;\n      transition: all 1s ease-in-out;\n    }\n  }\n}\n\n@keyframes send {\n  100% {\n    transform: translateY(-7px);\n  }\n}\n\n.ChatWindowBox .el-footer button {\n  background-color: var(--Chatinput--);\n}\n\n.ChatUserName {\n  margin-left: 5px;\n  font-size: 19px;\n  font-weight: 800;\n  color: var(--Dark--);\n}\n\n.currentTime {\n  color: #e1e1e6;\n  font-size: 12px;\n  padding-bottom: 5px;\n  width: 100px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}