{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get(cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map(( /** @type {any} */link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    };\n  }\n  return get;\n});","map":{"version":3,"names":["CID","configure","toUrlSearchParams","fromString","uint8ArrayFromString","createGet","api","get","cid","options","res","post","signal","searchParams","arg","Uint8Array","decode","dataEncoding","headers","data","json","Data","Links","map","link","Name","Hash","parse","Tsize","Size"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/object/get.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/object').API<HTTPClientExtraOptions>} ObjectAPI\n */\n\nexport const createGet = configure(api => {\n  /**\n   * @type {ObjectAPI[\"get\"]}\n   */\n  async function get (cid, options = {}) {\n    const res = await api.post('object/get', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${cid instanceof Uint8Array ? CID.decode(cid) : cid}`,\n        dataEncoding: 'base64',\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    return {\n      Data: uint8ArrayFromString(data.Data, 'base64pad'),\n      Links: (data.Links || []).map((/** @type {any} */ link) => ({\n        Name: link.Name,\n        Hash: CID.parse(link.Hash),\n        Tsize: link.Size\n      }))\n    }\n  }\n  return get\n})\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;;AAE5E;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGJ,SAAS,CAACK,GAAG,IAAI;EACxC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAG,GAAEN,GAAG,YAAYO,UAAU,GAAGf,GAAG,CAACgB,MAAM,CAACR,GAAG,CAAC,GAAGA,GAAI,EAAC;QAC3DS,YAAY,EAAE,QAAQ;QACtB,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,OAAO;MACLC,IAAI,EAAEjB,oBAAoB,CAACe,IAAI,CAACE,IAAI,EAAE,WAAW,CAAC;MAClDC,KAAK,EAAE,CAACH,IAAI,CAACG,KAAK,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC,kBAAmBC,IAAI,MAAM;QAC1DC,IAAI,EAAED,IAAI,CAACC,IAAI;QACfC,IAAI,EAAE1B,GAAG,CAAC2B,KAAK,CAACH,IAAI,CAACE,IAAI,CAAC;QAC1BE,KAAK,EAAEJ,IAAI,CAACK;MACd,CAAC,CAAC;IACJ,CAAC;EACH;EACA,OAAOtB,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}