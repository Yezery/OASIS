{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { mapEvent } from './map-event.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function* put(key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(await multipartRequest([value], controller, options.headers))\n    });\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event);\n    }\n  }\n  return put;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","multipartRequest","abortSignal","toString","uint8ArrayToString","mapEvent","createPut","api","put","key","value","options","controller","AbortController","signal","res","post","searchParams","arg","Uint8Array","headers","event","ndjson"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/dht/put.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { mapEvent } from './map-event.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\nexport const createPut = configure(api => {\n  /**\n   * @type {DHTAPI[\"put\"]}\n   */\n  async function * put (key, value, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(\n        await multipartRequest([value], controller, options.headers)\n      )\n    })\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event)\n    }\n  }\n\n  return put\n})\n"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGP,SAAS,CAACQ,GAAG,IAAI;EACxC;AACF;AACA;EACE,gBAAiBC,GAAGA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGZ,WAAW,CAACU,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,SAAS,EAAE;MACpCF,MAAM;MACNG,YAAY,EAAEjB,iBAAiB,CAAC;QAC9BkB,GAAG,EAAET,GAAG,YAAYU,UAAU,GAAGf,kBAAkB,CAACK,GAAG,CAAC,GAAGA,GAAG,CAACN,QAAQ,CAAC,CAAC;QACzE,GAAGQ;MACL,CAAC,CAAC;MACF,IACE,MAAMV,gBAAgB,CAAC,CAACS,KAAK,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACS,OAAO,CAAC;IAEhE,CAAC,CAAC;IAEF,WAAW,MAAMC,KAAK,IAAIN,GAAG,CAACO,MAAM,CAAC,CAAC,EAAE;MACtC,MAAMjB,QAAQ,CAACgB,KAAK,CAAC;IACvB;EACF;EAEA,OAAOb,GAAG;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}