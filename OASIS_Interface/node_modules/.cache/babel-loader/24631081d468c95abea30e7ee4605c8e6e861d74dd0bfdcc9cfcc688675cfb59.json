{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Model from \"@/components/3DModelShow/3DModel.vue\";\nimport { getNFTStruct, Buy } from \"@/api/axios/contract\";\nimport { getSaleListByContractAddress } from \"@/api/axios/Sale\";\n// getNFTStruct,\nexport default {\n  name: \"NFTInf\",\n  components: {\n    Model\n  },\n  data() {\n    return {\n      NFTInf: undefined,\n      modelPath: undefined,\n      NFTContractAddress: undefined,\n      NFTSaleId: undefined,\n      NFTSeller: \"\",\n      NFTTokenId: undefined,\n      NFTPrice: undefined,\n      NFTName: undefined,\n      NFTIsActive: undefined,\n      supplyer: undefined,\n      NFTSeries: undefined,\n      symbol: undefined,\n      maximums: undefined,\n      currentId: undefined,\n      seriesNFTArrays: [],\n      activeTab: \"first\",\n      isInitModel: false,\n      sale: {},\n      bought: false,\n      showFloatingWindow: false,\n      initModel: undefined,\n      MessageShow: false,\n      changeNFT: {},\n      opt: 0,\n      isChanging: false\n    };\n  },\n  watch: {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    seeModel(data) {\n      this.initModel = data;\n    },\n    setNewModelPath(path) {\n      this.modelPath = path;\n      this.isInitModel = true;\n      setTimeout(() => {\n        this.initModel();\n      }, 100);\n    },\n    async init() {\n      console.log(this.$store.state.NFTInf);\n      try {\n        this.NFTInf = this.$store.state.NFTInf;\n        this.modelPath = JSON.parse(this.NFTInf.tokenURI).image;\n        this.NFTContractAddress = this.NFTInf.nftContract;\n        this.NFTSaleId = this.NFTInf.saleId;\n        this.NFTSeller = this.NFTInf.seller;\n        this.NFTTokenId = this.NFTInf.tokenId;\n        this.NFTPrice = this.NFTInf.price;\n        this.NFTName = JSON.parse(this.NFTInf.tokenURI).name;\n        this.NFTIsActive = this.NFTInf.isActive;\n        this.supplyer = `${this.NFTInf.seller.slice(0, 5)}...${this.NFTInf.seller.slice(37)}`;\n        await this.getThisSeriesNFT();\n        await getNFTStruct(this.NFTContractAddress).then(re => {\n          this.NFTContract = re;\n        });\n        await this.NFTContract.methods.symbol().call().then(re => {\n          this.symbol = re;\n        });\n        await this.NFTContract.methods.name().call().then(re => {\n          this.NFTSeries = re;\n        });\n        await this.NFTContract.methods._maximums().call().then(re => {\n          this.maximums = re;\n        });\n        await this.NFTContract.methods._currentId().call().then(re => {\n          this.currentId = re;\n        });\n        this.makeSale();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async getThisSeriesNFT() {\n      var NFTDto = {\n        nftAddress: this.NFTContractAddress\n      };\n      console.log(NFTDto);\n      await getSaleListByContractAddress(NFTDto).then(re => {\n        this.seriesNFTArrays = re.data.data;\n      });\n    },\n    makeSale() {\n      this.sale = {\n        isActive: true,\n        nftAddress: this.NFTContractAddress,\n        price: this.$store.state.Web3.utils.fromWei(this.NFTPrice, \"ether\"),\n        saleId: Number(this.NFTSaleId),\n        ownerAddress: this.NFTSeller,\n        tokenId: Number(this.NFTTokenId)\n      };\n    },\n    async Buy() {\n      try {\n        this.changeNFT.symbol = this.symbol;\n        this.changeNFT.image = this.NFTImage;\n        let isSuccess = false;\n        this.isChanging = true;\n        await Buy(this.changeNFT).then(re => {\n          isSuccess = re;\n        });\n        if (isSuccess) {\n          this.isChanging = false;\n          this.$notify({\n            title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.bought = true;\n          this.CloseMessageBox(2);\n        } else {\n          this.isChanging = false;\n          this.$notify({\n            title: \"ÊÇ®Â∑≤ÁªèÂèñÊ∂àË¥≠‰π∞\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.CloseMessageBox(2);\n        }\n      } catch (error) {\n        this.isChanging = false;\n        this.$notify.error({\n          title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    OpenMessageBox(NFT) {\n      this.changeNFT = NFT;\n      this.MessageShow = true;\n    },\n    CloseMessageBox(opt) {\n      this.MessageShow = false;\n      this.changeNFT = {};\n      if (opt == 1) {\n        this.$notify({\n          title: `ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞`,\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    toMarketMain() {\n      this.$router.push(\"/\");\n      this.$store.commit(\"setIsSearch\", false);\n    }\n  }\n};","map":{"version":3,"names":["Model","getNFTStruct","Buy","getSaleListByContractAddress","name","components","data","NFTInf","undefined","modelPath","NFTContractAddress","NFTSaleId","NFTSeller","NFTTokenId","NFTPrice","NFTName","NFTIsActive","supplyer","NFTSeries","symbol","maximums","currentId","seriesNFTArrays","activeTab","isInitModel","sale","bought","showFloatingWindow","initModel","MessageShow","changeNFT","opt","isChanging","watch","mounted","init","methods","seeModel","setNewModelPath","path","setTimeout","console","log","$store","state","JSON","parse","tokenURI","image","nftContract","saleId","seller","tokenId","price","isActive","slice","getThisSeriesNFT","then","re","NFTContract","call","_maximums","_currentId","makeSale","error","NFTDto","nftAddress","Web3","utils","fromWei","Number","ownerAddress","NFTImage","isSuccess","$notify","title","type","position","offset","CloseMessageBox","OpenMessageBox","NFT","toMarketMain","$router","push","commit"],"sources":["src/components/infPage/3DNFTInf.vue"],"sourcesContent":["<template>\n  <div\n    class=\"NFTInfMainBox animate__animated animate__fadeInDown\"\n    v-loading.fullscreen.lock=\"isChanging\"\n    element-loading-text=\"‰∫§ÊòìËøõË°å‰∏≠\"\n    element-loading-spinner=\"el-icon-loading\"\n    element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n  >\n    <div\n      class=\"NFTInfMain\"\n      ref=\"NFTInfMain\"\n    >\n      <div class=\"NFTInfMainBg\">\n        <el-button\n          icon=\"el-icon-back\"\n          circle\n          @click=\"$router.back(-1)\"\n        />\n      </div>\n        <div class=\"NFTName\">\n          <h1>{{ NFTName }}</h1>\n        </div>\n\n        <div\n          class=\"show3DWindow\"\n          ref=\"show3DWindow\"\n          :class=\"{'active': showFloatingWindow}\"\n        >\n          <div class=\"show3DBox\">\n            <Model\n              :model-path=\"modelPath\"\n              @initModel=\"seeModel\"\n            />\n          </div>\n        </div>\n\n        <div class=\"Inf\">\n          <div class=\"NFTContract\">\n            <div style=\"text-align: left;margin-bottom: 3%;\">\n              <el-button\n                type=\"success\"\n                plain\n                class=\"Buy\"\n                @click=\"OpenMessageBox(sale, opt)\"\n                :disabled=\"!$store.state.isconnect || NFTSeller.toUpperCase() == $store.state.currentAddress.toUpperCase() || bought || !NFTIsActive\"\n              >\n                <i class=\"el-icon-shopping-cart-1\" /> {{ bought?\"Â∑≤Ë¥≠ÂÖ•\":\"Ë¥≠ÂÖ•\" }}\n              </el-button>\n            </div>\n            <div class=\"NFTSupplyer\">\n              Áî± <span style=\"font-weight: 800;font-size: 1.2vw;\">{{ supplyer }}</span>\n            </div>\n            <div class=\"NFTInf\">\n              <div class=\"NFTCounts\">\n                Á≥ªÂàó<span style=\"font-weight: 800;\">{{ NFTSeries }}</span> ¬∑\n                ‰ª£Â∏ÅÁ¨¶Âè∑<span style=\"font-weight: 800;\">{{ symbol }}</span> ¬∑\n                ÈôêÈáèÈì∏ÈÄ†<span style=\"font-weight: 800;\">{{ maximums }}</span> ¬∑\n                ÁõÆÂâçÂ∑≤Èì∏ÈÄ†Êï∞Èáè<span style=\"font-weight: 800;\">{{ currentId }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"selectBox\">\n          <div class=\"selectBox-Button\">\n            <el-tabs v-model=\"activeTab\">\n              <el-tab-pane\n                label=\"Ê≠£Âú®ÂîÆÂçñ\"\n                name=\"first\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.filter(inf => inf.isActive).length == 0\"\n                  >\n                    <el-empty description=\"Êó†Âú®ÂîÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in seriesNFTArrays\">\n                      <div\n                        class=\"NFTInf3D\"\n                        :key=\"inf.image\"\n                      >\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button\n                                @click=\"setNewModelPath(inf.ipfsPath)\"\n                                type=\"primary\"\n                                icon=\"el-icon-video-play\"\n                                circle\n                              />\n                            </div>\n                          </div>\n\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size: 1vw;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                          \n                              <div\n                                v-if=\"inf.isActive\"\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div> \n                              <div\n                                v-else\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane\n                label=\"ÊöÇÊú™ÂèëÂîÆ\"\n                name=\"second\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.filter(inf => !inf.isActive).length == 0\"\n                  >\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in seriesNFTArrays.filter(inf => !inf.isActive)\">\n                      <div\n                        class=\"NFTInf3D\"\n                        :key=\"inf.image\"\n                      >\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button\n                                @click=\"setNewModelPath(inf.ipfsPath)\"\n                                type=\"primary\"\n                                icon=\"el-icon-video-play\"\n                                circle\n                              />\n                            </div>\n                          </div>\n\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size: 1vw;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                          \n                              <div\n                                v-if=\"inf.isActive\"\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div> \n                              <div\n                                v-else\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane\n                label=\"Á≥ªÂàóNFT\"\n                name=\"third\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.length == 0\"\n                  >\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in seriesNFTArrays\">\n                      <div\n                        class=\"NFTInf3D\"\n                        :key=\"inf.image\"\n                      >\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button\n                                @click=\"setNewModelPath(inf.ipfsPath)\"\n                                type=\"primary\"\n                                icon=\"el-icon-video-play\"\n                                circle\n                              />\n                            </div>\n                          </div>\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size: 1vw;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                          \n                              <div\n                                v-if=\"inf.isActive\"\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div> \n                              <div\n                                v-else\n                                class=\"priceBox\"\n                              >\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n            </el-tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"MessageMask\"\n      v-if=\"MessageShow\"\n    >\n      <div class=\"Message animate__animated animate__fadeInUp\">\n        <div class=\"MessageRight\">\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Á≥ªÂàóÂêç <span class=\"tipshelp\">Series Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ NFTSeries }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª£Â∏ÅÁ¨¶Âè∑ <span class=\"tipshelp\">Symbol</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ symbol }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ÂêçÁß∞ <span class=\"tipshelp\">NFT Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ NFTName }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Â∫èÂè∑ <span class=\"tipshelp\">Token ID</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                #{{ NFTTokenId }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle2\">\n                <el-divider />\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª∑Ê†º <span class=\"tipshelp\">Price</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                <span style=\"font-size: 30px;\"> {{ $store.state.Web3.utils.fromWei(NFTPrice, 'ether') }} </span>ETH\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"sumbitBox\">\n              <el-button\n                @click=\"CloseMessageBox(1)\"\n                class=\"createButton\"\n                type=\"primary\"\n                plain\n              >\n                ÂèñÊ∂à\n              </el-button>\n              <el-button\n                @click=\"Buy\"\n                class=\"createButton\"\n                type=\"success\"\n                plain\n              >\n                Ë¥≠‰π∞\n              </el-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Model from \"@/components/3DModelShow/3DModel.vue\";\n  import { getNFTStruct, Buy } from \"@/api/axios/contract\";\n  import { getSaleListByContractAddress } from \"@/api/axios/Sale\";\n  // getNFTStruct,\n  export default {\n    name: \"NFTInf\",\n    components: {\n      Model,\n    },\n    data() {\n      return {\n        NFTInf: undefined,\n        modelPath: undefined,\n        NFTContractAddress: undefined,\n        NFTSaleId: undefined,\n        NFTSeller: \"\",\n        NFTTokenId: undefined,\n        NFTPrice: undefined,\n        NFTName: undefined,\n        NFTIsActive: undefined,\n        supplyer: undefined,\n        NFTSeries: undefined,\n        symbol: undefined,\n        maximums: undefined,\n        currentId: undefined,\n        seriesNFTArrays: [],\n        activeTab: \"first\",\n        isInitModel: false,\n        sale: {},\n        bought: false,\n\n        showFloatingWindow: false,\n        initModel: undefined,\n\n        MessageShow: false,\n        changeNFT: {},\n        opt: 0,\n        isChanging: false,\n      };\n    },\n    watch: {},\n    mounted() {\n      this.init();\n    },\n\n    methods: {\n      seeModel(data) {\n        this.initModel = data;\n      },\n      setNewModelPath(path) {\n        this.modelPath = path\n        this.isInitModel = true;\n        setTimeout(() => {\n        this.initModel();\n      }, 100);\n      },\n      async init() {\n        console.log(this.$store.state.NFTInf);\n        try {\n          this.NFTInf = this.$store.state.NFTInf;\n          this.modelPath = JSON.parse(this.NFTInf.tokenURI).image;\n          this.NFTContractAddress = this.NFTInf.nftContract;\n          this.NFTSaleId = this.NFTInf.saleId;\n          this.NFTSeller = this.NFTInf.seller;\n          this.NFTTokenId = this.NFTInf.tokenId;\n          this.NFTPrice = this.NFTInf.price;\n          this.NFTName = JSON.parse(this.NFTInf.tokenURI).name;\n          this.NFTIsActive = this.NFTInf.isActive;\n          this.supplyer = `${this.NFTInf.seller.slice(\n            0,\n            5\n          )}...${this.NFTInf.seller.slice(37)}`;\n          await this.getThisSeriesNFT();\n          await getNFTStruct(this.NFTContractAddress).then((re) => {\n            this.NFTContract = re;\n          });\n          await this.NFTContract.methods\n            .symbol()\n            .call()\n            .then((re) => {\n              this.symbol = re;\n            });\n          await this.NFTContract.methods\n            .name()\n            .call()\n            .then((re) => {\n              this.NFTSeries = re;\n            });\n          await this.NFTContract.methods\n            ._maximums()\n            .call()\n            .then((re) => {\n              this.maximums = re;\n            });\n          await this.NFTContract.methods\n            ._currentId()\n            .call()\n            .then((re) => {\n              this.currentId = re;\n            });\n    \n          this.makeSale();\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      async getThisSeriesNFT() {\n        var NFTDto = {\n          nftAddress: this.NFTContractAddress,\n        };\n        console.log(NFTDto);\n        await getSaleListByContractAddress(NFTDto).then((re) => {\n          this.seriesNFTArrays = re.data.data;\n        });\n      },\n      makeSale() {\n        this.sale = {\n          isActive: true,\n          nftAddress: this.NFTContractAddress,\n          price: this.$store.state.Web3.utils.fromWei(this.NFTPrice, \"ether\"),\n          saleId: Number(this.NFTSaleId),\n          ownerAddress: this.NFTSeller,\n          tokenId: Number(this.NFTTokenId),\n        };\n      },\n      async Buy() {\n        try {\n          this.changeNFT.symbol = this.symbol;\n          this.changeNFT.image = this.NFTImage;\n          let isSuccess = false;\n          this.isChanging = true;\n          await Buy(this.changeNFT).then((re) => {\n            isSuccess = re;\n          });\n          if (isSuccess) {\n            this.isChanging = false;\n            this.$notify({\n              title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.bought = true;\n            this.CloseMessageBox(2);\n          } else {\n            this.isChanging = false;\n            this.$notify({\n              title: \"ÊÇ®Â∑≤ÁªèÂèñÊ∂àË¥≠‰π∞\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.CloseMessageBox(2);\n          }\n        } catch (error) {\n          this.isChanging = false;\n          this.$notify.error({\n            title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      OpenMessageBox(NFT) {\n        this.changeNFT = NFT;\n        this.MessageShow = true;\n      },\n      CloseMessageBox(opt) {\n        this.MessageShow = false;\n        this.changeNFT = {};\n        if (opt == 1) {\n          this.$notify({\n            title: `ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞`,\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      toMarketMain() {\n        this.$router.push(\"/\");\n        this.$store.commit(\"setIsSearch\", false);\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.NFTInfMainBox {\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 100%;\n  .NFTInfMain {\n    font-family: Arial, Helvetica, sans-serif;\n    min-width: min-content;\n    width: 95%;\n    height: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .NFTInfMainBg {\n      width: 90%;\n      background-color: var(--White--);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-direction: column;\n      .NFTName {\n        color: var(--Dark--);\n        width: 75%;\n        height: auto;\n        font-weight: 800;\n        text-align: left;\n        font-size: 2vw;\n      }\n      .show3DWindow {\n        width: 100%;\n\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        .active {\n          position: fixed;\n          top: 100px; /* Ê†πÊçÆÂÆûÈôÖÊÉÖÂÜµËÆæÁΩÆÂÖÉÁ¥†ÁöÑÂàùÂßã‰ΩçÁΩÆ */\n          right: 20px;\n        }\n        .show3DBox {\n          background-color: var(--Dark--);\n          width: 70%;\n          height: 50vh;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          overflow: hidden;\n          border-radius: 35px;\n          margin-top: 2%;\n        }\n      }\n\n      .Inf {\n        margin-top: 2%;\n        margin-bottom: 2%;\n        line-height: 50px;\n        width: 75%;\n        color: var(--Dark--);\n\n        .NFTContract {\n          margin-top: 2%;\n        }\n        .NFTSupplyer {\n          text-align: left;\n          font-size: 1.1vw;\n        }\n        .NFTInf {\n          float: left;\n          .NFTCounts {\n            margin-top: 2%;\n            text-align: left;\n            font-size: 1.1vw;\n            span {\n              margin-left: 5px;\n              margin-right: 10px;\n            }\n          }\n        }\n      }\n    }\n\n    .selectBox {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      width: 80%;\n\n      height: fit-content;\n      padding-top: 2%;\n      background-color: var(--White--);\n\n      /deep/ .selectBox-Button {\n        width: 95%;\n        height: 100%;\n\n        .NFTInf3D {\n                  margin: 2%;\n                  background-color: white;\n                  border-radius: 25px;\n                  width: 300px;\n                  height: 200px;\n                  display: inline-block;\n                  overflow: hidden;\n                  transition: all 0.3s ease-in-out;\n                  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n                    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n                  .Inf3D {\n                    display: flex;\n                    height: 100%;\n\n                    .Inf3DLeft {\n                      flex: 1;\n                      height: 100%;\n                      display: flex;\n                      background-color: #11243d;\n                      button{\n                        font-size: 1vw;\n                      }\n                      flex-direction: column;\n                      .Inf3DLeftTop {\n                        width: 100%;\n                        height: 50%;\n                   \n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                      }\n                      .Inf3DLeftBottom {\n                        width: 100%;\n                        height: 50%;\n                        display: flex;\n                        justify-content: center;\n                        align-items: center;\n                      }\n                    }\n                    .Inf3DRight {\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    flex-direction: column;\n                      flex: 2;\n                      height: 100%;\n                      color: black;\n                      .priceBox {\n                      width: 100%;\n                      .price {\n                        font-size: 1.8vw;\n                      }\n                    }\n                    .TokenID {\n                        padding: 2px 0px 2px 0px;\n                        border-radius: 10px;\n                        transition: all 0.3s ease-in-out;\n                        background-color: rgba(85, 201, 96, 0.12);\n                        color: #55c960;\n                        width: 70%;\n                      }\n  \n                    }\n                  }\n                }\n        .el-tabs__nav {\n          height: 60px;\n        }\n        .el-tabs {\n          color: #000;\n          border-radius: 20px;\n          left: 0px;\n          top: 0px;\n          position: relative;\n        }\n        /* ÂéªÈô§ÁÅ∞Ëâ≤Ê®™Êù° */\n        .el-tabs__nav-wrap::after {\n          position: static !important;\n        }\n        /* ËÆæÁΩÆÊªëÂùóÈ¢úËâ≤ */\n        .el-tabs__active-bar {\n          background-color: var(--Dark--);\n          border: 1px solid white;\n        }\n        /* ËÆæÁΩÆÊªëÂùóÂÅúÊ≠¢‰ΩçÁΩÆ */\n        .el-tabs__active-bar.is-top {\n          height: 100%;\n          width: 104px !important;\n          border-radius: 17px;\n          top: 0px !important;\n          left: -15px !important;\n          position: absolute !important;\n          z-index: 1;\n        }\n        /* ËÆæÁΩÆÂΩìÂâçÈÄâ‰∏≠Ê†∑Âºè */\n        .el-tabs__item.is-active {\n          background-color: transparent;\n          color: var(--White--) !important;\n\n          z-index: 2;\n        }\n        /* ËÆæÁΩÆÊú™Ë¢´ÈÄâ‰∏≠Ê†∑Âºè */\n        .el-tabs__item {\n          padding: 10px 20px !important;\n          width: auto;\n          font-size: 18px;\n          font-weight: 800;\n          box-sizing: border-box;\n          display: inline-block;\n          position: relative !important;\n          color: var(--Dark--) !important;\n          z-index: 2;\n        }\n\n        .selectBox-Active {\n          border: none;\n          font-size: 1vw;\n          border-radius: 20px;\n          transition: all 0.3s ease-in-out;\n          font-weight: 800;\n          border: none;\n          background-color: rgb(246, 246, 246);\n          &:hover {\n            background-color: rgb(246, 246, 246);\n            transition: all 0.3s ease-in-out;\n            color: white;\n          }\n        }\n        .selectBox-NOActive {\n          @extend .selectBox-Active;\n        }\n        .el-tabs__content {\n          height: 100%;\n          background-color: var(--White--);\n        }\n      }\n    }\n  }\n  .Buy {\n    border-radius: 15px;\n    padding: 2% 3% 2% 3%;\n    transition: all 0.3s ease-in-out;\n    font-size: 1.3vw;\n    font-weight: 800;\n    &:hover {\n      transition: all 0.3s ease-in-out;\n    }\n  }\n  .MessageMask {\n    z-index: 200;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .Message {\n      transition: all 0.3s ease-in-out;\n      overflow: hidden;\n      width: 50%;\n      height: 70%;\n      border-radius: 30px;\n      background-color: white;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px,\n        rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n      // .MessageLeft {\n      //   flex: 1;\n      //   display: flex;\n      //   justify-content: center;\n      //   align-items: center;\n      //   padding-right: 10%;\n      //   .imageBox {\n      //     width: 75%;\n      //     height: 75%;\n      //     border-radius: 30px;\n      //     overflow: hidden;\n      //     display: flex;\n      //     justify-content: center;\n      //     align-items: center;\n      //     background-color: transparent;\n      //     img {\n      //       object-fit: contain;\n      //       width: 100%;\n      //       height: 100%;\n      //     }\n      //   }\n      // }\n      .MessageRight {\n        position: relative;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        /deep/ .select {\n          width: 100%;\n          text-align: left;\n          margin-bottom: 20px;\n          .tipsBox {\n            width: 100%;\n            color: rgb(105, 105, 105);\n            text-align: left;\n            transition: all 0.3s ease-in-out;\n            .tipsTitle2 {\n              margin-top: 2%;\n              margin-bottom: 1%;\n              font-size: 15px;\n              font-weight: 800;\n              color: black;\n              transition: all 0.3s ease-in-out;\n              width: 300px;\n            }\n            .tipsTitle {\n              font-size: 20px;\n              color: black;\n              .tipshelp {\n                color: rgb(105, 105, 105);\n                font-size: 15px;\n              }\n            }\n          }\n          .sumbitBox {\n            text-align: left;\n            margin-top: 3%;\n            .createButton {\n              padding: 20px 35px 18px 35px;\n              font-size: 17px;\n              border-radius: 15px;\n              transition: all 0.3s ease-in-out;\n              font-family: \"Transformers_Movie\";\n            }\n          }\n        }\n        .colseButton {\n          margin-right: 10%;\n        }\n      }\n    }\n  }\n}\n</style>"],"mappings":";AA+UA,OAAAA,KAAA;AACA,SAAAC,YAAA,EAAAC,GAAA;AACA,SAAAC,4BAAA;AACA;AACA;EACAC,IAAA;EACAC,UAAA;IACAL;EACA;EACAM,KAAA;IACA;MACAC,MAAA,EAAAC,SAAA;MACAC,SAAA,EAAAD,SAAA;MACAE,kBAAA,EAAAF,SAAA;MACAG,SAAA,EAAAH,SAAA;MACAI,SAAA;MACAC,UAAA,EAAAL,SAAA;MACAM,QAAA,EAAAN,SAAA;MACAO,OAAA,EAAAP,SAAA;MACAQ,WAAA,EAAAR,SAAA;MACAS,QAAA,EAAAT,SAAA;MACAU,SAAA,EAAAV,SAAA;MACAW,MAAA,EAAAX,SAAA;MACAY,QAAA,EAAAZ,SAAA;MACAa,SAAA,EAAAb,SAAA;MACAc,eAAA;MACAC,SAAA;MACAC,WAAA;MACAC,IAAA;MACAC,MAAA;MAEAC,kBAAA;MACAC,SAAA,EAAApB,SAAA;MAEAqB,WAAA;MACAC,SAAA;MACAC,GAAA;MACAC,UAAA;IACA;EACA;EACAC,KAAA;EACAC,QAAA;IACA,KAAAC,IAAA;EACA;EAEAC,OAAA;IACAC,SAAA/B,IAAA;MACA,KAAAsB,SAAA,GAAAtB,IAAA;IACA;IACAgC,gBAAAC,IAAA;MACA,KAAA9B,SAAA,GAAA8B,IAAA;MACA,KAAAf,WAAA;MACAgB,UAAA;QACA,KAAAZ,SAAA;MACA;IACA;IACA,MAAAO,KAAA;MACAM,OAAA,CAAAC,GAAA,MAAAC,MAAA,CAAAC,KAAA,CAAArC,MAAA;MACA;QACA,KAAAA,MAAA,QAAAoC,MAAA,CAAAC,KAAA,CAAArC,MAAA;QACA,KAAAE,SAAA,GAAAoC,IAAA,CAAAC,KAAA,MAAAvC,MAAA,CAAAwC,QAAA,EAAAC,KAAA;QACA,KAAAtC,kBAAA,QAAAH,MAAA,CAAA0C,WAAA;QACA,KAAAtC,SAAA,QAAAJ,MAAA,CAAA2C,MAAA;QACA,KAAAtC,SAAA,QAAAL,MAAA,CAAA4C,MAAA;QACA,KAAAtC,UAAA,QAAAN,MAAA,CAAA6C,OAAA;QACA,KAAAtC,QAAA,QAAAP,MAAA,CAAA8C,KAAA;QACA,KAAAtC,OAAA,GAAA8B,IAAA,CAAAC,KAAA,MAAAvC,MAAA,CAAAwC,QAAA,EAAA3C,IAAA;QACA,KAAAY,WAAA,QAAAT,MAAA,CAAA+C,QAAA;QACA,KAAArC,QAAA,WAAAV,MAAA,CAAA4C,MAAA,CAAAI,KAAA,CACA,GACA,CACA,YAAAhD,MAAA,CAAA4C,MAAA,CAAAI,KAAA;QACA,WAAAC,gBAAA;QACA,MAAAvD,YAAA,MAAAS,kBAAA,EAAA+C,IAAA,CAAAC,EAAA;UACA,KAAAC,WAAA,GAAAD,EAAA;QACA;QACA,WAAAC,WAAA,CAAAvB,OAAA,CACAjB,MAAA,GACAyC,IAAA,GACAH,IAAA,CAAAC,EAAA;UACA,KAAAvC,MAAA,GAAAuC,EAAA;QACA;QACA,WAAAC,WAAA,CAAAvB,OAAA,CACAhC,IAAA,GACAwD,IAAA,GACAH,IAAA,CAAAC,EAAA;UACA,KAAAxC,SAAA,GAAAwC,EAAA;QACA;QACA,WAAAC,WAAA,CAAAvB,OAAA,CACAyB,SAAA,GACAD,IAAA,GACAH,IAAA,CAAAC,EAAA;UACA,KAAAtC,QAAA,GAAAsC,EAAA;QACA;QACA,WAAAC,WAAA,CAAAvB,OAAA,CACA0B,UAAA,GACAF,IAAA,GACAH,IAAA,CAAAC,EAAA;UACA,KAAArC,SAAA,GAAAqC,EAAA;QACA;QAEA,KAAAK,QAAA;MACA,SAAAC,KAAA;QACAvB,OAAA,CAAAC,GAAA,CAAAsB,KAAA;MACA;IACA;IACA,MAAAR,iBAAA;MACA,IAAAS,MAAA;QACAC,UAAA,OAAAxD;MACA;MACA+B,OAAA,CAAAC,GAAA,CAAAuB,MAAA;MACA,MAAA9D,4BAAA,CAAA8D,MAAA,EAAAR,IAAA,CAAAC,EAAA;QACA,KAAApC,eAAA,GAAAoC,EAAA,CAAApD,IAAA,CAAAA,IAAA;MACA;IACA;IACAyD,SAAA;MACA,KAAAtC,IAAA;QACA6B,QAAA;QACAY,UAAA,OAAAxD,kBAAA;QACA2C,KAAA,OAAAV,MAAA,CAAAC,KAAA,CAAAuB,IAAA,CAAAC,KAAA,CAAAC,OAAA,MAAAvD,QAAA;QACAoC,MAAA,EAAAoB,MAAA,MAAA3D,SAAA;QACA4D,YAAA,OAAA3D,SAAA;QACAwC,OAAA,EAAAkB,MAAA,MAAAzD,UAAA;MACA;IACA;IACA,MAAAX,IAAA;MACA;QACA,KAAA4B,SAAA,CAAAX,MAAA,QAAAA,MAAA;QACA,KAAAW,SAAA,CAAAkB,KAAA,QAAAwB,QAAA;QACA,IAAAC,SAAA;QACA,KAAAzC,UAAA;QACA,MAAA9B,GAAA,MAAA4B,SAAA,EAAA2B,IAAA,CAAAC,EAAA;UACAe,SAAA,GAAAf,EAAA;QACA;QACA,IAAAe,SAAA;UACA,KAAAzC,UAAA;UACA,KAAA0C,OAAA;YACAC,KAAA;YACAC,IAAA;YACAC,QAAA;YACAC,MAAA;UACA;UACA,KAAApD,MAAA;UACA,KAAAqD,eAAA;QACA;UACA,KAAA/C,UAAA;UACA,KAAA0C,OAAA;YACAC,KAAA;YACAC,IAAA;YACAC,QAAA;YACAC,MAAA;UACA;UACA,KAAAC,eAAA;QACA;MACA,SAAAf,KAAA;QACA,KAAAhC,UAAA;QACA,KAAA0C,OAAA,CAAAV,KAAA;UACAW,KAAA;UACAE,QAAA;UACAC,MAAA;QACA;MACA;IACA;IACAE,eAAAC,GAAA;MACA,KAAAnD,SAAA,GAAAmD,GAAA;MACA,KAAApD,WAAA;IACA;IACAkD,gBAAAhD,GAAA;MACA,KAAAF,WAAA;MACA,KAAAC,SAAA;MACA,IAAAC,GAAA;QACA,KAAA2C,OAAA;UACAC,KAAA;UACAC,IAAA;UACAC,QAAA;UACAC,MAAA;QACA;MACA;IACA;IACAI,aAAA;MACA,KAAAC,OAAA,CAAAC,IAAA;MACA,KAAAzC,MAAA,CAAA0C,MAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}