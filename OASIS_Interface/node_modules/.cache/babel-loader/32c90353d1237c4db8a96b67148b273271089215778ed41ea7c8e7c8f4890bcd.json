{"ast":null,"code":"import { abortableSource } from 'abortable-iterator';\nimport { CLOSE_TIMEOUT } from './constants.js';\nimport pTimeout from 'p-timeout';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:websockets:socket');\n// Convert a stream into a MultiaddrConnection\n// https://github.com/libp2p/interface-transport#multiaddrconnection\nexport function socketToMaConn(stream, remoteAddr, options) {\n  options = options ?? {};\n  const maConn = {\n    async sink(source) {\n      if (options?.signal != null) {\n        source = abortableSource(source, options.signal);\n      }\n      try {\n        await stream.sink(source);\n      } catch (err) {\n        if (err.type !== 'aborted') {\n          log.error(err);\n        }\n      }\n    },\n    source: options.signal != null ? abortableSource(stream.source, options.signal) : stream.source,\n    remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n    async close() {\n      const start = Date.now();\n      try {\n        await pTimeout(stream.close(), {\n          milliseconds: CLOSE_TIMEOUT\n        });\n      } catch (err) {\n        const {\n          host,\n          port\n        } = maConn.remoteAddr.toOptions();\n        log('timeout closing stream to %s:%s after %dms, destroying it manually', host, port, Date.now() - start);\n        stream.destroy();\n      } finally {\n        maConn.timeline.close = Date.now();\n      }\n    }\n  };\n  stream.socket.addEventListener('close', () => {\n    // In instances where `close` was not explicitly called,\n    // such as an iterable stream ending, ensure we have set the close\n    // timeline\n    if (maConn.timeline.close == null) {\n      maConn.timeline.close = Date.now();\n    }\n  }, {\n    once: true\n  });\n  return maConn;\n}","map":{"version":3,"names":["abortableSource","CLOSE_TIMEOUT","pTimeout","logger","log","socketToMaConn","stream","remoteAddr","options","maConn","sink","source","signal","err","type","error","timeline","open","Date","now","close","start","milliseconds","host","port","toOptions","destroy","socket","addEventListener","once"],"sources":["../../src/socket-to-conn.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,eAAe,QAAQ,oBAAoB;AACpD,SAASC,aAAa,QAAQ,gBAAgB;AAC9C,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,MAAM,QAAQ,gBAAgB;AAMvC,MAAMC,GAAG,GAAGD,MAAM,CAAC,0BAA0B,CAAC;AAM9C;AACA;AACA,OAAM,SAAUE,cAAcA,CAAEC,MAAuB,EAAEC,UAAqB,EAAEC,OAA6B;EAC3GA,OAAO,GAAGA,OAAO,IAAI,EAAE;EAEvB,MAAMC,MAAM,GAAwB;IAClC,MAAMC,IAAIA,CAAEC,MAAM;MAChB,IAAKH,OAAO,EAAEI,MAAM,IAAK,IAAI,EAAE;QAC7BD,MAAM,GAAGX,eAAe,CAACW,MAAM,EAAEH,OAAO,CAACI,MAAM,CAAC;;MAGlD,IAAI;QACF,MAAMN,MAAM,CAACI,IAAI,CAACC,MAAM,CAAC;OAC1B,CAAC,OAAOE,GAAQ,EAAE;QACjB,IAAIA,GAAG,CAACC,IAAI,KAAK,SAAS,EAAE;UAC1BV,GAAG,CAACW,KAAK,CAACF,GAAG,CAAC;;;IAGpB,CAAC;IAEDF,MAAM,EAAGH,OAAO,CAACI,MAAM,IAAI,IAAI,GAAIZ,eAAe,CAACM,MAAM,CAACK,MAAM,EAAEH,OAAO,CAACI,MAAM,CAAC,GAAGN,MAAM,CAACK,MAAM;IAEjGJ,UAAU;IAEVS,QAAQ,EAAE;MAAEC,IAAI,EAAEC,IAAI,CAACC,GAAG;IAAE,CAAE;IAE9B,MAAMC,KAAKA,CAAA;MACT,MAAMC,KAAK,GAAGH,IAAI,CAACC,GAAG,EAAE;MAExB,IAAI;QACF,MAAMjB,QAAQ,CAACI,MAAM,CAACc,KAAK,EAAE,EAAE;UAC7BE,YAAY,EAAErB;SACf,CAAC;OACH,CAAC,OAAOY,GAAG,EAAE;QACZ,MAAM;UAAEU,IAAI;UAAEC;QAAI,CAAE,GAAGf,MAAM,CAACF,UAAU,CAACkB,SAAS,EAAE;QACpDrB,GAAG,CAAC,oEAAoE,EACtEmB,IAAI,EAAEC,IAAI,EAAEN,IAAI,CAACC,GAAG,EAAE,GAAGE,KAAK,CAAC;QAEjCf,MAAM,CAACoB,OAAO,EAAE;OACjB,SAAS;QACRjB,MAAM,CAACO,QAAQ,CAACI,KAAK,GAAGF,IAAI,CAACC,GAAG,EAAE;;IAEtC;GACD;EAEDb,MAAM,CAACqB,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAK;IAC3C;IACA;IACA;IACA,IAAInB,MAAM,CAACO,QAAQ,CAACI,KAAK,IAAI,IAAI,EAAE;MACjCX,MAAM,CAACO,QAAQ,CAACI,KAAK,GAAGF,IAAI,CAACC,GAAG,EAAE;;EAEtC,CAAC,EAAE;IAAEU,IAAI,EAAE;EAAI,CAAE,CAAC;EAElB,OAAOpB,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}