{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport errCode from 'err-code';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath(context, path, options);\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks);\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE');\n        }\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n        }\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  }\n  return withTimeoutOption(mfsRead);\n}","map":{"version":3,"names":["exporter","mergeOpts","toMfsPath","errCode","withTimeoutOption","mergeOptions","bind","ignoreUndefined","defaultOptions","offset","length","Infinity","createRead","context","mfsRead","path","options","Symbol","asyncIterator","read","mfsPath","result","repo","blocks","type","Error","content","buf"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/read.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,SAAS,MAAM,eAAe;AACrC,SAASC,SAAS,QAAQ,wBAAwB;AAClD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,iBAAiB,QAAQ,qCAAqC;AAEvE,MAAMC,YAAY,GAAGJ,SAAS,CAACK,IAAI,CAAC;EAAEC,eAAe,EAAE;AAAK,CAAC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAEC;AACV,CAAC;;AAED;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAEC,OAAO,EAAE;EACnC;AACF;AACA;EACE,SAASC,OAAOA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC;IACAA,OAAO,GAAGX,YAAY,CAACG,cAAc,EAAEQ,OAAO,CAAC;IAE/C,OAAO;MACL,CAACC,MAAM,CAACC,aAAa,GAAG,gBAAiBC,IAAIA,CAAA,EAAI;QAC/C,MAAMC,OAAO,GAAG,MAAMlB,SAAS,CAACW,OAAO,EAAEE,IAAI,EAAEC,OAAO,CAAC;QACvD,MAAMK,MAAM,GAAG,MAAMrB,QAAQ,CAACoB,OAAO,CAACA,OAAO,EAAEP,OAAO,CAACS,IAAI,CAACC,MAAM,CAAC;QAEnE,IAAIF,MAAM,CAACG,IAAI,KAAK,MAAM,IAAIH,MAAM,CAACG,IAAI,KAAK,KAAK,EAAE;UACnD,MAAMrB,OAAO,CAAC,IAAIsB,KAAK,CAAE,GAAEV,IAAK,8BAA6B,CAAC,EAAE,cAAc,CAAC;QACjF;QAEA,IAAI,CAACM,MAAM,CAACK,OAAO,EAAE;UACnB,MAAMvB,OAAO,CAAC,IAAIsB,KAAK,CAAE,sCAAqCV,IAAK,EAAC,CAAC,EAAE,gBAAgB,CAAC;QAC1F;QAEA,WAAW,MAAMY,GAAG,IAAIN,MAAM,CAACK,OAAO,CAAC;UACrCjB,MAAM,EAAEO,OAAO,CAACP,MAAM;UACtBC,MAAM,EAAEM,OAAO,CAACN;QAClB,CAAC,CAAC,EAAE;UACF,MAAMiB,GAAG;QACX;MACF;IACF,CAAC;EACH;EAEA,OAAOvB,iBAAiB,CAACU,OAAO,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}