{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const Peer = $root.Peer = (() => {\n  /**\n   * Properties of a Peer.\n   * @exports IPeer\n   * @interface IPeer\n   * @property {Array.<IAddress>|null} [addresses] Peer addresses\n   * @property {Array.<string>|null} [protocols] Peer protocols\n   * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n   * @property {Uint8Array|null} [pubKey] Peer pubKey\n   * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n   */\n\n  /**\n   * Constructs a new Peer.\n   * @exports Peer\n   * @classdesc Represents a Peer.\n   * @implements IPeer\n   * @constructor\n   * @param {IPeer=} [p] Properties to set\n   */\n  function Peer(p) {\n    this.addresses = [];\n    this.protocols = [];\n    this.metadata = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Peer addresses.\n   * @member {Array.<IAddress>} addresses\n   * @memberof Peer\n   * @instance\n   */\n  Peer.prototype.addresses = $util.emptyArray;\n\n  /**\n   * Peer protocols.\n   * @member {Array.<string>} protocols\n   * @memberof Peer\n   * @instance\n   */\n  Peer.prototype.protocols = $util.emptyArray;\n\n  /**\n   * Peer metadata.\n   * @member {Array.<IMetadata>} metadata\n   * @memberof Peer\n   * @instance\n   */\n  Peer.prototype.metadata = $util.emptyArray;\n\n  /**\n   * Peer pubKey.\n   * @member {Uint8Array|null|undefined} pubKey\n   * @memberof Peer\n   * @instance\n   */\n  Peer.prototype.pubKey = null;\n\n  /**\n   * Peer peerRecordEnvelope.\n   * @member {Uint8Array|null|undefined} peerRecordEnvelope\n   * @memberof Peer\n   * @instance\n   */\n  Peer.prototype.peerRecordEnvelope = null;\n\n  // OneOf field names bound to virtual getters and setters\n  let $oneOfFields;\n\n  /**\n   * Peer _pubKey.\n   * @member {\"pubKey\"|undefined} _pubKey\n   * @memberof Peer\n   * @instance\n   */\n  Object.defineProperty(Peer.prototype, \"_pubKey\", {\n    get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n\n  /**\n   * Peer _peerRecordEnvelope.\n   * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n   * @memberof Peer\n   * @instance\n   */\n  Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n    get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n\n  /**\n   * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n   * @function encode\n   * @memberof Peer\n   * @static\n   * @param {IPeer} m Peer message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Peer.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.addresses != null && m.addresses.length) {\n      for (var i = 0; i < m.addresses.length; ++i) $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n    }\n    if (m.protocols != null && m.protocols.length) {\n      for (var i = 0; i < m.protocols.length; ++i) w.uint32(18).string(m.protocols[i]);\n    }\n    if (m.metadata != null && m.metadata.length) {\n      for (var i = 0; i < m.metadata.length; ++i) $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n    }\n    if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\")) w.uint32(34).bytes(m.pubKey);\n    if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\")) w.uint32(42).bytes(m.peerRecordEnvelope);\n    return w;\n  };\n\n  /**\n   * Decodes a Peer message from the specified reader or buffer.\n   * @function decode\n   * @memberof Peer\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Peer} Peer\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Peer.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Peer();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          if (!(m.addresses && m.addresses.length)) m.addresses = [];\n          m.addresses.push($root.Address.decode(r, r.uint32()));\n          break;\n        case 2:\n          if (!(m.protocols && m.protocols.length)) m.protocols = [];\n          m.protocols.push(r.string());\n          break;\n        case 3:\n          if (!(m.metadata && m.metadata.length)) m.metadata = [];\n          m.metadata.push($root.Metadata.decode(r, r.uint32()));\n          break;\n        case 4:\n          m.pubKey = r.bytes();\n          break;\n        case 5:\n          m.peerRecordEnvelope = r.bytes();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Peer\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Peer} Peer\n   */\n  Peer.fromObject = function fromObject(d) {\n    if (d instanceof $root.Peer) return d;\n    var m = new $root.Peer();\n    if (d.addresses) {\n      if (!Array.isArray(d.addresses)) throw TypeError(\".Peer.addresses: array expected\");\n      m.addresses = [];\n      for (var i = 0; i < d.addresses.length; ++i) {\n        if (typeof d.addresses[i] !== \"object\") throw TypeError(\".Peer.addresses: object expected\");\n        m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n      }\n    }\n    if (d.protocols) {\n      if (!Array.isArray(d.protocols)) throw TypeError(\".Peer.protocols: array expected\");\n      m.protocols = [];\n      for (var i = 0; i < d.protocols.length; ++i) {\n        m.protocols[i] = String(d.protocols[i]);\n      }\n    }\n    if (d.metadata) {\n      if (!Array.isArray(d.metadata)) throw TypeError(\".Peer.metadata: array expected\");\n      m.metadata = [];\n      for (var i = 0; i < d.metadata.length; ++i) {\n        if (typeof d.metadata[i] !== \"object\") throw TypeError(\".Peer.metadata: object expected\");\n        m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n      }\n    }\n    if (d.pubKey != null) {\n      if (typeof d.pubKey === \"string\") $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);else if (d.pubKey.length) m.pubKey = d.pubKey;\n    }\n    if (d.peerRecordEnvelope != null) {\n      if (typeof d.peerRecordEnvelope === \"string\") $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);else if (d.peerRecordEnvelope.length) m.peerRecordEnvelope = d.peerRecordEnvelope;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a Peer message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Peer\n   * @static\n   * @param {Peer} m Peer\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Peer.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.arrays || o.defaults) {\n      d.addresses = [];\n      d.protocols = [];\n      d.metadata = [];\n    }\n    if (m.addresses && m.addresses.length) {\n      d.addresses = [];\n      for (var j = 0; j < m.addresses.length; ++j) {\n        d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n      }\n    }\n    if (m.protocols && m.protocols.length) {\n      d.protocols = [];\n      for (var j = 0; j < m.protocols.length; ++j) {\n        d.protocols[j] = m.protocols[j];\n      }\n    }\n    if (m.metadata && m.metadata.length) {\n      d.metadata = [];\n      for (var j = 0; j < m.metadata.length; ++j) {\n        d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n      }\n    }\n    if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n      d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n      if (o.oneofs) d._pubKey = \"pubKey\";\n    }\n    if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n      d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n      if (o.oneofs) d._peerRecordEnvelope = \"peerRecordEnvelope\";\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Peer to JSON.\n   * @function toJSON\n   * @memberof Peer\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Peer.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Peer;\n})();\nexport const Address = $root.Address = (() => {\n  /**\n   * Properties of an Address.\n   * @exports IAddress\n   * @interface IAddress\n   * @property {Uint8Array|null} [multiaddr] Address multiaddr\n   * @property {boolean|null} [isCertified] Address isCertified\n   */\n\n  /**\n   * Constructs a new Address.\n   * @exports Address\n   * @classdesc Represents an Address.\n   * @implements IAddress\n   * @constructor\n   * @param {IAddress=} [p] Properties to set\n   */\n  function Address(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Address multiaddr.\n   * @member {Uint8Array} multiaddr\n   * @memberof Address\n   * @instance\n   */\n  Address.prototype.multiaddr = $util.newBuffer([]);\n\n  /**\n   * Address isCertified.\n   * @member {boolean|null|undefined} isCertified\n   * @memberof Address\n   * @instance\n   */\n  Address.prototype.isCertified = null;\n\n  // OneOf field names bound to virtual getters and setters\n  let $oneOfFields;\n\n  /**\n   * Address _isCertified.\n   * @member {\"isCertified\"|undefined} _isCertified\n   * @memberof Address\n   * @instance\n   */\n  Object.defineProperty(Address.prototype, \"_isCertified\", {\n    get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n    set: $util.oneOfSetter($oneOfFields)\n  });\n\n  /**\n   * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n   * @function encode\n   * @memberof Address\n   * @static\n   * @param {IAddress} m Address message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Address.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\")) w.uint32(10).bytes(m.multiaddr);\n    if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\")) w.uint32(16).bool(m.isCertified);\n    return w;\n  };\n\n  /**\n   * Decodes an Address message from the specified reader or buffer.\n   * @function decode\n   * @memberof Address\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Address} Address\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Address.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Address();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.multiaddr = r.bytes();\n          break;\n        case 2:\n          m.isCertified = r.bool();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates an Address message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Address\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Address} Address\n   */\n  Address.fromObject = function fromObject(d) {\n    if (d instanceof $root.Address) return d;\n    var m = new $root.Address();\n    if (d.multiaddr != null) {\n      if (typeof d.multiaddr === \"string\") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);else if (d.multiaddr.length) m.multiaddr = d.multiaddr;\n    }\n    if (d.isCertified != null) {\n      m.isCertified = Boolean(d.isCertified);\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from an Address message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Address\n   * @static\n   * @param {Address} m Address\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Address.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      if (o.bytes === String) d.multiaddr = \"\";else {\n        d.multiaddr = [];\n        if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);\n      }\n    }\n    if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n      d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n    }\n    if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n      d.isCertified = m.isCertified;\n      if (o.oneofs) d._isCertified = \"isCertified\";\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Address to JSON.\n   * @function toJSON\n   * @memberof Address\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Address.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Address;\n})();\nexport const Metadata = $root.Metadata = (() => {\n  /**\n   * Properties of a Metadata.\n   * @exports IMetadata\n   * @interface IMetadata\n   * @property {string|null} [key] Metadata key\n   * @property {Uint8Array|null} [value] Metadata value\n   */\n\n  /**\n   * Constructs a new Metadata.\n   * @exports Metadata\n   * @classdesc Represents a Metadata.\n   * @implements IMetadata\n   * @constructor\n   * @param {IMetadata=} [p] Properties to set\n   */\n  function Metadata(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Metadata key.\n   * @member {string} key\n   * @memberof Metadata\n   * @instance\n   */\n  Metadata.prototype.key = \"\";\n\n  /**\n   * Metadata value.\n   * @member {Uint8Array} value\n   * @memberof Metadata\n   * @instance\n   */\n  Metadata.prototype.value = $util.newBuffer([]);\n\n  /**\n   * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n   * @function encode\n   * @memberof Metadata\n   * @static\n   * @param {IMetadata} m Metadata message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metadata.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.key != null && Object.hasOwnProperty.call(m, \"key\")) w.uint32(10).string(m.key);\n    if (m.value != null && Object.hasOwnProperty.call(m, \"value\")) w.uint32(18).bytes(m.value);\n    return w;\n  };\n\n  /**\n   * Decodes a Metadata message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metadata\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Metadata} Metadata\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metadata.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Metadata();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.key = r.string();\n          break;\n        case 2:\n          m.value = r.bytes();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metadata\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Metadata} Metadata\n   */\n  Metadata.fromObject = function fromObject(d) {\n    if (d instanceof $root.Metadata) return d;\n    var m = new $root.Metadata();\n    if (d.key != null) {\n      m.key = String(d.key);\n    }\n    if (d.value != null) {\n      if (typeof d.value === \"string\") $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);else if (d.value.length) m.value = d.value;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metadata\n   * @static\n   * @param {Metadata} m Metadata\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metadata.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      d.key = \"\";\n      if (o.bytes === String) d.value = \"\";else {\n        d.value = [];\n        if (o.bytes !== Array) d.value = $util.newBuffer(d.value);\n      }\n    }\n    if (m.key != null && m.hasOwnProperty(\"key\")) {\n      d.key = m.key;\n    }\n    if (m.value != null && m.hasOwnProperty(\"value\")) {\n      d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Metadata to JSON.\n   * @function toJSON\n   * @memberof Metadata\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metadata.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Metadata;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Peer","p","addresses","protocols","metadata","ks","Object","keys","i","length","prototype","emptyArray","pubKey","peerRecordEnvelope","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","encode","m","w","create","Address","uint32","fork","ldelim","string","Metadata","hasOwnProperty","call","bytes","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","Array","isArray","TypeError","String","base64","newBuffer","toObject","o","arrays","defaults","j","slice","oneofs","_pubKey","_peerRecordEnvelope","toJSON","constructor","toJSONOptions","multiaddr","isCertified","bool","Boolean","_isCertified","key","value","default"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Peer = $root.Peer = (() => {\n\n    /**\n     * Properties of a Peer.\n     * @exports IPeer\n     * @interface IPeer\n     * @property {Array.<IAddress>|null} [addresses] Peer addresses\n     * @property {Array.<string>|null} [protocols] Peer protocols\n     * @property {Array.<IMetadata>|null} [metadata] Peer metadata\n     * @property {Uint8Array|null} [pubKey] Peer pubKey\n     * @property {Uint8Array|null} [peerRecordEnvelope] Peer peerRecordEnvelope\n     */\n\n    /**\n     * Constructs a new Peer.\n     * @exports Peer\n     * @classdesc Represents a Peer.\n     * @implements IPeer\n     * @constructor\n     * @param {IPeer=} [p] Properties to set\n     */\n    function Peer(p) {\n        this.addresses = [];\n        this.protocols = [];\n        this.metadata = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Peer addresses.\n     * @member {Array.<IAddress>} addresses\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Peer protocols.\n     * @member {Array.<string>} protocols\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.protocols = $util.emptyArray;\n\n    /**\n     * Peer metadata.\n     * @member {Array.<IMetadata>} metadata\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.metadata = $util.emptyArray;\n\n    /**\n     * Peer pubKey.\n     * @member {Uint8Array|null|undefined} pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.pubKey = null;\n\n    /**\n     * Peer peerRecordEnvelope.\n     * @member {Uint8Array|null|undefined} peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Peer.prototype.peerRecordEnvelope = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Peer _pubKey.\n     * @member {\"pubKey\"|undefined} _pubKey\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_pubKey\", {\n        get: $util.oneOfGetter($oneOfFields = [\"pubKey\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Peer _peerRecordEnvelope.\n     * @member {\"peerRecordEnvelope\"|undefined} _peerRecordEnvelope\n     * @memberof Peer\n     * @instance\n     */\n    Object.defineProperty(Peer.prototype, \"_peerRecordEnvelope\", {\n        get: $util.oneOfGetter($oneOfFields = [\"peerRecordEnvelope\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Peer message. Does not implicitly {@link Peer.verify|verify} messages.\n     * @function encode\n     * @memberof Peer\n     * @static\n     * @param {IPeer} m Peer message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Peer.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.Address.encode(m.addresses[i], w.uint32(10).fork()).ldelim();\n        }\n        if (m.protocols != null && m.protocols.length) {\n            for (var i = 0; i < m.protocols.length; ++i)\n                w.uint32(18).string(m.protocols[i]);\n        }\n        if (m.metadata != null && m.metadata.length) {\n            for (var i = 0; i < m.metadata.length; ++i)\n                $root.Metadata.encode(m.metadata[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\"))\n            w.uint32(34).bytes(m.pubKey);\n        if (m.peerRecordEnvelope != null && Object.hasOwnProperty.call(m, \"peerRecordEnvelope\"))\n            w.uint32(42).bytes(m.peerRecordEnvelope);\n        return w;\n    };\n\n    /**\n     * Decodes a Peer message from the specified reader or buffer.\n     * @function decode\n     * @memberof Peer\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Peer} Peer\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Peer.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Peer();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.Address.decode(r, r.uint32()));\n                break;\n            case 2:\n                if (!(m.protocols && m.protocols.length))\n                    m.protocols = [];\n                m.protocols.push(r.string());\n                break;\n            case 3:\n                if (!(m.metadata && m.metadata.length))\n                    m.metadata = [];\n                m.metadata.push($root.Metadata.decode(r, r.uint32()));\n                break;\n            case 4:\n                m.pubKey = r.bytes();\n                break;\n            case 5:\n                m.peerRecordEnvelope = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Peer message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Peer\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Peer} Peer\n     */\n    Peer.fromObject = function fromObject(d) {\n        if (d instanceof $root.Peer)\n            return d;\n        var m = new $root.Peer();\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".Peer.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".Peer.addresses: object expected\");\n                m.addresses[i] = $root.Address.fromObject(d.addresses[i]);\n            }\n        }\n        if (d.protocols) {\n            if (!Array.isArray(d.protocols))\n                throw TypeError(\".Peer.protocols: array expected\");\n            m.protocols = [];\n            for (var i = 0; i < d.protocols.length; ++i) {\n                m.protocols[i] = String(d.protocols[i]);\n            }\n        }\n        if (d.metadata) {\n            if (!Array.isArray(d.metadata))\n                throw TypeError(\".Peer.metadata: array expected\");\n            m.metadata = [];\n            for (var i = 0; i < d.metadata.length; ++i) {\n                if (typeof d.metadata[i] !== \"object\")\n                    throw TypeError(\".Peer.metadata: object expected\");\n                m.metadata[i] = $root.Metadata.fromObject(d.metadata[i]);\n            }\n        }\n        if (d.pubKey != null) {\n            if (typeof d.pubKey === \"string\")\n                $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);\n            else if (d.pubKey.length)\n                m.pubKey = d.pubKey;\n        }\n        if (d.peerRecordEnvelope != null) {\n            if (typeof d.peerRecordEnvelope === \"string\")\n                $util.base64.decode(d.peerRecordEnvelope, m.peerRecordEnvelope = $util.newBuffer($util.base64.length(d.peerRecordEnvelope)), 0);\n            else if (d.peerRecordEnvelope.length)\n                m.peerRecordEnvelope = d.peerRecordEnvelope;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Peer message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Peer\n     * @static\n     * @param {Peer} m Peer\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Peer.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n            d.protocols = [];\n            d.metadata = [];\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.Address.toObject(m.addresses[j], o);\n            }\n        }\n        if (m.protocols && m.protocols.length) {\n            d.protocols = [];\n            for (var j = 0; j < m.protocols.length; ++j) {\n                d.protocols[j] = m.protocols[j];\n            }\n        }\n        if (m.metadata && m.metadata.length) {\n            d.metadata = [];\n            for (var j = 0; j < m.metadata.length; ++j) {\n                d.metadata[j] = $root.Metadata.toObject(m.metadata[j], o);\n            }\n        }\n        if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n            d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n            if (o.oneofs)\n                d._pubKey = \"pubKey\";\n        }\n        if (m.peerRecordEnvelope != null && m.hasOwnProperty(\"peerRecordEnvelope\")) {\n            d.peerRecordEnvelope = o.bytes === String ? $util.base64.encode(m.peerRecordEnvelope, 0, m.peerRecordEnvelope.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerRecordEnvelope) : m.peerRecordEnvelope;\n            if (o.oneofs)\n                d._peerRecordEnvelope = \"peerRecordEnvelope\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Peer to JSON.\n     * @function toJSON\n     * @memberof Peer\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Peer.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Peer;\n})();\n\nexport const Address = $root.Address = (() => {\n\n    /**\n     * Properties of an Address.\n     * @exports IAddress\n     * @interface IAddress\n     * @property {Uint8Array|null} [multiaddr] Address multiaddr\n     * @property {boolean|null} [isCertified] Address isCertified\n     */\n\n    /**\n     * Constructs a new Address.\n     * @exports Address\n     * @classdesc Represents an Address.\n     * @implements IAddress\n     * @constructor\n     * @param {IAddress=} [p] Properties to set\n     */\n    function Address(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Address multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Address isCertified.\n     * @member {boolean|null|undefined} isCertified\n     * @memberof Address\n     * @instance\n     */\n    Address.prototype.isCertified = null;\n\n    // OneOf field names bound to virtual getters and setters\n    let $oneOfFields;\n\n    /**\n     * Address _isCertified.\n     * @member {\"isCertified\"|undefined} _isCertified\n     * @memberof Address\n     * @instance\n     */\n    Object.defineProperty(Address.prototype, \"_isCertified\", {\n        get: $util.oneOfGetter($oneOfFields = [\"isCertified\"]),\n        set: $util.oneOfSetter($oneOfFields)\n    });\n\n    /**\n     * Encodes the specified Address message. Does not implicitly {@link Address.verify|verify} messages.\n     * @function encode\n     * @memberof Address\n     * @static\n     * @param {IAddress} m Address message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Address.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n            w.uint32(10).bytes(m.multiaddr);\n        if (m.isCertified != null && Object.hasOwnProperty.call(m, \"isCertified\"))\n            w.uint32(16).bool(m.isCertified);\n        return w;\n    };\n\n    /**\n     * Decodes an Address message from the specified reader or buffer.\n     * @function decode\n     * @memberof Address\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Address} Address\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Address.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Address();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.multiaddr = r.bytes();\n                break;\n            case 2:\n                m.isCertified = r.bool();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Address message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Address\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Address} Address\n     */\n    Address.fromObject = function fromObject(d) {\n        if (d instanceof $root.Address)\n            return d;\n        var m = new $root.Address();\n        if (d.multiaddr != null) {\n            if (typeof d.multiaddr === \"string\")\n                $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n            else if (d.multiaddr.length)\n                m.multiaddr = d.multiaddr;\n        }\n        if (d.isCertified != null) {\n            m.isCertified = Boolean(d.isCertified);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Address message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Address\n     * @static\n     * @param {Address} m Address\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Address.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.multiaddr = \"\";\n            else {\n                d.multiaddr = [];\n                if (o.bytes !== Array)\n                    d.multiaddr = $util.newBuffer(d.multiaddr);\n            }\n        }\n        if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n            d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n        }\n        if (m.isCertified != null && m.hasOwnProperty(\"isCertified\")) {\n            d.isCertified = m.isCertified;\n            if (o.oneofs)\n                d._isCertified = \"isCertified\";\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Address to JSON.\n     * @function toJSON\n     * @memberof Address\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Address.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Address;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [key] Metadata key\n     * @property {Uint8Array|null} [value] Metadata value\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata key.\n     * @member {string} key\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.key = \"\";\n\n    /**\n     * Metadata value.\n     * @member {Uint8Array} value\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.value = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.key != null && Object.hasOwnProperty.call(m, \"key\"))\n            w.uint32(10).string(m.key);\n        if (m.value != null && Object.hasOwnProperty.call(m, \"value\"))\n            w.uint32(18).bytes(m.value);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.key = r.string();\n                break;\n            case 2:\n                m.value = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.key != null) {\n            m.key = String(d.key);\n        }\n        if (d.value != null) {\n            if (typeof d.value === \"string\")\n                $util.base64.decode(d.value, m.value = $util.newBuffer($util.base64.length(d.value)), 0);\n            else if (d.value.length)\n                m.value = d.value;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.key = \"\";\n            if (o.bytes === String)\n                d.value = \"\";\n            else {\n                d.value = [];\n                if (o.bytes !== Array)\n                    d.value = $util.newBuffer(d.value);\n            }\n        }\n        if (m.key != null && m.hasOwnProperty(\"key\")) {\n            d.key = m.key;\n        }\n        if (m.value != null && m.hasOwnProperty(\"value\")) {\n            d.value = o.bytes === String ? $util.base64.encode(m.value, 0, m.value.length) : o.bytes === Array ? Array.prototype.slice.call(m.value) : m.value;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}