{"ast":null,"code":"import * as THREE from \"three\";\nimport TWEEN from \"@tweenjs/tween.js\";\nimport screenfull from \"screenfull\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport GUI from \"three/examples/jsm/libs/lil-gui.module.min\";\nimport Stats from \"three/examples/jsm/libs/stats.module.js\";\nexport default {\n  props: {\n    modelPath: {\n      type: String,\n      default: \"\"\n    }\n  },\n  data() {\n    return {\n      renderer: {},\n      scene: null,\n      camera: {},\n      animateId: null,\n      orbitControls: {},\n      modelCanvas: {},\n      ambient: {},\n      loader: {},\n      loadingManager: {},\n      stats: {},\n      gui: {},\n      modelGroup: new THREE.Group(),\n      modelCache: {},\n      dracoLoader: new DRACOLoader(),\n      loading: false,\n      loadingProgress: 0,\n      isModelLoading: false\n    };\n  },\n  watch: {},\n  mounted() {\n    this.initModel();\n    this.$emit(\"initModel\", this.renderModel);\n  },\n  methods: {\n    initModel() {\n      // this.initGui();\n      // 初始化场景\n      this.initScene();\n      // 初始化渲染\n      this.initRender();\n      // 初始化相机\n      this.initCamera();\n      // 初始化轨道控制器\n      this.initOrbitControls();\n      // 初始化加载器\n      this.initDdacoLoader();\n      // this.initStats();\n      // 初始化灯光\n      this.initLight();\n    },\n    // ========================================\n    initScene() {\n      this.scene = new THREE.Scene();\n    },\n    // ========================================\n    initCamera() {\n      this.camera = new THREE.PerspectiveCamera(60, this.modelCanvas.offsetWidth / this.modelCanvas.offsetHeight, 0.1, 3000);\n      this.onWindowResize();\n      //监听窗口大小改变事件，并调用onWindowResize函数\n      window.addEventListener(\"resize\", this.onWindowResize, false);\n    },\n    onWindowResize() {\n      // 更新修改相机比例\n      this.camera.aspect = this.modelCanvas.offsetWidth / this.modelCanvas.offsetHeight;\n\n      // 更新摄像机的投影矩阵\n      this.camera.updateProjectionMatrix();\n      // 更新画布像素比\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      this.renderer.setSize(this.modelCanvas.offsetWidth, this.modelCanvas.offsetHeight);\n    },\n    // ========================================\n    initRender() {\n      this.renderer = new THREE.WebGLRenderer({\n        // alpha: true,\n        antialias: true\n      });\n      // 设置渲染器的背景色\n      // this.renderer.setClearColor(0xf8f3e9);\n      if (this.$store.state.Theme) {\n        this.renderer.setClearColor(0xf8f3e9);\n      } else {\n        // this.renderer.setClearColor('#161621');\n        this.renderer.setClearColor(\"white\");\n      }\n\n      // 设置渲染器的像素比\n      this.renderer.setPixelRatio(window.devicePixelRatio);\n      // 获取模型canvas\n      this.modelCanvas = this.$refs.modelCanvas;\n      // 将渲染器的dom添加到模型canvas中\n      this.modelCanvas.appendChild(this.renderer.domElement);\n      window.onresize = () => {\n        this.isScreenFull = screenfull.isFullscreen;\n        this.onWindowResize();\n      };\n    },\n    disposeRendererAndClearScene() {\n      this.removerAnimate();\n      this.renderer.dispose();\n      this.$notify({\n        title: \"停止渲染\",\n        type: \"success\",\n        position: \"top-left\",\n        offset: 200\n      });\n    },\n    continueRenderer() {\n      if (this.animateId == null) {\n        this.animate();\n      } else {\n        this.$notify({\n          title: \"模型已经渲染\",\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    animate() {\n      // this.stats.update();\n      TWEEN.update();\n      // 渲染\n      if (this.orbitControls != null) {\n        this.orbitControls.update();\n      }\n      if (this.modelGroup.children.length != 0) {\n        this.modelGroup.rotation.y += 0.005;\n      }\n      this.renderer.render(this.scene, this.camera);\n      this.animateId = requestAnimationFrame(this.animate);\n    },\n    removerAnimate() {\n      if (this.animateId) {\n        cancelAnimationFrame(this.animateId);\n        this.animateId = null;\n      }\n    },\n    // ========================================\n    initOrbitControls() {\n      this.orbitControls = new OrbitControls(this.camera, this.renderer.domElement);\n      // 允许平移\n      this.orbitControls.enablePan = true;\n    },\n    // ========================================\n    initDdacoLoader() {\n      this.dracoLoader.setDecoderPath(\"/draco/gltf/\");\n      // 设置解码器类型为js\n      this.dracoLoader.setDecoderConfig({\n        type: \"js\"\n      });\n      // 预加载解码器\n      this.dracoLoader.preload();\n    },\n    // ========================================\n    initStats() {\n      // 创建性能监视器\n      this.stats = new Stats();\n      // 设置监视器面板，传入面板id（0: fps, 1: ms, 2: mb）\n      this.stats.setMode(0);\n      // 将监视器添加到页面中\n      this.modelCanvas.appendChild(this.stats.domElement);\n    },\n    // ========================================\n    initGui() {\n      this.gui = new GUI();\n    },\n    // ========================================\n    initLight() {\n      // 创建一个点光源\n      var point = new THREE.PointLight(0xffffff, 1); //光源设置\n      point.position.set(300, 400, 200); //点光源位置\n      this.scene.add(point); //将光源添加到场景中\n\n      // 创建一个环境光\n      var ambient = new THREE.AmbientLight(0xffffff, 1); //环境光\n      ambient.position.set(200, 300, 200); //点光源位置\n      this.scene.add(ambient);\n\n      // 创建一个方向光\n      var directionalLight = new THREE.DirectionalLight(0xffffff, 1); //方向光\n      directionalLight.position.set(150, 300, 200);\n      // this.scene.add(new THREE.DirectionalLightHelper(directionalLight));\n      this.scene.add(directionalLight);\n\n      // 创建一个聚光灯\n      var spotLight = new THREE.SpotLight(0xffffff, 1); //聚光灯\n      spotLight.position.set(150, 200, 200);\n      // this.scene.add(new THREE.DirectionalLightHelper(spotLight));\n      this.scene.add(spotLight);\n\n      // // 设置坐标系\n      // const axesHelper = new THREE.AxesHelper(50);\n      // this.scene.add(axesHelper); // 坐标系\n    },\n\n    // ========================================\n    renderModel() {\n      if (this.scene.children[4] != undefined) {\n        this.scene.children[4].children = [];\n      }\n      console.log(this.scene);\n      this.removerAnimate();\n      // 动画\n      this.animate();\n      try {\n        this.loading = true;\n        this.loadingManager = new THREE.LoadingManager();\n        // 创建GLTFLoader实例\n        this.loader = new GLTFLoader(this.loadingManager);\n        // 设置加载器\n        this.loader.setDRACOLoader(this.dracoLoader);\n\n        // 加载模型\n        this.loader.load(this.modelPath, gltf => {\n          // 克隆模型\n          let cloneModel = gltf.scene.clone();\n          this.modelCache[cloneModel.modelName] = cloneModel;\n          // 设置克隆模型的位置\n\n          // 遍历场景中的模型\n          this.scene.traverse(function (child) {\n            // 如果模型是网格\n            if (child.isMesh) {\n              // 设置模型的阴影属性\n              child.castShadow = true;\n              child.receiveShadow = true;\n            }\n          });\n          this.changeCamera(cloneModel);\n        }, xhr => {\n          this.loadingProgress = parseInt(xhr.loaded / xhr.total * 100);\n          if (this.loadingProgress == 100) {\n            this.loading = false;\n            this.isModelLoading = true;\n          }\n        });\n      } catch (error) {\n        this.$notify.error({\n          title: \"模型加载失败\",\n          position: \"top-left\",\n          offset: 200\n        });\n        console.error(error);\n        this.loading = false;\n        this.isModelLoading = false;\n      }\n    },\n    changeCamera(cloneModel) {\n      this.modelGroup.add(cloneModel);\n      // 获取模型的边界框\n      const box = new THREE.Box3().setFromObject(this.modelGroup);\n      // 获取模型的尺寸\n      const size = new THREE.Vector3();\n      box.getSize(size);\n\n      // 获取模型的宽度\n      const width = size.x;\n\n      // 获取模型的高度\n      const height = size.y;\n\n      // 获取模型的深度\n      const depth = size.z;\n      // 获取模型的最大尺寸\n      let max = width > height ? width : height;\n      max = max > depth ? max : depth;\n      // 计算模型的缩放比例\n      let scale = 1;\n      this.cameraScale = max;\n      // if (max < 1) {\n      //   scale =\n      //     (width + 1) * (height + 1) * (depth + 1) * this.camera.fov  ;\n      //   this.cameraScale =\n      //     (width + 1) *\n      //     (height + 1) *\n      //     (depth + 1) *\n      //      this.camera.fov ;\n      // }\n      // cloneModel.position.set(0, -7, 0);\n      // 缩放模型\n      this.tweenScale(this.modelGroup, 0.01, scale);\n      // 旋转模型\n      this.tweenRotation(this.modelGroup, 2, 0);\n      // 设置相机的坐标\n      this.camera.position.set(0, max / 2 + max / 3, max);\n      this.orbitControls.target = new THREE.Vector3(0, max / 2 + max / 15, 0);\n\n      // 更新相机的投影矩阵\n      this.camera.updateProjectionMatrix();\n      // 添加模型\n      this.scene.add(this.modelGroup);\n    },\n    tweenScale(model, oldScale, newScale) {\n      model.scale.set(oldScale, oldScale, oldScale);\n      // 创建一个Tween动画，让model的scale从oldScale变为newScale，动画时长为1000毫秒，使用quadratic.inout缓动函数\n      new TWEEN.Tween(model.scale).to({\n        x: newScale,\n        y: newScale,\n        z: newScale\n      }, 1000).easing(TWEEN.Easing.Quadratic.InOut).start();\n    },\n    tweenRotation(model, oldRotation, newRotation) {\n      model.rotation.y = -Math.PI / oldRotation;\n      // 创建一个新的Tween，设置模型旋转的y轴角度，从当前角度到新的角度，持续550毫秒，使用二次函数插值\n      new TWEEN.Tween(model.rotation).to({\n        y: newRotation\n      }, 1100).easing(TWEEN.Easing.Quadratic.InOut).start();\n    },\n    // ========================================\n    toggleFullScreen() {\n      if (screenfull.isEnabled) {\n        screenfull.toggle(this.$refs.modelCanvas);\n      }\n    }\n    // ========================================\n  }\n};","map":{"version":3,"names":["THREE","TWEEN","screenfull","OrbitControls","DRACOLoader","GLTFLoader","GUI","Stats","props","modelPath","type","String","default","data","renderer","scene","camera","animateId","orbitControls","modelCanvas","ambient","loader","loadingManager","stats","gui","modelGroup","Group","modelCache","dracoLoader","loading","loadingProgress","isModelLoading","watch","mounted","initModel","$emit","renderModel","methods","initScene","initRender","initCamera","initOrbitControls","initDdacoLoader","initLight","Scene","PerspectiveCamera","offsetWidth","offsetHeight","onWindowResize","window","addEventListener","aspect","updateProjectionMatrix","setPixelRatio","devicePixelRatio","setSize","WebGLRenderer","antialias","$store","state","Theme","setClearColor","$refs","appendChild","domElement","onresize","isScreenFull","isFullscreen","disposeRendererAndClearScene","removerAnimate","dispose","$notify","title","position","offset","continueRenderer","animate","update","children","length","rotation","y","render","requestAnimationFrame","cancelAnimationFrame","enablePan","setDecoderPath","setDecoderConfig","preload","initStats","setMode","initGui","point","PointLight","set","add","AmbientLight","directionalLight","DirectionalLight","spotLight","SpotLight","undefined","console","log","LoadingManager","setDRACOLoader","load","gltf","cloneModel","clone","modelName","traverse","child","isMesh","castShadow","receiveShadow","changeCamera","xhr","parseInt","loaded","total","error","box","Box3","setFromObject","size","Vector3","getSize","width","x","height","depth","z","max","scale","cameraScale","tweenScale","tweenRotation","target","model","oldScale","newScale","Tween","to","easing","Easing","Quadratic","InOut","start","oldRotation","newRotation","Math","PI","toggleFullScreen","isEnabled","toggle"],"sources":["src/components/3DModelShow/3DModel.vue"],"sourcesContent":["<template>\n  <div style=\"width: 100%;height:100%;position: relative;\" v-loading=\"loading\" :element-loading-text=\"'正在加载'+loadingProgress+'%'\">\n    <div v-if=\"this.isModelLoading\">\n       <span ref=\"fullScreen\" class=\"toScreenFull\" @click=\"toggleFullScreen\" >\n      <i class=\"el-icon-full-screen \" />\n    </span>\n    <span class=\"continueRender\" @click=\"continueRenderer\" >\n      <i class=\"\n        el-icon-video-play \" />\n    </span>\n    <span class=\"closeRender\" @click=\"disposeRendererAndClearScene\" >\n      <i class=\"\nel-icon-video-pause \" />\n    </span>\n    </div>\n   \n\n    <span v-if=\"!this.isModelLoading\" @click=\"renderModel\" style=\"position: absolute;left: 50%;top: 50%;transform: translate(-50%,-50%);cursor: pointer;font-size: 2vw;color: #ccc;font-weight: 800;\"><i class=\"el-icon-switch-button\" /></span>\n    <div ref=\"modelCanvas\" style=\"width: 100%;height: 100%;\" />\n  </div>\n</template>\n\n<script>\n  import * as THREE from \"three\";\n  import TWEEN from \"@tweenjs/tween.js\";\n  import screenfull from \"screenfull\";\n  import { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n  import { DRACOLoader } from \"three/examples/jsm/loaders/DRACOLoader\";\n  import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n  import GUI from \"three/examples/jsm/libs/lil-gui.module.min\";\n  import Stats from \"three/examples/jsm/libs/stats.module.js\";\n  export default {\n    props: {\n      modelPath: {\n        type: String,\n        default: \"\",\n      },\n    },\n    data() {\n      return {\n        renderer: {},\n        scene: null,\n        camera: {},\n        animateId: null,\n        orbitControls: {},\n        modelCanvas: {},\n        ambient: {},\n        loader: {},\n        loadingManager: {},\n        stats: {},\n        gui: {},\n        modelGroup: new THREE.Group(),\n        modelCache: {},\n        dracoLoader: new DRACOLoader(),\n        loading: false,\n        loadingProgress: 0,\n        isModelLoading: false,\n      };\n    },\n    watch: {},\n    mounted() {\n      this.initModel();\n      this.$emit(\"initModel\", this.renderModel);\n    },\n    methods: {\n      initModel() {\n        // this.initGui();\n        // 初始化场景\n        this.initScene();\n        // 初始化渲染\n        this.initRender();\n        // 初始化相机\n        this.initCamera();\n        // 初始化轨道控制器\n        this.initOrbitControls();\n        // 初始化加载器\n        this.initDdacoLoader();\n        // this.initStats();\n        // 初始化灯光\n        this.initLight();\n      },\n      // ========================================\n      initScene() {\n        this.scene = new THREE.Scene();\n      },\n      // ========================================\n      initCamera() {\n        this.camera = new THREE.PerspectiveCamera(\n          60,\n          this.modelCanvas.offsetWidth / this.modelCanvas.offsetHeight,\n          0.1,\n          3000\n        );\n        this.onWindowResize();\n        //监听窗口大小改变事件，并调用onWindowResize函数\n        window.addEventListener(\"resize\", this.onWindowResize, false);\n      },\n      onWindowResize() {\n        // 更新修改相机比例\n        this.camera.aspect =\n          this.modelCanvas.offsetWidth / this.modelCanvas.offsetHeight;\n\n        // 更新摄像机的投影矩阵\n        this.camera.updateProjectionMatrix();\n        // 更新画布像素比\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        this.renderer.setSize(\n          this.modelCanvas.offsetWidth,\n          this.modelCanvas.offsetHeight\n        );\n      },\n      // ========================================\n      initRender() {\n        this.renderer = new THREE.WebGLRenderer({\n          // alpha: true,\n          antialias: true,\n        });\n        // 设置渲染器的背景色\n        // this.renderer.setClearColor(0xf8f3e9);\n        if (this.$store.state.Theme) {\n          this.renderer.setClearColor(0xf8f3e9);\n        } else {\n          // this.renderer.setClearColor('#161621');\n          this.renderer.setClearColor(\"white\");\n        }\n\n        // 设置渲染器的像素比\n        this.renderer.setPixelRatio(window.devicePixelRatio);\n        // 获取模型canvas\n        this.modelCanvas = this.$refs.modelCanvas;\n        // 将渲染器的dom添加到模型canvas中\n        this.modelCanvas.appendChild(this.renderer.domElement);\n        window.onresize = () => {\n          this.isScreenFull = screenfull.isFullscreen;\n          this.onWindowResize();\n        };\n      },\n      disposeRendererAndClearScene() {\n        this.removerAnimate();\n        this.renderer.dispose();\n        this.$notify({\n          title: \"停止渲染\",\n          type: \"success\",\n          position: \"top-left\",\n          offset: 200,\n        });\n      },\n      continueRenderer() {\n        if (this.animateId == null) {\n          this.animate();\n        } else {\n          this.$notify({\n            title: \"模型已经渲染\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      animate() {\n        // this.stats.update();\n        TWEEN.update();\n        // 渲染\n        if (this.orbitControls != null) {\n          this.orbitControls.update();\n        }\n        if (this.modelGroup.children.length != 0) {\n          this.modelGroup.rotation.y += 0.005;\n        }\n        this.renderer.render(this.scene, this.camera);\n        this.animateId = requestAnimationFrame(this.animate);\n      },\n      removerAnimate() {\n        if (this.animateId) {\n          cancelAnimationFrame(this.animateId);\n          this.animateId = null;\n        }\n      },\n      // ========================================\n      initOrbitControls() {\n        this.orbitControls = new OrbitControls(\n          this.camera,\n          this.renderer.domElement\n        );\n        // 允许平移\n        this.orbitControls.enablePan = true;\n      },\n      // ========================================\n      initDdacoLoader() {\n        this.dracoLoader.setDecoderPath(\"/draco/gltf/\");\n        // 设置解码器类型为js\n        this.dracoLoader.setDecoderConfig({ type: \"js\" });\n        // 预加载解码器\n        this.dracoLoader.preload();\n      },\n      // ========================================\n      initStats() {\n        // 创建性能监视器\n        this.stats = new Stats();\n        // 设置监视器面板，传入面板id（0: fps, 1: ms, 2: mb）\n        this.stats.setMode(0);\n        // 将监视器添加到页面中\n        this.modelCanvas.appendChild(this.stats.domElement);\n      },\n      // ========================================\n      initGui() {\n        this.gui = new GUI();\n      },\n      // ========================================\n      initLight() {\n        // 创建一个点光源\n        var point = new THREE.PointLight(0xffffff, 1); //光源设置\n        point.position.set(300, 400, 200); //点光源位置\n        this.scene.add(point); //将光源添加到场景中\n\n        // 创建一个环境光\n        var ambient = new THREE.AmbientLight(0xffffff, 1); //环境光\n        ambient.position.set(200, 300, 200); //点光源位置\n        this.scene.add(ambient);\n\n        // 创建一个方向光\n        var directionalLight = new THREE.DirectionalLight(0xffffff, 1); //方向光\n        directionalLight.position.set(150, 300, 200);\n        // this.scene.add(new THREE.DirectionalLightHelper(directionalLight));\n        this.scene.add(directionalLight);\n\n        // 创建一个聚光灯\n        var spotLight = new THREE.SpotLight(0xffffff, 1); //聚光灯\n        spotLight.position.set(150, 200, 200);\n        // this.scene.add(new THREE.DirectionalLightHelper(spotLight));\n        this.scene.add(spotLight);\n\n        // // 设置坐标系\n        // const axesHelper = new THREE.AxesHelper(50);\n        // this.scene.add(axesHelper); // 坐标系\n      },\n      // ========================================\n      renderModel() {\n        if (this.scene.children[4] != undefined) {\n          this.scene.children[4].children = [];\n        }\n        console.log(this.scene);\n        this.removerAnimate();\n        // 动画\n        this.animate();\n        try {\n          this.loading = true;\n          this.loadingManager = new THREE.LoadingManager();\n          // 创建GLTFLoader实例\n          this.loader = new GLTFLoader(this.loadingManager);\n          // 设置加载器\n          this.loader.setDRACOLoader(this.dracoLoader);\n\n          // 加载模型\n          this.loader.load(\n            this.modelPath,\n            (gltf) => {\n              // 克隆模型\n              let cloneModel = gltf.scene.clone();\n              this.modelCache[cloneModel.modelName] = cloneModel;\n              // 设置克隆模型的位置\n\n              // 遍历场景中的模型\n              this.scene.traverse(function (child) {\n                // 如果模型是网格\n                if (child.isMesh) {\n                  // 设置模型的阴影属性\n                  child.castShadow = true;\n                  child.receiveShadow = true;\n                }\n              });\n\n              this.changeCamera(cloneModel);\n            },\n            (xhr) => {\n              this.loadingProgress = parseInt((xhr.loaded / xhr.total) * 100);\n              if (this.loadingProgress == 100) {\n                this.loading = false;\n                this.isModelLoading = true;\n              }\n            }\n          );\n        } catch (error) {\n          this.$notify.error({\n            title: \"模型加载失败\",\n            position: \"top-left\",\n            offset: 200,\n          });\n          console.error(error);\n          this.loading = false;\n          this.isModelLoading = false;\n        }\n      },\n      changeCamera(cloneModel) {\n        this.modelGroup.add(cloneModel);\n        // 获取模型的边界框\n        const box = new THREE.Box3().setFromObject(this.modelGroup);\n        // 获取模型的尺寸\n        const size = new THREE.Vector3();\n        box.getSize(size);\n\n        // 获取模型的宽度\n        const width = size.x;\n\n        // 获取模型的高度\n        const height = size.y;\n\n        // 获取模型的深度\n        const depth = size.z;\n        // 获取模型的最大尺寸\n        let max = width > height ? width : height;\n        max = max > depth ? max : depth;\n        // 计算模型的缩放比例\n        let scale = 1;\n        this.cameraScale = max;\n        // if (max < 1) {\n        //   scale =\n        //     (width + 1) * (height + 1) * (depth + 1) * this.camera.fov  ;\n        //   this.cameraScale =\n        //     (width + 1) *\n        //     (height + 1) *\n        //     (depth + 1) *\n        //      this.camera.fov ;\n        // }\n        // cloneModel.position.set(0, -7, 0);\n        // 缩放模型\n        this.tweenScale(this.modelGroup, 0.01, scale);\n        // 旋转模型\n        this.tweenRotation(this.modelGroup, 2, 0);\n        // 设置相机的坐标\n        this.camera.position.set(0, max / 2 + max / 3, max);\n        this.orbitControls.target = new THREE.Vector3(0, max / 2 + max / 15, 0);\n\n        // 更新相机的投影矩阵\n        this.camera.updateProjectionMatrix();\n        // 添加模型\n        this.scene.add(this.modelGroup);\n      },\n      tweenScale(model, oldScale, newScale) {\n        model.scale.set(oldScale, oldScale, oldScale);\n        // 创建一个Tween动画，让model的scale从oldScale变为newScale，动画时长为1000毫秒，使用quadratic.inout缓动函数\n        new TWEEN.Tween(model.scale)\n          .to({ x: newScale, y: newScale, z: newScale }, 1000)\n          .easing(TWEEN.Easing.Quadratic.InOut)\n          .start();\n      },\n      tweenRotation(model, oldRotation, newRotation) {\n        model.rotation.y = -Math.PI / oldRotation;\n        // 创建一个新的Tween，设置模型旋转的y轴角度，从当前角度到新的角度，持续550毫秒，使用二次函数插值\n        new TWEEN.Tween(model.rotation)\n          .to({ y: newRotation }, 1100)\n          .easing(TWEEN.Easing.Quadratic.InOut)\n          .start();\n      },\n      // ========================================\n      toggleFullScreen() {\n        if (screenfull.isEnabled) {\n          screenfull.toggle(this.$refs.modelCanvas);\n        }\n      },\n      // ========================================\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.toScreenFull {\n  position: absolute;\n  right: 70px;\n  bottom: 15px;\n  color: #161621;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  :hover {\n    transition: all 0.3s ease-in-out;\n    scale: 1.5;\n\n  }\n}\n.closeRender {\n  position: absolute;\n  right: 45px;\n  bottom: 15px;\n  color: #161621;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  :hover {\n    transition: all 0.3s ease-in-out;\n    scale: 1.5;\n\n  }\n}\n.continueRender {\n  position: absolute;\n  right: 20px;\n  bottom: 10px;\n  color: #161621;\n  font-size: 18px;\n  cursor: pointer;\n  transition: all 0.3s ease-in-out;\n  :hover {\n    transition: all 0.3s ease-in-out;\n    scale: 1.5;\n\n  }\n}\n</style>\n<!-- \n * @Description: 3D模型展示\n * @Version: 1.0\n * @Author: Yezery\n * @Date: 2018-11-08 11:08:26\n -->"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}