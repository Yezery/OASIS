{"ast":null,"code":"import { sha256 } from 'multiformats/hashes/sha2';\nimport { Key } from 'interface-datastore/key';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport isPrivateIp from 'private-ip';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { RECORD_KEY_PREFIX } from './constants.js';\n// const IPNS_PREFIX = uint8ArrayFromString('/ipns/')\nconst PK_PREFIX = uint8ArrayFromString('/pk/');\nexport function removePrivateAddresses(peer) {\n  return {\n    ...peer,\n    multiaddrs: peer.multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples();\n      // treat /dns, /dns4, and /dns6 addrs as public\n      if (type === 53 || type === 54 || type === 55) {\n        // localhost can be a dns address but it's private\n        if (addr === 'localhost') {\n          return false;\n        }\n        return true;\n      }\n      if (type !== 4 && type !== 6) {\n        return false;\n      }\n      if (addr == null) {\n        return false;\n      }\n      const isPrivate = isPrivateIp(addr);\n      if (isPrivate == null) {\n        // not an ip address\n        return true;\n      }\n      return !isPrivate;\n    })\n  };\n}\nexport function removePublicAddresses(peer) {\n  return {\n    ...peer,\n    multiaddrs: peer.multiaddrs.filter(multiaddr => {\n      const [[type, addr]] = multiaddr.stringTuples();\n      if (addr === 'localhost') {\n        return true;\n      }\n      if (type !== 4 && type !== 6) {\n        return false;\n      }\n      if (addr == null) {\n        return false;\n      }\n      const isPrivate = isPrivateIp(addr);\n      if (isPrivate == null) {\n        // not an ip address\n        return false;\n      }\n      return isPrivate;\n    })\n  };\n}\n/**\n * Creates a DHT ID by hashing a given Uint8Array\n */\nexport async function convertBuffer(buf) {\n  const multihash = await sha256.digest(buf);\n  return multihash.digest;\n}\n/**\n * Creates a DHT ID by hashing a Peer ID\n */\nexport async function convertPeerId(peerId) {\n  return await convertBuffer(peerId.toBytes());\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToKey(buf) {\n  return new Key('/' + uint8ArrayToString(buf, 'base32'), false);\n}\n/**\n * Convert a Uint8Array to their SHA2-256 hash\n */\nexport function bufferToRecordKey(buf) {\n  return new Key(`${RECORD_KEY_PREFIX}/${uint8ArrayToString(buf, 'base32')}`, false);\n}\n/**\n * Generate the key for a public key.\n */\nexport function keyForPublicKey(peer) {\n  return uint8ArrayConcat([PK_PREFIX, peer.toBytes()]);\n}\nexport function isPublicKeyKey(key) {\n  return uint8ArrayToString(key.subarray(0, 4)) === '/pk/';\n}\nexport function isIPNSKey(key) {\n  return uint8ArrayToString(key.subarray(0, 4)) === '/ipns/';\n}\nexport function fromPublicKeyKey(key) {\n  return peerIdFromBytes(key.subarray(4));\n}\n/**\n * Create a new put record, encodes and signs it if enabled\n */\nexport function createPutRecord(key, value) {\n  const timeReceived = new Date();\n  const rec = new Libp2pRecord(key, value, timeReceived);\n  return rec.serialize();\n}\nexport function debounce(callback, wait = 100) {\n  let timeout;\n  return () => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      callback();\n    }, wait);\n  };\n}","map":{"version":3,"names":["sha256","Key","Libp2pRecord","fromString","uint8ArrayFromString","toString","uint8ArrayToString","concat","uint8ArrayConcat","isPrivateIp","peerIdFromBytes","RECORD_KEY_PREFIX","PK_PREFIX","removePrivateAddresses","peer","multiaddrs","filter","multiaddr","type","addr","stringTuples","isPrivate","removePublicAddresses","convertBuffer","buf","multihash","digest","convertPeerId","peerId","toBytes","bufferToKey","bufferToRecordKey","keyForPublicKey","isPublicKeyKey","key","subarray","isIPNSKey","fromPublicKeyKey","createPutRecord","value","timeReceived","Date","rec","serialize","debounce","callback","wait","timeout","clearTimeout","setTimeout"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}