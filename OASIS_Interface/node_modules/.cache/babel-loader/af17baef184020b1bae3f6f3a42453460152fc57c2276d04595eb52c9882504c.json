{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nconst textEncoder = new TextEncoder();\nconst maxInt32 = 2 ** 32;\nconst maxUInt32 = 2 ** 31;\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\nfunction encodeLink(link, bytes) {\n  let i = bytes.length;\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 0x18;\n  }\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 0x12;\n  }\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 0xa;\n  }\n  return bytes.length - i;\n}\n\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\nexport function encodeNode(node) {\n  const size = sizeNode(node);\n  const bytes = new Uint8Array(size);\n  let i = size;\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 0xa;\n  }\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i));\n      i -= size;\n      i = encodeVarint(bytes, i, size) - 1;\n      bytes[i] = 0x12;\n    }\n  }\n  return bytes;\n}\n\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\nfunction sizeLink(link) {\n  let n = 0;\n  if (link.Hash) {\n    const l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length;\n    n += 1 + l + sov(l);\n  }\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n  return n;\n}\n\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\nfunction sizeNode(node) {\n  let n = 0;\n  if (node.Data) {\n    const l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link);\n      n += 1 + l + sov(l);\n    }\n  }\n  return n;\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  const base = offset;\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 0x7f | 0x80;\n    v /= 128;\n  }\n  while (v >= 128) {\n    bytes[offset++] = v & 0x7f | 0x80;\n    v >>>= 7;\n  }\n  bytes[offset] = v;\n  return base;\n}\n\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n  return Math.floor((len64(x) + 6) / 7);\n}\n\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\nfunction len64(x) {\n  let n = 0;\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n  return n + len8tab[x];\n}\n\n// golang math/bits\nconst len8tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];","map":{"version":3,"names":["textEncoder","TextEncoder","maxInt32","maxUInt32","encodeLink","link","bytes","i","length","Tsize","Error","Number","isSafeInteger","encodeVarint","Name","nameBytes","encode","set","Hash","encodeNode","node","size","sizeNode","Uint8Array","Data","Links","index","subarray","sizeLink","n","l","sov","offset","v","base","x","Math","floor","len64","len8tab"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/@ipld+dag-pb@4.0.6/node_modules/@ipld/dag-pb/src/pb-encode.js"],"sourcesContent":["const textEncoder = new TextEncoder()\nconst maxInt32 = 2 ** 32\nconst maxUInt32 = 2 ** 31\n\n/**\n * @typedef {import('./interface.js').RawPBLink} RawPBLink\n */\n\n/**\n * @typedef {import('./interface.js').RawPBNode} RawPBNode\n */\n\n// the encoders work backward from the end of the bytes array\n\n/**\n * encodeLink() is passed a slice of the parent byte array that ends where this\n * link needs to end, so it packs to the right-most part of the passed `bytes`\n *\n * @param {RawPBLink} link\n * @param {Uint8Array} bytes\n * @returns {number}\n */\nfunction encodeLink (link, bytes) {\n  let i = bytes.length\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative')\n    }\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding')\n    }\n    i = encodeVarint(bytes, i, link.Tsize) - 1\n    bytes[i] = 0x18\n  }\n\n  if (typeof link.Name === 'string') {\n    const nameBytes = textEncoder.encode(link.Name)\n    i -= nameBytes.length\n    bytes.set(nameBytes, i)\n    i = encodeVarint(bytes, i, nameBytes.length) - 1\n    bytes[i] = 0x12\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length\n    bytes.set(link.Hash, i)\n    i = encodeVarint(bytes, i, link.Hash.length) - 1\n    bytes[i] = 0xa\n  }\n\n  return bytes.length - i\n}\n\n/**\n * Encodes a PBNode into a new byte array of precisely the correct size\n *\n * @param {RawPBNode} node\n * @returns {Uint8Array}\n */\nexport function encodeNode (node) {\n  const size = sizeNode(node)\n  const bytes = new Uint8Array(size)\n  let i = size\n\n  if (node.Data) {\n    i -= node.Data.length\n    bytes.set(node.Data, i)\n    i = encodeVarint(bytes, i, node.Data.length) - 1\n    bytes[i] = 0xa\n  }\n\n  if (node.Links) {\n    for (let index = node.Links.length - 1; index >= 0; index--) {\n      const size = encodeLink(node.Links[index], bytes.subarray(0, i))\n      i -= size\n      i = encodeVarint(bytes, i, size) - 1\n      bytes[i] = 0x12\n    }\n  }\n\n  return bytes\n}\n\n/**\n * work out exactly how many bytes this link takes up\n *\n * @param {RawPBLink} link\n * @returns\n */\nfunction sizeLink (link) {\n  let n = 0\n\n  if (link.Hash) {\n    const l = link.Hash.length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Name === 'string') {\n    const l = textEncoder.encode(link.Name).length\n    n += 1 + l + sov(l)\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize)\n  }\n\n  return n\n}\n\n/**\n * Work out exactly how many bytes this node takes up\n *\n * @param {RawPBNode} node\n * @returns {number}\n */\nfunction sizeNode (node) {\n  let n = 0\n\n  if (node.Data) {\n    const l = node.Data.length\n    n += 1 + l + sov(l)\n  }\n\n  if (node.Links) {\n    for (const link of node.Links) {\n      const l = sizeLink(link)\n      n += 1 + l + sov(l)\n    }\n  }\n\n  return n\n}\n\n/**\n * @param {Uint8Array} bytes\n * @param {number} offset\n * @param {number} v\n * @returns {number}\n */\nfunction encodeVarint (bytes, offset, v) {\n  offset -= sov(v)\n  const base = offset\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v /= 128\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = (v & 0x7f) | 0x80\n    v >>>= 7\n  }\n\n  bytes[offset] = v\n\n  return base\n}\n\n/**\n * size of varint\n *\n * @param {number} x\n * @returns {number}\n */\nfunction sov (x) {\n  if (x % 2 === 0) {\n    x++\n  }\n  return Math.floor((len64(x) + 6) / 7)\n}\n\n/**\n * golang math/bits, how many bits does it take to represent this integer?\n *\n * @param {number} x\n * @returns {number}\n */\nfunction len64 (x) {\n  let n = 0\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32)\n    n = 32\n  }\n  if (x >= (1 << 16)) {\n    x >>>= 16\n    n += 16\n  }\n  if (x >= (1 << 8)) {\n    x >>>= 8\n    n += 8\n  }\n  return n + len8tab[x]\n}\n\n// golang math/bits\nconst len8tab = [\n  0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\n  8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8\n]\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}