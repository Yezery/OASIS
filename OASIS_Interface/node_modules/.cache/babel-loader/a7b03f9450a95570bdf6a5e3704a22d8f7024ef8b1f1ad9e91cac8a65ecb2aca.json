{"ast":null,"code":"import errCode from 'err-code';\nimport { OPEN, CLOSING, CLOSED } from '@libp2p/interface-connection/status';\nimport { symbol } from '@libp2p/interface-connection';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection');\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\nexport class ConnectionImpl {\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   */\n  constructor(init) {\n    const {\n      remoteAddr,\n      remotePeer,\n      newStream,\n      close,\n      getStreams,\n      stat\n    } = init;\n    this.id = `${parseInt(String(Math.random() * 1e9)).toString(36)}${Date.now()}`;\n    this.remoteAddr = remoteAddr;\n    this.remotePeer = remotePeer;\n    this.stat = {\n      ...stat,\n      status: OPEN\n    };\n    this._newStream = newStream;\n    this._close = close;\n    this._getStreams = getStreams;\n    this.tags = [];\n    this._closing = false;\n  }\n  get [Symbol.toStringTag]() {\n    return 'Connection';\n  }\n  get [symbol]() {\n    return true;\n  }\n  /**\n   * Get all the streams of the muxer\n   */\n  get streams() {\n    return this._getStreams();\n  }\n  /**\n   * Create a new stream from this connection\n   */\n  async newStream(protocols, options) {\n    if (this.stat.status === CLOSING) {\n      throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');\n    }\n    if (this.stat.status === CLOSED) {\n      throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');\n    }\n    if (!Array.isArray(protocols)) {\n      protocols = [protocols];\n    }\n    const stream = await this._newStream(protocols, options);\n    stream.stat.direction = 'outbound';\n    return stream;\n  }\n  /**\n   * Add a stream when it is opened to the registry\n   */\n  addStream(stream) {\n    stream.stat.direction = 'inbound';\n  }\n  /**\n   * Remove stream registry after it is closed\n   */\n  removeStream(id) {}\n  /**\n   * Close the connection\n   */\n  async close() {\n    if (this.stat.status === CLOSED || this._closing) {\n      return;\n    }\n    this.stat.status = CLOSING;\n    // close all streams - this can throw if we're not multiplexed\n    try {\n      this.streams.forEach(s => s.close());\n    } catch (err) {\n      log.error(err);\n    }\n    // Close raw connection\n    this._closing = true;\n    await this._close();\n    this._closing = false;\n    this.stat.timeline.close = Date.now();\n    this.stat.status = CLOSED;\n  }\n}\nexport function createConnection(init) {\n  return new ConnectionImpl(init);\n}","map":{"version":3,"names":["errCode","OPEN","CLOSING","CLOSED","symbol","logger","log","ConnectionImpl","constructor","init","remoteAddr","remotePeer","newStream","close","getStreams","stat","id","parseInt","String","Math","random","toString","Date","now","status","_newStream","_close","_getStreams","tags","_closing","Symbol","toStringTag","streams","protocols","options","Error","Array","isArray","stream","direction","addStream","removeStream","forEach","s","err","error","timeline","createConnection"],"sources":["../../../src/connection/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}