{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\nimport { enumeration, encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var CircuitRelay;\n(function (CircuitRelay) {\n  let Status;\n  (function (Status) {\n    Status[\"SUCCESS\"] = \"SUCCESS\";\n    Status[\"HOP_SRC_ADDR_TOO_LONG\"] = \"HOP_SRC_ADDR_TOO_LONG\";\n    Status[\"HOP_DST_ADDR_TOO_LONG\"] = \"HOP_DST_ADDR_TOO_LONG\";\n    Status[\"HOP_SRC_MULTIADDR_INVALID\"] = \"HOP_SRC_MULTIADDR_INVALID\";\n    Status[\"HOP_DST_MULTIADDR_INVALID\"] = \"HOP_DST_MULTIADDR_INVALID\";\n    Status[\"HOP_NO_CONN_TO_DST\"] = \"HOP_NO_CONN_TO_DST\";\n    Status[\"HOP_CANT_DIAL_DST\"] = \"HOP_CANT_DIAL_DST\";\n    Status[\"HOP_CANT_OPEN_DST_STREAM\"] = \"HOP_CANT_OPEN_DST_STREAM\";\n    Status[\"HOP_CANT_SPEAK_RELAY\"] = \"HOP_CANT_SPEAK_RELAY\";\n    Status[\"HOP_CANT_RELAY_TO_SELF\"] = \"HOP_CANT_RELAY_TO_SELF\";\n    Status[\"STOP_SRC_ADDR_TOO_LONG\"] = \"STOP_SRC_ADDR_TOO_LONG\";\n    Status[\"STOP_DST_ADDR_TOO_LONG\"] = \"STOP_DST_ADDR_TOO_LONG\";\n    Status[\"STOP_SRC_MULTIADDR_INVALID\"] = \"STOP_SRC_MULTIADDR_INVALID\";\n    Status[\"STOP_DST_MULTIADDR_INVALID\"] = \"STOP_DST_MULTIADDR_INVALID\";\n    Status[\"STOP_RELAY_REFUSED\"] = \"STOP_RELAY_REFUSED\";\n    Status[\"MALFORMED_MESSAGE\"] = \"MALFORMED_MESSAGE\";\n  })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n  let __StatusValues;\n  (function (__StatusValues) {\n    __StatusValues[__StatusValues[\"SUCCESS\"] = 100] = \"SUCCESS\";\n    __StatusValues[__StatusValues[\"HOP_SRC_ADDR_TOO_LONG\"] = 220] = \"HOP_SRC_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"HOP_DST_ADDR_TOO_LONG\"] = 221] = \"HOP_DST_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"HOP_SRC_MULTIADDR_INVALID\"] = 250] = \"HOP_SRC_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"HOP_DST_MULTIADDR_INVALID\"] = 251] = \"HOP_DST_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"HOP_NO_CONN_TO_DST\"] = 260] = \"HOP_NO_CONN_TO_DST\";\n    __StatusValues[__StatusValues[\"HOP_CANT_DIAL_DST\"] = 261] = \"HOP_CANT_DIAL_DST\";\n    __StatusValues[__StatusValues[\"HOP_CANT_OPEN_DST_STREAM\"] = 262] = \"HOP_CANT_OPEN_DST_STREAM\";\n    __StatusValues[__StatusValues[\"HOP_CANT_SPEAK_RELAY\"] = 270] = \"HOP_CANT_SPEAK_RELAY\";\n    __StatusValues[__StatusValues[\"HOP_CANT_RELAY_TO_SELF\"] = 280] = \"HOP_CANT_RELAY_TO_SELF\";\n    __StatusValues[__StatusValues[\"STOP_SRC_ADDR_TOO_LONG\"] = 320] = \"STOP_SRC_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"STOP_DST_ADDR_TOO_LONG\"] = 321] = \"STOP_DST_ADDR_TOO_LONG\";\n    __StatusValues[__StatusValues[\"STOP_SRC_MULTIADDR_INVALID\"] = 350] = \"STOP_SRC_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"STOP_DST_MULTIADDR_INVALID\"] = 351] = \"STOP_DST_MULTIADDR_INVALID\";\n    __StatusValues[__StatusValues[\"STOP_RELAY_REFUSED\"] = 390] = \"STOP_RELAY_REFUSED\";\n    __StatusValues[__StatusValues[\"MALFORMED_MESSAGE\"] = 400] = \"MALFORMED_MESSAGE\";\n  })(__StatusValues || (__StatusValues = {}));\n  (function (Status) {\n    Status.codec = () => {\n      return enumeration(__StatusValues);\n    };\n  })(Status = CircuitRelay.Status || (CircuitRelay.Status = {}));\n  let Type;\n  (function (Type) {\n    Type[\"HOP\"] = \"HOP\";\n    Type[\"STOP\"] = \"STOP\";\n    Type[\"STATUS\"] = \"STATUS\";\n    Type[\"CAN_HOP\"] = \"CAN_HOP\";\n  })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n  let __TypeValues;\n  (function (__TypeValues) {\n    __TypeValues[__TypeValues[\"HOP\"] = 1] = \"HOP\";\n    __TypeValues[__TypeValues[\"STOP\"] = 2] = \"STOP\";\n    __TypeValues[__TypeValues[\"STATUS\"] = 3] = \"STATUS\";\n    __TypeValues[__TypeValues[\"CAN_HOP\"] = 4] = \"CAN_HOP\";\n  })(__TypeValues || (__TypeValues = {}));\n  (function (Type) {\n    Type.codec = () => {\n      return enumeration(__TypeValues);\n    };\n  })(Type = CircuitRelay.Type || (CircuitRelay.Type = {}));\n  let Peer;\n  (function (Peer) {\n    let _codec;\n    Peer.codec = () => {\n      if (_codec == null) {\n        _codec = message((obj, w, opts = {}) => {\n          if (opts.lengthDelimited !== false) {\n            w.fork();\n          }\n          if (opts.writeDefaults === true || obj.id != null && obj.id.byteLength > 0) {\n            w.uint32(10);\n            w.bytes(obj.id);\n          }\n          if (obj.addrs != null) {\n            for (const value of obj.addrs) {\n              w.uint32(18);\n              w.bytes(value);\n            }\n          }\n          if (opts.lengthDelimited !== false) {\n            w.ldelim();\n          }\n        }, (reader, length) => {\n          const obj = {\n            id: new Uint8Array(0),\n            addrs: []\n          };\n          const end = length == null ? reader.len : reader.pos + length;\n          while (reader.pos < end) {\n            const tag = reader.uint32();\n            switch (tag >>> 3) {\n              case 1:\n                obj.id = reader.bytes();\n                break;\n              case 2:\n                obj.addrs.push(reader.bytes());\n                break;\n              default:\n                reader.skipType(tag & 7);\n                break;\n            }\n          }\n          return obj;\n        });\n      }\n      return _codec;\n    };\n    Peer.encode = obj => {\n      return encodeMessage(obj, Peer.codec());\n    };\n    Peer.decode = buf => {\n      return decodeMessage(buf, Peer.codec());\n    };\n  })(Peer = CircuitRelay.Peer || (CircuitRelay.Peer = {}));\n  let _codec;\n  CircuitRelay.codec = () => {\n    if (_codec == null) {\n      _codec = message((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork();\n        }\n        if (obj.type != null) {\n          w.uint32(8);\n          CircuitRelay.Type.codec().encode(obj.type, w);\n        }\n        if (obj.srcPeer != null) {\n          w.uint32(18);\n          CircuitRelay.Peer.codec().encode(obj.srcPeer, w, {\n            writeDefaults: false\n          });\n        }\n        if (obj.dstPeer != null) {\n          w.uint32(26);\n          CircuitRelay.Peer.codec().encode(obj.dstPeer, w, {\n            writeDefaults: false\n          });\n        }\n        if (obj.code != null) {\n          w.uint32(32);\n          CircuitRelay.Status.codec().encode(obj.code, w);\n        }\n        if (opts.lengthDelimited !== false) {\n          w.ldelim();\n        }\n      }, (reader, length) => {\n        const obj = {};\n        const end = length == null ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n          const tag = reader.uint32();\n          switch (tag >>> 3) {\n            case 1:\n              obj.type = CircuitRelay.Type.codec().decode(reader);\n              break;\n            case 2:\n              obj.srcPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n              break;\n            case 3:\n              obj.dstPeer = CircuitRelay.Peer.codec().decode(reader, reader.uint32());\n              break;\n            case 4:\n              obj.code = CircuitRelay.Status.codec().decode(reader);\n              break;\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n        return obj;\n      });\n    }\n    return _codec;\n  };\n  CircuitRelay.encode = obj => {\n    return encodeMessage(obj, CircuitRelay.codec());\n  };\n  CircuitRelay.decode = buf => {\n    return decodeMessage(buf, CircuitRelay.codec());\n  };\n})(CircuitRelay || (CircuitRelay = {}));","map":{"version":3,"names":["enumeration","encodeMessage","decodeMessage","message","CircuitRelay","Status","__StatusValues","codec","Type","__TypeValues","Peer","_codec","obj","w","opts","lengthDelimited","fork","writeDefaults","id","byteLength","uint32","bytes","addrs","value","ldelim","reader","length","Uint8Array","end","len","pos","tag","push","skipType","encode","decode","buf","type","srcPeer","dstPeer","code"],"sources":["../../../../src/circuit/pb/index.ts"],"sourcesContent":[null],"mappings":";;;;AAAA;AACA;AACA;AACA;AAEA,SAASA,WAAW,EAAEC,aAAa,EAAEC,aAAa,EAAEC,OAAO,QAAQ,iBAAiB;AAWpF,OAAM,IAAWC,YAAY;AAA7B,WAAiBA,YAAY;EAC3B,IAAYC,MAiBX;EAjBD,WAAYA,MAAM;IAChBA,MAAA,uBAAmB;IACnBA,MAAA,mDAA+C;IAC/CA,MAAA,mDAA+C;IAC/CA,MAAA,2DAAuD;IACvDA,MAAA,2DAAuD;IACvDA,MAAA,6CAAyC;IACzCA,MAAA,2CAAuC;IACvCA,MAAA,yDAAqD;IACrDA,MAAA,iDAA6C;IAC7CA,MAAA,qDAAiD;IACjDA,MAAA,qDAAiD;IACjDA,MAAA,qDAAiD;IACjDA,MAAA,6DAAyD;IACzDA,MAAA,6DAAyD;IACzDA,MAAA,6CAAyC;IACzCA,MAAA,2CAAuC;EACzC,CAAC,EAjBWA,MAAM,GAAND,YAAA,CAAAC,MAAM,KAAND,YAAA,CAAAC,MAAM;EAmBlB,IAAKC,cAiBJ;EAjBD,WAAKA,cAAc;IACjBA,cAAA,CAAAA,cAAA,8BAAa;IACbA,cAAA,CAAAA,cAAA,0DAA2B;IAC3BA,cAAA,CAAAA,cAAA,0DAA2B;IAC3BA,cAAA,CAAAA,cAAA,kEAA+B;IAC/BA,cAAA,CAAAA,cAAA,kEAA+B;IAC/BA,cAAA,CAAAA,cAAA,oDAAwB;IACxBA,cAAA,CAAAA,cAAA,kDAAuB;IACvBA,cAAA,CAAAA,cAAA,gEAA8B;IAC9BA,cAAA,CAAAA,cAAA,wDAA0B;IAC1BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,4DAA4B;IAC5BA,cAAA,CAAAA,cAAA,oEAAgC;IAChCA,cAAA,CAAAA,cAAA,oEAAgC;IAChCA,cAAA,CAAAA,cAAA,oDAAwB;IACxBA,cAAA,CAAAA,cAAA,kDAAuB;EACzB,CAAC,EAjBIA,cAAc,KAAdA,cAAc;EAmBnB,WAAiBD,MAAM;IACRA,MAAA,CAAAE,KAAK,GAAG,MAAK;MACxB,OAAOP,WAAW,CAASM,cAAc,CAAC;IAC5C,CAAC;EACH,CAAC,EAJgBD,MAAM,GAAND,YAAA,CAAAC,MAAM,KAAND,YAAA,CAAAC,MAAM;EAMvB,IAAYG,IAKX;EALD,WAAYA,IAAI;IACdA,IAAA,eAAW;IACXA,IAAA,iBAAa;IACbA,IAAA,qBAAiB;IACjBA,IAAA,uBAAmB;EACrB,CAAC,EALWA,IAAI,GAAJJ,YAAA,CAAAI,IAAI,KAAJJ,YAAA,CAAAI,IAAI;EAOhB,IAAKC,YAKJ;EALD,WAAKA,YAAY;IACfA,YAAA,CAAAA,YAAA,oBAAO;IACPA,YAAA,CAAAA,YAAA,sBAAQ;IACRA,YAAA,CAAAA,YAAA,0BAAU;IACVA,YAAA,CAAAA,YAAA,4BAAW;EACb,CAAC,EALIA,YAAY,KAAZA,YAAY;EAOjB,WAAiBD,IAAI;IACNA,IAAA,CAAAD,KAAK,GAAG,MAAK;MACxB,OAAOP,WAAW,CAAOS,YAAY,CAAC;IACxC,CAAC;EACH,CAAC,EAJgBD,IAAI,GAAJJ,YAAA,CAAAI,IAAI,KAAJJ,YAAA,CAAAI,IAAI;EAWrB,IAAiBE,IAAI;EAArB,WAAiBA,IAAI;IACnB,IAAIC,MAAmB;IAEVD,IAAA,CAAAH,KAAK,GAAG,MAAkB;MACrC,IAAII,MAAM,IAAI,IAAI,EAAE;QAClBA,MAAM,GAAGR,OAAO,CAAO,CAACS,GAAG,EAAEC,CAAC,EAAEC,IAAI,GAAG,EAAE,KAAI;UAC3C,IAAIA,IAAI,CAACC,eAAe,KAAK,KAAK,EAAE;YAClCF,CAAC,CAACG,IAAI,EAAE;;UAGV,IAAIF,IAAI,CAACG,aAAa,KAAK,IAAI,IAAKL,GAAG,CAACM,EAAE,IAAI,IAAI,IAAIN,GAAG,CAACM,EAAE,CAACC,UAAU,GAAG,CAAE,EAAE;YAC5EN,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC;YACZP,CAAC,CAACQ,KAAK,CAACT,GAAG,CAACM,EAAE,CAAC;;UAGjB,IAAIN,GAAG,CAACU,KAAK,IAAI,IAAI,EAAE;YACrB,KAAK,MAAMC,KAAK,IAAIX,GAAG,CAACU,KAAK,EAAE;cAC7BT,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC;cACZP,CAAC,CAACQ,KAAK,CAACE,KAAK,CAAC;;;UAIlB,IAAIT,IAAI,CAACC,eAAe,KAAK,KAAK,EAAE;YAClCF,CAAC,CAACW,MAAM,EAAE;;QAEd,CAAC,EAAE,CAACC,MAAM,EAAEC,MAAM,KAAI;UACpB,MAAMd,GAAG,GAAQ;YACfM,EAAE,EAAE,IAAIS,UAAU,CAAC,CAAC,CAAC;YACrBL,KAAK,EAAE;WACR;UAED,MAAMM,GAAG,GAAGF,MAAM,IAAI,IAAI,GAAGD,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACK,GAAG,GAAGJ,MAAM;UAE7D,OAAOD,MAAM,CAACK,GAAG,GAAGF,GAAG,EAAE;YACvB,MAAMG,GAAG,GAAGN,MAAM,CAACL,MAAM,EAAE;YAE3B,QAAQW,GAAG,KAAK,CAAC;cACf,KAAK,CAAC;gBACJnB,GAAG,CAACM,EAAE,GAAGO,MAAM,CAACJ,KAAK,EAAE;gBACvB;cACF,KAAK,CAAC;gBACJT,GAAG,CAACU,KAAK,CAACU,IAAI,CAACP,MAAM,CAACJ,KAAK,EAAE,CAAC;gBAC9B;cACF;gBACEI,MAAM,CAACQ,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;gBACxB;;;UAIN,OAAOnB,GAAG;QACZ,CAAC,CAAC;;MAGJ,OAAOD,MAAM;IACf,CAAC;IAEYD,IAAA,CAAAwB,MAAM,GAAItB,GAAS,IAAgB;MAC9C,OAAOX,aAAa,CAACW,GAAG,EAAEF,IAAI,CAACH,KAAK,EAAE,CAAC;IACzC,CAAC;IAEYG,IAAA,CAAAyB,MAAM,GAAIC,GAAgC,IAAU;MAC/D,OAAOlC,aAAa,CAACkC,GAAG,EAAE1B,IAAI,CAACH,KAAK,EAAE,CAAC;IACzC,CAAC;EACH,CAAC,EA/DgBG,IAAI,GAAJN,YAAA,CAAAM,IAAI,KAAJN,YAAA,CAAAM,IAAI;EAiErB,IAAIC,MAA2B;EAElBP,YAAA,CAAAG,KAAK,GAAG,MAA0B;IAC7C,IAAII,MAAM,IAAI,IAAI,EAAE;MAClBA,MAAM,GAAGR,OAAO,CAAe,CAACS,GAAG,EAAEC,CAAC,EAAEC,IAAI,GAAG,EAAE,KAAI;QACnD,IAAIA,IAAI,CAACC,eAAe,KAAK,KAAK,EAAE;UAClCF,CAAC,CAACG,IAAI,EAAE;;QAGV,IAAIJ,GAAG,CAACyB,IAAI,IAAI,IAAI,EAAE;UACpBxB,CAAC,CAACO,MAAM,CAAC,CAAC,CAAC;UACXhB,YAAY,CAACI,IAAI,CAACD,KAAK,EAAE,CAAC2B,MAAM,CAACtB,GAAG,CAACyB,IAAI,EAAExB,CAAC,CAAC;;QAG/C,IAAID,GAAG,CAAC0B,OAAO,IAAI,IAAI,EAAE;UACvBzB,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC;UACZhB,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAAC2B,MAAM,CAACtB,GAAG,CAAC0B,OAAO,EAAEzB,CAAC,EAAE;YAC/CI,aAAa,EAAE;WAChB,CAAC;;QAGJ,IAAIL,GAAG,CAAC2B,OAAO,IAAI,IAAI,EAAE;UACvB1B,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC;UACZhB,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAAC2B,MAAM,CAACtB,GAAG,CAAC2B,OAAO,EAAE1B,CAAC,EAAE;YAC/CI,aAAa,EAAE;WAChB,CAAC;;QAGJ,IAAIL,GAAG,CAAC4B,IAAI,IAAI,IAAI,EAAE;UACpB3B,CAAC,CAACO,MAAM,CAAC,EAAE,CAAC;UACZhB,YAAY,CAACC,MAAM,CAACE,KAAK,EAAE,CAAC2B,MAAM,CAACtB,GAAG,CAAC4B,IAAI,EAAE3B,CAAC,CAAC;;QAGjD,IAAIC,IAAI,CAACC,eAAe,KAAK,KAAK,EAAE;UAClCF,CAAC,CAACW,MAAM,EAAE;;MAEd,CAAC,EAAE,CAACC,MAAM,EAAEC,MAAM,KAAI;QACpB,MAAMd,GAAG,GAAQ,EAAE;QAEnB,MAAMgB,GAAG,GAAGF,MAAM,IAAI,IAAI,GAAGD,MAAM,CAACI,GAAG,GAAGJ,MAAM,CAACK,GAAG,GAAGJ,MAAM;QAE7D,OAAOD,MAAM,CAACK,GAAG,GAAGF,GAAG,EAAE;UACvB,MAAMG,GAAG,GAAGN,MAAM,CAACL,MAAM,EAAE;UAE3B,QAAQW,GAAG,KAAK,CAAC;YACf,KAAK,CAAC;cACJnB,GAAG,CAACyB,IAAI,GAAGjC,YAAY,CAACI,IAAI,CAACD,KAAK,EAAE,CAAC4B,MAAM,CAACV,MAAM,CAAC;cACnD;YACF,KAAK,CAAC;cACJb,GAAG,CAAC0B,OAAO,GAAGlC,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAAC4B,MAAM,CAACV,MAAM,EAAEA,MAAM,CAACL,MAAM,EAAE,CAAC;cACvE;YACF,KAAK,CAAC;cACJR,GAAG,CAAC2B,OAAO,GAAGnC,YAAY,CAACM,IAAI,CAACH,KAAK,EAAE,CAAC4B,MAAM,CAACV,MAAM,EAAEA,MAAM,CAACL,MAAM,EAAE,CAAC;cACvE;YACF,KAAK,CAAC;cACJR,GAAG,CAAC4B,IAAI,GAAGpC,YAAY,CAACC,MAAM,CAACE,KAAK,EAAE,CAAC4B,MAAM,CAACV,MAAM,CAAC;cACrD;YACF;cACEA,MAAM,CAACQ,QAAQ,CAACF,GAAG,GAAG,CAAC,CAAC;cACxB;;;QAIN,OAAOnB,GAAG;MACZ,CAAC,CAAC;;IAGJ,OAAOD,MAAM;EACf,CAAC;EAEYP,YAAA,CAAA8B,MAAM,GAAItB,GAAiB,IAAgB;IACtD,OAAOX,aAAa,CAACW,GAAG,EAAER,YAAY,CAACG,KAAK,EAAE,CAAC;EACjD,CAAC;EAEYH,YAAA,CAAA+B,MAAM,GAAIC,GAAgC,IAAkB;IACvE,OAAOlC,aAAa,CAACkC,GAAG,EAAEhC,YAAY,CAACG,KAAK,EAAE,CAAC;EACjD,CAAC;AACH,CAAC,EApNgBH,YAAY,KAAZA,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}