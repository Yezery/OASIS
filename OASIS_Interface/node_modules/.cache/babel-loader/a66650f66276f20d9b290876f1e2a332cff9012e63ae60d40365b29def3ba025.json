{"ast":null,"code":"import pReflect from 'p-reflect';\nimport pLimit from 'p-limit';\nexport default async function pSettle(array, options = {}) {\n  const {\n    concurrency = Number.POSITIVE_INFINITY\n  } = options;\n  const limit = pLimit(concurrency);\n  return Promise.all(array.map(element => {\n    if (element && typeof element.then === 'function') {\n      return pReflect(element);\n    }\n    if (typeof element === 'function') {\n      return pReflect(limit(() => element()));\n    }\n    return pReflect(Promise.resolve(element));\n  }));\n}","map":{"version":3,"names":["pReflect","pLimit","pSettle","array","options","concurrency","Number","POSITIVE_INFINITY","limit","Promise","all","map","element","then","resolve"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/p-settle@5.1.0/node_modules/p-settle/index.js"],"sourcesContent":["import pReflect from 'p-reflect';\nimport pLimit from 'p-limit';\n\nexport default async function pSettle(array, options = {}) {\n\tconst {concurrency = Number.POSITIVE_INFINITY} = options;\n\tconst limit = pLimit(concurrency);\n\n\treturn Promise.all(array.map(element => {\n\t\tif (element && typeof element.then === 'function') {\n\t\t\treturn pReflect(element);\n\t\t}\n\n\t\tif (typeof element === 'function') {\n\t\t\treturn pReflect(limit(() => element()));\n\t\t}\n\n\t\treturn pReflect(Promise.resolve(element));\n\t}));\n}\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,OAAOC,MAAM,MAAM,SAAS;AAE5B,eAAe,eAAeC,OAAOA,CAACC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1D,MAAM;IAACC,WAAW,GAAGC,MAAM,CAACC;EAAiB,CAAC,GAAGH,OAAO;EACxD,MAAMI,KAAK,GAAGP,MAAM,CAACI,WAAW,CAAC;EAEjC,OAAOI,OAAO,CAACC,GAAG,CAACP,KAAK,CAACQ,GAAG,CAACC,OAAO,IAAI;IACvC,IAAIA,OAAO,IAAI,OAAOA,OAAO,CAACC,IAAI,KAAK,UAAU,EAAE;MAClD,OAAOb,QAAQ,CAACY,OAAO,CAAC;IACzB;IAEA,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;MAClC,OAAOZ,QAAQ,CAACQ,KAAK,CAAC,MAAMI,OAAO,CAAC,CAAC,CAAC,CAAC;IACxC;IAEA,OAAOZ,QAAQ,CAACS,OAAO,CAACK,OAAO,CAACF,OAAO,CAAC,CAAC;EAC1C,CAAC,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}