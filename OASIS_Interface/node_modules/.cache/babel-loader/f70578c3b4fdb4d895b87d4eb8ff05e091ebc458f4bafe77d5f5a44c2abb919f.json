{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { DUMP_SESSION_KEYS } from './constants.js';\nconst log = logger('libp2p:noise');\nexport { log as logger };\nlet keyLogger;\nif (DUMP_SESSION_KEYS) {\n  keyLogger = log;\n} else {\n  keyLogger = Object.assign(() => {}, {\n    enabled: false,\n    trace: () => {},\n    error: () => {}\n  });\n}\nexport function logLocalStaticKeys(s) {\n  keyLogger(`LOCAL_STATIC_PUBLIC_KEY ${uint8ArrayToString(s.publicKey, 'hex')}`);\n  keyLogger(`LOCAL_STATIC_PRIVATE_KEY ${uint8ArrayToString(s.privateKey, 'hex')}`);\n}\nexport function logLocalEphemeralKeys(e) {\n  if (e) {\n    keyLogger(`LOCAL_PUBLIC_EPHEMERAL_KEY ${uint8ArrayToString(e.publicKey, 'hex')}`);\n    keyLogger(`LOCAL_PRIVATE_EPHEMERAL_KEY ${uint8ArrayToString(e.privateKey, 'hex')}`);\n  } else {\n    keyLogger('Missing local ephemeral keys.');\n  }\n}\nexport function logRemoteStaticKey(rs) {\n  keyLogger(`REMOTE_STATIC_PUBLIC_KEY ${uint8ArrayToString(rs, 'hex')}`);\n}\nexport function logRemoteEphemeralKey(re) {\n  keyLogger(`REMOTE_EPHEMERAL_PUBLIC_KEY ${uint8ArrayToString(re, 'hex')}`);\n}\nexport function logCipherState(session) {\n  if (session.cs1 && session.cs2) {\n    keyLogger(`CIPHER_STATE_1 ${session.cs1.n.getUint64()} ${uint8ArrayToString(session.cs1.k, 'hex')}`);\n    keyLogger(`CIPHER_STATE_2 ${session.cs2.n.getUint64()} ${uint8ArrayToString(session.cs2.k, 'hex')}`);\n  } else {\n    keyLogger('Missing cipher state.');\n  }\n}","map":{"version":3,"names":["logger","toString","uint8ArrayToString","DUMP_SESSION_KEYS","log","keyLogger","Object","assign","enabled","trace","error","logLocalStaticKeys","s","publicKey","privateKey","logLocalEphemeralKeys","e","logRemoteStaticKey","rs","logRemoteEphemeralKey","re","logCipherState","session","cs1","cs2","n","getUint64","k"],"sources":["../../src/logger.ts"],"sourcesContent":[null],"mappings":"AAAA,SAAiBA,MAAM,QAAQ,gBAAgB;AAC/C,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AAGtE,SAASC,iBAAiB,QAAQ,gBAAgB;AAElD,MAAMC,GAAG,GAAGJ,MAAM,CAAC,cAAc,CAAC;AAElC,SAASI,GAAG,IAAIJ,MAAM;AAEtB,IAAIK,SAAiB;AACrB,IAAIF,iBAAiB,EAAE;EACrBE,SAAS,GAAGD,GAAG;CAChB,MAAM;EACLC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAAC,MAAK,CAAoB,CAAC,EAAE;IACpDC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAEA,CAAA,KAAK,CAAE,CAAC;IACfC,KAAK,EAAEA,CAAA,KAAK,CAAE;GACf,CAAC;;AAGJ,OAAM,SAAUC,kBAAkBA,CAAEC,CAAU;EAC5CP,SAAS,CAAC,2BAA2BH,kBAAkB,CAACU,CAAC,CAACC,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;EAC9ER,SAAS,CAAC,4BAA4BH,kBAAkB,CAACU,CAAC,CAACE,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC;AAClF;AAEA,OAAM,SAAUC,qBAAqBA,CAAEC,CAAsB;EAC3D,IAAIA,CAAC,EAAE;IACLX,SAAS,CAAC,8BAA8BH,kBAAkB,CAACc,CAAC,CAACH,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC;IACjFR,SAAS,CAAC,+BAA+BH,kBAAkB,CAACc,CAAC,CAACF,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC;GACpF,MAAM;IACLT,SAAS,CAAC,+BAA+B,CAAC;;AAE9C;AAEA,OAAM,SAAUY,kBAAkBA,CAAEC,EAAc;EAChDb,SAAS,CAAC,4BAA4BH,kBAAkB,CAACgB,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;AACxE;AAEA,OAAM,SAAUC,qBAAqBA,CAAEC,EAAc;EACnDf,SAAS,CAAC,+BAA+BH,kBAAkB,CAACkB,EAAE,EAAE,KAAK,CAAC,EAAE,CAAC;AAC3E;AAEA,OAAM,SAAUC,cAAcA,CAAEC,OAAqB;EACnD,IAAIA,OAAO,CAACC,GAAG,IAAID,OAAO,CAACE,GAAG,EAAE;IAC9BnB,SAAS,CAAC,kBAAkBiB,OAAO,CAACC,GAAG,CAACE,CAAC,CAACC,SAAS,EAAE,IAAIxB,kBAAkB,CAACoB,OAAO,CAACC,GAAG,CAACI,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;IACpGtB,SAAS,CAAC,kBAAkBiB,OAAO,CAACE,GAAG,CAACC,CAAC,CAACC,SAAS,EAAE,IAAIxB,kBAAkB,CAACoB,OAAO,CAACE,GAAG,CAACG,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;GACrG,MAAM;IACLtB,SAAS,CAAC,uBAAuB,CAAC;;AAEtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}