{"ast":null,"code":"import { multiaddr, isName } from '@multiformats/multiaddr';\nexport function cleanUrlSIO(ma) {\n  const maStrSplit = ma.toString().split('/');\n  const tcpProto = ma.protos()[1].name;\n  const wsProto = ma.protos()[2].name;\n  const tcpPort = ma.stringTuples()[1][1];\n  if (tcpProto !== 'tcp' || wsProto !== 'ws' && wsProto !== 'wss') {\n    throw new Error(`invalid multiaddr: ${ma.toString()}`);\n  }\n  if (!isName(ma)) {\n    return `http://${maStrSplit[2]}:${maStrSplit[4]}`;\n  }\n  if (wsProto === 'ws') {\n    return `http://${maStrSplit[2]}${tcpPort == null || tcpPort === '80' ? '' : `:${tcpPort}`}`;\n  }\n  if (wsProto === 'wss') {\n    return `https://${maStrSplit[2]}${tcpPort == null || tcpPort === '443' ? '' : `:${tcpPort}`}`;\n  }\n  throw new Error('invalid multiaddr: ' + ma.toString());\n}\nexport function cleanMultiaddr(maStr) {\n  const legacy = '/libp2p-webrtc-star';\n  if (maStr.startsWith(legacy)) {\n    maStr = maStr.substring(legacy.length, maStr.length);\n    let ma = multiaddr(maStr);\n    const tuppleIPFS = ma.stringTuples().filter(tupple => {\n      return tupple[0] === 421; // ipfs code\n    })[0];\n    if (tuppleIPFS[1] == null) {\n      throw new Error('invalid multiaddr: ' + maStr);\n    }\n    ma = ma.decapsulate('p2p');\n    ma = ma.encapsulate('/p2p-webrtc-star');\n    ma = ma.encapsulate(`/p2p/${tuppleIPFS[1]}`);\n    maStr = ma.toString();\n  }\n  return maStr;\n}","map":{"version":3,"names":["multiaddr","isName","cleanUrlSIO","ma","maStrSplit","toString","split","tcpProto","protos","name","wsProto","tcpPort","stringTuples","Error","cleanMultiaddr","maStr","legacy","startsWith","substring","length","tuppleIPFS","filter","tupple","decapsulate","encapsulate"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,yBAAyB;AAG3D,OAAM,SAAUC,WAAWA,CAAEC,EAAa;EACxC,MAAMC,UAAU,GAAGD,EAAE,CAACE,QAAQ,EAAE,CAACC,KAAK,CAAC,GAAG,CAAC;EAC3C,MAAMC,QAAQ,GAAGJ,EAAE,CAACK,MAAM,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI;EACpC,MAAMC,OAAO,GAAGP,EAAE,CAACK,MAAM,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI;EACnC,MAAME,OAAO,GAAGR,EAAE,CAACS,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEvC,IAAIL,QAAQ,KAAK,KAAK,IAAKG,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAM,EAAE;IACjE,MAAM,IAAIG,KAAK,CAAC,sBAAsBV,EAAE,CAACE,QAAQ,EAAE,EAAE,CAAC;;EAGxD,IAAI,CAACJ,MAAM,CAACE,EAAE,CAAC,EAAE;IACf,OAAO,UAAUC,UAAU,CAAC,CAAC,CAAC,IAAIA,UAAU,CAAC,CAAC,CAAC,EAAE;;EAGnD,IAAIM,OAAO,KAAK,IAAI,EAAE;IACpB,OAAO,UAAUN,UAAU,CAAC,CAAC,CAAC,GAAGO,OAAO,IAAI,IAAI,IAAIA,OAAO,KAAK,IAAI,GAAG,EAAE,GAAG,IAAIA,OAAO,EAAE,EAAE;;EAG7F,IAAID,OAAO,KAAK,KAAK,EAAE;IACrB,OAAO,WAAWN,UAAU,CAAC,CAAC,CAAC,GAAGO,OAAO,IAAI,IAAI,IAAIA,OAAO,KAAK,KAAK,GAAG,EAAE,GAAG,IAAIA,OAAO,EAAE,EAAE;;EAG/F,MAAM,IAAIE,KAAK,CAAC,qBAAqB,GAAGV,EAAE,CAACE,QAAQ,EAAE,CAAC;AACxD;AAEA,OAAM,SAAUS,cAAcA,CAAEC,KAAa;EAC3C,MAAMC,MAAM,GAAG,qBAAqB;EAEpC,IAAID,KAAK,CAACE,UAAU,CAACD,MAAM,CAAC,EAAE;IAC5BD,KAAK,GAAGA,KAAK,CAACG,SAAS,CAACF,MAAM,CAACG,MAAM,EAAEJ,KAAK,CAACI,MAAM,CAAC;IACpD,IAAIhB,EAAE,GAAGH,SAAS,CAACe,KAAK,CAAC;IACzB,MAAMK,UAAU,GAAGjB,EAAE,CAACS,YAAY,EAAE,CAACS,MAAM,CAAEC,MAAM,IAAI;MACrD,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EAAC;IAC3B,CAAC,CAAC,CAAC,CAAC,CAAC;IAEL,IAAIF,UAAU,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;MACzB,MAAM,IAAIP,KAAK,CAAC,qBAAqB,GAAGE,KAAK,CAAC;;IAGhDZ,EAAE,GAAGA,EAAE,CAACoB,WAAW,CAAC,KAAK,CAAC;IAC1BpB,EAAE,GAAGA,EAAE,CAACqB,WAAW,CAAC,kBAAkB,CAAC;IACvCrB,EAAE,GAAGA,EAAE,CAACqB,WAAW,CAAC,QAAQJ,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5CL,KAAK,GAAGZ,EAAE,CAACE,QAAQ,EAAE;;EAGvB,OAAOU,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}