{"ast":null,"code":"import { createCp } from './cp.js';\nimport { createRm } from './rm.js';\nimport mergeOpts from 'merge-options';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv(from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options);\n    await createCp(context)(from, to, opts);\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    });\n  }\n  return withTimeoutOption(mfsMv);\n}","map":{"version":3,"names":["createCp","createRm","mergeOpts","withTimeoutOption","mergeOptions","bind","ignoreUndefined","defaultOptions","parents","flush","cidVersion","hashAlg","shardSplitThreshold","createMv","context","mfsMv","from","to","options","opts","recursive"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/mv.js"],"sourcesContent":["import { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await createCp(context)(from, to, opts)\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;AAClC,SAASC,QAAQ,QAAQ,SAAS;AAClC,OAAOC,SAAS,MAAM,eAAe;AACrC,SAASC,iBAAiB,QAAQ,qCAAqC;AAEvE,MAAMC,YAAY,GAAGF,SAAS,CAACG,IAAI,CAAC;EAAEC,eAAe,EAAE;AAAK,CAAC,CAAC;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,UAAU,EAAE,CAAC;EACbC,OAAO,EAAE,UAAU;EACnBC,mBAAmB,EAAE;AACvB,CAAC;;AAED;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAEC,OAAO,EAAE;EACjC;AACF;AACA;EACE,eAAeC,KAAKA,CAAEC,IAAI,EAAEC,EAAE,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5C;IACA,MAAMC,IAAI,GAAGf,YAAY,CAACG,cAAc,EAAEW,OAAO,CAAC;IAElD,MAAMlB,QAAQ,CAACc,OAAO,CAAC,CAACE,IAAI,EAAEC,EAAE,EAAEE,IAAI,CAAC;IACvC,MAAMlB,QAAQ,CAACa,OAAO,CAAC,CAACE,IAAI,EAAE;MAC5B,GAAGG,IAAI;MACPC,SAAS,EAAE;IACb,CAAC,CAAC;EACJ;EAEA,OAAOjB,iBAAiB,CAACY,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}