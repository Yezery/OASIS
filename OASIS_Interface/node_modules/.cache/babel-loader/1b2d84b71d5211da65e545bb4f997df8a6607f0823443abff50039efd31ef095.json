{"ast":null,"code":"/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n *\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor(props, options) {\n    this.options = options || {};\n    this.root = props.root;\n    this.dir = props.dir;\n    this.path = props.path;\n    this.dirty = props.dirty;\n    this.flat = props.flat;\n    this.parent = props.parent;\n    this.parentKey = props.parentKey;\n    this.unixfs = props.unixfs;\n    this.mode = props.mode;\n    this.mtime = props.mtime;\n\n    /** @type {CID | undefined} */\n    this.cid = undefined;\n    /** @type {number | undefined} */\n    this.size = undefined;\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put(name, value) {}\n\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n  get(name) {\n    return Promise.resolve(this);\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n  async *eachChildSeries() {}\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async *flush(blockstore) {}\n}\nexport default Dir;","map":{"version":3,"names":["Dir","constructor","props","options","root","dir","path","dirty","flat","parent","parentKey","unixfs","mode","mtime","cid","undefined","size","put","name","value","get","Promise","resolve","eachChildSeries","flush","blockstore"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dir.js"],"sourcesContent":["/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n *\n * @typedef {object} DirProps\n * @property {boolean} root\n * @property {boolean} dir\n * @property {string} path\n * @property {boolean} dirty\n * @property {boolean} flat\n * @property {Dir} [parent]\n * @property {string} [parentKey]\n * @property {import('ipfs-unixfs').UnixFS} [unixfs]\n * @property {number} [mode]\n * @property {import('ipfs-unixfs').Mtime} [mtime]\n */\nclass Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    this.options = options || {}\n\n    this.root = props.root\n    this.dir = props.dir\n    this.path = props.path\n    this.dirty = props.dirty\n    this.flat = props.flat\n    this.parent = props.parent\n    this.parentKey = props.parentKey\n    this.unixfs = props.unixfs\n    this.mode = props.mode\n    this.mtime = props.mtime\n\n    /** @type {CID | undefined} */\n    this.cid = undefined\n    /** @type {number | undefined} */\n    this.size = undefined\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) { }\n\n  /**\n   * @param {string} name\n   * @returns {Promise<InProgressImportResult | Dir | undefined>}\n   */\n  get (name) {\n    return Promise.resolve(this)\n  }\n\n  /**\n   * @returns {AsyncIterable<{ key: string, child: InProgressImportResult | Dir}>}\n   */\n  async * eachChildSeries () { }\n\n  /**\n   * @param {Blockstore} blockstore\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (blockstore) { }\n}\n\nexport default Dir\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAG,CAAC;EACR;AACF;AACA;AACA;EACEC,WAAWA,CAAEC,KAAK,EAAEC,OAAO,EAAE;IAC3B,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;IAE5B,IAAI,CAACC,IAAI,GAAGF,KAAK,CAACE,IAAI;IACtB,IAAI,CAACC,GAAG,GAAGH,KAAK,CAACG,GAAG;IACpB,IAAI,CAACC,IAAI,GAAGJ,KAAK,CAACI,IAAI;IACtB,IAAI,CAACC,KAAK,GAAGL,KAAK,CAACK,KAAK;IACxB,IAAI,CAACC,IAAI,GAAGN,KAAK,CAACM,IAAI;IACtB,IAAI,CAACC,MAAM,GAAGP,KAAK,CAACO,MAAM;IAC1B,IAAI,CAACC,SAAS,GAAGR,KAAK,CAACQ,SAAS;IAChC,IAAI,CAACC,MAAM,GAAGT,KAAK,CAACS,MAAM;IAC1B,IAAI,CAACC,IAAI,GAAGV,KAAK,CAACU,IAAI;IACtB,IAAI,CAACC,KAAK,GAAGX,KAAK,CAACW,KAAK;;IAExB;IACA,IAAI,CAACC,GAAG,GAAGC,SAAS;IACpB;IACA,IAAI,CAACC,IAAI,GAAGD,SAAS;EACvB;;EAEA;AACF;AACA;AACA;EACE,MAAME,GAAGA,CAAEC,IAAI,EAAEC,KAAK,EAAE,CAAE;;EAE1B;AACF;AACA;AACA;EACEC,GAAGA,CAAEF,IAAI,EAAE;IACT,OAAOG,OAAO,CAACC,OAAO,CAAC,IAAI,CAAC;EAC9B;;EAEA;AACF;AACA;EACE,OAAQC,eAAeA,CAAA,EAAI,CAAE;;EAE7B;AACF;AACA;AACA;EACE,OAAQC,KAAKA,CAAEC,UAAU,EAAE,CAAE;AAC/B;AAEA,eAAezB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}