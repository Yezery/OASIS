{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport debug from 'debug';\nimport Receptacle from 'receptacle';\nimport * as utils from './utils.js';\nconst log = Object.assign(debug('dns-over-http-resolver'), {\n  error: debug('dns-over-http-resolver:error')\n});\n/**\n * DNS over HTTP resolver.\n * Uses a list of servers to resolve DNS records with HTTP requests.\n */\nclass Resolver {\n  /**\n   * @class\n   * @param {object} [options]\n   * @param {number} [options.maxCache = 100] - maximum number of cached dns records\n   * @param {Request} [options.request] - function to return DNSJSON\n   */\n  constructor(options = {}) {\n    this._cache = new Receptacle({\n      max: options?.maxCache ?? 100\n    });\n    this._TXTcache = new Receptacle({\n      max: options?.maxCache ?? 100\n    });\n    this._servers = ['https://cloudflare-dns.com/dns-query', 'https://dns.google/resolve'];\n    this._request = options.request ?? utils.request;\n    this._abortControllers = [];\n  }\n  /**\n   * Cancel all outstanding DNS queries made by this resolver. Any outstanding\n   * requests will be aborted and promises rejected.\n   */\n  cancel() {\n    this._abortControllers.forEach(controller => controller.abort());\n  }\n  /**\n   * Get an array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   */\n  getServers() {\n    return this._servers;\n  }\n  /**\n   * Get a shuffled array of the IP addresses currently configured for DNS resolution.\n   * These addresses are formatted according to RFC 5952. It can include a custom port.\n   */\n  _getShuffledServers() {\n    const newServers = [...this._servers];\n    for (let i = newServers.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * i);\n      const temp = newServers[i];\n      newServers[i] = newServers[j];\n      newServers[j] = temp;\n    }\n    return newServers;\n  }\n  /**\n   * Sets the IP address and port of servers to be used when performing DNS resolution.\n   *\n   * @param {string[]} servers - array of RFC 5952 formatted addresses.\n   */\n  setServers(servers) {\n    this._servers = servers;\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into the appropriate DNS record\n   *\n   * @param {string} hostname - host name to resolve\n   * @param {string} [rrType = 'A'] - resource record type\n   */\n  async resolve(hostname, rrType = 'A') {\n    switch (rrType) {\n      case 'A':\n        return await this.resolve4(hostname);\n      case 'AAAA':\n        return await this.resolve6(hostname);\n      case 'TXT':\n        return await this.resolveTxt(hostname);\n      default:\n        throw new Error(`${rrType} is not supported`);\n    }\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv4 addresses\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolve4(hostname) {\n    const recordType = 'A';\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n    if (cached != null) {\n      return cached;\n    }\n    let aborted = false;\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController();\n      this._abortControllers.push(controller);\n      try {\n        const response = await this._request(utils.buildResource(server, hostname, recordType), controller.signal);\n        const data = response.Answer.map(a => a.data);\n        const ttl = Math.min(...response.Answer.map(a => a.TTL));\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n        return data;\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true;\n        }\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller);\n      }\n    }\n    if (aborted) {\n      throw Object.assign(new Error('queryA ECANCELLED'), {\n        code: 'ECANCELLED'\n      });\n    }\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into IPv6 addresses\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolve6(hostname) {\n    const recordType = 'AAAA';\n    const cached = this._cache.get(utils.getCacheKey(hostname, recordType));\n    if (cached != null) {\n      return cached;\n    }\n    let aborted = false;\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController();\n      this._abortControllers.push(controller);\n      try {\n        const response = await this._request(utils.buildResource(server, hostname, recordType), controller.signal);\n        const data = response.Answer.map(a => a.data);\n        const ttl = Math.min(...response.Answer.map(a => a.TTL));\n        this._cache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n        return data;\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true;\n        }\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller);\n      }\n    }\n    if (aborted) {\n      throw Object.assign(new Error('queryAaaa ECANCELLED'), {\n        code: 'ECANCELLED'\n      });\n    }\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n  /**\n   * Uses the DNS protocol to resolve the given host name into a Text record\n   *\n   * @param {string} hostname - host name to resolve\n   */\n  async resolveTxt(hostname) {\n    const recordType = 'TXT';\n    const cached = this._TXTcache.get(utils.getCacheKey(hostname, recordType));\n    if (cached != null) {\n      return cached;\n    }\n    let aborted = false;\n    for (const server of this._getShuffledServers()) {\n      const controller = new AbortController();\n      this._abortControllers.push(controller);\n      try {\n        const response = await this._request(utils.buildResource(server, hostname, recordType), controller.signal);\n        const data = response.Answer.map(a => [a.data.replace(/['\"]+/g, '')]);\n        const ttl = Math.min(...response.Answer.map(a => a.TTL));\n        this._TXTcache.set(utils.getCacheKey(hostname, recordType), data, {\n          ttl\n        });\n        return data;\n      } catch (err) {\n        if (controller.signal.aborted) {\n          aborted = true;\n        }\n        log.error(`${server} could not resolve ${hostname} record ${recordType}`);\n      } finally {\n        this._abortControllers = this._abortControllers.filter(c => c !== controller);\n      }\n    }\n    if (aborted) {\n      throw Object.assign(new Error('queryTxt ECANCELLED'), {\n        code: 'ECANCELLED'\n      });\n    }\n    throw new Error(`Could not resolve ${hostname} record ${recordType}`);\n  }\n  clearCache() {\n    this._cache.clear();\n    this._TXTcache.clear();\n  }\n}\nexport default Resolver;","map":{"version":3,"names":["debug","Receptacle","utils","log","Object","assign","error","Resolver","constructor","options","_cache","max","maxCache","_TXTcache","_servers","_request","request","_abortControllers","cancel","forEach","controller","abort","getServers","_getShuffledServers","newServers","i","length","j","Math","floor","random","temp","setServers","servers","resolve","hostname","rrType","resolve4","resolve6","resolveTxt","Error","recordType","cached","get","getCacheKey","aborted","server","AbortController","push","response","buildResource","signal","data","Answer","map","a","ttl","min","TTL","set","err","filter","c","code","replace","clearCache","clear"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}