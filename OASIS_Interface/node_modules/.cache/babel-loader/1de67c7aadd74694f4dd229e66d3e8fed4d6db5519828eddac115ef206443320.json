{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport mergeOptions from 'merge-options';\n// @ts-expect-error retimer does not have types\nimport retimer from 'retimer';\nimport all from 'it-all';\nimport { pipe } from 'it-pipe';\nimport filter from 'it-filter';\nimport sort from 'it-sort';\nconst log = logger('libp2p:connection-manager:auto-dialler');\nconst defaultOptions = {\n  enabled: true,\n  minConnections: 0,\n  autoDialInterval: 10000\n};\nexport class AutoDialler {\n  /**\n   * Proactively tries to connect to known peers stored in the PeerStore.\n   * It will keep the number of connections below the upper limit and sort\n   * the peers to connect based on wether we know their keys and protocols.\n   */\n  constructor(components, init) {\n    this.components = components;\n    this.options = mergeOptions.call({\n      ignoreUndefined: true\n    }, defaultOptions, init);\n    this.running = false;\n    this._autoDial = this._autoDial.bind(this);\n    log('options: %j', this.options);\n  }\n  isStarted() {\n    return this.running;\n  }\n  /**\n   * Starts the auto dialer\n   */\n  async start() {\n    if (!this.options.enabled) {\n      log('not enabled');\n      return;\n    }\n    this.running = true;\n    void this._autoDial().catch(err => {\n      log.error('could start autodial', err);\n    });\n    log('started');\n  }\n  /**\n   * Stops the auto dialler\n   */\n  async stop() {\n    if (!this.options.enabled) {\n      log('not enabled');\n      return;\n    }\n    this.running = false;\n    if (this.autoDialTimeout != null) {\n      this.autoDialTimeout.clear();\n    }\n    log('stopped');\n  }\n  async _autoDial() {\n    if (this.autoDialTimeout != null) {\n      this.autoDialTimeout.clear();\n    }\n    const minConnections = this.options.minConnections;\n    // Already has enough connections\n    if (this.components.connectionManager.getConnections().length >= minConnections) {\n      this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n      return;\n    }\n    // Sort peers on whether we know protocols or public keys for them\n    const allPeers = await this.components.peerStore.all();\n    const peers = await pipe(\n    // shuffle the peers\n    allPeers.sort(() => Math.random() > 0.5 ? 1 : -1), source => filter(source, peer => !peer.id.equals(this.components.peerId)), source => sort(source, (a, b) => {\n      if (b.protocols.length > a.protocols.length) {\n        return 1;\n      } else if (b.id.publicKey != null && a.id.publicKey == null) {\n        return 1;\n      }\n      return -1;\n    }), async source => await all(source));\n    for (let i = 0; this.running && i < peers.length && this.components.connectionManager.getConnections().length < minConnections; i++) {\n      // Connection Manager was stopped during async dial\n      if (!this.running) {\n        return;\n      }\n      const peer = peers[i];\n      if (this.components.connectionManager.getConnections(peer.id).length === 0) {\n        log('connecting to a peerStore stored peer %p', peer.id);\n        try {\n          await this.components.connectionManager.openConnection(peer.id);\n        } catch (err) {\n          log.error('could not connect to peerStore stored peer', err);\n        }\n      }\n    }\n    // Connection Manager was stopped\n    if (!this.running) {\n      return;\n    }\n    this.autoDialTimeout = retimer(this._autoDial, this.options.autoDialInterval);\n  }\n}","map":{"version":3,"names":["logger","mergeOptions","retimer","all","pipe","filter","sort","log","defaultOptions","enabled","minConnections","autoDialInterval","AutoDialler","constructor","components","init","options","call","ignoreUndefined","running","_autoDial","bind","isStarted","start","catch","err","error","stop","autoDialTimeout","clear","connectionManager","getConnections","length","allPeers","peerStore","peers","Math","random","source","peer","id","equals","peerId","a","b","protocols","publicKey","i","openConnection"],"sources":["../../../src/connection-manager/auto-dialler.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}