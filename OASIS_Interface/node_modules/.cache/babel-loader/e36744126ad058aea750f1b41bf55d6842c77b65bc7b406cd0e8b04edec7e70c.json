{"ast":null,"code":"import map from 'it-map';\nimport errCode from 'err-code';\nimport { PinTypes } from './pin-types.js';\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pin-manager').Pins} Pins\n */\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createPinnedBlockstore(pins, store) {\n  return {\n    open() {\n      return store.open();\n    },\n    close() {\n      return store.close();\n    },\n    query(query, options) {\n      return store.query(query, options);\n    },\n    queryKeys(query, options) {\n      return store.queryKeys(query, options);\n    },\n    async get(cid, options) {\n      return store.get(cid, options);\n    },\n    async *getMany(cids, options) {\n      yield* store.getMany(cids, options);\n    },\n    async put(cid, buf, options) {\n      await store.put(cid, buf, options);\n    },\n    async *putMany(pairs, options) {\n      yield* store.putMany(pairs, options);\n    },\n    has(cid, options) {\n      return store.has(cid, options);\n    },\n    async delete(cid, options) {\n      await ensureNotPinned(cid, pins);\n      return store.delete(cid, options);\n    },\n    deleteMany(cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins);\n        return cid;\n      }), options);\n    },\n    batch() {\n      return store.batch();\n    }\n  };\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned(cid, pins) {\n  const {\n    pinned,\n    reason\n  } = await pins.isPinnedWithType(cid, PinTypes.all);\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED');\n  }\n}","map":{"version":3,"names":["map","errCode","PinTypes","createPinnedBlockstore","pins","store","open","close","query","options","queryKeys","get","cid","getMany","cids","put","buf","putMany","pairs","has","delete","ensureNotPinned","deleteMany","batch","pinned","reason","isPinnedWithType","all","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/pinned-blockstore.js"],"sourcesContent":["\nimport map from 'it-map'\nimport errCode from 'err-code'\nimport { PinTypes } from './pin-types.js'\n\n/**\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} DatastoreOptions\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('./pin-manager').Pins} Pins\n */\n\n/**\n * @param {Pins} pins\n * @param {Blockstore} store\n * @returns {Blockstore}\n */\nexport function createPinnedBlockstore (pins, store) {\n  return {\n    open () {\n      return store.open()\n    },\n\n    close () {\n      return store.close()\n    },\n\n    query (query, options) {\n      return store.query(query, options)\n    },\n\n    queryKeys (query, options) {\n      return store.queryKeys(query, options)\n    },\n\n    async get (cid, options) {\n      return store.get(cid, options)\n    },\n\n    async * getMany (cids, options) {\n      yield * store.getMany(cids, options)\n    },\n\n    async put (cid, buf, options) {\n      await store.put(cid, buf, options)\n    },\n\n    async * putMany (pairs, options) {\n      yield * store.putMany(pairs, options)\n    },\n\n    has (cid, options) {\n      return store.has(cid, options)\n    },\n\n    async delete (cid, options) {\n      await ensureNotPinned(cid, pins)\n\n      return store.delete(cid, options)\n    },\n\n    deleteMany (cids, options) {\n      return store.deleteMany(map(cids, async cid => {\n        await ensureNotPinned(cid, pins)\n\n        return cid\n      }), options)\n    },\n\n    batch () {\n      return store.batch()\n    }\n  }\n}\n\n/**\n * @param {CID} cid\n * @param {Pins} pins\n */\nasync function ensureNotPinned (cid, pins) {\n  const { pinned, reason } = await pins.isPinnedWithType(cid, PinTypes.all)\n\n  if (pinned) {\n    throw errCode(new Error(`pinned: ${reason}`), 'ERR_BLOCK_PINNED')\n  }\n}\n"],"mappings":"AACA,OAAOA,GAAG,MAAM,QAAQ;AACxB,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,QAAQ,QAAQ,gBAAgB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,sBAAsBA,CAAEC,IAAI,EAAEC,KAAK,EAAE;EACnD,OAAO;IACLC,IAAIA,CAAA,EAAI;MACN,OAAOD,KAAK,CAACC,IAAI,CAAC,CAAC;IACrB,CAAC;IAEDC,KAAKA,CAAA,EAAI;MACP,OAAOF,KAAK,CAACE,KAAK,CAAC,CAAC;IACtB,CAAC;IAEDC,KAAKA,CAAEA,KAAK,EAAEC,OAAO,EAAE;MACrB,OAAOJ,KAAK,CAACG,KAAK,CAACA,KAAK,EAAEC,OAAO,CAAC;IACpC,CAAC;IAEDC,SAASA,CAAEF,KAAK,EAAEC,OAAO,EAAE;MACzB,OAAOJ,KAAK,CAACK,SAAS,CAACF,KAAK,EAAEC,OAAO,CAAC;IACxC,CAAC;IAED,MAAME,GAAGA,CAAEC,GAAG,EAAEH,OAAO,EAAE;MACvB,OAAOJ,KAAK,CAACM,GAAG,CAACC,GAAG,EAAEH,OAAO,CAAC;IAChC,CAAC;IAED,OAAQI,OAAOA,CAAEC,IAAI,EAAEL,OAAO,EAAE;MAC9B,OAAQJ,KAAK,CAACQ,OAAO,CAACC,IAAI,EAAEL,OAAO,CAAC;IACtC,CAAC;IAED,MAAMM,GAAGA,CAAEH,GAAG,EAAEI,GAAG,EAAEP,OAAO,EAAE;MAC5B,MAAMJ,KAAK,CAACU,GAAG,CAACH,GAAG,EAAEI,GAAG,EAAEP,OAAO,CAAC;IACpC,CAAC;IAED,OAAQQ,OAAOA,CAAEC,KAAK,EAAET,OAAO,EAAE;MAC/B,OAAQJ,KAAK,CAACY,OAAO,CAACC,KAAK,EAAET,OAAO,CAAC;IACvC,CAAC;IAEDU,GAAGA,CAAEP,GAAG,EAAEH,OAAO,EAAE;MACjB,OAAOJ,KAAK,CAACc,GAAG,CAACP,GAAG,EAAEH,OAAO,CAAC;IAChC,CAAC;IAED,MAAMW,MAAMA,CAAER,GAAG,EAAEH,OAAO,EAAE;MAC1B,MAAMY,eAAe,CAACT,GAAG,EAAER,IAAI,CAAC;MAEhC,OAAOC,KAAK,CAACe,MAAM,CAACR,GAAG,EAAEH,OAAO,CAAC;IACnC,CAAC;IAEDa,UAAUA,CAAER,IAAI,EAAEL,OAAO,EAAE;MACzB,OAAOJ,KAAK,CAACiB,UAAU,CAACtB,GAAG,CAACc,IAAI,EAAE,MAAMF,GAAG,IAAI;QAC7C,MAAMS,eAAe,CAACT,GAAG,EAAER,IAAI,CAAC;QAEhC,OAAOQ,GAAG;MACZ,CAAC,CAAC,EAAEH,OAAO,CAAC;IACd,CAAC;IAEDc,KAAKA,CAAA,EAAI;MACP,OAAOlB,KAAK,CAACkB,KAAK,CAAC,CAAC;IACtB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,eAAeF,eAAeA,CAAET,GAAG,EAAER,IAAI,EAAE;EACzC,MAAM;IAAEoB,MAAM;IAAEC;EAAO,CAAC,GAAG,MAAMrB,IAAI,CAACsB,gBAAgB,CAACd,GAAG,EAAEV,QAAQ,CAACyB,GAAG,CAAC;EAEzE,IAAIH,MAAM,EAAE;IACV,MAAMvB,OAAO,CAAC,IAAI2B,KAAK,CAAE,WAAUH,MAAO,EAAC,CAAC,EAAE,kBAAkB,CAAC;EACnE;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}