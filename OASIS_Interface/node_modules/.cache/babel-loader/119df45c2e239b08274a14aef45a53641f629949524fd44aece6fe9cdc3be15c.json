{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport { normalizeCidPath } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function* cat(ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath);\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/');\n      preload(CID.parse(pathComponents[0]));\n    }\n    const file = await exporter(ipfsPath, repo.blocks, options);\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory');\n    }\n    if (!file.content) {\n      throw new Error('this dag node has no content');\n    }\n    yield* file.content(options);\n  }\n  return withTimeoutOption(cat);\n}","map":{"version":3,"names":["exporter","normalizeCidPath","withTimeoutOption","CID","createCat","repo","preload","cat","ipfsPath","options","pathComponents","split","parse","file","blocks","type","Error","content"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/cat.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC5C;AACF;AACA;EACE,gBAAiBC,GAAGA,CAAEC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC5CD,QAAQ,GAAGP,gBAAgB,CAACO,QAAQ,CAAC;IAErC,IAAIC,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;MAC7B,MAAMI,cAAc,GAAGF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC;MAC1CL,OAAO,CAACH,GAAG,CAACS,KAAK,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC;IAEA,MAAMG,IAAI,GAAG,MAAMb,QAAQ,CAACQ,QAAQ,EAAEH,IAAI,CAACS,MAAM,EAAEL,OAAO,CAAC;;IAE3D;IACA,IAAII,IAAI,CAACE,IAAI,KAAK,WAAW,EAAE;MAC7B,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,IAAI,CAACH,IAAI,CAACI,OAAO,EAAE;MACjB,MAAM,IAAID,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,OAAQH,IAAI,CAACI,OAAO,CAACR,OAAO,CAAC;EAC/B;EAEA,OAAOP,iBAAiB,CAACK,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}