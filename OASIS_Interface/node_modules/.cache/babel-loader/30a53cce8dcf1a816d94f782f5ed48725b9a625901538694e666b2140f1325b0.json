{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n  const inputInfos = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {\n      name: program.variableNames[i],\n      shapeInfo\n    };\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return Object.assign({\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo\n    }, getUniformLocations(gpgpu, program, webGLProgram));\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      uniformLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      inShapesLocations: null,\n      inTexShapesLocations: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\nexport function getUniformLocations(gpgpu, program, webGLProgram) {\n  const uniformLocations = {};\n  const inShapesLocations = {};\n  const inTexShapesLocations = {};\n  const customUniformLocations = [];\n  let outShapeLocation;\n  let outTexShapeLocation;\n  let outShapeStridesLocation;\n  let infLoc = null;\n  let nanLoc = null;\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n  if (program.enableShapeUniforms) {\n    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] = gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n  return {\n    uniformLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);\n  }\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n    if (varShapeLoc) {\n      const {\n        uniformShape\n      } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n  }\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {\n        useSqueezeShape,\n        uniformShape,\n        keptDims\n      } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n      let rank1 = '',\n        rank2 = '',\n        rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode + `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\nexport function useShapeUniforms(rank) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}","map":{"version":3,"names":["backend_util","env","util","shader_compiler","createFragmentShader","compileProgram","gpgpu","program","inputs","output","inputInfos","map","input","i","shapeInfo","logicalShape","shape","texShape","isUniform","texData","isPacked","flatOffset","slice","name","variableNames","inShapeInfos","x","outShapeInfo","source","makeShader","fragmentShader","gl","webGLProgram","createProgram","get","Object","assign","getUniformLocations","uniformLocations","customUniformLocations","infLoc","nanLoc","inShapesLocations","inTexShapesLocations","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","getUniformLocation","getNumber","shouldThrow","length","varName","enableShapeUniforms","customUniforms","forEach","d","validateBinaryAndProgram","shapeInfos","Error","s","shapeA","shapeB","arraysEqual","texShapeA","texShapeB","runProgram","binary","customUniformValues","outTex","texture","outTexShape","setOutputPackedMatrixTexture","setOutputMatrixTexture","setProgram","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniformShape","getUniformInfoFromShape","packedInputs","uniform1iv","Int32Array","uniform2iv","uniform3iv","uniform4iv","uniform2i","sizeFromShape","uniformValues","vals","Float32Array","uniform1fv","uniform1i","setInputMatrixTexture","outShapeLoc","strides","computeStrides","customLoc","customValue","type","uniform2fv","uniform3fv","uniform4fv","executeProgram","makeShaderKey","keyInputs","concat","hasOffset","xTexShape","useSqueezeShape","keptDims","rank1","rank2","rank34","packedTexShape","Math","ceil","xRank","isLogicalShapTexShapeEqual","isScalar","broadcastDims","getBroadcastDims","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","userCode","key","constructor","useShapeUniforms","rank","getBool"],"sources":["../../../../../tfjs-backend-webgl/src/gpgpu_math.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface GPGPUBinaryLocations {\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  if (!env().get('ENGINE_COMPILE_ONLY')) {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      ...getUniformLocations(gpgpu, program, webGLProgram)\n    };\n  } else {\n    return {\n      program,\n      fragmentShader,\n      source,\n      webGLProgram,\n      inShapeInfos,\n      outShapeInfo,\n      uniformLocations: null,\n      customUniformLocations: null,\n      infLoc: null,\n      nanLoc: null,\n      inShapesLocations: null,\n      inTexShapesLocations: null,\n      outShapeLocation: null,\n      outShapeStridesLocation: null,\n      outTexShapeLocation: null\n    };\n  }\n}\n\nexport function getUniformLocations(\n    gpgpu: GPGPUContext, program: GPGPUProgram,\n    webGLProgram: WebGLProgram): GPGPUBinaryLocations {\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  let infLoc: WebGLUniformLocation = null;\n  let nanLoc: WebGLUniformLocation = null;\n\n  // Add special uniforms (NAN, INFINITY)\n  nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    uniformLocations,\n    customUniformLocations,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}