{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { abortableSource } from 'abortable-iterator';\nimport { pushable } from 'it-pushable';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { MAX_MSG_SIZE } from './decode.js';\nimport { anySignal } from 'any-signal';\nimport { InitiatorMessageTypes, ReceiverMessageTypes } from './message-types.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:mplex:stream');\nconst ERR_STREAM_RESET = 'ERR_STREAM_RESET';\nconst ERR_STREAM_ABORT = 'ERR_STREAM_ABORT';\nconst ERR_SINK_ENDED = 'ERR_SINK_ENDED';\nconst ERR_DOUBLE_SINK = 'ERR_DOUBLE_SINK';\nexport function createStream(options) {\n  const {\n    id,\n    name,\n    send,\n    onEnd,\n    type = 'initiator',\n    maxMsgSize = MAX_MSG_SIZE\n  } = options;\n  const abortController = new AbortController();\n  const resetController = new AbortController();\n  const closeController = new AbortController();\n  const Types = type === 'initiator' ? InitiatorMessageTypes : ReceiverMessageTypes;\n  const externalId = type === 'initiator' ? `i${id}` : `r${id}`;\n  const streamName = `${name == null ? id : name}`;\n  let sourceEnded = false;\n  let sinkEnded = false;\n  let sinkSunk = false;\n  let endErr;\n  const timeline = {\n    open: Date.now()\n  };\n  const onSourceEnd = err => {\n    if (sourceEnded) {\n      return;\n    }\n    sourceEnded = true;\n    log.trace('%s stream %s source end - err: %o', type, streamName, err);\n    if (err != null && endErr == null) {\n      endErr = err;\n    }\n    if (sinkEnded) {\n      stream.stat.timeline.close = Date.now();\n      if (onEnd != null) {\n        onEnd(endErr);\n      }\n    }\n  };\n  const onSinkEnd = err => {\n    if (sinkEnded) {\n      return;\n    }\n    sinkEnded = true;\n    log.trace('%s stream %s sink end - err: %o', type, streamName, err);\n    if (err != null && endErr == null) {\n      endErr = err;\n    }\n    if (sourceEnded) {\n      timeline.close = Date.now();\n      if (onEnd != null) {\n        onEnd(endErr);\n      }\n    }\n  };\n  const streamSource = pushable({\n    onEnd: onSourceEnd\n  });\n  const stream = {\n    // Close for both Reading and Writing\n    close: () => {\n      log.trace('%s stream %s close', type, streamName);\n      stream.closeRead();\n      stream.closeWrite();\n    },\n    // Close for reading\n    closeRead: () => {\n      log.trace('%s stream %s closeRead', type, streamName);\n      if (sourceEnded) {\n        return;\n      }\n      streamSource.end();\n    },\n    // Close for writing\n    closeWrite: () => {\n      log.trace('%s stream %s closeWrite', type, streamName);\n      if (sinkEnded) {\n        return;\n      }\n      closeController.abort();\n      try {\n        send({\n          id,\n          type: Types.CLOSE\n        });\n      } catch (err) {\n        log.trace('%s stream %s error sending close', type, name, err);\n      }\n      onSinkEnd();\n    },\n    // Close for reading and writing (local error)\n    abort: err => {\n      log.trace('%s stream %s abort', type, streamName, err);\n      // End the source with the passed error\n      streamSource.end(err);\n      abortController.abort();\n      onSinkEnd(err);\n    },\n    // Close immediately for reading and writing (remote error)\n    reset: () => {\n      const err = new CodeError('stream reset', ERR_STREAM_RESET);\n      resetController.abort();\n      streamSource.end(err);\n      onSinkEnd(err);\n    },\n    sink: async source => {\n      if (sinkSunk) {\n        throw new CodeError('sink already called on stream', ERR_DOUBLE_SINK);\n      }\n      sinkSunk = true;\n      if (sinkEnded) {\n        throw new CodeError('stream closed for writing', ERR_SINK_ENDED);\n      }\n      const signal = anySignal([abortController.signal, resetController.signal, closeController.signal]);\n      try {\n        source = abortableSource(source, signal);\n        if (type === 'initiator') {\n          // If initiator, open a new stream\n          send({\n            id,\n            type: InitiatorMessageTypes.NEW_STREAM,\n            data: new Uint8ArrayList(uint8ArrayFromString(streamName))\n          });\n        }\n        for await (let data of source) {\n          while (data.length > 0) {\n            if (data.length <= maxMsgSize) {\n              send({\n                id,\n                type: Types.MESSAGE,\n                data: data instanceof Uint8Array ? new Uint8ArrayList(data) : data\n              });\n              break;\n            }\n            data = data instanceof Uint8Array ? new Uint8ArrayList(data) : data;\n            send({\n              id,\n              type: Types.MESSAGE,\n              data: data.sublist(0, maxMsgSize)\n            });\n            data.consume(maxMsgSize);\n          }\n        }\n      } catch (err) {\n        if (err.type === 'aborted' && err.message === 'The operation was aborted') {\n          if (closeController.signal.aborted) {\n            return;\n          }\n          if (resetController.signal.aborted) {\n            err.message = 'stream reset';\n            err.code = ERR_STREAM_RESET;\n          }\n          if (abortController.signal.aborted) {\n            err.message = 'stream aborted';\n            err.code = ERR_STREAM_ABORT;\n          }\n        }\n        // Send no more data if this stream was remotely reset\n        if (err.code === ERR_STREAM_RESET) {\n          log.trace('%s stream %s reset', type, name);\n        } else {\n          log.trace('%s stream %s error', type, name, err);\n          try {\n            send({\n              id,\n              type: Types.RESET\n            });\n          } catch (err) {\n            log.trace('%s stream %s error sending reset', type, name, err);\n          }\n        }\n        streamSource.end(err);\n        onSinkEnd(err);\n        return;\n      } finally {\n        signal.clear();\n      }\n      try {\n        send({\n          id,\n          type: Types.CLOSE\n        });\n      } catch (err) {\n        log.trace('%s stream %s error sending close', type, name, err);\n      }\n      onSinkEnd();\n    },\n    source: streamSource,\n    sourcePush: data => {\n      streamSource.push(data);\n    },\n    sourceReadableLength() {\n      return streamSource.readableLength;\n    },\n    stat: {\n      direction: type === 'initiator' ? 'outbound' : 'inbound',\n      timeline\n    },\n    metadata: {},\n    id: externalId\n  };\n  return stream;\n}","map":{"version":3,"names":["abortableSource","pushable","CodeError","MAX_MSG_SIZE","anySignal","InitiatorMessageTypes","ReceiverMessageTypes","fromString","uint8ArrayFromString","Uint8ArrayList","logger","log","ERR_STREAM_RESET","ERR_STREAM_ABORT","ERR_SINK_ENDED","ERR_DOUBLE_SINK","createStream","options","id","name","send","onEnd","type","maxMsgSize","abortController","AbortController","resetController","closeController","Types","externalId","streamName","sourceEnded","sinkEnded","sinkSunk","endErr","timeline","open","Date","now","onSourceEnd","err","trace","stream","stat","close","onSinkEnd","streamSource","closeRead","closeWrite","end","abort","CLOSE","reset","sink","source","signal","NEW_STREAM","data","length","MESSAGE","Uint8Array","sublist","consume","message","aborted","code","RESET","clear","sourcePush","push","sourceReadableLength","readableLength","direction","metadata"],"sources":["../../src/stream.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}