{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { io, Tensor, util } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(modelUrl, loadOptions = {}) {\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = 'n/a';\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion() {\n    return this.version;\n  }\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n  get inputs() {\n    return this.executor.inputs;\n  }\n  get outputs() {\n    return this.executor.outputs;\n  }\n  get weights() {\n    return this.executor.weightMap;\n  }\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n  get modelSignature() {\n    return this.signature;\n  }\n  findIOHandler() {\n    const path = this.modelUrl;\n    if (path.load != null) {\n      // Path is an IO Handler.\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  load() {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');\n    }\n    const loadResult = this.handler.load();\n    if (util.isPromise(loadResult)) {\n      return loadResult.then(artifacts => this.loadSync(artifacts));\n    }\n    return this.loadSync(loadResult);\n  }\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {\n      signature =\n      // tslint:disable-next-line:no-any\n      this.artifacts.userDefinedMetadata.signature;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n    return true;\n  }\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n    return handlerOrURL.save(this.artifacts);\n  }\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs, config) {\n    return this.execute(inputs, this.outputNodes);\n  }\n  normalizeInputs(inputs) {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputs[i];\n      return map;\n    }, {});\n  }\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors() {\n    return this.executor.getIntermediateTensors();\n  }\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n    this.resourceManager.dispose();\n  }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}) {\n  if (modelUrl == null) {\n    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n  if (options.fromTFHub && typeof modelUrl === 'string') {\n    modelUrl = getTFHubUrl(modelUrl);\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport function loadGraphModelSync(modelSource) {\n  if (modelSource == null) {\n    throw new Error('modelUrl in loadGraphModelSync() cannot be null. Please provide a ' + 'url or an IOHandler that loads the model');\n  }\n  if (!modelSource.load) {\n    throw new Error(`modelUrl IO Handler ${modelSource} has no load function`);\n  }\n  const model = new GraphModel(modelSource);\n  model.load();\n  return model;\n}\nfunction getTFHubUrl(modelUrl) {\n  if (!modelUrl.endsWith('/')) {\n    modelUrl = modelUrl + '/';\n  }\n  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}","map":{"version":3,"names":["io","Tensor","util","OperationMapper","GraphExecutor","ResourceManager","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","constructor","modelUrl","loadOptions","version","resourceManager","modelVersion","inputNodes","executor","outputNodes","inputs","outputs","weights","weightMap","metadata","artifacts","userDefinedMetadata","modelSignature","signature","findIOHandler","path","load","handler","requestInit","browserHTTPRequest","handlers","getLoadHandlers","length","push","Error","loadResult","isPromise","then","loadSync","graph","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","modelInitializer","node","initializer","executeAsync","save","handlerOrURL","config","getSaveHandlers","predict","execute","normalizeInputs","Array","isArray","reduce","map","inputName","i","normalizeOutputs","result","getIntermediateTensors","disposeIntermediateTensors","Object","keys","newMap","key","dispose","loadGraphModel","options","fromTFHub","getTFHubUrl","model","loadGraphModelSync","modelSource","endsWith"],"sources":["../../../../../../tfjs-converter/src/executor/graph_model.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\ntype Url = string | io.IOHandler | io.IOHandlerSync;\ntype UrlIOHandler<T extends Url> = T extends string ? io.IOHandler : T;\n\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel<ModelURL extends Url = string|io.IOHandler>\n  implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: UrlIOHandler<ModelURL>;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: ModelURL,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions) as\n      IOHandler;\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0] as IOHandler;\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  load(): UrlIOHandler<ModelURL> extends io.IOHandlerSync ? boolean\n    : Promise<boolean> {\n    type IOHandler = UrlIOHandler<ModelURL>;\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n\n    type Result = IOHandler extends io.IOHandlerSync ? boolean\n      : Promise<boolean>;\n\n    const loadResult = this.handler.load() as ReturnType<IOHandler['load']>;\n    if (util.isPromise(loadResult)) {\n      return loadResult.then(artifacts => this.loadSync(artifacts)) as Result;\n    }\n\n    return this.loadSync(loadResult) as Result;\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.executor.getIntermediateTensors();\n  }\n\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub && typeof modelUrl === 'string') {\n    modelUrl = getTFHubUrl(modelUrl);\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n\n/**\n * Load a graph model given a synchronous IO handler with a 'load' method.\n *\n * @param modelSource The `io.IOHandlerSync` that loads the model.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\n\nexport function loadGraphModelSync(\n  modelSource: io.IOHandlerSync): GraphModel<io.IOHandlerSync> {\n  if (modelSource == null) {\n    throw new Error(\n        'modelUrl in loadGraphModelSync() cannot be null. Please provide a ' +\n        'url or an IOHandler that loads the model');\n  }\n  if (!modelSource.load) {\n    throw new Error(`modelUrl IO Handler ${modelSource} has no load function`);\n  }\n  const model = new GraphModel(modelSource);\n\n  model.load();\n  return model;\n}\n\nfunction getTFHubUrl(modelUrl: string): string {\n  if (!modelUrl.endsWith('/')) {\n    modelUrl = (modelUrl) + '/';\n  }\n  return `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAwBA,EAAE,EAAsCC,MAAM,EAAEC,IAAI,QAAO,uBAAuB;AAI1G,SAAQC,eAAe,QAAO,gCAAgC;AAE9D,SAAQC,aAAa,QAAO,kBAAkB;AAC9C,SAAQC,eAAe,QAAO,oBAAoB;AAElD,OAAO,MAAMC,kBAAkB,GAAG,mBAAmB;AACrD,OAAO,MAAMC,kBAAkB,GAAG,YAAY;AAI9C;;;;;;;;;;AAUA,OAAM,MAAOC,UAAU;EA2CrB;;;;;;;;;EASAC,YACYC,QAAkB,EAClBC,WAAA,GAA8B,EAAE;IADhC,KAAAD,QAAQ,GAARA,QAAQ;IACR,KAAAC,WAAW,GAAXA,WAAW;IAnDf,KAAAC,OAAO,GAAG,KAAK;IAoDrB,IAAID,WAAW,IAAI,IAAI,EAAE;MACvB,IAAI,CAACA,WAAW,GAAG,EAAE;;IAEvB,IAAI,CAACE,eAAe,GAAG,IAAIR,eAAe,EAAE;EAC9C;EAjDA;EACA,IAAIS,YAAYA,CAAA;IACd,OAAO,IAAI,CAACF,OAAO;EACrB;EAEA,IAAIG,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACC,QAAQ,CAACD,UAAU;EACjC;EAEA,IAAIE,WAAWA,CAAA;IACb,OAAO,IAAI,CAACD,QAAQ,CAACC,WAAW;EAClC;EAEA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACF,QAAQ,CAACE,MAAM;EAC7B;EAEA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACH,QAAQ,CAACG,OAAO;EAC9B;EAEA,IAAIC,OAAOA,CAAA;IACT,OAAO,IAAI,CAACJ,QAAQ,CAACK,SAAS;EAChC;EAEA,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACC,SAAS,CAACC,mBAAmB;EAC3C;EAEA,IAAIC,cAAcA,CAAA;IAChB,OAAO,IAAI,CAACC,SAAS;EACvB;EAoBQC,aAAaA,CAAA;IAEnB,MAAMC,IAAI,GAAG,IAAI,CAAClB,QAAQ;IAC1B,IAAKkB,IAAqB,CAACC,IAAI,IAAI,IAAI,EAAE;MACvC;MACA,IAAI,CAACC,OAAO,GAAGF,IAAiB;KACjC,MAAM,IAAI,IAAI,CAACjB,WAAW,CAACoB,WAAW,IAAI,IAAI,EAAE;MAC/C,IAAI,CAACD,OAAO,GAAG9B,EAAE,CAACgC,kBAAkB,CAACJ,IAAc,EAAE,IAAI,CAACjB,WAAW,CAC5D;KACV,MAAM;MACL,MAAMsB,QAAQ,GAAGjC,EAAE,CAACkC,eAAe,CAACN,IAAc,EAAE,IAAI,CAACjB,WAAW,CAAC;MACrE,IAAIsB,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;QACzB;QACA;QACAF,QAAQ,CAACG,IAAI,CAACpC,EAAE,CAACgC,kBAAkB,CAACJ,IAAc,EAAE,IAAI,CAACjB,WAAW,CAAC,CAAC;OACvE,MAAM,IAAIsB,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAIE,KAAK,CACX,wBAAwBJ,QAAQ,CAACE,MAAM,sBAAsB,GAC7D,QAAQ,CAACP,IAAI,CAAC,GAAG,CAAC;;MAExB,IAAI,CAACE,OAAO,GAAGG,QAAQ,CAAC,CAAC,CAAc;;EAE3C;EAEA;;;;EAIAJ,IAAIA,CAAA;IAGF,IAAI,CAACF,aAAa,EAAE;IACpB,IAAI,IAAI,CAACG,OAAO,CAACD,IAAI,IAAI,IAAI,EAAE;MAC7B,MAAM,IAAIQ,KAAK,CACX,mEAAmE,GACnE,8CAA8C,CAAC;;IAMrD,MAAMC,UAAU,GAAG,IAAI,CAACR,OAAO,CAACD,IAAI,EAAmC;IACvE,IAAI3B,IAAI,CAACqC,SAAS,CAACD,UAAU,CAAC,EAAE;MAC9B,OAAOA,UAAU,CAACE,IAAI,CAACjB,SAAS,IAAI,IAAI,CAACkB,QAAQ,CAAClB,SAAS,CAAC,CAAW;;IAGzE,OAAO,IAAI,CAACkB,QAAQ,CAACH,UAAU,CAAW;EAC5C;EAEA;;;;;;EAMAG,QAAQA,CAAClB,SAA4B;IACnC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,MAAMmB,KAAK,GAAG,IAAI,CAACnB,SAAS,CAACoB,aAAqC;IAElE,IAAIjB,SAAS;IACb,IAAI,IAAI,CAACH,SAAS,CAACC,mBAAmB,IAAI,IAAI,IAC1C,IAAI,CAACD,SAAS,CAACC,mBAAmB,CAACE,SAAS,IAAI,IAAI,EAAE;MACxDA,SAAS;MAAI;MACR,IAAI,CAACH,SAAS,CAACC,mBAA2B,CAACE,SACpB;KAC7B,MAAM;MACLA,SAAS,GAAG,IAAI,CAACH,SAAS,CAACG,SAAS;;IAEtC,IAAI,CAACA,SAAS,GAAGA,SAAS;IAE1B,IAAI,CAACd,OAAO,GAAG,GAAG8B,KAAK,CAACE,QAAQ,CAACC,QAAQ,IAAIH,KAAK,CAACE,QAAQ,CAACE,WAAW,EAAE;IACzE,MAAMzB,SAAS,GACXrB,EAAE,CAAC+C,aAAa,CAAC,IAAI,CAACxB,SAAS,CAACyB,UAAU,EAAE,IAAI,CAACzB,SAAS,CAAC0B,WAAW,CAAC;IAC3E,IAAI,CAACjC,QAAQ,GAAG,IAAIZ,aAAa,CAC7BD,eAAe,CAAC+C,QAAQ,CAACC,cAAc,CAACT,KAAK,EAAE,IAAI,CAAChB,SAAS,CAAC,CAAC;IACnE,IAAI,CAACV,QAAQ,CAACK,SAAS,GAAG,IAAI,CAAC+B,4BAA4B,CAAC/B,SAAS,CAAC;IACtE;IACA;IACA,IAAI,CAACL,QAAQ,CAACH,eAAe,GAAG,IAAI,CAACA,eAAe;IAEpD,IAAIU,SAAS,CAAC8B,gBAAgB,IAAI,IAAI,IACjC9B,SAAS,CAAC8B,gBAAyC,CAACC,IAAI,IAAI,IAAI,EAAE;MACrE,MAAMC,WAAW,GACbpD,eAAe,CAAC+C,QAAQ,CAACC,cAAc,CAAC5B,SAAS,CAAC8B,gBAAgB,CAAC;MACvE,IAAI,CAACE,WAAW,GAAG,IAAInD,aAAa,CAACmD,WAAW,CAAC;MACjD,IAAI,CAACA,WAAW,CAAClC,SAAS,GAAG,IAAI,CAACL,QAAQ,CAACK,SAAS;MACpD;MACA;MACA;MACA,IAAI,CAACkC,WAAW,CAAC1C,eAAe,GAAG,IAAI,CAACA,eAAe;MACvD,IAAI,CAAC0C,WAAW,CAACC,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC;;IAGvC,OAAO,IAAI;EACb;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4CA,MAAMC,IAAIA,CAACC,YAAiC,EAAEC,MAAsB;IAElE,IAAI,OAAOD,YAAY,KAAK,QAAQ,EAAE;MACpC,MAAMzB,QAAQ,GAAGjC,EAAE,CAAC4D,eAAe,CAACF,YAAY,CAAC;MACjD,IAAIzB,QAAQ,CAACE,MAAM,KAAK,CAAC,EAAE;QACzB,MAAM,IAAIE,KAAK,CACX,0CAA0CqB,YAAY,GAAG,CAAC;OAC/D,MAAM,IAAIzB,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAIE,KAAK,CACX,wBAAwBJ,QAAQ,CAACE,MAAM,sBAAsB,GAC7D,QAAQuB,YAAY,GAAG,CAAC;;MAE9BA,YAAY,GAAGzB,QAAQ,CAAC,CAAC,CAAC;;IAE5B,IAAIyB,YAAY,CAACD,IAAI,IAAI,IAAI,EAAE;MAC7B,MAAM,IAAIpB,KAAK,CACX,yDAAyD,GACzD,sDAAsD,CAAC;;IAG7D,OAAOqB,YAAY,CAACD,IAAI,CAAC,IAAI,CAAClC,SAAS,CAAC;EAC1C;EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAsCAsC,OAAOA,CAAC3C,MAAsC,EAAEyC,MAA2B;IAEzE,OAAO,IAAI,CAACG,OAAO,CAAC5C,MAAM,EAAE,IAAI,CAACD,WAAW,CAAC;EAC/C;EAEQ8C,eAAeA,CAAC7C,MACc;IACpC,IAAI,EAAEA,MAAM,YAAYjB,MAAM,CAAC,IAAI,CAAC+D,KAAK,CAACC,OAAO,CAAC/C,MAAM,CAAC,EAAE;MACzD;MACA,OAAOA,MAAM;;IAEfA,MAAM,GAAG8C,KAAK,CAACC,OAAO,CAAC/C,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;IAClD,IAAIA,MAAM,CAACiB,MAAM,KAAK,IAAI,CAACpB,UAAU,CAACoB,MAAM,EAAE;MAC5C,MAAM,IAAIE,KAAK,CACX,8BAA8B,GAC9B,uBAAuB,IAAI,CAACtB,UAAU,CAACoB,MAAM,iBAAiB,GAC9D,mBAAmBjB,MAAM,CAACiB,MAAM,iBAAiB,CAAC;;IAExD,OAAO,IAAI,CAACpB,UAAU,CAACmD,MAAM,CAAC,CAACC,GAAG,EAAEC,SAAS,EAAEC,CAAC,KAAI;MAClDF,GAAG,CAACC,SAAS,CAAC,GAAIlD,MAAmB,CAACmD,CAAC,CAAC;MACxC,OAAOF,GAAG;IACZ,CAAC,EAAE,EAAoB,CAAC;EAC1B;EAEQG,gBAAgBA,CAACnD,OAAwB;IAC/CA,OAAO,GAAGA,OAAO,IAAI,IAAI,CAACF,WAAW;IACrC,OAAO,CAAC+C,KAAK,CAACC,OAAO,CAAC9C,OAAO,CAAC,GAAG,CAACA,OAAO,CAAC,GAAGA,OAAO;EACtD;EAEA;;;;;;;;;;;;;;;;EAgBA2C,OAAOA,CAAC5C,MAAsC,EAAEC,OAAyB;IAEvED,MAAM,GAAG,IAAI,CAAC6C,eAAe,CAAC7C,MAAM,CAAC;IACrCC,OAAO,GAAG,IAAI,CAACmD,gBAAgB,CAACnD,OAAO,CAAC;IACxC,MAAMoD,MAAM,GAAG,IAAI,CAACvD,QAAQ,CAAC8C,OAAO,CAAC5C,MAAM,EAAEC,OAAO,CAAC;IACrD,OAAOoD,MAAM,CAACpC,MAAM,GAAG,CAAC,GAAGoC,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;EAC/C;EACA;;;;;;;;;;;;;;;;EAgBA,MAAMf,YAAYA,CACdtC,MAAsC,EACtCC,OAAyB;IAC3BD,MAAM,GAAG,IAAI,CAAC6C,eAAe,CAAC7C,MAAM,CAAC;IACrCC,OAAO,GAAG,IAAI,CAACmD,gBAAgB,CAACnD,OAAO,CAAC;IACxC,MAAMoD,MAAM,GAAG,MAAM,IAAI,CAACvD,QAAQ,CAACwC,YAAY,CAACtC,MAAM,EAAEC,OAAO,CAAC;IAChE,OAAOoD,MAAM,CAACpC,MAAM,GAAG,CAAC,GAAGoC,MAAM,GAAGA,MAAM,CAAC,CAAC,CAAC;EAC/C;EAEA;;;;;;EAMAC,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACxD,QAAQ,CAACwD,sBAAsB,EAAE;EAC/C;EAEA;;;;;;EAMAC,0BAA0BA,CAAA;IACxB,IAAI,CAACzD,QAAQ,CAACyD,0BAA0B,EAAE;EAC5C;EAEQrB,4BAA4BA,CAACe,GAAmB;IACtD,OAAOO,MAAM,CAACC,IAAI,CAACR,GAAG,CAAC,CAACD,MAAM,CAAC,CAACU,MAAuB,EAAEC,GAAG,KAAI;MAC9DD,MAAM,CAACC,GAAG,CAAC,GAAG,CAACV,GAAG,CAACU,GAAG,CAAC,CAAC;MACxB,OAAOD,MAAM;IACf,CAAC,EAAE,EAAE,CAAC;EACR;EAEA;;;;;EAKAE,OAAOA,CAAA;IACL,IAAI,CAAC9D,QAAQ,CAAC8D,OAAO,EAAE;IAEvB,IAAI,IAAI,CAACvB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACuB,OAAO,EAAE;;IAG5B,IAAI,CAACjE,eAAe,CAACiE,OAAO,EAAE;EAChC;;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAO,eAAeC,cAAcA,CAChCrE,QAA6B,EAC7BsE,OAAA,GAA0B,EAAE;EAC9B,IAAItE,QAAQ,IAAI,IAAI,EAAE;IACpB,MAAM,IAAI2B,KAAK,CACX,oEAAoE,GACpE,sCAAsC,CAAC;;EAE7C,IAAI2C,OAAO,IAAI,IAAI,EAAE;IACnBA,OAAO,GAAG,EAAE;;EAGd,IAAIA,OAAO,CAACC,SAAS,IAAI,OAAOvE,QAAQ,KAAK,QAAQ,EAAE;IACrDA,QAAQ,GAAGwE,WAAW,CAACxE,QAAQ,CAAC;;EAElC,MAAMyE,KAAK,GAAG,IAAI3E,UAAU,CAACE,QAAQ,EAAEsE,OAAO,CAAC;EAC/C,MAAMG,KAAK,CAACtD,IAAI,EAAE;EAClB,OAAOsD,KAAK;AACd;AAEA;;;;;;;AAQA,OAAM,SAAUC,kBAAkBA,CAChCC,WAA6B;EAC7B,IAAIA,WAAW,IAAI,IAAI,EAAE;IACvB,MAAM,IAAIhD,KAAK,CACX,oEAAoE,GACpE,0CAA0C,CAAC;;EAEjD,IAAI,CAACgD,WAAW,CAACxD,IAAI,EAAE;IACrB,MAAM,IAAIQ,KAAK,CAAC,uBAAuBgD,WAAW,uBAAuB,CAAC;;EAE5E,MAAMF,KAAK,GAAG,IAAI3E,UAAU,CAAC6E,WAAW,CAAC;EAEzCF,KAAK,CAACtD,IAAI,EAAE;EACZ,OAAOsD,KAAK;AACd;AAEA,SAASD,WAAWA,CAACxE,QAAgB;EACnC,IAAI,CAACA,QAAQ,CAAC4E,QAAQ,CAAC,GAAG,CAAC,EAAE;IAC3B5E,QAAQ,GAAIA,QAAQ,GAAI,GAAG;;EAE7B,OAAO,GAAGA,QAAQ,GAAGH,kBAAkB,GAAGD,kBAAkB,EAAE;AAChE"},"metadata":{},"sourceType":"module","externalDependencies":[]}