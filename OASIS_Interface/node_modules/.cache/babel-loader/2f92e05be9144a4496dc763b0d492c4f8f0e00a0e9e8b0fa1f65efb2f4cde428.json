{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { base58btc } from 'multiformats/bases/base58';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CID } from 'multiformats/cid';\nimport { URL } from 'iso-url';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const pathGatewayPattern = /^https?:\\/\\/[^/]+\\/(ip[fn]s)\\/([^/?#]+)/;\nexport const pathPattern = /^\\/(ip[fn]s)\\/([^/?#]+)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 2;\n// CID, libp2p-key or DNSLink\nexport const subdomainGatewayPattern = /^https?:\\/\\/([^/]+)\\.(ip[fn]s)\\.[^/?]+/;\nconst subdomainIdMatch = 1;\nconst subdomainProtocolMatch = 2;\n// Fully qualified domain name (FQDN) that has an explicit .tld suffix\nconst fqdnWithTld = /^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n  if (formatted === false) {\n    return false;\n  }\n  try {\n    Digest.decode(base58btc.decode('z' + formatted));\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction isMultiaddr(input) {\n  try {\n    return Boolean(multiaddr(input));\n  } catch {\n    return false;\n  }\n}\nfunction isBase32EncodedMultibase(hash) {\n  try {\n    let cid;\n    if (isString(hash)) {\n      cid = CID.parse(hash);\n    } else {\n      cid = CID.asCID(hash);\n    }\n    if (cid == null) {\n      return false;\n    }\n    base32.decode(cid.toString());\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction isCID(hash) {\n  try {\n    if (isString(hash)) {\n      return Boolean(CID.parse(hash));\n    }\n    if (hash instanceof Uint8Array) {\n      return Boolean(CID.decode(hash));\n    }\n    return Boolean(CID.asCID(hash)); // eslint-disable-line no-new\n  } catch {\n    return false;\n  }\n}\n/**\n * @param {string | Uint8Array | Multiaddr} input\n */\nfunction isPeerMultiaddr(input) {\n  return isMultiaddr(input) && mafmt.P2P.matches(input);\n}\n/**\n * @param {string | Uint8Array} input\n * @param {RegExp | string} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=2]\n */\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input);\n  if (formatted === false) {\n    return false;\n  }\n  const match = formatted.match(pattern);\n  if (match == null) {\n    return false;\n  }\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n  let hash = match[hashMatch];\n  if (hash != null && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority component anyway)\n    hash = hash.toLowerCase();\n  }\n  return isCID(hash);\n}\n/**\n *\n * @param {string | Uint8Array} input\n * @param {string | RegExp} pattern\n * @param {number} [protocolMatch=1]\n * @param {number} [hashMatch=1]\n */\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input);\n  if (formatted === false) {\n    return false;\n  }\n  const match = formatted.match(pattern);\n  if (match == null) {\n    return false;\n  }\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n  let ipnsId = match[hashMatch];\n  if (ipnsId != null && pattern === subdomainGatewayPattern) {\n    // when doing checks for subdomain context\n    // ensure ipnsId is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    ipnsId = ipnsId.toLowerCase();\n    // Check if it is cidv1\n    if (isCID(ipnsId)) return true;\n    // Check if it looks like FQDN\n    try {\n      if (!ipnsId.includes('.') && ipnsId.includes('-')) {\n        // name without tld, assuming its inlined into a single DNS label\n        // (https://github.com/ipfs/in-web-browsers/issues/169)\n        // en-wikipedia--on--ipfs-org â†’ en.wikipedia-on-ipfs.org\n        ipnsId = ipnsId.replace(/--/g, '@').replace(/-/g, '.').replace(/@/g, '-');\n      }\n      // URL implementation in web browsers forces lowercase of the hostname\n      const {\n        hostname\n      } = new URL(`http://${ipnsId}`); // eslint-disable-line no-new\n      // Check if potential FQDN has an explicit TLD\n      return fqdnWithTld.test(hostname);\n    } catch (e) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * @param {any} input\n */\nfunction isString(input) {\n  return typeof input === 'string';\n}\n/**\n * @param {Uint8Array | string} input\n */\nfunction convertToString(input) {\n  if (input instanceof Uint8Array) {\n    return uint8ArrayToString(input, 'base58btc');\n  }\n  if (isString(input)) {\n    return input;\n  }\n  return false;\n}\nexport const ipfsSubdomain = url => isIpfs(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const ipnsSubdomain = url => isIpns(url, subdomainGatewayPattern, subdomainProtocolMatch, subdomainIdMatch);\nexport const subdomain = url => ipfsSubdomain(url) || ipnsSubdomain(url);\nexport const ipfsUrl = url => isIpfs(url, pathGatewayPattern) || ipfsSubdomain(url);\nexport const ipnsUrl = url => isIpns(url, pathGatewayPattern) || ipnsSubdomain(url);\nexport const url = url => ipfsUrl(url) || ipnsUrl(url) || subdomain(url);\nexport const path = path => isIpfs(path, pathPattern) || isIpns(path, pathPattern);\nexport { isMultihash as multihash };\nexport { isMultiaddr as multiaddr };\nexport { isPeerMultiaddr as peerMultiaddr };\nexport { isCID as cid };\nexport const base32cid = cid => isCID(cid) && isBase32EncodedMultibase(cid);\nexport const ipfsPath = path => isIpfs(path, pathPattern);\nexport const ipnsPath = path => isIpns(path, pathPattern);\nexport const urlOrPath = x => url(x) || path(x);\nexport const cidPath = path => isString(path) && !isCID(path) && isIpfs(`/ipfs/${path}`, pathPattern);","map":{"version":3,"names":["base58btc","base32","Digest","multiaddr","mafmt","CID","URL","toString","uint8ArrayToString","pathGatewayPattern","pathPattern","defaultProtocolMatch","defaultHashMath","subdomainGatewayPattern","subdomainIdMatch","subdomainProtocolMatch","fqdnWithTld","isMultihash","hash","formatted","convertToString","decode","isMultiaddr","input","Boolean","isBase32EncodedMultibase","cid","isString","parse","asCID","isCID","Uint8Array","isPeerMultiaddr","P2P","matches","isIpfs","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","ipnsId","includes","replace","hostname","test","e","ipfsSubdomain","url","ipnsSubdomain","subdomain","ipfsUrl","ipnsUrl","path","multihash","peerMultiaddr","base32cid","ipfsPath","ipnsPath","urlOrPath","x","cidPath"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}