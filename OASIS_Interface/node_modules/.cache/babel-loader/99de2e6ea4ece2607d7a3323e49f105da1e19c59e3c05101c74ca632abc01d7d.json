{"ast":null,"code":"import { createServer } from 'net';\nexport async function freeport() {\n  return await new Promise((resolve, reject) => {\n    const server = createServer();\n    let port = 0;\n    server.once('listening', () => {\n      const address = server.address();\n      if (address == null) {\n        return reject(new Error('Server was not listening'));\n      }\n      if (typeof address === 'string') {\n        return reject(new Error('Server was Unix Socket'));\n      }\n      port = address.port;\n      server.close();\n    });\n    server.once('close', () => {\n      resolve(port);\n    });\n    server.once('error', reject);\n    server.listen(0, '127.0.0.1');\n  });\n}","map":{"version":3,"names":["createServer","freeport","Promise","resolve","reject","server","port","once","address","Error","close","listen"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,YAAY,QAAQ,KAAK;AAElC,OAAO,eAAeC,QAAQA,CAAA;EAC5B,OAAO,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;IAC3C,MAAMC,MAAM,GAAGL,YAAY,EAAE;IAC7B,IAAIM,IAAI,GAAG,CAAC;IAEZD,MAAM,CAACE,IAAI,CAAC,WAAW,EAAE,MAAK;MAC5B,MAAMC,OAAO,GAAGH,MAAM,CAACG,OAAO,EAAE;MAEhC,IAAIA,OAAO,IAAI,IAAI,EAAE;QACnB,OAAOJ,MAAM,CAAC,IAAIK,KAAK,CAAC,0BAA0B,CAAC,CAAC;;MAGtD,IAAI,OAAOD,OAAO,KAAK,QAAQ,EAAE;QAC/B,OAAOJ,MAAM,CAAC,IAAIK,KAAK,CAAC,wBAAwB,CAAC,CAAC;;MAGpDH,IAAI,GAAGE,OAAO,CAACF,IAAI;MACnBD,MAAM,CAACK,KAAK,EAAE;IAChB,CAAC,CAAC;IACFL,MAAM,CAACE,IAAI,CAAC,OAAO,EAAE,MAAK;MACxBJ,OAAO,CAACG,IAAI,CAAC;IACf,CAAC,CAAC;IACFD,MAAM,CAACE,IAAI,CAAC,OAAO,EAAEH,MAAM,CAAC;IAC5BC,MAAM,CAACM,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC;EAC/B,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}