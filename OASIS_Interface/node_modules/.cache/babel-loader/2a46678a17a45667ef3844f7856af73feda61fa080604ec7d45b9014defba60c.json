{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nconst IPFS_PREFIX = '/ipfs/';\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch ( /** @type {any} */err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n  let cid = CID.asCID(string);\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    };\n  }\n  string = string.toString();\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n  const parts = string.split('/');\n  let path;\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch ( /** @type {any} */err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n  if (parts.length) {\n    path = `/${parts.join('/')}`;\n  }\n  return {\n    cid,\n    path\n  };\n}","map":{"version":3,"names":["CID","errCode","IPFS_PREFIX","toCidAndPath","string","Uint8Array","decode","err","cid","asCID","path","undefined","toString","startsWith","substring","length","parts","split","parse","shift","join"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/to-cid-and-path.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath (string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAOC,OAAO,MAAM,UAAU;AAE9B,MAAMC,WAAW,GAAG,QAAQ;;AAE5B;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,MAAM,EAAE;EACpC,IAAIA,MAAM,YAAYC,UAAU,EAAE;IAChC,IAAI;MACFD,MAAM,GAAGJ,GAAG,CAACM,MAAM,CAACF,MAAM,CAAC;IAC7B,CAAC,CAAC,QAAO,kBAAmBG,GAAG,EAAE;MAC/B,MAAMN,OAAO,CAACM,GAAG,EAAE,iBAAiB,CAAC;IACvC;EACF;EAEA,IAAIC,GAAG,GAAGR,GAAG,CAACS,KAAK,CAACL,MAAM,CAAC;EAE3B,IAAII,GAAG,EAAE;IACP,OAAO;MACLA,GAAG;MACHE,IAAI,EAAEC;IACR,CAAC;EACH;EAEAP,MAAM,GAAGA,MAAM,CAACQ,QAAQ,CAAC,CAAC;EAE1B,IAAIR,MAAM,CAACS,UAAU,CAACX,WAAW,CAAC,EAAE;IAClCE,MAAM,GAAGA,MAAM,CAACU,SAAS,CAACZ,WAAW,CAACa,MAAM,CAAC;EAC/C;EAEA,MAAMC,KAAK,GAAGZ,MAAM,CAACa,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAIP,IAAI;EAER,IAAI;IACFF,GAAG,GAAGR,GAAG,CAACkB,KAAK,CAACF,KAAK,CAACG,KAAK,CAAC,CAAC,IAAI,EAAE,CAAC;EACtC,CAAC,CAAC,QAAO,kBAAmBZ,GAAG,EAAE;IAC/B,MAAMN,OAAO,CAACM,GAAG,EAAE,iBAAiB,CAAC;EACvC;EAEA,IAAIS,KAAK,CAACD,MAAM,EAAE;IAChBL,IAAI,GAAI,IAAGM,KAAK,CAACI,IAAI,CAAC,GAAG,CAAE,EAAC;EAC9B;EAEA,OAAO;IACLZ,GAAG;IACHE;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}