{"ast":null,"code":"/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor() {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map();\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe(topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || [];\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`);\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController();\n    this._subs.set(topic, [{\n      handler,\n      controller\n    }].concat(topicSubs));\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler));\n    }\n    return controller.signal;\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe(topic, handler) {\n    const subs = this._subs.get(topic) || [];\n    let unsubs;\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler));\n      unsubs = subs.filter(s => s.handler === handler);\n    } else {\n      this._subs.set(topic, []);\n      unsubs = subs;\n    }\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic);\n    }\n    unsubs.forEach(s => s.controller.abort());\n  }\n}","map":{"version":3,"names":["SubscriptionTracker","constructor","_subs","Map","subscribe","topic","handler","signal","topicSubs","get","find","s","Error","controller","AbortController","set","concat","addEventListener","unsubscribe","subs","unsubs","filter","length","delete","forEach","abort"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/pubsub/subscription-tracker.js"],"sourcesContent":["\n/**\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {import('@libp2p/interfaces/events').EventHandler<Message>} MessageHandlerFn\n *\n * @typedef {object} Subscription\n * @property {MessageHandlerFn} handler\n * @property {AbortController} controller\n */\n\nexport class SubscriptionTracker {\n  constructor () {\n    /** @type {Map<string, Subscription[]>} */\n    this._subs = new Map()\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} handler\n   * @param {AbortSignal} [signal]\n   */\n  subscribe (topic, handler, signal) {\n    const topicSubs = this._subs.get(topic) || []\n\n    if (topicSubs.find(s => s.handler === handler)) {\n      throw new Error(`Already subscribed to ${topic} with this handler`)\n    }\n\n    // Create controller so a call to unsubscribe can cancel the request\n    const controller = new AbortController()\n\n    this._subs.set(topic, [{ handler, controller }].concat(topicSubs))\n\n    // If there is an external signal, forward the abort event\n    if (signal) {\n      signal.addEventListener('abort', () => this.unsubscribe(topic, handler))\n    }\n\n    return controller.signal\n  }\n\n  /**\n   * @param {string} topic\n   * @param {MessageHandlerFn} [handler]\n   */\n  unsubscribe (topic, handler) {\n    const subs = this._subs.get(topic) || []\n    let unsubs\n\n    if (handler) {\n      this._subs.set(topic, subs.filter(s => s.handler !== handler))\n      unsubs = subs.filter(s => s.handler === handler)\n    } else {\n      this._subs.set(topic, [])\n      unsubs = subs\n    }\n\n    if (!(this._subs.get(topic) || []).length) {\n      this._subs.delete(topic)\n    }\n\n    unsubs.forEach(s => s.controller.abort())\n  }\n}\n"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,mBAAmB,CAAC;EAC/BC,WAAWA,CAAA,EAAI;IACb;IACA,IAAI,CAACC,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAASA,CAAEC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;IACjC,MAAMC,SAAS,GAAG,IAAI,CAACN,KAAK,CAACO,GAAG,CAACJ,KAAK,CAAC,IAAI,EAAE;IAE7C,IAAIG,SAAS,CAACE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,OAAO,KAAKA,OAAO,CAAC,EAAE;MAC9C,MAAM,IAAIM,KAAK,CAAE,yBAAwBP,KAAM,oBAAmB,CAAC;IACrE;;IAEA;IACA,MAAMQ,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IAExC,IAAI,CAACZ,KAAK,CAACa,GAAG,CAACV,KAAK,EAAE,CAAC;MAAEC,OAAO;MAAEO;IAAW,CAAC,CAAC,CAACG,MAAM,CAACR,SAAS,CAAC,CAAC;;IAElE;IACA,IAAID,MAAM,EAAE;MACVA,MAAM,CAACU,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAACC,WAAW,CAACb,KAAK,EAAEC,OAAO,CAAC,CAAC;IAC1E;IAEA,OAAOO,UAAU,CAACN,MAAM;EAC1B;;EAEA;AACF;AACA;AACA;EACEW,WAAWA,CAAEb,KAAK,EAAEC,OAAO,EAAE;IAC3B,MAAMa,IAAI,GAAG,IAAI,CAACjB,KAAK,CAACO,GAAG,CAACJ,KAAK,CAAC,IAAI,EAAE;IACxC,IAAIe,MAAM;IAEV,IAAId,OAAO,EAAE;MACX,IAAI,CAACJ,KAAK,CAACa,GAAG,CAACV,KAAK,EAAEc,IAAI,CAACE,MAAM,CAACV,CAAC,IAAIA,CAAC,CAACL,OAAO,KAAKA,OAAO,CAAC,CAAC;MAC9Dc,MAAM,GAAGD,IAAI,CAACE,MAAM,CAACV,CAAC,IAAIA,CAAC,CAACL,OAAO,KAAKA,OAAO,CAAC;IAClD,CAAC,MAAM;MACL,IAAI,CAACJ,KAAK,CAACa,GAAG,CAACV,KAAK,EAAE,EAAE,CAAC;MACzBe,MAAM,GAAGD,IAAI;IACf;IAEA,IAAI,CAAC,CAAC,IAAI,CAACjB,KAAK,CAACO,GAAG,CAACJ,KAAK,CAAC,IAAI,EAAE,EAAEiB,MAAM,EAAE;MACzC,IAAI,CAACpB,KAAK,CAACqB,MAAM,CAAClB,KAAK,CAAC;IAC1B;IAEAe,MAAM,CAACI,OAAO,CAACb,CAAC,IAAIA,CAAC,CAACE,UAAU,CAACY,KAAK,CAAC,CAAC,CAAC;EAC3C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}