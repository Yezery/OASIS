{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = {\n  success: true,\n  time: 0,\n  text: ''\n};\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createPing({\n  network\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ping\"]}\n   */\n  async function* ping(peerId, options = {}) {\n    const {\n      libp2p\n    } = await network.use();\n    options.count = options.count || 10;\n    const storedPeer = await libp2p.peerStore.get(peerId);\n    let id = storedPeer && storedPeer.id;\n    if (!id) {\n      yield {\n        ...basePacket,\n        text: `Looking up peer ${peerId}`\n      };\n      const remotePeer = await libp2p.peerRouting.findPeer(peerId);\n      id = remotePeer && remotePeer.id;\n    }\n    if (!id) {\n      throw new Error('Peer was not found');\n    }\n    yield {\n      ...basePacket,\n      text: `PING ${id.toString()}`\n    };\n    let packetCount = 0;\n    let totalTime = 0;\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id);\n        totalTime += time;\n        packetCount++;\n        yield {\n          ...basePacket,\n          time\n        };\n      } catch ( /** @type {any} */err) {\n        yield {\n          ...basePacket,\n          success: false,\n          text: err.toString()\n        };\n      }\n    }\n    if (packetCount) {\n      const average = totalTime / packetCount;\n      yield {\n        ...basePacket,\n        text: `Average latency: ${average}ms`\n      };\n    }\n  }\n  return withTimeoutOption(ping);\n}","map":{"version":3,"names":["withTimeoutOption","basePacket","success","time","text","createPing","network","ping","peerId","options","libp2p","use","count","storedPeer","peerStore","get","id","remotePeer","peerRouting","findPeer","Error","toString","packetCount","totalTime","i","err","average"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/ping.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {Pong|PingFailure|StatusUpdate} Packet\n * Note that not all ping response objects are \"pongs\".\n * A \"pong\" message can be identified by a truthy success property and an empty\n * text property. Other ping responses are failures or status updates.\n *\n * @typedef {object} Pong\n * @property {true} success\n * @property {number} time\n * @property {''} text\n *\n * @typedef {object} PingFailure\n * @property {false} success\n * @property {number} time\n * @property {string} text\n *\n * @typedef {object} StatusUpdate\n * @property {true} success\n * @property {0} time\n * @property {string} text\n *\n * @typedef {PingSettings & AbortOptions} PingOptions\n *\n * @typedef {object} PingSettings\n * @property {number} [count=10] - The number of ping messages to send\n *\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/** @type {{success:true, time:0, text: ''}} */\nconst basePacket = { success: true, time: 0, text: '' }\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n */\nexport function createPing ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ping\"]}\n   */\n  async function * ping (peerId, options = {}) {\n    const { libp2p } = await network.use()\n    options.count = options.count || 10\n\n    const storedPeer = await libp2p.peerStore.get(peerId)\n    let id = storedPeer && storedPeer.id\n\n    if (!id) {\n      yield { ...basePacket, text: `Looking up peer ${peerId}` }\n      const remotePeer = await libp2p.peerRouting.findPeer(peerId)\n\n      id = remotePeer && remotePeer.id\n    }\n\n    if (!id) {\n      throw new Error('Peer was not found')\n    }\n\n    yield { ...basePacket, text: `PING ${id.toString()}` }\n\n    let packetCount = 0\n    let totalTime = 0\n\n    for (let i = 0; i < options.count; i++) {\n      try {\n        const time = await libp2p.ping(id)\n        totalTime += time\n        packetCount++\n        yield { ...basePacket, time }\n      } catch (/** @type {any} */ err) {\n        yield { ...basePacket, success: false, text: err.toString() }\n      }\n    }\n\n    if (packetCount) {\n      const average = totalTime / packetCount\n      yield { ...basePacket, text: `Average latency: ${average}ms` }\n    }\n  }\n\n  return withTimeoutOption(ping)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,UAAU,GAAG;EAAEC,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAE,CAAC;EAAEC,IAAI,EAAE;AAAG,CAAC;;AAEvD;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAE;EAAEC;AAAQ,CAAC,EAAE;EACvC;AACF;AACA;EACE,gBAAiBC,IAAIA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAMJ,OAAO,CAACK,GAAG,CAAC,CAAC;IACtCF,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK,IAAI,EAAE;IAEnC,MAAMC,UAAU,GAAG,MAAMH,MAAM,CAACI,SAAS,CAACC,GAAG,CAACP,MAAM,CAAC;IACrD,IAAIQ,EAAE,GAAGH,UAAU,IAAIA,UAAU,CAACG,EAAE;IAEpC,IAAI,CAACA,EAAE,EAAE;MACP,MAAM;QAAE,GAAGf,UAAU;QAAEG,IAAI,EAAG,mBAAkBI,MAAO;MAAE,CAAC;MAC1D,MAAMS,UAAU,GAAG,MAAMP,MAAM,CAACQ,WAAW,CAACC,QAAQ,CAACX,MAAM,CAAC;MAE5DQ,EAAE,GAAGC,UAAU,IAAIA,UAAU,CAACD,EAAE;IAClC;IAEA,IAAI,CAACA,EAAE,EAAE;MACP,MAAM,IAAII,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAM;MAAE,GAAGnB,UAAU;MAAEG,IAAI,EAAG,QAAOY,EAAE,CAACK,QAAQ,CAAC,CAAE;IAAE,CAAC;IAEtD,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,SAAS,GAAG,CAAC;IAEjB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,OAAO,CAACG,KAAK,EAAEY,CAAC,EAAE,EAAE;MACtC,IAAI;QACF,MAAMrB,IAAI,GAAG,MAAMO,MAAM,CAACH,IAAI,CAACS,EAAE,CAAC;QAClCO,SAAS,IAAIpB,IAAI;QACjBmB,WAAW,EAAE;QACb,MAAM;UAAE,GAAGrB,UAAU;UAAEE;QAAK,CAAC;MAC/B,CAAC,CAAC,QAAO,kBAAmBsB,GAAG,EAAE;QAC/B,MAAM;UAAE,GAAGxB,UAAU;UAAEC,OAAO,EAAE,KAAK;UAAEE,IAAI,EAAEqB,GAAG,CAACJ,QAAQ,CAAC;QAAE,CAAC;MAC/D;IACF;IAEA,IAAIC,WAAW,EAAE;MACf,MAAMI,OAAO,GAAGH,SAAS,GAAGD,WAAW;MACvC,MAAM;QAAE,GAAGrB,UAAU;QAAEG,IAAI,EAAG,oBAAmBsB,OAAQ;MAAI,CAAC;IAChE;EACF;EAEA,OAAO1B,iBAAiB,CAACO,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}