{"ast":null,"code":"import { Uint8ArrayList } from 'uint8arraylist';\n/**\n * Returns an `AsyncGenerator` that allows reading a set number of bytes from the passed source.\n *\n * @example\n *\n * ```javascript\n * import { reader } from 'it-reader'\n *\n * const stream = reader(source)\n *\n * // read 10 bytes from the stream\n * const { done, value } = await stream.next(10)\n *\n * if (done === true) {\n *   // stream finished\n * }\n *\n * if (value != null) {\n *   // do something with value\n * }\n * ```\n */\nexport function reader(source) {\n  const reader = async function* () {\n    // @ts-expect-error first yield in stream is ignored\n    let bytes = yield; // Allows us to receive 8 when reader.next(8) is called\n    let bl = new Uint8ArrayList();\n    for await (const chunk of source) {\n      if (bytes == null) {\n        bl.append(chunk);\n        bytes = yield bl;\n        bl = new Uint8ArrayList();\n        continue;\n      }\n      bl.append(chunk);\n      while (bl.length >= bytes) {\n        const data = bl.sublist(0, bytes);\n        bl.consume(bytes);\n        bytes = yield data;\n        // If we no longer want a specific byte length, we yield the rest now\n        if (bytes == null) {\n          if (bl.length > 0) {\n            bytes = yield bl;\n            bl = new Uint8ArrayList();\n          }\n          break; // bytes is null and/or no more buffer to yield\n        }\n      }\n    }\n    // Consumer wants more bytes but the source has ended and our buffer\n    // is not big enough to satisfy.\n    if (bytes != null) {\n      throw Object.assign(new Error(`stream ended before ${bytes} bytes became available`), {\n        code: 'ERR_UNDER_READ',\n        buffer: bl\n      });\n    }\n  }();\n  void reader.next();\n  return reader;\n}","map":{"version":3,"names":["Uint8ArrayList","reader","source","bytes","bl","chunk","append","length","data","sublist","consume","Object","assign","Error","code","buffer","next"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;AAW/C;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,MAAMA,CAAEC,MAA2C;EACjE,MAAMD,MAAM,GAAY,mBAAgB;IACtC;IACA,IAAIE,KAAK,GAAuB,KAAK,EAAC;IACtC,IAAIC,EAAE,GAAG,IAAIJ,cAAc,EAAE;IAE7B,WAAW,MAAMK,KAAK,IAAIH,MAAM,EAAE;MAChC,IAAIC,KAAK,IAAI,IAAI,EAAE;QACjBC,EAAE,CAACE,MAAM,CAACD,KAAK,CAAC;QAChBF,KAAK,GAAG,MAAMC,EAAE;QAChBA,EAAE,GAAG,IAAIJ,cAAc,EAAE;QACzB;;MAGFI,EAAE,CAACE,MAAM,CAACD,KAAK,CAAC;MAEhB,OAAOD,EAAE,CAACG,MAAM,IAAIJ,KAAK,EAAE;QACzB,MAAMK,IAAI,GAAGJ,EAAE,CAACK,OAAO,CAAC,CAAC,EAAEN,KAAK,CAAC;QACjCC,EAAE,CAACM,OAAO,CAACP,KAAK,CAAC;QACjBA,KAAK,GAAG,MAAMK,IAAI;QAElB;QACA,IAAIL,KAAK,IAAI,IAAI,EAAE;UACjB,IAAIC,EAAE,CAACG,MAAM,GAAG,CAAC,EAAE;YACjBJ,KAAK,GAAG,MAAMC,EAAE;YAChBA,EAAE,GAAG,IAAIJ,cAAc,EAAE;;UAE3B,MAAK,CAAC;;;;IAKZ;IACA;IACA,IAAIG,KAAK,IAAI,IAAI,EAAE;MACjB,MAAMQ,MAAM,CAACC,MAAM,CACjB,IAAIC,KAAK,CAAC,uBAAuBV,KAAK,yBAAyB,CAAC,EAChE;QAAEW,IAAI,EAAE,gBAAgB;QAAEC,MAAM,EAAEX;MAAE,CAAE,CACvC;;EAEL,CAAC,CAAC,CAAE;EAEJ,KAAKH,MAAM,CAACe,IAAI,EAAE;EAClB,OAAOf,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}