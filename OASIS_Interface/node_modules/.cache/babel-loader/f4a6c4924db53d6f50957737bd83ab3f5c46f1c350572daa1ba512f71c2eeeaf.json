{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport errcode from 'err-code';\nimport { AbortError } from 'abortable-iterator';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT } from './constants.js';\nimport { createListener } from './listener.js';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanMultiaddr, cleanUrlSIO } from './utils.js';\nimport { WebRTCInitiator } from '@libp2p/webrtc-peer';\nimport randomBytes from 'iso-random-stream/src/random.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { symbol } from '@libp2p/interface-transport';\nimport { symbol as peerDiscoverySymbol } from '@libp2p/interface-peer-discovery';\nconst webrtcSupport = ('RTCPeerConnection' in globalThis);\nconst log = logger('libp2p:webrtc-star');\nconst noop = () => {};\nexport class WebRTCStarDiscovery extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.started = false;\n  }\n  get [peerDiscoverySymbol]() {\n    return true;\n  }\n  get [Symbol.toStringTag]() {\n    return '@libp2p/webrtc-star-discovery';\n  }\n  isStarted() {\n    return this.started;\n  }\n  async start() {\n    this.started = true;\n  }\n  async stop() {\n    this.started = false;\n  }\n  dispatchEvent(event) {\n    if (!this.isStarted()) {\n      return false;\n    }\n    return super.dispatchEvent(event);\n  }\n}\n/**\n * @class WebRTCStar\n */\nexport class WebRTCStar {\n  constructor(init) {\n    if (init?.wrtc != null) {\n      this.wrtc = init.wrtc;\n    }\n    // Keep Signalling references\n    this.sigServers = new Map();\n    // Discovery\n    this._discovery = new WebRTCStarDiscovery();\n    this.discovery = () => this._discovery;\n    this.peerDiscovered = this.peerDiscovered.bind(this);\n  }\n  get [symbol]() {\n    return true;\n  }\n  get [Symbol.toStringTag]() {\n    return '@libp2p/webrtc-star';\n  }\n  async dial(ma, options) {\n    const rawConn = await this._connect(ma, options);\n    const maConn = toMultiaddrConnection(rawConn, {\n      remoteAddr: ma,\n      signal: options.signal\n    });\n    log('new outbound connection %s', maConn.remoteAddr);\n    const conn = await options.upgrader.upgradeOutbound(maConn);\n    log('outbound connection %s upgraded', maConn.remoteAddr);\n    return conn;\n  }\n  async _connect(ma, options) {\n    if (options.signal?.aborted === true) {\n      throw new AbortError();\n    }\n    const channelOptions = {\n      ...(options.channelOptions ?? {})\n    };\n    // Use custom WebRTC implementation\n    if (this.wrtc != null) {\n      channelOptions.wrtc = this.wrtc;\n    }\n    const cOpts = ma.toOptions();\n    const intentId = uint8ArrayToString(randomBytes(36), 'hex');\n    return await new Promise((resolve, reject) => {\n      const sio = this.sigServers.get(cleanUrlSIO(ma));\n      if (sio?.socket == null) {\n        return reject(errcode(new Error('unknown signal server to use'), 'ERR_UNKNOWN_SIGNAL_SERVER'));\n      }\n      let connected = false;\n      log('dialing %s:%s', cOpts.host, cOpts.port);\n      const channel = new WebRTCInitiator(channelOptions);\n      const onError = evt => {\n        const err = evt.detail;\n        if (!connected) {\n          const msg = `connection error ${cOpts.host}:${cOpts.port}: ${err.message}`;\n          log.error(msg);\n          done(err);\n        }\n      };\n      const onReady = () => {\n        connected = true;\n        log('connection opened %s:%s', cOpts.host, cOpts.port);\n        done();\n      };\n      const onAbort = () => {\n        log.error('connection aborted %s:%s', cOpts.host, cOpts.port);\n        channel.close().finally(() => {\n          done(new AbortError());\n        });\n      };\n      const done = err => {\n        channel.removeEventListener('ready', onReady);\n        options.signal?.removeEventListener('abort', onAbort);\n        if (err == null) {\n          resolve(channel);\n        } else {\n          reject(err);\n        }\n      };\n      channel.addEventListener('ready', onReady, {\n        once: true\n      });\n      channel.addEventListener('close', () => {\n        channel.removeEventListener('error', onError);\n      });\n      options.signal?.addEventListener('abort', onAbort);\n      channel.addEventListener('signal', evt => {\n        const signal = evt.detail;\n        sio.socket.emit('ss-handshake', {\n          intentId: intentId,\n          srcMultiaddr: sio.signallingAddr.toString(),\n          dstMultiaddr: ma.toString(),\n          signal: signal\n        });\n      });\n      sio.socket.on('ws-handshake', offer => {\n        if (offer.intentId === intentId && offer.err != null) {\n          channel.close().finally(() => {\n            reject(errcode(new Error(offer.err), 'ERR_SIGNALLING_FAILED'));\n          });\n        }\n        if (offer.intentId !== intentId || offer.answer == null || channel.closed) {\n          return;\n        }\n        channel.handleSignal(offer.signal);\n      });\n    });\n  }\n  /**\n   * Creates a WebrtcStar listener. The provided `handler` function will be called\n   * anytime a new incoming Connection has been successfully upgraded via\n   * `upgrader.upgradeInbound`.\n   */\n  createListener(options) {\n    if (!webrtcSupport && this.wrtc == null) {\n      throw errcode(new Error('no WebRTC support'), 'ERR_NO_WEBRTC_SUPPORT');\n    }\n    options.channelOptions = options.channelOptions ?? {};\n    if (this.wrtc != null) {\n      options.channelOptions.wrtc = this.wrtc;\n    }\n    if (this.peerId == null) {\n      throw errcode(new Error('PeerId not set'), 'ERR_MISSING_PEER_ID');\n    }\n    return createListener(options.upgrader, options.handler ?? noop, this.peerId, this, options);\n  }\n  /**\n   * Takes a list of `Multiaddr`s and returns only valid TCP addresses\n   */\n  filter(multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n    return multiaddrs.filter(ma => {\n      if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n        return false;\n      }\n      return mafmt.WebRTCStar.matches(ma);\n    });\n  }\n  peerDiscovered(maStr) {\n    log('peer discovered: %s', maStr);\n    maStr = cleanMultiaddr(maStr);\n    const ma = multiaddr(maStr);\n    const peerIdStr = ma.getPeerId();\n    if (peerIdStr == null) {\n      return;\n    }\n    const peerId = peerIdFromString(peerIdStr);\n    this._discovery.dispatchEvent(new CustomEvent('peer', {\n      detail: {\n        id: peerId,\n        multiaddrs: [ma],\n        protocols: []\n      }\n    }));\n  }\n}","map":{"version":3,"names":["logger","errcode","AbortError","multiaddr","mafmt","CODE_CIRCUIT","createListener","toMultiaddrConnection","cleanMultiaddr","cleanUrlSIO","WebRTCInitiator","randomBytes","toString","uint8ArrayToString","EventEmitter","CustomEvent","peerIdFromString","symbol","peerDiscoverySymbol","webrtcSupport","globalThis","log","noop","WebRTCStarDiscovery","constructor","started","Symbol","toStringTag","isStarted","start","stop","dispatchEvent","event","WebRTCStar","init","wrtc","sigServers","Map","_discovery","discovery","peerDiscovered","bind","dial","ma","options","rawConn","_connect","maConn","remoteAddr","signal","conn","upgrader","upgradeOutbound","aborted","channelOptions","cOpts","toOptions","intentId","Promise","resolve","reject","sio","get","socket","Error","connected","host","port","channel","onError","evt","err","detail","msg","message","error","done","onReady","onAbort","close","finally","removeEventListener","addEventListener","once","emit","srcMultiaddr","signallingAddr","dstMultiaddr","on","offer","answer","closed","handleSignal","peerId","handler","filter","multiaddrs","Array","isArray","protoCodes","includes","matches","maStr","peerIdStr","getPeerId","id","protocols"],"sources":["../../src/transport.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,SAASC,SAAS,QAAQ,yBAAyB;AACnD,OAAO,KAAKC,KAAK,MAAM,qBAAqB;AAC5C,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,qBAAqB,QAAQ,qBAAqB;AAC3D,SAASC,cAAc,EAAEC,WAAW,QAAQ,YAAY;AACxD,SAASC,eAAe,QAAQ,qBAAqB;AACrD,OAAOC,WAAW,MAAM,iCAAiC;AACzD,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,aAAa;AAC5D,SAASC,YAAY,EAAEC,WAAW,QAAQ,2BAA2B;AAErE,SAASC,gBAAgB,QAAQ,iBAAiB;AAClD,SAASC,MAAM,QAAQ,6BAA6B;AAMpD,SAASA,MAAM,IAAIC,mBAAmB,QAAQ,kCAAkC;AAGhF,MAAMC,aAAa,IAAG,mBAAmB,IAAIC,UAAU;AACvD,MAAMC,GAAG,GAAGrB,MAAM,CAAC,oBAAoB,CAAC;AAExC,MAAMsB,IAAI,GAAGA,CAAA,KAAK,CAAE,CAAC;AAErB,OAAM,MAAOC,mBAAoB,SAAQT,YAAiC;EAA1EU,YAAA;;IACU,KAAAC,OAAO,GAAG,KAAK;EA6BzB;EA3BE,KAAKP,mBAAmB,IAAC;IACvB,OAAO,IAAI;EACb;EAEA,KAAKQ,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,+BAA+B;EACxC;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACH,OAAO;EACrB;EAEA,MAAMI,KAAKA,CAAA;IACT,IAAI,CAACJ,OAAO,GAAG,IAAI;EACrB;EAEA,MAAMK,IAAIA,CAAA;IACR,IAAI,CAACL,OAAO,GAAG,KAAK;EACtB;EAEAM,aAAaA,CAAEC,KAAkB;IAC/B,IAAI,CAAC,IAAI,CAACJ,SAAS,EAAE,EAAE;MACrB,OAAO,KAAK;;IAGd,OAAO,KAAK,CAACG,aAAa,CAACC,KAAK,CAAC;EACnC;;AAqCF;;;AAGA,OAAM,MAAOC,UAAU;EAOrBT,YAAaU,IAAqB;IAChC,IAAIA,IAAI,EAAEC,IAAI,IAAI,IAAI,EAAE;MACtB,IAAI,CAACA,IAAI,GAAGD,IAAI,CAACC,IAAI;;IAGvB;IACA,IAAI,CAACC,UAAU,GAAG,IAAIC,GAAG,EAAE;IAE3B;IACA,IAAI,CAACC,UAAU,GAAG,IAAIf,mBAAmB,EAAE;IAC3C,IAAI,CAACgB,SAAS,GAAG,MAAM,IAAI,CAACD,UAAU;IACtC,IAAI,CAACE,cAAc,GAAG,IAAI,CAACA,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC;EACtD;EAEA,KAAKxB,MAAM,IAAC;IACV,OAAO,IAAI;EACb;EAEA,KAAKS,MAAM,CAACC,WAAW,IAAC;IACtB,OAAO,qBAAqB;EAC9B;EAEA,MAAMe,IAAIA,CAAEC,EAAa,EAAEC,OAA8B;IACvD,MAAMC,OAAO,GAAG,MAAM,IAAI,CAACC,QAAQ,CAACH,EAAE,EAAEC,OAAO,CAAC;IAChD,MAAMG,MAAM,GAAGxC,qBAAqB,CAACsC,OAAO,EAAE;MAAEG,UAAU,EAAEL,EAAE;MAAEM,MAAM,EAAEL,OAAO,CAACK;IAAM,CAAE,CAAC;IACzF5B,GAAG,CAAC,4BAA4B,EAAE0B,MAAM,CAACC,UAAU,CAAC;IACpD,MAAME,IAAI,GAAG,MAAMN,OAAO,CAACO,QAAQ,CAACC,eAAe,CAACL,MAAM,CAAC;IAC3D1B,GAAG,CAAC,iCAAiC,EAAE0B,MAAM,CAACC,UAAU,CAAC;IACzD,OAAOE,IAAI;EACb;EAEA,MAAMJ,QAAQA,CAAEH,EAAa,EAAEC,OAA8B;IAC3D,IAAIA,OAAO,CAACK,MAAM,EAAEI,OAAO,KAAK,IAAI,EAAE;MACpC,MAAM,IAAInD,UAAU,EAAE;;IAGxB,MAAMoD,cAAc,GAAG;MACrB,IAAIV,OAAO,CAACU,cAAc,IAAI,EAAE;KACjC;IAED;IACA,IAAI,IAAI,CAACnB,IAAI,IAAI,IAAI,EAAE;MACrBmB,cAAc,CAACnB,IAAI,GAAG,IAAI,CAACA,IAAI;;IAGjC,MAAMoB,KAAK,GAAGZ,EAAE,CAACa,SAAS,EAAE;IAC5B,MAAMC,QAAQ,GAAG5C,kBAAkB,CAACF,WAAW,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC;IAE3D,OAAO,MAAM,IAAI+C,OAAO,CAAkB,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5D,MAAMC,GAAG,GAAG,IAAI,CAACzB,UAAU,CAAC0B,GAAG,CAACrD,WAAW,CAACkC,EAAE,CAAC,CAAC;MAEhD,IAAIkB,GAAG,EAAEE,MAAM,IAAI,IAAI,EAAE;QACvB,OAAOH,MAAM,CAAC3D,OAAO,CAAC,IAAI+D,KAAK,CAAC,8BAA8B,CAAC,EAAE,2BAA2B,CAAC,CAAC;;MAGhG,IAAIC,SAAS,GAAY,KAAK;MAE9B5C,GAAG,CAAC,eAAe,EAAEkC,KAAK,CAACW,IAAI,EAAEX,KAAK,CAACY,IAAI,CAAC;MAC5C,MAAMC,OAAO,GAAG,IAAI1D,eAAe,CAAC4C,cAAc,CAAC;MAEnD,MAAMe,OAAO,GAAIC,GAAuB,IAAI;QAC1C,MAAMC,GAAG,GAAGD,GAAG,CAACE,MAAM;QAEtB,IAAI,CAACP,SAAS,EAAE;UACd,MAAMQ,GAAG,GAAG,oBAAoBlB,KAAK,CAACW,IAAI,IAAIX,KAAK,CAACY,IAAI,KAAKI,GAAG,CAACG,OAAO,EAAE;UAC1ErD,GAAG,CAACsD,KAAK,CAACF,GAAG,CAAC;UACdG,IAAI,CAACL,GAAG,CAAC;;MAEb,CAAC;MAED,MAAMM,OAAO,GAAGA,CAAA,KAAK;QACnBZ,SAAS,GAAG,IAAI;QAEhB5C,GAAG,CAAC,yBAAyB,EAAEkC,KAAK,CAACW,IAAI,EAAEX,KAAK,CAACY,IAAI,CAAC;QACtDS,IAAI,EAAE;MACR,CAAC;MAED,MAAME,OAAO,GAAGA,CAAA,KAAK;QACnBzD,GAAG,CAACsD,KAAK,CAAC,0BAA0B,EAAEpB,KAAK,CAACW,IAAI,EAAEX,KAAK,CAACY,IAAI,CAAC;QAC7DC,OAAO,CAACW,KAAK,EAAE,CAACC,OAAO,CAAC,MAAK;UAC3BJ,IAAI,CAAC,IAAI1E,UAAU,EAAE,CAAC;QACxB,CAAC,CAAC;MACJ,CAAC;MAED,MAAM0E,IAAI,GAAIL,GAAW,IAAI;QAC3BH,OAAO,CAACa,mBAAmB,CAAC,OAAO,EAAEJ,OAAO,CAAC;QAC7CjC,OAAO,CAACK,MAAM,EAAEgC,mBAAmB,CAAC,OAAO,EAAEH,OAAO,CAAC;QAErD,IAAIP,GAAG,IAAI,IAAI,EAAE;UACfZ,OAAO,CAACS,OAAO,CAAC;SACjB,MAAM;UACLR,MAAM,CAACW,GAAG,CAAC;;MAEf,CAAC;MAEDH,OAAO,CAACc,gBAAgB,CAAC,OAAO,EAAEL,OAAO,EAAE;QACzCM,IAAI,EAAE;OACP,CAAC;MACFf,OAAO,CAACc,gBAAgB,CAAC,OAAO,EAAE,MAAK;QACrCd,OAAO,CAACa,mBAAmB,CAAC,OAAO,EAAEZ,OAAO,CAAC;MAC/C,CAAC,CAAC;MACFzB,OAAO,CAACK,MAAM,EAAEiC,gBAAgB,CAAC,OAAO,EAAEJ,OAAO,CAAC;MAElDV,OAAO,CAACc,gBAAgB,CAAC,QAAQ,EAAGZ,GAAG,IAAI;QACzC,MAAMrB,MAAM,GAAGqB,GAAG,CAACE,MAAM;QAEzBX,GAAG,CAACE,MAAM,CAACqB,IAAI,CAAC,cAAc,EAAE;UAC9B3B,QAAQ,EAAEA,QAAQ;UAClB4B,YAAY,EAAExB,GAAG,CAACyB,cAAc,CAAC1E,QAAQ,EAAE;UAC3C2E,YAAY,EAAE5C,EAAE,CAAC/B,QAAQ,EAAE;UAC3BqC,MAAM,EAAEA;SACT,CAAC;MACJ,CAAC,CAAC;MAEFY,GAAG,CAACE,MAAM,CAACyB,EAAE,CAAC,cAAc,EAAGC,KAAK,IAAI;QACtC,IAAIA,KAAK,CAAChC,QAAQ,KAAKA,QAAQ,IAAIgC,KAAK,CAAClB,GAAG,IAAI,IAAI,EAAE;UACpDH,OAAO,CAACW,KAAK,EAAE,CAACC,OAAO,CAAC,MAAK;YAC3BpB,MAAM,CAAC3D,OAAO,CAAC,IAAI+D,KAAK,CAACyB,KAAK,CAAClB,GAAG,CAAC,EAAE,uBAAuB,CAAC,CAAC;UAChE,CAAC,CAAC;;QAGJ,IAAIkB,KAAK,CAAChC,QAAQ,KAAKA,QAAQ,IAAIgC,KAAK,CAACC,MAAM,IAAI,IAAI,IAAItB,OAAO,CAACuB,MAAM,EAAE;UACzE;;QAGFvB,OAAO,CAACwB,YAAY,CAACH,KAAK,CAACxC,MAAM,CAAC;MACpC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA;;;;;EAKA3C,cAAcA,CAAEsC,OAAkC;IAChD,IAAI,CAACzB,aAAa,IAAI,IAAI,CAACgB,IAAI,IAAI,IAAI,EAAE;MACvC,MAAMlC,OAAO,CAAC,IAAI+D,KAAK,CAAC,mBAAmB,CAAC,EAAE,uBAAuB,CAAC;;IAGxEpB,OAAO,CAACU,cAAc,GAAGV,OAAO,CAACU,cAAc,IAAI,EAAE;IAErD,IAAI,IAAI,CAACnB,IAAI,IAAI,IAAI,EAAE;MACrBS,OAAO,CAACU,cAAc,CAACnB,IAAI,GAAG,IAAI,CAACA,IAAI;;IAGzC,IAAI,IAAI,CAAC0D,MAAM,IAAI,IAAI,EAAE;MACvB,MAAM5F,OAAO,CAAC,IAAI+D,KAAK,CAAC,gBAAgB,CAAC,EAAE,qBAAqB,CAAC;;IAGnE,OAAO1D,cAAc,CAACsC,OAAO,CAACO,QAAQ,EAAEP,OAAO,CAACkD,OAAO,IAAIxE,IAAI,EAAE,IAAI,CAACuE,MAAM,EAAE,IAAI,EAAEjD,OAAO,CAAC;EAC9F;EAEA;;;EAGAmD,MAAMA,CAAEC,UAAuB;IAC7BA,UAAU,GAAGC,KAAK,CAACC,OAAO,CAACF,UAAU,CAAC,GAAGA,UAAU,GAAG,CAACA,UAAU,CAAC;IAElE,OAAOA,UAAU,CAACD,MAAM,CAAEpD,EAAE,IAAI;MAC9B,IAAIA,EAAE,CAACwD,UAAU,EAAE,CAACC,QAAQ,CAAC/F,YAAY,CAAC,EAAE;QAC1C,OAAO,KAAK;;MAGd,OAAOD,KAAK,CAAC6B,UAAU,CAACoE,OAAO,CAAC1D,EAAE,CAAC;IACrC,CAAC,CAAC;EACJ;EAEAH,cAAcA,CAAE8D,KAAa;IAC3BjF,GAAG,CAAC,qBAAqB,EAAEiF,KAAK,CAAC;IACjCA,KAAK,GAAG9F,cAAc,CAAC8F,KAAK,CAAC;IAE7B,MAAM3D,EAAE,GAAGxC,SAAS,CAACmG,KAAK,CAAC;IAC3B,MAAMC,SAAS,GAAG5D,EAAE,CAAC6D,SAAS,EAAE;IAEhC,IAAID,SAAS,IAAI,IAAI,EAAE;MACrB;;IAGF,MAAMV,MAAM,GAAG7E,gBAAgB,CAACuF,SAAS,CAAC;IAE1C,IAAI,CAACjE,UAAU,CAACP,aAAa,CAAC,IAAIhB,WAAW,CAAC,MAAM,EAAE;MACpDyD,MAAM,EAAE;QACNiC,EAAE,EAAEZ,MAAM;QACVG,UAAU,EAAE,CAACrD,EAAE,CAAC;QAChB+D,SAAS,EAAE;;KAEd,CAAC,CAAC;EACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}