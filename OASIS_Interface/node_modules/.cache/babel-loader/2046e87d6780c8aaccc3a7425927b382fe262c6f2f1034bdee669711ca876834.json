{"ast":null,"code":"import { murmur3128 } from '@multiformats/murmur3';\nexport const hamtHashCode = murmur3128.code;\nexport const hamtBucketBits = 8;\n\n/**\n * @param {Uint8Array} buf\n */\nexport async function hamtHashFn(buf) {\n  return (await murmur3128.encode(buf)\n  // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n  // implementation only uses the first 64, so we must do the same\n  // for parity..\n  ).subarray(0, 8)\n  // Invert buffer because that's how Go impl does it\n  .reverse();\n}","map":{"version":3,"names":["murmur3128","hamtHashCode","code","hamtBucketBits","hamtHashFn","buf","encode","subarray","reverse"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/hamt-constants.js"],"sourcesContent":["import { murmur3128 } from '@multiformats/murmur3'\n\nexport const hamtHashCode = murmur3128.code\nexport const hamtBucketBits = 8\n\n/**\n * @param {Uint8Array} buf\n */\nexport async function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .subarray(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAuB;AAElD,OAAO,MAAMC,YAAY,GAAGD,UAAU,CAACE,IAAI;AAC3C,OAAO,MAAMC,cAAc,GAAG,CAAC;;AAE/B;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAEC,GAAG,EAAE;EACrC,OAAO,CAAC,MAAML,UAAU,CAACM,MAAM,CAACD,GAAG;EACjC;EACA;EACA;EAAA,EACCE,QAAQ,CAAC,CAAC,EAAE,CAAC;EACd;EAAA,CACCC,OAAO,CAAC,CAAC;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}