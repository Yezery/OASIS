{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nconst MFS_ROOT_KEY = new Key('/local/filesroot');\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore(backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY);\n    await backends.datastore.put(MFS_ROOT_KEY, root);\n    await backends.root.delete(MFS_ROOT_KEY);\n  }\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo datastore');\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot(backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY);\n    await backends.root.put(MFS_ROOT_KEY, root);\n    await backends.datastore.delete(MFS_ROOT_KEY);\n  }\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo root datastore');\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};","map":{"version":3,"names":["Key","MFS_ROOT_KEY","storeMfsRootInDatastore","backends","onProgress","root","open","datastore","has","get","put","delete","close","storeMfsRootInRoot","migration","version","description","migrate","revert"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js"],"sourcesContent":["\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n"],"mappings":"AACA,SAASA,GAAG,QAAQ,yBAAyB;AAE7C,MAAMC,YAAY,GAAG,IAAID,GAAG,CAAC,kBAAkB,CAAC;;AAEhD;AACA;AACA;AACA;AACA,eAAeE,uBAAuBA,CAAEC,QAAQ,EAAEC,UAAU,GAAGA,CAAA,KAAM,CAAC,CAAC,EAAE;EACvEA,UAAU,CAAC,GAAG,EAAE,sCAAsC,CAAC;EAEvD,MAAMD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC;EAC1B,MAAMH,QAAQ,CAACI,SAAS,CAACD,IAAI,CAAC,CAAC;EAE/B,IAAI,MAAMH,QAAQ,CAACE,IAAI,CAACG,GAAG,CAACP,YAAY,CAAC,EAAE;IACzC,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAI,CAACI,GAAG,CAACR,YAAY,CAAC;IAClD,MAAME,QAAQ,CAACI,SAAS,CAACG,GAAG,CAACT,YAAY,EAAEI,IAAI,CAAC;IAChD,MAAMF,QAAQ,CAACE,IAAI,CAACM,MAAM,CAACV,YAAY,CAAC;EAC1C;EAEA,MAAME,QAAQ,CAACI,SAAS,CAACK,KAAK,CAAC,CAAC;EAChC,MAAMT,QAAQ,CAACE,IAAI,CAACO,KAAK,CAAC,CAAC;EAE3BR,UAAU,CAAC,GAAG,EAAE,mCAAmC,CAAC;AACtD;;AAEA;AACA;AACA;AACA;AACA,eAAeS,kBAAkBA,CAAEV,QAAQ,EAAEC,UAAU,GAAGA,CAAA,KAAM,CAAC,CAAC,EAAE;EAClEA,UAAU,CAAC,GAAG,EAAE,2CAA2C,CAAC;EAE5D,MAAMD,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,CAAC;EAC1B,MAAMH,QAAQ,CAACI,SAAS,CAACD,IAAI,CAAC,CAAC;EAE/B,IAAI,MAAMH,QAAQ,CAACI,SAAS,CAACC,GAAG,CAACP,YAAY,CAAC,EAAE;IAC9C,MAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACI,SAAS,CAACE,GAAG,CAACR,YAAY,CAAC;IACvD,MAAME,QAAQ,CAACE,IAAI,CAACK,GAAG,CAACT,YAAY,EAAEI,IAAI,CAAC;IAC3C,MAAMF,QAAQ,CAACI,SAAS,CAACI,MAAM,CAACV,YAAY,CAAC;EAC/C;EAEA,MAAME,QAAQ,CAACI,SAAS,CAACK,KAAK,CAAC,CAAC;EAChC,MAAMT,QAAQ,CAACE,IAAI,CAACO,KAAK,CAAC,CAAC;EAE3BR,UAAU,CAAC,GAAG,EAAE,wCAAwC,CAAC;AAC3D;;AAEA;AACA,OAAO,MAAMU,SAAS,GAAG;EACvBC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE,iCAAiC;EAC9CC,OAAO,EAAEf,uBAAuB;EAChCgB,MAAM,EAAEL;AACV,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}