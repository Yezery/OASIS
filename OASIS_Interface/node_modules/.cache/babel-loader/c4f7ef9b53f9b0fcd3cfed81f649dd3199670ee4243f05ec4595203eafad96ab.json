{"ast":null,"code":"import { base58btc } from './bases/base58.js';\n\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\nconst walk = async ({\n  cid,\n  load,\n  seen\n}) => {\n  seen = seen || new Set();\n  const b58Cid = cid.toString(base58btc);\n  if (seen.has(b58Cid)) {\n    return;\n  }\n  const block = await load(cid);\n  seen.add(b58Cid);\n  if (block === null) {\n    // the loader signals with `null` that we should skip this block\n    return;\n  }\n  for (const [, cid] of block.links()) {\n    await walk({\n      cid,\n      load,\n      seen\n    });\n  }\n};\nexport { walk };","map":{"version":3,"names":["base58btc","walk","cid","load","seen","Set","b58Cid","toString","has","block","add","links"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/multiformats@11.0.2/node_modules/multiformats/src/traversal.js"],"sourcesContent":["import { base58btc } from './bases/base58.js'\n\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\nconst walk = async ({ cid, load, seen }) => {\n  seen = seen || new Set()\n  const b58Cid = cid.toString(base58btc)\n  if (seen.has(b58Cid)) {\n    return\n  }\n\n  const block = await load(cid)\n  seen.add(b58Cid)\n\n  if (block === null) { // the loader signals with `null` that we should skip this block\n    return\n  }\n\n  for (const [, cid] of block.links()) {\n    await walk({ cid, load, seen })\n  }\n}\n\nexport { walk }\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,mBAAmB;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,GAAG,MAAAA,CAAO;EAAEC,GAAG;EAAEC,IAAI;EAAEC;AAAK,CAAC,KAAK;EAC1CA,IAAI,GAAGA,IAAI,IAAI,IAAIC,GAAG,CAAC,CAAC;EACxB,MAAMC,MAAM,GAAGJ,GAAG,CAACK,QAAQ,CAACP,SAAS,CAAC;EACtC,IAAII,IAAI,CAACI,GAAG,CAACF,MAAM,CAAC,EAAE;IACpB;EACF;EAEA,MAAMG,KAAK,GAAG,MAAMN,IAAI,CAACD,GAAG,CAAC;EAC7BE,IAAI,CAACM,GAAG,CAACJ,MAAM,CAAC;EAEhB,IAAIG,KAAK,KAAK,IAAI,EAAE;IAAE;IACpB;EACF;EAEA,KAAK,MAAM,GAAGP,GAAG,CAAC,IAAIO,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE;IACnC,MAAMV,IAAI,CAAC;MAAEC,GAAG;MAAEC,IAAI;MAAEC;IAAK,CAAC,CAAC;EACjC;AACF,CAAC;AAED,SAASH,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}