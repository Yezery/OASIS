{"ast":null,"code":"import request from \"@/utils/axiosRequest\";\nimport store from '@/store';\nimport { create } from \"ipfs-http-client\";\nimport Web3 from 'web3';\nimport { updateSaleactive, insertSale, deleteSale } from \"./Sale\";\nimport { postOwnerContractList, getOwnerUpSaleNFTs } from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsBaseURI, ipfsPeerAddress, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\";\n//  IPFS的根URL\nconst baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI();\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode();\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\nconst peerAddress = ipfsPeerAddress();\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({\n    data: MintNFTContractBytecode,\n    arguments: [Name, Symbol, publicGatewayUrl, Maxmums]\n  }).send({\n    from: store.state.currentAddress\n  });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: \"10.39.5.194\",\n        port: \"5001\",\n        protocol: \"http\"\n      }).add(uploadFiles[0].raw, {\n        remote: true,\n        pin: true\n      });\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n\n// async function mintNFT(NFTContract, Name, Symbol, nftName,description,uploadFiles) {\nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0;\n  let ipfsHash = await savetoIPFS(uploadFiles);\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`;\n  if (ipfsHash != null) {\n    try {\n      await NFTContract.methods._currentId().call().then(re => {\n        nftCount = re;\n      });\n    } catch (error) {\n      console.log(error);\n      console.log(NFTContract.methods);\n    }\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({\n      from: store.state.currentAddress\n    });\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        postOwnerContractList({\n          ownerAddress: store.state.currentAddress\n        }).then(re => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return;\n      } else {\n        return;\n      }\n    });\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles);\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n}\nconsole.log();\nMarketContract = new marketUseWeb3.eth.Contract(MarketContractABI, MarketContractAddress);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = [];\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re;\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList;\n}\nexport async function UpSale(NFT) {\n  console.log(NFT);\n  //授权\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NFT.nftAddress);\n  await NFTContract.methods.approve(MarketContractAddress, NFT.tokenId).send({\n    from: store.state.currentAddress\n  });\n  await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether'), \"\").send({\n    from: store.state.currentAddress\n  });\n  let SaleId;\n  await MarketContract.methods.getSalesId().call().then(re => {\n    SaleId = re;\n  });\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  };\n  try {\n    await insertSale(Sale);\n    NFT.isActive = true;\n    await updateSaleactive(NFT);\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function Buy(NFT) {\n  // console.log(MarketContract);\n  console.log(NFT);\n  // console.log(NFT.saleId);\n  if (!store.state.Web3) {\n    alert(\"请登录\");\n    return;\n  }\n  console.log(NFT.price);\n  try {\n    await MarketContract.methods.buy(NFT.saleId).send({\n      from: store.state.currentAddress,\n      value: store.state.Web3.utils.toWei(NFT.price, 'ether')\n    });\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n  NFT.isActive = false;\n  NFT.ownerAddress = store.state.currentAddress;\n  await updateSaleactive(NFT);\n}\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => {\n    FeePercentage = re;\n  });\n  return FeePercentage;\n}\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => {\n      SaleId = re.data.data.saleId;\n    });\n    console.log(SaleId);\n    console.log();\n    // await MarketContract.methods.cancelSale(SaleId)\n    // .send({\n    //   from: store.state.currentAddress\n    // });\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n  // await deleteSale(NFT)\n}","map":{"version":3,"names":["request","store","create","Web3","updateSaleactive","insertSale","deleteSale","postOwnerContractList","getOwnerUpSaleNFTs","mintNFTContractABI","mintNFTContractBytecode","marketContractAddress","marketContractABI","ipfsBaseURI","ipfsPeerAddress","ipfsPublicGatewayUrl","rpcUrl","baseURL","MintNFTContractABI","MintNFTContractBytecode","MarketContractAddress","MarketContractABI","peerAddress","publicGatewayUrl","deployNFTContract","Name","Symbol","Maxmums","contract","state","eth","Contract","NewNFTContractAddress","deploy","data","arguments","send","from","currentAddress","console","log","_address","NFTContract","savetoIPFS","uploadFiles","length","results","host","port","protocol","add","raw","remote","pin","path","err","error","mintNFT","name","symbol","maxmums","NFTName","description","nftCount","ipfsHash","ipfsPath","methods","_currentId","call","then","re","mint","url","method","Number","res","status","ownerAddress","commit","getNFTStruct","nftAddress","MakeNFT","FirstNFTName","Description","MarketContract","marketUseWeb3","window","ethereum","undefined","getSaleList","SaleList","getSales","UpSale","NFT","approve","tokenId","createSale","utils","toWei","price","SaleId","getSalesId","Sale","saleId","NFTOwnerList","isActive","Buy","alert","buy","value","getFeePercentage","FeePercentage","feePercentage","DownSale"],"sources":["/Users/yezery/Oasis/OASIS/src/api/axios/contract.js"],"sourcesContent":["import request from \"@/utils/axiosRequest\"\nimport store from '@/store';\nimport { create } from \"ipfs-http-client\"\nimport Web3 from 'web3'\nimport { updateSaleactive, insertSale ,deleteSale ,} from \"./Sale\"\nimport { postOwnerContractList ,getOwnerUpSaleNFTs} from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsBaseURI, ipfsPeerAddress, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\"\n//  IPFS的根URL\nconst baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI()\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode()\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\nconst peerAddress = ipfsPeerAddress()\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({ data: MintNFTContractBytecode, arguments: [Name, Symbol, publicGatewayUrl, Maxmums] })\n    .send({\n      from: store.state.currentAddress\n    });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: \"10.39.5.194\",\n        port: \"5001\",\n        protocol: \"http\",\n      }).add(\n        uploadFiles[0].raw,\n        { remote: true, pin: true, }\n      );\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null\n  }\n}\n\n// async function mintNFT(NFTContract, Name, Symbol, nftName,description,uploadFiles) {\nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0\n  let ipfsHash = await savetoIPFS(uploadFiles)\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`\n  if (ipfsHash != null) {\n    try {\n      await NFTContract.methods._currentId().call().then(re => { nftCount = re })\n    } catch (error) {\n      console.log(error);\n      console.log(NFTContract.methods);\n    }\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({ from: store.state.currentAddress })\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return\n      } else {\n        return\n      }\n    })\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles)\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n}\nconsole.log();\nMarketContract = new marketUseWeb3.eth.Contract(\n  MarketContractABI,\n  MarketContractAddress\n);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = []\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList\n}\n\nexport async function UpSale(NFT) {\n\n  console.log(NFT);\n  //授权\n  let NFTContract = await new store.state.Web3.eth.Contract(\n    MintNFTContractABI,\n    NFT.nftAddress\n  );\n  await NFTContract.methods\n    .approve(MarketContractAddress, NFT.tokenId)\n    .send({ from: store.state.currentAddress });\n\n  await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether')\n    , \"\").send({ from: store.state.currentAddress })\n\n  let SaleId;\n  await MarketContract.methods.getSalesId().call().then(re => {\n    SaleId = re\n  })\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  }\n  try {\n    await insertSale(Sale)\n    NFT.isActive = true\n    await updateSaleactive(NFT)\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function Buy(NFT) {\n  // console.log(MarketContract);\n  console.log(NFT);\n  // console.log(NFT.saleId);\n  if (!store.state.Web3) {\n    alert(\"请登录\")\n    return\n  }\n  console.log(NFT.price);\n  try {\n    await MarketContract.methods.buy(NFT.saleId)\n    .send({\n      from: store.state.currentAddress,\n      value: store.state.Web3.utils.toWei(NFT.price, 'ether'),\n    });\n  } catch (error) {\n    console.log(error);\n    return\n  }\n  NFT.isActive = false\n  NFT.ownerAddress = store.state.currentAddress\n  await updateSaleactive(NFT)\n}\n\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => { FeePercentage = re })\n  return FeePercentage;\n}\n\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => { SaleId = re.data.data.saleId;})\n    console.log(SaleId);\n    console.log();\n    // await MarketContract.methods.cancelSale(SaleId)\n    // .send({\n    //   from: store.state.currentAddress\n    // });\n  } catch (error) {\n    console.log(error);\n    return\n  }\n  // await deleteSale(NFT)\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}