{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs } from './io_utils';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nclass HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n    const init = Object.assign({\n      method: this.DEFAULT_METHOD\n    }, this.requestInit);\n    init.body = new FormData();\n    const weightsManifest = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n      type: JSON_TYPE\n    }), 'model.json');\n    if (modelArtifacts.weightData != null) {\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n      init.body.append('model.weights.bin', new Blob([weightBuffer], {\n        type: OCTET_STREAM_MIME_TYPE\n      }), 'model.weights.bin');\n    }\n    const response = await this.fetch(this.path, init);\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n    }\n  }\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n    }\n    let modelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);\n    }\n    return getModelArtifactsForJSON(modelJSON, weightsManifest => this.loadWeights(weightsManifest));\n  }\n  async loadWeights(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const weightSpecs = getWeightSpecs(weightsManifest);\n    const fetchURLs = [];\n    const urlPromises = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...(await Promise.all(urlPromises)));\n    }\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, buffers];\n  }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\nexport { HTTPRequest };\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"names":["env","assert","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","getWeightSpecs","CompositeArrayBuffer","IORouterRegistry","loadWeightsAsArrayBuffer","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","constructor","path","loadOptions","DEFAULT_METHOD","weightPathPrefix","onProgress","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","save","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","append","Blob","JSON","stringify","type","weightData","weightBuffer","join","response","ok","modelArtifactsInfo","responses","status","load","modelConfigRequest","modelJSON","json","e","message","endsWith","loadWeights","weightPath","prefix","suffix","parseUrl","pathPrefix","fetchURLs","urlPromises","weightsGroup","push","Promise","all","buffers","URL_SCHEME_REGEX","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter","browserHTTPRequest"],"sources":["../../../../../../tfjs-core/src/io/http.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts, getWeightSpecs} from './io_utils';\nimport {CompositeArrayBuffer} from './composite_array_buffer';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightData, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      // TODO(mattsoulanille): Support saving models over 2GB that exceed\n      // Chrome's ArrayBuffer size limit.\n      const weightBuffer = CompositeArrayBuffer.join(modelArtifacts.weightData);\n\n      init.body.append(\n          'model.weights.bin',\n          new Blob([weightBuffer], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n    Promise<[WeightsManifestEntry[], WeightData]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = getWeightSpecs(weightsManifest);\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, buffers];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconstitutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}