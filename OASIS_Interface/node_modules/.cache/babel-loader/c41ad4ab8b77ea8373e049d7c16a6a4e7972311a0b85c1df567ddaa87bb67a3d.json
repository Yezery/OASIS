{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport * as mafmt from '@multiformats/mafmt';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay as CircuitPB } from './pb/index.js';\nimport { codes } from '../errors.js';\nimport { streamToMaConnection } from '@libp2p/utils/stream-to-ma-conn';\nimport { RELAY_CODEC } from './multicodec.js';\nimport { createListener } from './listener.js';\nimport { handleCanHop, handleHop, hop } from './circuit/hop.js';\nimport { handleStop } from './circuit/stop.js';\nimport { StreamHandler } from './circuit/stream-handler.js';\nimport { symbol } from '@libp2p/interface-transport';\nimport { peerIdFromString } from '@libp2p/peer-id';\nimport { abortableDuplex } from 'abortable-iterator';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { setMaxListeners } from 'events';\nconst log = logger('libp2p:circuit');\nexport class Circuit {\n  constructor(components, init) {\n    this._init = init;\n    this.components = components;\n    this._started = false;\n  }\n  isStarted() {\n    return this._started;\n  }\n  async start() {\n    if (this._started) {\n      return;\n    }\n    this._started = true;\n    await this.components.registrar.handle(RELAY_CODEC, data => {\n      void this._onProtocol(data).catch(err => {\n        log.error(err);\n      });\n    }, {\n      ...this._init\n    }).catch(err => {\n      log.error(err);\n    });\n  }\n  async stop() {\n    await this.components.registrar.unhandle(RELAY_CODEC);\n  }\n  hopEnabled() {\n    return true;\n  }\n  hopActive() {\n    return true;\n  }\n  get [symbol]() {\n    return true;\n  }\n  get [Symbol.toStringTag]() {\n    return 'libp2p/circuit-relay-v1';\n  }\n  async _onProtocol(data) {\n    const {\n      connection,\n      stream\n    } = data;\n    const controller = new TimeoutController(this._init.hop.timeout);\n    try {\n      // fails on node < 15.4\n      setMaxListeners?.(Infinity, controller.signal);\n    } catch {}\n    try {\n      const source = abortableDuplex(stream, controller.signal);\n      const streamHandler = new StreamHandler({\n        stream: {\n          ...stream,\n          ...source\n        }\n      });\n      const request = await streamHandler.read();\n      if (request == null) {\n        log('request was invalid, could not read from stream');\n        streamHandler.write({\n          type: CircuitPB.Type.STATUS,\n          code: CircuitPB.Status.MALFORMED_MESSAGE\n        });\n        streamHandler.close();\n        return;\n      }\n      let virtualConnection;\n      switch (request.type) {\n        case CircuitPB.Type.CAN_HOP:\n          {\n            log('received CAN_HOP request from %p', connection.remotePeer);\n            await handleCanHop({\n              circuit: this,\n              connection,\n              streamHandler\n            });\n            break;\n          }\n        case CircuitPB.Type.HOP:\n          {\n            log('received HOP request from %p', connection.remotePeer);\n            await handleHop({\n              connection,\n              request,\n              streamHandler,\n              circuit: this,\n              connectionManager: this.components.connectionManager\n            });\n            break;\n          }\n        case CircuitPB.Type.STOP:\n          {\n            log('received STOP request from %p', connection.remotePeer);\n            virtualConnection = await handleStop({\n              connection,\n              request,\n              streamHandler\n            });\n            break;\n          }\n        default:\n          {\n            log('Request of type %s not supported', request.type);\n            streamHandler.write({\n              type: CircuitPB.Type.STATUS,\n              code: CircuitPB.Status.MALFORMED_MESSAGE\n            });\n            streamHandler.close();\n            return;\n          }\n      }\n      if (virtualConnection != null) {\n        const remoteAddr = connection.remoteAddr.encapsulate('/p2p-circuit').encapsulate(multiaddr(request.dstPeer?.addrs[0]));\n        const localAddr = multiaddr(request.srcPeer?.addrs[0]);\n        const maConn = streamToMaConnection({\n          stream: virtualConnection,\n          remoteAddr,\n          localAddr\n        });\n        const type = request.type === CircuitPB.Type.HOP ? 'relay' : 'inbound';\n        log('new %s connection %s', type, maConn.remoteAddr);\n        const conn = await this.components.upgrader.upgradeInbound(maConn);\n        log('%s connection %s upgraded', type, maConn.remoteAddr);\n        if (this.handler != null) {\n          this.handler(conn);\n        }\n      }\n    } finally {\n      controller.clear();\n    }\n  }\n  /**\n   * Dial a peer over a relay\n   */\n  async dial(ma, options = {}) {\n    // Check the multiaddr to see if it contains a relay and a destination peer\n    const addrs = ma.toString().split('/p2p-circuit');\n    const relayAddr = multiaddr(addrs[0]);\n    const destinationAddr = multiaddr(addrs[addrs.length - 1]);\n    const relayId = relayAddr.getPeerId();\n    const destinationId = destinationAddr.getPeerId();\n    if (relayId == null || destinationId == null) {\n      const errMsg = 'Circuit relay dial failed as addresses did not have peer id';\n      log.error(errMsg);\n      throw errCode(new Error(errMsg), codes.ERR_RELAYED_DIAL);\n    }\n    const relayPeer = peerIdFromString(relayId);\n    const destinationPeer = peerIdFromString(destinationId);\n    let disconnectOnFailure = false;\n    const relayConnections = this.components.connectionManager.getConnections(relayPeer);\n    let relayConnection = relayConnections[0];\n    if (relayConnection == null) {\n      await this.components.peerStore.addressBook.add(relayPeer, [relayAddr]);\n      relayConnection = await this.components.connectionManager.openConnection(relayPeer, options);\n      disconnectOnFailure = true;\n    }\n    try {\n      const virtualConnection = await hop({\n        ...options,\n        connection: relayConnection,\n        request: {\n          type: CircuitPB.Type.HOP,\n          srcPeer: {\n            id: this.components.peerId.toBytes(),\n            addrs: this.components.addressManager.getAddresses().map(addr => addr.bytes)\n          },\n          dstPeer: {\n            id: destinationPeer.toBytes(),\n            addrs: [multiaddr(destinationAddr).bytes]\n          }\n        }\n      });\n      const localAddr = relayAddr.encapsulate(`/p2p-circuit/p2p/${this.components.peerId.toString()}`);\n      const maConn = streamToMaConnection({\n        stream: virtualConnection,\n        remoteAddr: ma,\n        localAddr\n      });\n      log('new outbound connection %s', maConn.remoteAddr);\n      return await this.components.upgrader.upgradeOutbound(maConn);\n    } catch (err) {\n      log.error('Circuit relay dial failed', err);\n      disconnectOnFailure && (await relayConnection.close());\n      throw err;\n    }\n  }\n  /**\n   * Create a listener\n   */\n  createListener(options) {\n    // Called on successful HOP and STOP requests\n    this.handler = options.handler;\n    return createListener({\n      connectionManager: this.components.connectionManager,\n      peerStore: this.components.peerStore\n    });\n  }\n  /**\n   * Filter check for all Multiaddrs that this transport can dial on\n   *\n   * @param {Multiaddr[]} multiaddrs\n   * @returns {Multiaddr[]}\n   */\n  filter(multiaddrs) {\n    multiaddrs = Array.isArray(multiaddrs) ? multiaddrs : [multiaddrs];\n    return multiaddrs.filter(ma => {\n      return mafmt.Circuit.matches(ma);\n    });\n  }\n}","map":{"version":3,"names":["logger","errCode","mafmt","multiaddr","CircuitRelay","CircuitPB","codes","streamToMaConnection","RELAY_CODEC","createListener","handleCanHop","handleHop","hop","handleStop","StreamHandler","symbol","peerIdFromString","abortableDuplex","TimeoutController","setMaxListeners","log","Circuit","constructor","components","init","_init","_started","isStarted","start","registrar","handle","data","_onProtocol","catch","err","error","stop","unhandle","hopEnabled","hopActive","Symbol","toStringTag","connection","stream","controller","timeout","Infinity","signal","source","streamHandler","request","read","write","type","Type","STATUS","code","Status","MALFORMED_MESSAGE","close","virtualConnection","CAN_HOP","remotePeer","circuit","HOP","connectionManager","STOP","remoteAddr","encapsulate","dstPeer","addrs","localAddr","srcPeer","maConn","conn","upgrader","upgradeInbound","handler","clear","dial","ma","options","toString","split","relayAddr","destinationAddr","length","relayId","getPeerId","destinationId","errMsg","Error","ERR_RELAYED_DIAL","relayPeer","destinationPeer","disconnectOnFailure","relayConnections","getConnections","relayConnection","peerStore","addressBook","add","openConnection","id","peerId","toBytes","addressManager","getAddresses","map","addr","bytes","upgradeOutbound","filter","multiaddrs","Array","isArray","matches"],"sources":["../../../src/circuit/transport.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}