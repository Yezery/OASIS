{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nexport function arrayEquals(a, b) {\n  const sort = (a, b) => a.toString().localeCompare(b.toString());\n  if (a.length !== b.length) {\n    return false;\n  }\n  b.sort(sort);\n  return a.sort(sort).every((item, index) => b[index].equals(item));\n}","map":{"version":3,"names":["arrayEquals","a","b","sort","toString","localeCompare","length","every","item","index","equals"],"sources":["../../src/array-equals.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;AAmBA;;;;AAIA,OAAM,SAAUA,WAAWA,CAAEC,CAAQ,EAAEC,CAAQ;EAC7C,MAAMC,IAAI,GAAGA,CAACF,CAAM,EAAEC,CAAM,KAAaD,CAAC,CAACG,QAAQ,EAAE,CAACC,aAAa,CAACH,CAAC,CAACE,QAAQ,EAAE,CAAC;EAEjF,IAAIH,CAAC,CAACK,MAAM,KAAKJ,CAAC,CAACI,MAAM,EAAE;IACzB,OAAO,KAAK;;EAGdJ,CAAC,CAACC,IAAI,CAACA,IAAI,CAAC;EAEZ,OAAOF,CAAC,CAACE,IAAI,CAACA,IAAI,CAAC,CAACI,KAAK,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAKP,CAAC,CAACO,KAAK,CAAC,CAACC,MAAM,CAACF,IAAI,CAAC,CAAC;AACnE"},"metadata":{},"sourceType":"module","externalDependencies":[]}