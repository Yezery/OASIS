{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs;\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  }\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":{"version":3,"names":["tf","Cast","util","complex","identity","notEqual","real","int","cast","args","inputs","backend","attrs","x","dtype","zerosTensor","zeros","shape","floatX","result","imag","dispose","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","zerosTensorInfo","makeTensorInfo","getTypedArrayFromDType","binaryInputs","a","b","Error","castConfig","kernelName","backendName","kernelFunc"],"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}