{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { Message as PBMessage } from './dht.js';\nexport const MESSAGE_TYPE = PBMessage.MessageType;\nexport const CONNECTION_TYPE = PBMessage.ConnectionType;\nexport const MESSAGE_TYPE_LOOKUP = Object.keys(MESSAGE_TYPE);\n/**\n * Represents a single DHT control message.\n */\nexport class Message {\n  constructor(type, key, level) {\n    if (!(key instanceof Uint8Array)) {\n      throw new Error('Key must be a Uint8Array');\n    }\n    this.type = type;\n    this.key = key;\n    this.clusterLevelRaw = level;\n    this.closerPeers = [];\n    this.providerPeers = [];\n    this.record = undefined;\n  }\n  /**\n   * @type {number}\n   */\n  get clusterLevel() {\n    const level = this.clusterLevelRaw - 1;\n    if (level < 0) {\n      return 0;\n    }\n    return level;\n  }\n  set clusterLevel(level) {\n    this.clusterLevelRaw = level;\n  }\n  /**\n   * Encode into protobuf\n   */\n  serialize() {\n    return PBMessage.encode({\n      key: this.key,\n      type: this.type,\n      clusterLevelRaw: this.clusterLevelRaw,\n      closerPeers: this.closerPeers.map(toPbPeer),\n      providerPeers: this.providerPeers.map(toPbPeer),\n      record: this.record == null ? undefined : this.record.serialize().subarray()\n    });\n  }\n  /**\n   * Decode from protobuf\n   */\n  static deserialize(raw) {\n    const dec = PBMessage.decode(raw);\n    const msg = new Message(dec.type ?? PBMessage.MessageType.PUT_VALUE, dec.key ?? Uint8Array.from([]), dec.clusterLevelRaw ?? 0);\n    msg.closerPeers = dec.closerPeers.map(fromPbPeer);\n    msg.providerPeers = dec.providerPeers.map(fromPbPeer);\n    if (dec.record?.length != null) {\n      msg.record = Libp2pRecord.deserialize(dec.record);\n    }\n    return msg;\n  }\n}\nfunction toPbPeer(peer) {\n  const output = {\n    id: peer.id.toBytes(),\n    addrs: (peer.multiaddrs ?? []).map(m => m.bytes),\n    connection: CONNECTION_TYPE.CONNECTED\n  };\n  return output;\n}\nfunction fromPbPeer(peer) {\n  if (peer.id == null) {\n    throw new Error('Invalid peer in message');\n  }\n  return {\n    id: peerIdFromBytes(peer.id),\n    multiaddrs: (peer.addrs ?? []).map(a => multiaddr(a)),\n    protocols: []\n  };\n}","map":{"version":3,"names":["peerIdFromBytes","multiaddr","Libp2pRecord","Message","PBMessage","MESSAGE_TYPE","MessageType","CONNECTION_TYPE","ConnectionType","MESSAGE_TYPE_LOOKUP","Object","keys","constructor","type","key","level","Uint8Array","Error","clusterLevelRaw","closerPeers","providerPeers","record","undefined","clusterLevel","serialize","encode","map","toPbPeer","subarray","deserialize","raw","dec","decode","msg","PUT_VALUE","from","fromPbPeer","length","peer","output","id","toBytes","addrs","multiaddrs","m","bytes","connection","CONNECTED","a","protocols"],"sources":["../../../src/message/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}