{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { logger } from '@libp2p/logger';\nimport { abortableSource } from 'abortable-iterator';\nconst log = logger('libp2p:stream:converter');\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n */\nexport function streamToMaConnection(props, options = {}) {\n  const {\n    stream,\n    remoteAddr\n  } = props;\n  const {\n    sink,\n    source\n  } = stream;\n  const mapSource = async function* () {\n    for await (const list of source) {\n      if (list instanceof Uint8Array) {\n        yield list;\n      } else {\n        yield* list;\n      }\n    }\n  }();\n  const maConn = {\n    async sink(source) {\n      if (options.signal != null) {\n        source = abortableSource(source, options.signal);\n      }\n      try {\n        await sink(source);\n        await close();\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log(err);\n        }\n      }\n    },\n    source: options.signal != null ? abortableSource(mapSource, options.signal) : mapSource,\n    remoteAddr,\n    timeline: {\n      open: Date.now(),\n      close: undefined\n    },\n    async close() {\n      await sink(async function* () {\n        yield new Uint8Array(0);\n      }());\n      await close();\n    }\n  };\n  async function close() {\n    if (maConn.timeline.close == null) {\n      maConn.timeline.close = Date.now();\n    }\n    await Promise.resolve();\n  }\n  return maConn;\n}","map":{"version":3,"names":["logger","abortableSource","log","streamToMaConnection","props","options","stream","remoteAddr","sink","source","mapSource","list","Uint8Array","maConn","signal","close","err","type","timeline","open","Date","now","undefined","Promise","resolve"],"sources":["../../src/stream-to-ma-conn.ts"],"sourcesContent":[null],"mappings":";;;AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,eAAe,QAAQ,oBAAoB;AAMpD,MAAMC,GAAG,GAAGF,MAAM,CAAC,yBAAyB,CAAC;AA8B7C;;;;AAIA,OAAM,SAAUG,oBAAoBA,CAAEC,KAAuB,EAAEC,OAAA,GAAyB,EAAE;EACxF,MAAM;IAAEC,MAAM;IAAEC;EAAU,CAAE,GAAGH,KAAK;EACpC,MAAM;IAAEI,IAAI;IAAEC;EAAM,CAAE,GAAGH,MAAM;EAE/B,MAAMI,SAAS,GAAI,mBAAgB;IACjC,WAAW,MAAMC,IAAI,IAAIF,MAAM,EAAE;MAC/B,IAAIE,IAAI,YAAYC,UAAU,EAAE;QAC9B,MAAMD,IAAI;OACX,MAAM;QACL,OAAQA,IAAI;;;EAGlB,CAAC,EAAG;EAEJ,MAAME,MAAM,GAAwB;IAClC,MAAML,IAAIA,CAAEC,MAAM;MAChB,IAAIJ,OAAO,CAACS,MAAM,IAAI,IAAI,EAAE;QAC1BL,MAAM,GAAGR,eAAe,CAACQ,MAAM,EAAEJ,OAAO,CAACS,MAAM,CAAC;;MAGlD,IAAI;QACF,MAAMN,IAAI,CAACC,MAAM,CAAC;QAClB,MAAMM,KAAK,EAAE;OACd,CAAC,OAAOC,GAAQ,EAAE;QACjB;QACA,IAAIA,GAAG,CAACC,IAAI,KAAK,SAAS,EAAE;UAC1B;UACA;UACA;UACAf,GAAG,CAACc,GAAG,CAAC;;;IAGd,CAAC;IACDP,MAAM,EAAGJ,OAAO,CAACS,MAAM,IAAI,IAAI,GAAIb,eAAe,CAACS,SAAS,EAAEL,OAAO,CAACS,MAAM,CAAC,GAAGJ,SAAS;IACzFH,UAAU;IACVW,QAAQ,EAAE;MAAEC,IAAI,EAAEC,IAAI,CAACC,GAAG,EAAE;MAAEN,KAAK,EAAEO;IAAS,CAAE;IAChD,MAAMP,KAAKA,CAAA;MACT,MAAMP,IAAI,CAAC,mBAAgB;QACzB,MAAM,IAAII,UAAU,CAAC,CAAC,CAAC;MACzB,CAAC,EAAE,CAAC;MACJ,MAAMG,KAAK,EAAE;IACf;GACD;EAED,eAAeA,KAAKA,CAAA;IAClB,IAAIF,MAAM,CAACK,QAAQ,CAACH,KAAK,IAAI,IAAI,EAAE;MACjCF,MAAM,CAACK,QAAQ,CAACH,KAAK,GAAGK,IAAI,CAACC,GAAG,EAAE;;IAEpC,MAAME,OAAO,CAACC,OAAO,EAAE;EACzB;EAEA,OAAOX,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}