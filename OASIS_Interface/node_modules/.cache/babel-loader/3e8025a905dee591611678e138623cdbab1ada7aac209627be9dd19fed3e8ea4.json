{"ast":null,"code":"import { NotStartedError, AlreadyStartingError, AlreadyStartedError } from '../errors.js';\nimport { withTimeout } from '../utils.js';\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nexport class Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create({\n    start,\n    stop\n  }) {\n    return new Service(start, stop);\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start(service, options) {\n    const {\n      state,\n      activate\n    } = service;\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped':\n        {\n          try {\n            const promise = activate(options);\n            service.state = {\n              status: 'starting',\n              ready: promise\n            };\n            // Note: MUST await after state transition above otherwise race\n            // condition may occur.\n            const result = await promise;\n            service.state = {\n              status: 'started',\n              value: result\n            };\n            return result;\n            // If failed to start, transiton from 'starting' to 'stopped'\n            // state.\n          } catch ( /** @type {any} */error) {\n            service.state = {\n              status: 'stopped'\n            };\n            throw error;\n          }\n        }\n      case 'starting':\n        {\n          throw new AlreadyStartingError();\n        }\n      case 'started':\n        {\n          throw new AlreadyStartedError();\n        }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping':\n        {\n          await state.ready;\n          return await Service.start(service, options);\n        }\n      default:\n        {\n          return Service.panic(service);\n        }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop(service) {\n    const {\n      state,\n      deactivate\n    } = service;\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped':\n        {\n          break;\n        }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting':\n        {\n          // We do not want to error stop if start failed.\n          try {\n            await state.ready;\n          } catch ( /** @type {any} */_) {}\n          return await Service.stop(service);\n        }\n      // if service is stopping we just await for it to complete.\n      case 'stopping':\n        {\n          return await state.ready;\n        }\n      case 'started':\n        {\n          if (deactivate) {\n            await deactivate(state.value);\n          }\n          service.state = {\n            status: 'stopped'\n          };\n          break;\n        }\n      default:\n        {\n          Service.panic(state);\n        }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try({\n    state\n  }) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use({\n    state\n  }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n      case 'starting':\n        return await withTimeout(state.ready, options);\n      default:\n        throw new NotStartedError();\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic({\n    state\n  }) {\n    const status = JSON.stringify({\n      status: state.status\n    });\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`);\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor(activate, deactivate) {\n    this.activate = activate;\n    this.deactivate = deactivate;\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = {\n      status: 'stopped'\n    };\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use(options) {\n    return await Service.use(this, options);\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try() {\n    return Service.try(this);\n  }\n}","map":{"version":3,"names":["NotStartedError","AlreadyStartingError","AlreadyStartedError","withTimeout","Service","create","start","stop","service","options","state","activate","status","promise","ready","result","value","error","panic","deactivate","_","try","use","JSON","stringify","RangeError","constructor"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/utils/service.js"],"sourcesContent":["import { NotStartedError, AlreadyStartingError, AlreadyStartedError } from '../errors.js'\nimport { withTimeout } from '../utils.js'\n\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/utils').Await<T>} Await\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n/**\n * Represents service state which can be not started in which case\n * it is instance of `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\nexport class Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create ({ start, stop }) {\n    return new Service(start, stop)\n  }\n\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n  static async start (service, options) {\n    const { state, activate } = service\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped': {\n        try {\n          const promise = activate(options)\n          service.state = { status: 'starting', ready: promise }\n          // Note: MUST await after state transition above otherwise race\n          // condition may occur.\n          const result = await promise\n          service.state = { status: 'started', value: result }\n          return result\n        // If failed to start, transiton from 'starting' to 'stopped'\n        // state.\n        } catch (/** @type {any} */ error) {\n          service.state = { status: 'stopped' }\n          throw error\n        }\n      }\n      case 'starting': {\n        throw new AlreadyStartingError()\n      }\n      case 'started': {\n        throw new AlreadyStartedError()\n      }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n      case 'stopping': {\n        await state.ready\n        return await Service.start(service, options)\n      }\n      default: {\n        return Service.panic(service)\n      }\n    }\n  }\n\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n  static async stop (service) {\n    const { state, deactivate } = service\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped': {\n        break\n      }\n      // If service is starting we await for it to complete\n      // and try again. That way\n      case 'starting': {\n        // We do not want to error stop if start failed.\n        try { await state.ready } catch (/** @type {any} */ _) {}\n        return await Service.stop(service)\n      }\n      // if service is stopping we just await for it to complete.\n      case 'stopping': {\n        return await state.ready\n      }\n      case 'started': {\n        if (deactivate) {\n          await deactivate(state.value)\n        }\n        service.state = { status: 'stopped' }\n        break\n      }\n      default: {\n        Service.panic(state)\n      }\n    }\n  }\n\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n  static try ({ state }) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      default:\n        return null\n    }\n  }\n\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n  static async use ({ state }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value\n      case 'starting':\n        return await withTimeout(state.ready, options)\n      default:\n        throw new NotStartedError()\n    }\n  }\n\n  // eslint-disable-next-line jsdoc/require-returns-check\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n  static panic ({ state }) {\n    const status = JSON.stringify({ status: state.status })\n    throw RangeError(`Service in invalid state ${status}, should never happen if you see this please report a bug`)\n  }\n\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n  constructor (activate, deactivate) {\n    this.activate = activate\n    this.deactivate = deactivate\n\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n    this.state = { status: 'stopped' }\n  }\n\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n  async use (options) {\n    return await Service.use(this, options)\n  }\n\n  /**\n   * @returns {T|null}\n   */\n  try () {\n    return Service.try(this)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}