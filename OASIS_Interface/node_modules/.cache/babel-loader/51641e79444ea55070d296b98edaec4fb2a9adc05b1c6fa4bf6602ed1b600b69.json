{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet socket;\nimport { sendToGPT } from \"@/api/axios/gpt\";\nimport { newWebSocket } from \"@/utils/webStocket\";\nimport { parseTime } from \"@/utils/Time\";\nexport default {\n  data() {\n    return {\n      user: {},\n      isCollapse: false,\n      users: [],\n      messages: [],\n      chatUser: \"\",\n      text: \"\",\n      contents: {},\n      showName: false,\n      isEnter: false,\n      isFinish: false\n    };\n  },\n  components: {},\n  mounted() {\n    // this.createContent(null,\"ccc\",\"hhhh2h\")\n    this.createContent(\"ccc\", null, \"hhhhh\");\n    console.log(this.contents);\n    let GPTAvatar = this.$refs.GPTAvatar;\n    document.addEventListener('mousemove', event => {\n      let GPTAvatarX = GPTAvatar.offsetLeft + GPTAvatar.offsetWidth / 2;\n      let foxY = GPTAvatar.offsetTop + GPTAvatar.offsetHeight / 2;\n      let angleY = (event.clientX - foxX) * 0.2;\n      let angleX = (event.clientY - foxY) * 0.2;\n      GPTAvatar.style.transform = `rotateY(${angleY}deg) rotateX(${angleX}deg)`;\n    });\n  },\n  methods: {\n    // 更新弹窗位置\n    upDatePosition() {\n      this.$nextTick(() => {\n        this.$refs.popoverRef.updatePopper();\n      });\n    },\n    OpenAndClose() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$refs.logo.classList.add(\"animate__swing\");\n        this.$refs.logo2.classList.add(\"animate__swing\");\n        this.$refs.Menu.style = \"width:400px;\";\n        this.showName = true;\n        this.isEnter = true;\n      } else {\n        this.$refs.logo.classList.remove(\"animate__swing\");\n        this.$refs.logo2.classList.remove(\"animate__swing\");\n        this.$refs.Menu.style = \"width:65px;\";\n        this.$refs.ChatWindow.style = \"transform:0;\";\n        this.showName = false;\n        this.isEnter = false;\n      }\n    },\n    GETHashAvatar(UserAddress) {\n      return \"data:image/png;base64,\" + new this.Identicon(UserAddress, 120).toString();\n    },\n    send(opt) {\n      if (!this.text) {\n        this.$notify({\n          title: \"输入不能为空\",\n          type: \"warning\",\n          position: \"bottom-left\"\n        });\n      } else {\n        if (opt == 1) {\n          if (typeof WebSocket == \"undefined\") {\n            console.log(\"您的浏览器不支持WebSocket\");\n          } else {\n            console.log(\"您的浏览器支持WebSocket\");\n            // 组装待发送的消息 json\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n            let message = {\n              from: this.user.username,\n              to: this.chatUser,\n              message: this.text\n            };\n            socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n            // 由服务端进行转发\n            this.messages.push({\n              user: this.user.username,\n              text: this.text\n            });\n\n            // 构建消息内容，本人消息\n            this.createContent(null, this.$store.state.currentAddress, this.text);\n            this.text = \"\";\n          }\n        } else {\n          this.sendToGPT();\n        }\n      }\n    },\n    async sendToGPT() {\n      const text = this.text;\n      var data = {\n        role: \"user\",\n        content: text\n      };\n      this.text = \"\";\n      this.createContent(null, this.$store.state.currentAddress, text);\n      try {\n        this.isFinish = false;\n        await sendToGPT(data).then(re => {\n          let result = JSON.parse(re.data.data);\n          this.createContent(result.choices[0].message.role, null, result.choices[0].message.content);\n        });\n        this.isFinish = true;\n      } catch (error) {\n        console.log(error);\n        this.isFinish = true;\n      }\n    },\n    // 键盘回车事件\n    handleKeyCode(event) {\n      if (event.keyCode == 13) {\n        if (!event.metaKey) {\n          event.preventDefault();\n          this.send();\n        } else {\n          this.text = this.text + \"\\n\";\n        }\n      } else {\n        if (!event.metaKey) {\n          event.preventDefault();\n          this.send();\n        } else {\n          this.text = this.text + \"\\n\";\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {\n      let content;\n      let html;\n      content = this.contents[this.chatUser || remoteUser] || \"\";\n      // 当前用户消息\n      if (nowUser) {\n        html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span><div class=\"Message leftMessage animate__animated animate__fadeInLeft\">${text}</div></div>`;\n      } else if (remoteUser) {\n        html = `\n                                  <div class=\"MessageBox_remoteUser\">\n                                    <span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span>\n                                    <div class=\"Message rightMessage\">\n                                      ${text}\n                                    </div>\n                                  </div>\n                                `;\n      }\n      content += html;\n      this.$set(this.contents, this.chatUser, content);\n      this.$nextTick(() => {\n        let msg = document.getElementById(\"CHAT\");\n        msg.scrollTop = msg.scrollHeight;\n      });\n    },\n    //开启websocket事务\n    init() {\n      // 格式[\"username:admin\",\"username:admin2\"]\n      let object = {\n        username: this.$store.state.currentAddress\n      };\n      localStorage.setItem(\"user\", JSON.stringify(object));\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n      let username = this.user.username;\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = newWebSocket(\"/OasisChat/\", username);\n\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          _this.$nextTick(() => {\n            console.log(\"收到数据====\" + msg.data);\n            let data = JSON.parse(msg.data);\n            if (data.users) {\n              _this.users = data.users.filter(user => user.username !== username);\n            } else {\n              if (data.from === _this.chatUser) {\n                _this.messages.push(data);\n                _this.createContent(data.from, null, data.message);\n              }\n            }\n          });\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["socket","sendToGPT","newWebSocket","parseTime","data","user","isCollapse","users","messages","chatUser","text","contents","showName","isEnter","isFinish","components","mounted","createContent","console","log","GPTAvatar","$refs","document","addEventListener","event","GPTAvatarX","offsetLeft","offsetWidth","foxY","offsetTop","offsetHeight","angleY","clientX","foxX","angleX","clientY","style","transform","methods","upDatePosition","$nextTick","popoverRef","updatePopper","OpenAndClose","isOpen","logo","classList","add","logo2","Menu","remove","ChatWindow","GETHashAvatar","UserAddress","Identicon","toString","send","opt","$notify","title","type","position","WebSocket","message","from","username","to","JSON","stringify","push","$store","state","currentAddress","role","content","then","re","result","parse","choices","error","handleKeyCode","keyCode","metaKey","preventDefault","remoteUser","nowUser","html","Date","$set","msg","getElementById","scrollTop","scrollHeight","init","object","localStorage","setItem","getItem","_this","close","onopen","onmessage","filter","onclose","onerror"],"sources":["src/views/leftMenu/oasisChat.vue"],"sourcesContent":["<template>\n  <div\n    class=\"Menu\"\n    ref=\"Menu\"\n    :class=\"{'isEnter':isEnter}\"\n    @click=\"OpenAndClose\"\n\n  >\n  <!-- @mouseleave=\"OpenAndClose\" -->\n    <div class=\"logobox\">\n      <div class=\"logo animate__animated\">\n        <router-link :to=\"{ name: 'MarketShop' }\">\n          <div\n            style=\"display: inline; font-size: 25px\"\n            class=\"animate__animated\"\n            ref=\"logo\"\n          >\n            OAS\n          </div>\n          <div\n            style=\"display: inline;  font-size: 25px\"\n            class=\"animate__animated\"\n            ref=\"logo2\"\n          >\n            <img\n              src=\"../../assets/webAssets/s1.png\"\n              alt=\"\"\n              width=\"22px\"\n              height=\"22px\"\n            >S\n          </div>\n        </router-link>\n      </div>\n    </div>\n    <div class=\"chatGPT\">\n      <div\n        class=\"ChatAvatar animate__animated animate__fadeInRight\"\n        slot=\"reference\"\n        @click=\"chatUser = 'GPT'\"\n      >\n        <div\n          class=\"ChatAvatarBox\"\n          ref=\"ChatWindow\"\n        >\n          <img\n            src=\"@/assets/webAssets/MetaMask.png\"\n            alt=\"\"\n            style=\"object-fit: contain\"\n            ref=\"GPTAvatar\"\n          >\n        </div>\n      </div>\n        <div\n          class=\"ChatWindowBox\"\n        >\n          <el-container>\n            <el-header>\n              <div class=\"topBox\">\n                <div\n                  style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \"\n                >\n                  <span\n                    class=\"el-avatar el-avatar--circle\"\n                    style=\"height: 48px; width: 48px\"\n                    v-if=\"chatUser != ''\"\n                  >\n                    <img\n                      src=\"@/assets/webAssets/MetaMask.png\"\n                      style=\"object-fit: contain\"\n                    >\n                  </span>\n                </div>\n                <div style=\"flex: 7; text-align: left; height: 48px\">\n                  <div style=\"margin-left: 5px\">\n                    <div class=\"ChatUserName\">\n                      {{ chatUser }}\n                    </div>\n                    <div\n                      style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \"\n                    >\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </el-header>\n\n            <el-main>\n              <div\n                style=\"height: 205px; overflow: auto\"\n                id=\"CHAT\"\n                v-html=\"contents[chatUser]\"\n              />\n            </el-main>\n            <el-footer>\n              <div class=\"inputer\">\n                <input\n                  type=\"textarea\"\n                  autofocus=\"true\"\n                  v-model=\"text\"\n                  class=\"inputarea\"\n                  @keydown.enter.prevent=\"send(2)\"\n                >\n                <button @click=\"send(2)\">\n                  <i\n                    class=\"el-icon-arrow-up\"\n                    style=\"font-size: 30px;cursor: pointer;\"\n                    v-if=\"!isFinish\"\n                  />\n                  <i\n                    class=\"el-icon-loading\"\n                    v-else\n                    style=\"font-size: 30px;\"\n                  />\n                </button>\n              </div>\n            </el-footer>\n          </el-container>\n        </div>\n      </div>\n    <template>\n      <!-- <div\n        v-for=\"otherUser in users\"\n        :key=\"otherUser.username\"\n        class=\"chat\"\n      >\n        <el-popover\n          placement=\"right\"\n          width=\"309px\"\n          trigger=\"click\"\n          popper-class=\"monitor-yt-popover\"\n        >\n          <div\n            class=\"ChatPeople animate__animated animate__fadeInRight\"\n            slot=\"reference\"\n            @click=\"chatUser = otherUser.username\"\n          >\n            <div class=\"ChatWindow\">\n              <img\n                :src=\"GETHashAvatar(otherUser.username)\"\n                width=\"50px\"\n                height=\"50px\"\n                alt=\"\"\n                style=\"object-fit: contain\"\n              >\n            </div>\n            <span class=\"friendname animate__animated animate__fadeInRight\">{{ otherUser.username.slice(0, 3) + \"...\" + otherUser.username.slice(39) }}</span>\n          </div>\n          <div\n            style=\"\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n            \"\n          >\n            <div\n              class=\"ChatWindowBox\"\n              style=\"width: 329px; height: 520px\"\n            >\n              <el-container>\n                <el-header>\n                  <div class=\"topBox\">\n                    <div\n                      style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \"\n                    >\n                      <span\n                        class=\"el-avatar el-avatar--circle\"\n                        style=\"height: 48px; width: 48px\"\n                        v-if=\"chatUser != ''\"\n                      >\n                        <img\n                          :src=\"GETHashAvatar(otherUser.username)\"\n                          style=\"object-fit: contain\"\n                        >\n                      </span>\n                    </div>\n                    <div style=\"flex: 7; text-align: left; height: 48px\">\n                      <div style=\"margin-left: 5px\">\n                        <div class=\"ChatUserName\">\n                          {{ chatUser.slice(0, 5) + \"...\" + chatUser.slice(37) }}\n                        </div>\n                        <div\n                          style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \"\n                          v-if=\"chatUser != ''\"\n                        >\n                          <i class=\"el-icon-loading\" /> Chatting...\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </el-header>\n\n                <el-main>\n                  <div\n                    style=\"height: 355px; overflow: auto\"\n                    id=\"CHAT\"\n                    v-html=\"contents[chatUser]\"\n                  />\n                </el-main>\n                <el-footer>\n                  <div class=\"inputer\">\n                    <input\n                      type=\"textarea\"\n                      autofocus=\"true\"\n                      v-model=\"text\"\n                      class=\"inputarea\"\n                      @keydown.enter.prevent=\"handleKeyCode($event)\"\n                    >\n                    <button @click=\"send\">\n                      <i\n                        class=\"el-icon-arrow-up\"\n                        style=\"font-size: 30px;cursor: pointer;\"\n                      />\n                    </button>\n                  </div>\n                </el-footer>\n              </el-container>\n            </div>\n          </div>\n        </el-popover>\n      </div> -->\n      \n      <!-- <el-popover\n          placement=\"right\"\n          trigger=\"click\"\n          popper-class=\"chatGPTep\"\n          :visible-arrow=\"false\"\n          offset=\"200\"\n        /> -->\n    </template>\n  </div>\n</template>\n\n<script>\n  let socket;\n  import { sendToGPT } from \"@/api/axios/gpt\";\n  import { newWebSocket } from \"@/utils/webStocket\";\n  import { parseTime } from \"@/utils/Time\";\n  export default {\n    data() {\n      return {\n        user: {},\n        isCollapse: false,\n        users: [],\n        messages: [],\n        chatUser: \"\",\n        text: \"\",\n        contents: {},\n        showName: false,\n        isEnter: false,\n\n        isFinish:false\n      };\n    },\n    components: {},\n  mounted() {\n    // this.createContent(null,\"ccc\",\"hhhh2h\")\n    this.createContent(\"ccc\",null,\"hhhhh\")\n    console.log(this.contents);\n    let GPTAvatar = this.$refs.GPTAvatar\n  document.addEventListener('mousemove', (event) => {\n    let GPTAvatarX = GPTAvatar.offsetLeft + GPTAvatar.offsetWidth / 2;\n  let foxY = GPTAvatar.offsetTop + GPTAvatar.offsetHeight / 2;\n  let angleY = (event.clientX - foxX) * 0.2;\n  let angleX = (event.clientY - foxY) * 0.2;\n  GPTAvatar.style.transform = `rotateY(${angleY}deg) rotateX(${angleX}deg)`;\n});\n    },\n    methods: {\n      // 更新弹窗位置\n      upDatePosition() {\n        this.$nextTick(() => {\n          this.$refs.popoverRef.updatePopper();\n        });\n      },\n      OpenAndClose() {\n        this.isOpen = !this.isOpen;\n        if (this.isOpen) {\n          this.$refs.logo.classList.add(\"animate__swing\");\n          this.$refs.logo2.classList.add(\"animate__swing\");\n          this.$refs.Menu.style = \"width:400px;\";\n\n          this.showName = true;\n          this.isEnter = true;\n        } else {\n          this.$refs.logo.classList.remove(\"animate__swing\");\n          this.$refs.logo2.classList.remove(\"animate__swing\");\n          this.$refs.Menu.style = \"width:65px;\";\n          this.$refs.ChatWindow.style = \"transform:0;\"\n          this.showName = false;\n          this.isEnter = false;\n        }\n      },\n      GETHashAvatar(UserAddress) {\n        return (\n          \"data:image/png;base64,\" +\n          new this.Identicon(UserAddress, 120).toString()\n        );\n      },\n      send(opt) {\n        if (!this.text) {\n          this.$notify({\n            title: \"输入不能为空\",\n            type: \"warning\",\n            position: \"bottom-left\",\n          });\n        } else {\n          if (opt == 1) {\n            if (typeof WebSocket == \"undefined\") {\n              console.log(\"您的浏览器不支持WebSocket\");\n            } else {\n              console.log(\"您的浏览器支持WebSocket\");\n              // 组装待发送的消息 json\n              // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n              let message = {\n                from: this.user.username,\n                to: this.chatUser,\n                message: this.text,\n              };\n\n              socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n              // 由服务端进行转发\n              this.messages.push({\n                user: this.user.username,\n                text: this.text,\n              });\n\n              // 构建消息内容，本人消息\n              this.createContent(\n                null,\n                this.$store.state.currentAddress,\n                this.text\n              );\n              this.text = \"\";\n            }\n          } else {\n            this.sendToGPT();\n          }\n        }\n      },\n      async sendToGPT() {\n        const text = this.text;\n        var data = {\n          role: \"user\",\n          content: text,\n        };\n        this.text = \"\";\n        this.createContent(null, this.$store.state.currentAddress, text);\n        try {\n          this.isFinish = false\n          await sendToGPT(data).then((re) => {\n            let result=JSON.parse(re.data.data)\n            this.createContent(result.choices[0].message.role,null,result.choices[0].message.content)\n          });\n          this.isFinish = true\n        } catch (error) {\n          console.log(error);\n          this.isFinish = true\n        }\n      },\n      // 键盘回车事件\n      handleKeyCode(event) {\n        if (event.keyCode == 13) {\n          if (!event.metaKey) {\n            event.preventDefault();\n            this.send();\n          } else {\n            this.text = this.text + \"\\n\";\n          }\n        } else {\n          if (!event.metaKey) {\n            event.preventDefault();\n            this.send();\n          } else {\n            this.text = this.text + \"\\n\";\n          }\n        }\n      },\n      createContent(remoteUser, nowUser, text) {\n        let content;\n        let html;\n        content = this.contents[this.chatUser || remoteUser] || \"\";\n        // 当前用户消息\n        if (nowUser) {\n          html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(\n            Date(),\n            \"hh:mm:ss\"\n          )}</span><div class=\"Message leftMessage animate__animated animate__fadeInLeft\">${text}</div></div>`;\n        } else if (remoteUser) {\n          html = `\n                                  <div class=\"MessageBox_remoteUser\">\n                                    <span class=\"currentTime\">${parseTime(\n                                      Date(),\n                                      \"hh:mm:ss\"\n                                    )}</span>\n                                    <div class=\"Message rightMessage\">\n                                      ${text}\n                                    </div>\n                                  </div>\n                                `;\n        }\n        content += html;\n        this.$set(this.contents, this.chatUser, content);\n        this.$nextTick(() => {\n          let msg = document.getElementById(\"CHAT\");\n          msg.scrollTop = msg.scrollHeight;\n        });\n      },\n      //开启websocket事务\n      init() {\n        // 格式[\"username:admin\",\"username:admin2\"]\n        let object = {\n          username: this.$store.state.currentAddress,\n        };\n        localStorage.setItem(\"user\", JSON.stringify(object));\n\n        this.user = localStorage.getItem(\"user\")\n          ? JSON.parse(localStorage.getItem(\"user\"))\n          : {};\n        let username = this.user.username;\n\n        let _this = this;\n\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          if (socket != null) {\n            socket.close();\n            socket = null;\n          }\n          // 开启一个websocket服务\n          socket = newWebSocket(\"/OasisChat/\", username);\n\n          //打开事件\n          socket.onopen = function () {\n            console.log(\"websocket已打开\");\n          };\n          //  浏览器端收消息，获得从服务端发送过来的文本消息\n          socket.onmessage = function (msg) {\n            _this.$nextTick(() => {\n              console.log(\"收到数据====\" + msg.data);\n              let data = JSON.parse(msg.data);\n              if (data.users) {\n                _this.users = data.users.filter(\n                  (user) => user.username !== username\n                );\n              } else {\n                if (data.from === _this.chatUser) {\n                  _this.messages.push(data);\n                  _this.createContent(data.from, null, data.message);\n                }\n              }\n            });\n          };\n          //关闭事件\n          socket.onclose = function () {\n            console.log(\"websocket已关闭\");\n          };\n          //发生了错误事件\n          socket.onerror = function () {\n            console.log(\"websocket发生了错误\");\n          };\n        }\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/leftMenu/oasisChat.scss\";\n</style>\n<!-- <style lang=\"scss\" >\n.el-popover.chatGPTep{\n  background-color: var(--White--);\n  border-radius: 30px;\n  border: $globalBorder;\n  transition: all 0.3s ease-in-out;\n  \n  &:hover {\n    box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,\n      rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;\n    transition: all 0.3s ease-in-out;\n  }\n  .el-popover__title{\n    background-color: var(--White--);\n  }\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}