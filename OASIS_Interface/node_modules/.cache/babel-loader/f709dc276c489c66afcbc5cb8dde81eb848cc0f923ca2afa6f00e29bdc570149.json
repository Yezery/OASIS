{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport 'node-forge/lib/pkcs7.js';\nimport 'node-forge/lib/pbe.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { certificateForKey, findAsync } from './util.js';\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { codes } from '../errors.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:keychain:cms');\nconst privates = new WeakMap();\n/**\n * Cryptographic Message Syntax (aka PKCS #7)\n *\n * CMS describes an encapsulation syntax for data protection. It\n * is used to digitally sign, digest, authenticate, or encrypt\n * arbitrary message content.\n *\n * See RFC 5652 for all the details.\n */\nexport class CMS {\n  /**\n   * Creates a new instance with a keychain\n   */\n  constructor(keychain, dek) {\n    if (keychain == null) {\n      throw errCode(new Error('keychain is required'), codes.ERR_KEYCHAIN_REQUIRED);\n    }\n    this.keychain = keychain;\n    privates.set(this, {\n      dek\n    });\n  }\n  /**\n   * Creates some protected data.\n   *\n   * The output Uint8Array contains the PKCS #7 message in DER.\n   */\n  async encrypt(name, plain) {\n    if (!(plain instanceof Uint8Array)) {\n      throw errCode(new Error('Plain data must be a Uint8Array'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const key = await this.keychain.findKeyByName(name);\n    const pem = await this.keychain.getPrivateKey(name);\n    const cached = privates.get(this);\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const dek = cached.dek;\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n    const certificate = await certificateForKey(key, privateKey);\n    // create a p7 enveloped message\n    const p7 = forge.pkcs7.createEnvelopedData();\n    p7.addRecipient(certificate);\n    p7.content = forge.util.createBuffer(plain);\n    p7.encrypt();\n    // convert message to DER\n    const der = forge.asn1.toDer(p7.toAsn1()).getBytes();\n    return uint8ArrayFromString(der, 'ascii');\n  }\n  /**\n   * Reads some protected data.\n   *\n   * The keychain must contain one of the keys used to encrypt the data.  If none of the keys\n   * exists, an Error is returned with the property 'missingKeys'.  It is array of key ids.\n   */\n  async decrypt(cmsData) {\n    if (!(cmsData instanceof Uint8Array)) {\n      throw errCode(new Error('CMS data is required'), codes.ERR_INVALID_PARAMETERS);\n    }\n    let cms;\n    try {\n      const buf = forge.util.createBuffer(uint8ArrayToString(cmsData, 'ascii'));\n      const obj = forge.asn1.fromDer(buf);\n      cms = forge.pkcs7.messageFromAsn1(obj);\n    } catch (err) {\n      log.error(err);\n      throw errCode(new Error('Invalid CMS'), codes.ERR_INVALID_CMS);\n    }\n    // Find a recipient whose key we hold. We only deal with recipient certs\n    // issued by ipfs (O=ipfs).\n    const recipients = cms.recipients\n    // @ts-expect-error cms types not defined\n    .filter(r => r.issuer.find(a => a.shortName === 'O' && a.value === 'ipfs'))\n    // @ts-expect-error cms types not defined\n    .filter(r => r.issuer.find(a => a.shortName === 'CN'))\n    // @ts-expect-error cms types not defined\n    .map(r => {\n      return {\n        recipient: r,\n        // @ts-expect-error cms types not defined\n        keyId: r.issuer.find(a => a.shortName === 'CN').value\n      };\n    });\n    const r = await findAsync(recipients, async recipient => {\n      try {\n        const key = await this.keychain.findKeyById(recipient.keyId);\n        if (key != null) {\n          return true;\n        }\n      } catch (err) {\n        return false;\n      }\n      return false;\n    });\n    if (r == null) {\n      // @ts-expect-error cms types not defined\n      const missingKeys = recipients.map(r => r.keyId);\n      throw errCode(new Error(`Decryption needs one of the key(s): ${missingKeys.join(', ')}`), codes.ERR_MISSING_KEYS, {\n        missingKeys\n      });\n    }\n    const key = await this.keychain.findKeyById(r.keyId);\n    if (key == null) {\n      throw errCode(new Error('No key available to decrypto'), codes.ERR_NO_KEY);\n    }\n    const pem = await this.keychain.getPrivateKey(key.name);\n    const cached = privates.get(this);\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const dek = cached.dek;\n    const privateKey = forge.pki.decryptRsaPrivateKey(pem, dek);\n    cms.decrypt(r.recipient, privateKey);\n    return uint8ArrayFromString(cms.content.getBytes(), 'ascii');\n  }\n}","map":{"version":3,"names":["forge","certificateForKey","findAsync","errCode","fromString","uint8ArrayFromString","toString","uint8ArrayToString","codes","logger","log","privates","WeakMap","CMS","constructor","keychain","dek","Error","ERR_KEYCHAIN_REQUIRED","set","encrypt","name","plain","Uint8Array","ERR_INVALID_PARAMETERS","key","findKeyByName","pem","getPrivateKey","cached","get","privateKey","pki","decryptRsaPrivateKey","certificate","p7","pkcs7","createEnvelopedData","addRecipient","content","util","createBuffer","der","asn1","toDer","toAsn1","getBytes","decrypt","cmsData","cms","buf","obj","fromDer","messageFromAsn1","err","error","ERR_INVALID_CMS","recipients","filter","r","issuer","find","a","shortName","value","map","recipient","keyId","findKeyById","missingKeys","join","ERR_MISSING_KEYS","ERR_NO_KEY"],"sources":["../../../src/keychain/cms.ts"],"sourcesContent":[null],"mappings":";;;AAAA,OAAO,yBAAyB;AAChC,OAAO,uBAAuB;AAC9B;AACA,OAAOA,KAAK,MAAM,yBAAyB;AAC3C,SAASC,iBAAiB,EAAEC,SAAS,QAAQ,WAAW;AACxD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,KAAK,QAAQ,cAAc;AACpC,SAASC,MAAM,QAAQ,gBAAgB;AAGvC,MAAMC,GAAG,GAAGD,MAAM,CAAC,qBAAqB,CAAC;AAEzC,MAAME,QAAQ,GAAG,IAAIC,OAAO,EAA2B;AAEvD;;;;;;;;;AASA,OAAM,MAAOC,GAAG;EAGd;;;EAGAC,YAAaC,QAAkB,EAAEC,GAAW;IAC1C,IAAID,QAAQ,IAAI,IAAI,EAAE;MACpB,MAAMZ,OAAO,CAAC,IAAIc,KAAK,CAAC,sBAAsB,CAAC,EAAET,KAAK,CAACU,qBAAqB,CAAC;;IAG/E,IAAI,CAACH,QAAQ,GAAGA,QAAQ;IACxBJ,QAAQ,CAACQ,GAAG,CAAC,IAAI,EAAE;MAAEH;IAAG,CAAE,CAAC;EAC7B;EAEA;;;;;EAKA,MAAMI,OAAOA,CAAEC,IAAY,EAAEC,KAAiB;IAC5C,IAAI,EAAEA,KAAK,YAAYC,UAAU,CAAC,EAAE;MAClC,MAAMpB,OAAO,CAAC,IAAIc,KAAK,CAAC,iCAAiC,CAAC,EAAET,KAAK,CAACgB,sBAAsB,CAAC;;IAG3F,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACV,QAAQ,CAACW,aAAa,CAACL,IAAI,CAAC;IACnD,MAAMM,GAAG,GAAG,MAAM,IAAI,CAACZ,QAAQ,CAACa,aAAa,CAACP,IAAI,CAAC;IACnD,MAAMQ,MAAM,GAAGlB,QAAQ,CAACmB,GAAG,CAAC,IAAI,CAAC;IAEjC,IAAID,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM1B,OAAO,CAAC,IAAIc,KAAK,CAAC,aAAa,CAAC,EAAET,KAAK,CAACgB,sBAAsB,CAAC;;IAGvE,MAAMR,GAAG,GAAGa,MAAM,CAACb,GAAG;IACtB,MAAMe,UAAU,GAAG/B,KAAK,CAACgC,GAAG,CAACC,oBAAoB,CAACN,GAAG,EAAEX,GAAG,CAAC;IAC3D,MAAMkB,WAAW,GAAG,MAAMjC,iBAAiB,CAACwB,GAAG,EAAEM,UAAU,CAAC;IAE5D;IACA,MAAMI,EAAE,GAAGnC,KAAK,CAACoC,KAAK,CAACC,mBAAmB,EAAE;IAC5CF,EAAE,CAACG,YAAY,CAACJ,WAAW,CAAC;IAC5BC,EAAE,CAACI,OAAO,GAAGvC,KAAK,CAACwC,IAAI,CAACC,YAAY,CAACnB,KAAK,CAAC;IAC3Ca,EAAE,CAACf,OAAO,EAAE;IAEZ;IACA,MAAMsB,GAAG,GAAG1C,KAAK,CAAC2C,IAAI,CAACC,KAAK,CAACT,EAAE,CAACU,MAAM,EAAE,CAAC,CAACC,QAAQ,EAAE;IACpD,OAAOzC,oBAAoB,CAACqC,GAAG,EAAE,OAAO,CAAC;EAC3C;EAEA;;;;;;EAMA,MAAMK,OAAOA,CAAEC,OAAmB;IAChC,IAAI,EAAEA,OAAO,YAAYzB,UAAU,CAAC,EAAE;MACpC,MAAMpB,OAAO,CAAC,IAAIc,KAAK,CAAC,sBAAsB,CAAC,EAAET,KAAK,CAACgB,sBAAsB,CAAC;;IAGhF,IAAIyB,GAAQ;IACZ,IAAI;MACF,MAAMC,GAAG,GAAGlD,KAAK,CAACwC,IAAI,CAACC,YAAY,CAAClC,kBAAkB,CAACyC,OAAO,EAAE,OAAO,CAAC,CAAC;MACzE,MAAMG,GAAG,GAAGnD,KAAK,CAAC2C,IAAI,CAACS,OAAO,CAACF,GAAG,CAAC;MAEnCD,GAAG,GAAGjD,KAAK,CAACoC,KAAK,CAACiB,eAAe,CAACF,GAAG,CAAC;KACvC,CAAC,OAAOG,GAAQ,EAAE;MACjB5C,GAAG,CAAC6C,KAAK,CAACD,GAAG,CAAC;MACd,MAAMnD,OAAO,CAAC,IAAIc,KAAK,CAAC,aAAa,CAAC,EAAET,KAAK,CAACgD,eAAe,CAAC;;IAGhE;IACA;IACA,MAAMC,UAAU,GAAQR,GAAG,CAACQ;IAC1B;IAAA,CACCC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAK,GAAG,IAAID,CAAC,CAACE,KAAK,KAAK,MAAM,CAAC;IAC1E;IAAA,CACCN,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAK,IAAI,CAAC;IACrD;IAAA,CACCE,GAAG,CAACN,CAAC,IAAG;MACP,OAAO;QACLO,SAAS,EAAEP,CAAC;QACZ;QACAQ,KAAK,EAAER,CAAC,CAACC,MAAM,CAACC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAK,IAAI,CAAC,CAACC;OACjD;IACH,CAAC,CAAC;IAEJ,MAAML,CAAC,GAAG,MAAMzD,SAAS,CAACuD,UAAU,EAAE,MAAOS,SAAc,IAAI;MAC7D,IAAI;QACF,MAAMzC,GAAG,GAAG,MAAM,IAAI,CAACV,QAAQ,CAACqD,WAAW,CAACF,SAAS,CAACC,KAAK,CAAC;QAC5D,IAAI1C,GAAG,IAAI,IAAI,EAAE;UACf,OAAO,IAAI;;OAEd,CAAC,OAAO6B,GAAQ,EAAE;QACjB,OAAO,KAAK;;MAEd,OAAO,KAAK;IACd,CAAC,CAAC;IAEF,IAAIK,CAAC,IAAI,IAAI,EAAE;MACb;MACA,MAAMU,WAAW,GAAaZ,UAAU,CAACQ,GAAG,CAACN,CAAC,IAAIA,CAAC,CAACQ,KAAK,CAAC;MAC1D,MAAMhE,OAAO,CAAC,IAAIc,KAAK,CAAC,uCAAuCoD,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE9D,KAAK,CAAC+D,gBAAgB,EAAE;QAChHF;OACD,CAAC;;IAGJ,MAAM5C,GAAG,GAAG,MAAM,IAAI,CAACV,QAAQ,CAACqD,WAAW,CAACT,CAAC,CAACQ,KAAK,CAAC;IAEpD,IAAI1C,GAAG,IAAI,IAAI,EAAE;MACf,MAAMtB,OAAO,CAAC,IAAIc,KAAK,CAAC,8BAA8B,CAAC,EAAET,KAAK,CAACgE,UAAU,CAAC;;IAG5E,MAAM7C,GAAG,GAAG,MAAM,IAAI,CAACZ,QAAQ,CAACa,aAAa,CAACH,GAAG,CAACJ,IAAI,CAAC;IACvD,MAAMQ,MAAM,GAAGlB,QAAQ,CAACmB,GAAG,CAAC,IAAI,CAAC;IAEjC,IAAID,MAAM,IAAI,IAAI,EAAE;MAClB,MAAM1B,OAAO,CAAC,IAAIc,KAAK,CAAC,aAAa,CAAC,EAAET,KAAK,CAACgB,sBAAsB,CAAC;;IAGvE,MAAMR,GAAG,GAAGa,MAAM,CAACb,GAAG;IACtB,MAAMe,UAAU,GAAG/B,KAAK,CAACgC,GAAG,CAACC,oBAAoB,CAACN,GAAG,EAAEX,GAAG,CAAC;IAC3DiC,GAAG,CAACF,OAAO,CAACY,CAAC,CAACO,SAAS,EAAEnC,UAAU,CAAC;IACpC,OAAO1B,oBAAoB,CAAC4C,GAAG,CAACV,OAAO,CAACO,QAAQ,EAAE,EAAE,OAAO,CAAC;EAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}