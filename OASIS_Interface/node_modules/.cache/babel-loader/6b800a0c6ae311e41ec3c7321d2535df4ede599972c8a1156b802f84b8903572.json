{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Fill':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const value = getParamValue('value', node, tensorMap, context);\n        return [tfOps.fill(shape, value, dtype)];\n      }\n    case 'LinSpace':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const num = getParamValue('num', node, tensorMap, context);\n        return [tfOps.linspace(start, stop, num)];\n      }\n    case 'Multinomial':\n      {\n        const logits = getParamValue('logits', node, tensorMap, context);\n        const numSamples = getParamValue('numSamples', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.multinomial(logits, numSamples, seed)];\n      }\n    case 'OneHot':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const depth = getParamValue('depth', node, tensorMap, context);\n        const onValue = getParamValue('onValue', node, tensorMap, context);\n        const offValue = getParamValue('offValue', node, tensorMap, context);\n        return [tfOps.oneHot(indices, depth, onValue, offValue)];\n      }\n    case 'Ones':\n      {\n        return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'OnesLike':\n      {\n        return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n    case 'RandomUniform':\n      {\n        return [tfOps.randomUniform(\n        // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'Range':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const step = getParamValue('step', node, tensorMap, context);\n        return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'TruncatedNormal':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const mean = getParamValue('mean', node, tensorMap, context);\n        const stdDev = getParamValue('stdDev', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n      }\n    case 'Zeros':\n      {\n        return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n    case 'ZerosLike':\n      {\n        return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'creation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","shape","dtype","value","fill","start","stop","num","linspace","logits","numSamples","seed","multinomial","indices","depth","onValue","offValue","oneHot","ones","onesLike","randomUniform","step","range","mean","stdDev","truncatedNormal","zeros","zerosLike","TypeError","CATEGORY"],"sources":["../../../../../../../tfjs-converter/src/operations/executors/creation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}