{"ast":null,"code":"export function computeScore(peer, pstats, params, peerIPs) {\n  let score = 0;\n  // topic stores\n  Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n    // the topic parameters\n    const topicParams = params.topics[topic];\n    if (topicParams === undefined) {\n      // we are not scoring this topic\n      return;\n    }\n    let topicScore = 0;\n    // P1: time in Mesh\n    if (tstats.inMesh) {\n      let p1 = tstats.meshTime / topicParams.timeInMeshQuantum;\n      if (p1 > topicParams.timeInMeshCap) {\n        p1 = topicParams.timeInMeshCap;\n      }\n      topicScore += p1 * topicParams.timeInMeshWeight;\n    }\n    // P2: first message deliveries\n    let p2 = tstats.firstMessageDeliveries;\n    if (p2 > topicParams.firstMessageDeliveriesCap) {\n      p2 = topicParams.firstMessageDeliveriesCap;\n    }\n    topicScore += p2 * topicParams.firstMessageDeliveriesWeight;\n    // P3: mesh message deliveries\n    if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < topicParams.meshMessageDeliveriesThreshold) {\n      const deficit = topicParams.meshMessageDeliveriesThreshold - tstats.meshMessageDeliveries;\n      const p3 = deficit * deficit;\n      topicScore += p3 * topicParams.meshMessageDeliveriesWeight;\n    }\n    // P3b:\n    // NOTE: the weight of P3b is negative (validated in validateTopicScoreParams) so this detracts\n    const p3b = tstats.meshFailurePenalty;\n    topicScore += p3b * topicParams.meshFailurePenaltyWeight;\n    // P4: invalid messages\n    // NOTE: the weight of P4 is negative (validated in validateTopicScoreParams) so this detracts\n    const p4 = tstats.invalidMessageDeliveries * tstats.invalidMessageDeliveries;\n    topicScore += p4 * topicParams.invalidMessageDeliveriesWeight;\n    // update score, mixing with topic weight\n    score += topicScore * topicParams.topicWeight;\n  });\n  // apply the topic score cap, if any\n  if (params.topicScoreCap > 0 && score > params.topicScoreCap) {\n    score = params.topicScoreCap;\n  }\n  // P5: application-specific score\n  const p5 = params.appSpecificScore(peer);\n  score += p5 * params.appSpecificWeight;\n  // P6: IP colocation factor\n  pstats.knownIPs.forEach(ip => {\n    if (params.IPColocationFactorWhitelist.has(ip)) {\n      return;\n    }\n    // P6 has a cliff (IPColocationFactorThreshold)\n    // It's only applied if at least that many peers are connected to us from that source IP addr.\n    // It is quadratic, and the weight is negative (validated in validatePeerScoreParams)\n    const peersInIP = peerIPs.get(ip);\n    const numPeersInIP = peersInIP ? peersInIP.size : 0;\n    if (numPeersInIP > params.IPColocationFactorThreshold) {\n      const surplus = numPeersInIP - params.IPColocationFactorThreshold;\n      const p6 = surplus * surplus;\n      score += p6 * params.IPColocationFactorWeight;\n    }\n  });\n  // P7: behavioural pattern penalty\n  if (pstats.behaviourPenalty > params.behaviourPenaltyThreshold) {\n    const excess = pstats.behaviourPenalty - params.behaviourPenaltyThreshold;\n    const p7 = excess * excess;\n    score += p7 * params.behaviourPenaltyWeight;\n  }\n  return score;\n}","map":{"version":3,"names":["computeScore","peer","pstats","params","peerIPs","score","Object","entries","topics","forEach","topic","tstats","topicParams","undefined","topicScore","inMesh","p1","meshTime","timeInMeshQuantum","timeInMeshCap","timeInMeshWeight","p2","firstMessageDeliveries","firstMessageDeliveriesCap","firstMessageDeliveriesWeight","meshMessageDeliveriesActive","meshMessageDeliveries","meshMessageDeliveriesThreshold","deficit","p3","meshMessageDeliveriesWeight","p3b","meshFailurePenalty","meshFailurePenaltyWeight","p4","invalidMessageDeliveries","invalidMessageDeliveriesWeight","topicWeight","topicScoreCap","p5","appSpecificScore","appSpecificWeight","knownIPs","ip","IPColocationFactorWhitelist","has","peersInIP","get","numPeersInIP","size","IPColocationFactorThreshold","surplus","p6","IPColocationFactorWeight","behaviourPenalty","behaviourPenaltyThreshold","excess","p7","behaviourPenaltyWeight"],"sources":["../../../src/score/compute-score.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}