{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { randomBytes } from '@libp2p/crypto';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { peerIdFromBytes, peerIdFromKeys } from '@libp2p/peer-id';\nimport { codes } from './errors.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n/**\n * Generate a random sequence number\n */\nexport function randomSeqno() {\n  return BigInt(`0x${uint8ArrayToString(randomBytes(8), 'base16')}`);\n}\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport const msgId = (key, seqno) => {\n  const seqnoBytes = uint8ArrayFromString(seqno.toString(16).padStart(16, '0'), 'base16');\n  const msgId = new Uint8Array(key.length + seqnoBytes.length);\n  msgId.set(key, 0);\n  msgId.set(seqnoBytes, key.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`\n */\nexport const noSignMsgId = data => {\n  return sha256.encode(data);\n};\n/**\n * Check if any member of the first set is also a member\n * of the second set\n */\nexport const anyMatch = (a, b) => {\n  let bHas;\n  if (Array.isArray(b)) {\n    bHas = val => b.includes(val);\n  } else {\n    bHas = val => b.has(val);\n  }\n  for (const val of a) {\n    if (bHas(val)) {\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Make everything an array\n */\nexport const ensureArray = function (maybeArray) {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n  return maybeArray;\n};\nconst isSigned = async message => {\n  if (message.sequenceNumber == null || message.from == null || message.signature == null) {\n    return false;\n  }\n  // if a public key is present in the `from` field, the message should be signed\n  const fromID = peerIdFromBytes(message.from);\n  if (fromID.publicKey != null) {\n    return true;\n  }\n  if (message.key != null) {\n    const signingID = await peerIdFromKeys(message.key);\n    return signingID.equals(fromID);\n  }\n  return false;\n};\nexport const toMessage = async message => {\n  if (message.from == null) {\n    throw new CodeError('RPC message was missing from', codes.ERR_MISSING_FROM);\n  }\n  if (!(await isSigned(message))) {\n    return {\n      type: 'unsigned',\n      topic: message.topic ?? '',\n      data: message.data ?? new Uint8Array(0)\n    };\n  }\n  const from = peerIdFromBytes(message.from);\n  const msg = {\n    type: 'signed',\n    from: peerIdFromBytes(message.from),\n    topic: message.topic ?? '',\n    sequenceNumber: bigIntFromBytes(message.sequenceNumber ?? new Uint8Array(0)),\n    data: message.data ?? new Uint8Array(0),\n    signature: message.signature ?? new Uint8Array(0),\n    key: message.key ?? from.publicKey ?? new Uint8Array(0)\n  };\n  if (msg.key.length === 0) {\n    throw new CodeError('Signed RPC message was missing key', codes.ERR_MISSING_KEY);\n  }\n  return msg;\n};\nexport const toRpcMessage = message => {\n  if (message.type === 'signed') {\n    return {\n      from: message.from.multihash.bytes,\n      data: message.data,\n      sequenceNumber: bigIntToBytes(message.sequenceNumber),\n      topic: message.topic,\n      signature: message.signature,\n      key: message.key\n    };\n  }\n  return {\n    data: message.data,\n    topic: message.topic\n  };\n};\nexport const bigIntToBytes = num => {\n  let str = num.toString(16);\n  if (str.length % 2 !== 0) {\n    str = `0${str}`;\n  }\n  return uint8ArrayFromString(str, 'base16');\n};\nexport const bigIntFromBytes = num => {\n  return BigInt(`0x${uint8ArrayToString(num, 'base16')}`);\n};","map":{"version":3,"names":["randomBytes","fromString","uint8ArrayFromString","toString","uint8ArrayToString","sha256","peerIdFromBytes","peerIdFromKeys","codes","CodeError","randomSeqno","BigInt","msgId","key","seqno","seqnoBytes","padStart","Uint8Array","length","set","noSignMsgId","data","encode","anyMatch","a","b","bHas","Array","isArray","val","includes","has","ensureArray","maybeArray","isSigned","message","sequenceNumber","from","signature","fromID","publicKey","signingID","equals","toMessage","ERR_MISSING_FROM","type","topic","msg","bigIntFromBytes","ERR_MISSING_KEY","toRpcMessage","multihash","bytes","bigIntToBytes","num","str"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}