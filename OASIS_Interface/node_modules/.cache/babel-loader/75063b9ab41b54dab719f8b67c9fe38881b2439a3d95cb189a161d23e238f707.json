{"ast":null,"code":"import { CodeError } from '@libp2p/interfaces/errors';\nimport * as secp from '@noble/secp256k1';\nimport { sha256 } from 'multiformats/hashes/sha2';\nconst PRIVATE_KEY_BYTE_LENGTH = 32;\nexport { PRIVATE_KEY_BYTE_LENGTH as privateKeyLength };\nexport function generateKey() {\n  return secp.utils.randomPrivateKey();\n}\n/**\n * Hash and sign message with private key\n */\nexport async function hashAndSign(key, msg) {\n  const {\n    digest\n  } = await sha256.digest(msg);\n  try {\n    return await secp.sign(digest, key);\n  } catch (err) {\n    throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n  }\n}\n/**\n * Hash message and verify signature with public key\n */\nexport async function hashAndVerify(key, sig, msg) {\n  try {\n    const {\n      digest\n    } = await sha256.digest(msg);\n    return secp.verify(sig, digest, key);\n  } catch (err) {\n    throw new CodeError(String(err), 'ERR_INVALID_INPUT');\n  }\n}\nexport function compressPublicKey(key) {\n  const point = secp.Point.fromHex(key).toRawBytes(true);\n  return point;\n}\nexport function decompressPublicKey(key) {\n  const point = secp.Point.fromHex(key).toRawBytes(false);\n  return point;\n}\nexport function validatePrivateKey(key) {\n  try {\n    secp.getPublicKey(key, true);\n  } catch (err) {\n    throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n  }\n}\nexport function validatePublicKey(key) {\n  try {\n    secp.Point.fromHex(key);\n  } catch (err) {\n    throw new CodeError(String(err), 'ERR_INVALID_PUBLIC_KEY');\n  }\n}\nexport function computePublicKey(privateKey) {\n  try {\n    return secp.getPublicKey(privateKey, true);\n  } catch (err) {\n    throw new CodeError(String(err), 'ERR_INVALID_PRIVATE_KEY');\n  }\n}","map":{"version":3,"names":["CodeError","secp","sha256","PRIVATE_KEY_BYTE_LENGTH","privateKeyLength","generateKey","utils","randomPrivateKey","hashAndSign","key","msg","digest","sign","err","String","hashAndVerify","sig","verify","compressPublicKey","point","Point","fromHex","toRawBytes","decompressPublicKey","validatePrivateKey","getPublicKey","validatePublicKey","computePublicKey","privateKey"],"sources":["../../../src/keys/secp256k1.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,SAAS,QAAQ,2BAA2B;AACrD,OAAO,KAAKC,IAAI,MAAM,kBAAkB;AACxC,SAASC,MAAM,QAAQ,0BAA0B;AAEjD,MAAMC,uBAAuB,GAAG,EAAE;AAElC,SAASA,uBAAuB,IAAIC,gBAAgB;AAEpD,OAAM,SAAUC,WAAWA,CAAA;EACzB,OAAOJ,IAAI,CAACK,KAAK,CAACC,gBAAgB,EAAE;AACtC;AAEA;;;AAGA,OAAO,eAAeC,WAAWA,CAAEC,GAAe,EAAEC,GAAe;EACjE,MAAM;IAAEC;EAAM,CAAE,GAAG,MAAMT,MAAM,CAACS,MAAM,CAACD,GAAG,CAAC;EAC3C,IAAI;IACF,OAAO,MAAMT,IAAI,CAACW,IAAI,CAACD,MAAM,EAAEF,GAAG,CAAC;GACpC,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM,IAAIb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAE,mBAAmB,CAAC;;AAEzD;AAEA;;;AAGA,OAAO,eAAeE,aAAaA,CAAEN,GAAe,EAAEO,GAAe,EAAEN,GAAe;EACpF,IAAI;IACF,MAAM;MAAEC;IAAM,CAAE,GAAG,MAAMT,MAAM,CAACS,MAAM,CAACD,GAAG,CAAC;IAC3C,OAAOT,IAAI,CAACgB,MAAM,CAACD,GAAG,EAAEL,MAAM,EAAEF,GAAG,CAAC;GACrC,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM,IAAIb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAE,mBAAmB,CAAC;;AAEzD;AAEA,OAAM,SAAUK,iBAAiBA,CAAET,GAAe;EAChD,MAAMU,KAAK,GAAGlB,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACZ,GAAG,CAAC,CAACa,UAAU,CAAC,IAAI,CAAC;EACtD,OAAOH,KAAK;AACd;AAEA,OAAM,SAAUI,mBAAmBA,CAAEd,GAAe;EAClD,MAAMU,KAAK,GAAGlB,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACZ,GAAG,CAAC,CAACa,UAAU,CAAC,KAAK,CAAC;EACvD,OAAOH,KAAK;AACd;AAEA,OAAM,SAAUK,kBAAkBA,CAAEf,GAAe;EACjD,IAAI;IACFR,IAAI,CAACwB,YAAY,CAAChB,GAAG,EAAE,IAAI,CAAC;GAC7B,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM,IAAIb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAE,yBAAyB,CAAC;;AAE/D;AAEA,OAAM,SAAUa,iBAAiBA,CAAEjB,GAAe;EAChD,IAAI;IACFR,IAAI,CAACmB,KAAK,CAACC,OAAO,CAACZ,GAAG,CAAC;GACxB,CAAC,OAAOI,GAAG,EAAE;IACZ,MAAM,IAAIb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAE,wBAAwB,CAAC;;AAE9D;AAEA,OAAM,SAAUc,gBAAgBA,CAAEC,UAAsB;EACtD,IAAI;IACF,OAAO3B,IAAI,CAACwB,YAAY,CAACG,UAAU,EAAE,IAAI,CAAC;GAC3C,CAAC,OAAOf,GAAG,EAAE;IACZ,MAAM,IAAIb,SAAS,CAACc,MAAM,CAACD,GAAG,CAAC,EAAE,yBAAyB,CAAC;;AAE/D"},"metadata":{},"sourceType":"module","externalDependencies":[]}