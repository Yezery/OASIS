{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable(thing) {\n  return Symbol.iterator in thing;\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable(thing) {\n  return Symbol.asyncIterator in thing;\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID(thing) {\n  return CID.asCID(thing) != null;\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function* normaliseInput(input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // CID\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input);\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) {\n      return iterator;\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({\n        cid: first.value\n      });\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        path: first.value\n      });\n      for (const path of iterator) {\n        yield toPin({\n          path\n        });\n      }\n      return;\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator;\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({\n        cid: first.value\n      });\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n      return;\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        path: first.value\n      });\n      for await (const path of iterator) {\n        yield toPin({\n          path\n        });\n      }\n      return;\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}","map":{"version":3,"names":["errCode","CID","isIterable","thing","Symbol","iterator","isAsyncIterable","asyncIterator","isCID","asCID","normaliseInput","input","undefined","Error","cid","toPin","String","path","first","next","done","value","obj","pin","recursive","metadata"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/pins/normalise-input.js"],"sourcesContent":["import errCode from 'err-code'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * @param {any} thing\n * @returns {thing is IterableIterator<any> & Iterator<any>}\n */\nfunction isIterable (thing) {\n  return Symbol.iterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is AsyncIterableIterator<any> & AsyncIterator<any>}\n */\nfunction isAsyncIterable (thing) {\n  return Symbol.asyncIterator in thing\n}\n\n/**\n * @param {any} thing\n * @returns {thing is CID}\n */\nfunction isCID (thing) {\n  return CID.asCID(thing) != null\n}\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseInput (input) {\n  // must give us something\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // CID\n  const cid = CID.asCID(input)\n\n  if (cid) {\n    yield toPin({ cid })\n    return\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input })\n    return\n  }\n\n  // { cid: CID recursive, metadata }\n  // @ts-expect-error - it still could be iterable or async iterable\n  if (input.cid != null || input.path != null) {\n    // @ts-expect-error\n    return yield toPin(input)\n  }\n\n  // Iterable<?>\n  if (isIterable(input)) {\n    const iterator = input[Symbol.iterator]()\n    const first = iterator.next()\n\n    if (first.done) {\n      return iterator\n    }\n\n    // Iterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // Iterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // Iterable<Pinnable>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // AsyncIterable<?>\n  if (isAsyncIterable(input)) {\n    const iterator = input[Symbol.asyncIterator]()\n    const first = await iterator.next()\n    if (first.done) return iterator\n\n    // AsyncIterable<CID>\n    if (isCID(first.value)) {\n      yield toPin({ cid: first.value })\n      for await (const cid of iterator) {\n        yield toPin({ cid })\n      }\n      return\n    }\n\n    // AsyncIterable<String>\n    if (first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ path: first.value })\n      for await (const path of iterator) {\n        yield toPin({ path })\n      }\n      return\n    }\n\n    // AsyncIterable<{ cid: CID|String recursive, metadata }>\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value)\n      for await (const obj of iterator) {\n        yield toPin(obj)\n      }\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {Pinnable} input\n */\nfunction toPin (input) {\n  const path = input.cid || `${input.path}`\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  /** @type {Pin} */\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  }\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata\n  }\n\n  return pin\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}