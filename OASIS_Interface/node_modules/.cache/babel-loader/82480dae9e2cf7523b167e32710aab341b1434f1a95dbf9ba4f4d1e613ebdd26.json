{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getSaleListByContractAddress } from \"@/api/axios/Sale\";\nimport { getNFTStruct, Buy } from \"@/api/axios/contract\";\nexport default {\n  data() {\n    return {\n      NFTInf: null,\n      NFTMetaData: null,\n      NFTContract: null,\n      NFTContractAddress: null,\n      NFTSaleId: 0,\n      NFTTokenId: 0,\n      NFTPrice: 0,\n      NFTSeller: \"\",\n      NFTIsActive: false,\n      NFTImage: \"\",\n      NFTName: \"\",\n      supplyer: \"\",\n      symbol: null,\n      NFTSeries: \"\",\n      description: \"\",\n      maxmums: 0,\n      currentId: 0,\n      activeTab: \"first\",\n      seriesNFTArrays: [],\n      sale: {},\n      bought: false,\n      MessageShow: false,\n      changeNFT: {},\n      opt: 0,\n      isChanging: false,\n      imgHeight: \"\"\n    };\n  },\n  watch: {},\n  mounted() {\n    this.init();\n    // ÁõëÂê¨Á™óÂè£ÂèòÂåñÔºå‰ΩøÂæóËΩÆÊí≠ÂõæÈ´òÂ∫¶Ëá™ÈÄÇÂ∫îÂõæÁâáÈ´òÂ∫¶\n    window.addEventListener(\"resize\", () => {\n      this.imgHeight = window.innerWidth / 15;\n    });\n  },\n  methods: {\n    async init() {\n      try {\n        this.NFTInf = this.$store.state.NFTInf;\n        console.log(this.NFTInf);\n        this.NFTImage = JSON.parse(this.NFTInf.tokenURI).image;\n        this.NFTContractAddress = this.NFTInf.nftContract;\n        this.NFTSaleId = this.NFTInf.saleId;\n        this.NFTSeller = this.NFTInf.seller;\n        this.NFTTokenId = this.NFTInf.tokenId;\n        this.NFTPrice = this.NFTInf.price;\n        this.NFTName = JSON.parse(this.NFTInf.tokenURI).name;\n        this.NFTIsActive = this.NFTInf.isActive;\n        this.supplyer = `${this.NFTInf.seller.slice(0, 5)}...${this.NFTInf.seller.slice(37)}`;\n        this.description = this.NFTInf.description;\n        this.NFTSeries = this.NFTInf.seriesName;\n        this.maxmums = this.NFTInf.maxmums;\n        this.symbol = this.NFTInf.symbol;\n        await this.getThisSeriesNFT();\n        await getNFTStruct(this.NFTContractAddress).then(re => {\n          this.NFTContract = re;\n        });\n        await this.NFTContract.methods._currentId().call().then(re => {\n          this.currentId = re;\n        });\n        await this.NFTContract.methods.symbol().call().then(re => {\n          this.symbol = re;\n        });\n        await this.NFTContract.methods.name().call().then(re => {\n          this.NFTSeries = re;\n        });\n        await this.NFTContract.methods._maximums().call().then(re => {\n          this.maxmums = re;\n        });\n        this.makeSale();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    OpenMessageBox(NFT) {\n      this.changeNFT = NFT;\n      this.MessageShow = true;\n    },\n    CloseMessageBox(opt) {\n      this.MessageShow = false;\n      this.changeNFT = {};\n      if (opt == 1) {\n        this.$notify({\n          title: `ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞`,\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    makeSale() {\n      this.sale = {\n        isActive: true,\n        nftAddress: this.NFTContractAddress,\n        price: this.$store.state.Web3.utils.fromWei(this.NFTPrice, \"ether\"),\n        saleId: Number(this.NFTSaleId),\n        ownerAddress: this.NFTSeller,\n        tokenId: Number(this.NFTTokenId)\n      };\n    },\n    async getThisSeriesNFT() {\n      var NFTDto = {\n        nftAddress: this.NFTContractAddress\n      };\n      await getSaleListByContractAddress(NFTDto).then(re => {\n        this.seriesNFTArrays = re.data.data;\n        console.log(re);\n      });\n    },\n    async Buy() {\n      try {\n        this.changeNFT.symbol = this.symbol;\n        this.changeNFT.image = this.NFTImage;\n        let isSuccess = false;\n        this.isChanging = true;\n        await Buy(this.changeNFT).then(re => {\n          isSuccess = re;\n        });\n        if (isSuccess) {\n          this.isChanging = false;\n          this.$notify({\n            title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.bought = true;\n          this.CloseMessageBox(2);\n        } else {\n          this.isChanging = false;\n          this.$notify({\n            title: \"ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.CloseMessageBox(2);\n        }\n      } catch (error) {\n        this.isChanging = false;\n        this.$notify.error({\n          title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    toMarketMain() {\n      this.$router.push(\"/\");\n      this.$store.commit(\"setIsSearch\", false);\n    }\n  }\n};","map":{"version":3,"names":["getSaleListByContractAddress","getNFTStruct","Buy","data","NFTInf","NFTMetaData","NFTContract","NFTContractAddress","NFTSaleId","NFTTokenId","NFTPrice","NFTSeller","NFTIsActive","NFTImage","NFTName","supplyer","symbol","NFTSeries","description","maxmums","currentId","activeTab","seriesNFTArrays","sale","bought","MessageShow","changeNFT","opt","isChanging","imgHeight","watch","mounted","init","window","addEventListener","innerWidth","methods","$store","state","console","log","JSON","parse","tokenURI","image","nftContract","saleId","seller","tokenId","price","name","isActive","slice","seriesName","getThisSeriesNFT","then","re","_currentId","call","_maximums","makeSale","error","OpenMessageBox","NFT","CloseMessageBox","$notify","title","type","position","offset","nftAddress","Web3","utils","fromWei","Number","ownerAddress","NFTDto","isSuccess","toMarketMain","$router","push","commit"],"sources":["src/components/infPage/NFTInf.vue"],"sourcesContent":["<template>\n  <div\n    class=\"NFTInfMainBox animate__animated animate__fadeInRight\"\n    v-loading.fullscreen.lock=\"isChanging\"\n    element-loading-text=\"‰∫§ÊòìËøõË°å‰∏≠\"\n    element-loading-spinner=\"el-icon-loading\"\n    element-loading-background=\"rgba(0, 0, 0, 0.8)\"\n  >\n    <el-carousel\n      indicator-position=\"none\"\n      arrow=\"never\"\n      :height=\"150\"\n      :style=\"{ backgroundImage: `url('${encodeURI(NFTImage)}')`}\"\n    >\n      <el-carousel-item\n        v-for=\"image in seriesNFTArrays\"\n        :key=\"image.ipfsPath\"\n      >\n        <div\n          class=\"NFTInfMain_Bg\"\n          \n        />\n        <img\n          style=\"width: 100%; object-fit: contain;\"\n          :src=\"image.ipfsPath\"\n        >\n      </el-carousel-item>\n    </el-carousel>\n\n    <div class=\"NFTInfMain_Avatar\">\n      <div class=\"NFTInfMain_AvatarBorder\">\n        <el-carousel\n          indicator-position=\"none\"\n          arrow=\"never\"\n          :height=\"imgHeight\"\n        >\n          <el-carousel-item\n            v-for=\"image in seriesNFTArrays\"\n            :key=\"image.ipfsPath\"\n          >\n            <img\n              style=\"width: 100%; object-fit: contain;\"\n              :src=\"image.ipfsPath\"\n            >\n          </el-carousel-item>\n        </el-carousel>\n      </div>\n    </div>\n    <!-- <div\n      class=\"NFTInfMain_Top_bg\"\n      :style=\"{ backgroundImage: `url('${encodeURI(NFTImage)}')`}\"\n    >\n      <div class=\"NFTInfMain_Top\">\n        <div class=\"NFTInfMain_Top_Avatar\">\n          <div class=\"AvatarBox\">\n            <img\n              :src=\"NFTImage\"\n              alt=\"\"\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"NFTInfMain_Bottom\">\n      <div class=\"Inf\">\n        <div class=\"NFTName\">\n          <h1>{{ NFTName }}</h1>\n        </div>\n        <div class=\"NFTContract\">\n          <div class=\"NFTSupplyer\">\n            Áî± <span style=\"font-weight: 800;font-size: 1.2vw;\">{{ supplyer }}</span>\n          </div>\n          <div class=\"NFTInf\">\n            <div class=\"NFTCounts\">\n              Á≥ªÂàó<span style=\"font-weight: 800;\">{{ NFTSeries }}</span> ¬∑\n              ‰ª£Â∏ÅÁ¨¶Âè∑<span style=\"font-weight: 800;\">{{ symbol }}</span> ¬∑\n              ÈôêÈáèÈì∏ÈÄ†<span style=\"font-weight: 800;\">{{ maxmums }}</span> ¬∑\n              ÁõÆÂâçÂ∑≤Èì∏ÈÄ†Êï∞Èáè<span style=\"font-weight: 800;\">{{ currentId }}</span>\n            </div>\n            <div class=\"NFTdescription\">\n              {{ description }}\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"selectBox\">\n        <el-tabs v-model=\"activeTab\">\n          <el-tab-pane\n            label=\"Ê≠£Âú®ÂîÆÂçñ\"\n            name=\"first\"\n          >\n            <div class=\"SeriesNFT\">\n              <div\n                style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                v-if=\"seriesNFTArrays.filter(inf => inf.isActive && inf.ipfsPath !== NFTImage).length == 0\"\n              >\n                <el-empty description=\"Êó†Âú®ÂîÆ\" />\n              </div>\n              <div\n                class=\"NFTInf\"\n                v-for=\"inf in seriesNFTArrays.filter(inf => inf.isActive && inf.ipfsPath !== NFTImage)\"\n                :key=\"inf.image\"\n              >\n                <div class=\"imageBox\">\n                  <img\n                    class=\"NFTImage\"\n                    :src=\"inf.ipfsPath\"\n                    alt=\"\"\n                  >\n                </div>\n                <div class=\"Inf\">\n                  <div class=\"NFTName\">\n                    {{ inf.nftName }}\n                  </div>\n                  <div class=\"ownerAndToSell\">\n                    <div class=\"ToSellBox\">\n                      #{{ inf.tokenId }}\n                    </div>\n                    <div style=\"margin-left: 2%;\">\n                      <span style=\"font-weight: 800;font-size: 2vw;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </el-tab-pane>\n          <el-tab-pane\n            label=\"ÊöÇÊú™ÂèëÂîÆ\"\n            name=\"second\"\n          >\n            <div class=\"SeriesNFT\">\n              <div\n                style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                v-if=\"seriesNFTArrays.filter(inf => !inf.isActive).length == 0\"\n              >\n                <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n              </div>\n              <template v-else>\n                <div\n                  class=\"NFTInf\"\n                  v-for=\"inf in seriesNFTArrays.filter(inf => !inf.isActive)\"\n                  :key=\"inf.image\"\n                >\n                  <div class=\"imageBox\">\n                    <img\n                      class=\"NFTImage\"\n                      :src=\"inf.image\"\n                      alt=\"\"\n                    >\n                  </div>\n                  <div class=\"Inf\">\n                    <div class=\"NFTName\">\n                      {{ inf.name }}\n                    </div>\n                    <div class=\"ownerAndToSell\">\n                      <div class=\"ToSellBox\" />\n                    </div>\n                  </div>\n                </div>\n              </template>\n            </div>\n          </el-tab-pane>\n          <el-tab-pane\n            label=\"Á≥ªÂàóNFT\"\n            name=\"third\"\n          >\n            <div class=\"SeriesNFT\">\n              <div\n                style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                v-if=\"seriesNFTArrays.length == 0\"\n              >\n                <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n              </div>\n              <div\n                class=\"NFTInf\"\n                v-for=\"inf in seriesNFTArrays\"\n                :key=\"inf.image\"\n              >\n                <div class=\"imageBox\">\n                  <img\n                    class=\"NFTImage\"\n                    :src=\"inf.ipfsPath\"\n                    alt=\"\"\n                  >\n                </div>\n                <div class=\"Inf\">\n                  <div class=\"NFTName\">\n                    {{ inf.nftName }}\n                  </div>\n                  <div class=\"ownerAndToSell\">\n                    <div class=\"ToSellBox\">\n                      #{{ inf.tokenId }}\n                    </div>\n                    <div style=\"margin-left: 2%;\">\n                      <span style=\"font-weight: 800;font-size: 2vw;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n    </div> -->\n    <!-- <div class=\"NFTInfMain\">\n        <div class=\"backHome\">\n        <router-link to=\"/\"><el-button icon=\"el-icon-back\" circle /></router-link>\n      </div>\n      <div class=\"NFTInfContextBox\">\n        <div class=\"NFTInfBox\">\n          <div class=\"AvatarBox\">\n            <div class=\"AvatarBorder\">\n              <img\n                :src=\"NFTImage\"\n                alt=\"\"\n              >\n            </div>\n\n            <div class=\"Inf\">\n              <div class=\"NFTName\">\n                <h1>{{ NFTName }}</h1>\n              </div>\n              <div class=\"NFTContract\">\n                <div class=\"NFTSupplyer\">\n                  Áî± <span style=\"font-weight: 800;font-size: 1.2vw;\">{{ supplyer }}</span>\n                </div>\n                <div class=\"NFTInf\">\n                  <div class=\"NFTCounts\">\n                    Á≥ªÂàó<span style=\"font-weight: 800;\">{{ NFTSeries }}</span> ¬∑\n                    ‰ª£Â∏ÅÁ¨¶Âè∑<span style=\"font-weight: 800;\">{{ symbol }}</span> ¬∑\n                    ÈôêÈáèÈì∏ÈÄ†<span style=\"font-weight: 800;\">{{ maxmums }}</span> ¬∑\n                    ÁõÆÂâçÂ∑≤Èì∏ÈÄ†Êï∞Èáè<span style=\"font-weight: 800;\">{{ currentId }}</span>\n                  </div>\n                  <div class=\"NFTdescription\">\n                    {{ description }}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div class=\"selectBox\">\n          <div class=\"selectBox-Button\">\n            <el-tabs v-model=\"activeTab\">\n              <el-tab-pane\n                label=\"Ê≠£Âú®ÂîÆÂçñ\"\n                name=\"first\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.filter(inf => inf.isActive && inf.ipfsPath !== NFTImage).length == 0\"\n                  >\n                    <el-empty description=\"Êó†Âú®ÂîÆ\" />\n                  </div>\n                  <div\n                    class=\"NFTInf\"\n                    v-for=\"inf in seriesNFTArrays.filter(inf => inf.isActive && inf.ipfsPath !== NFTImage)\"\n                    :key=\"inf.image\"\n                  >\n                    <div class=\"imageBox\">\n                      <img\n                        class=\"NFTImage\"\n                        :src=\"inf.ipfsPath\"\n                        alt=\"\"\n                      >\n                    </div>\n                    <div class=\"Inf\">\n                      <div class=\"NFTName\">\n                        {{ inf.nftName }}\n                      </div>\n                      <div class=\"ownerAndToSell\">\n                        <div class=\"ToSellBox\">\n                          #{{ inf.tokenId }}\n                        </div>\n                        <div style=\"margin-left: 2%;\">\n                          <span style=\"font-weight: 800;font-size: 2vw;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane\n                label=\"ÊöÇÊú™ÂèëÂîÆ\"\n                name=\"second\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.filter(inf => !inf.isActive).length == 0\"\n                  >\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <template v-else>\n                    <div\n                      class=\"NFTInf\"\n                      v-for=\"inf in seriesNFTArrays.filter(inf => !inf.isActive)\"\n                      :key=\"inf.image\"\n                    >\n                      <div class=\"imageBox\">\n                        <img\n                          class=\"NFTImage\"\n                          :src=\"inf.image\"\n                          alt=\"\"\n                        >\n                      </div>\n                      <div class=\"Inf\">\n                        <div class=\"NFTName\">\n                          {{ inf.name }}\n                        </div>\n                        <div class=\"ownerAndToSell\">\n                          <div class=\"ToSellBox\" />\n                        </div>\n                      </div>\n                    </div>\n                  </template>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane\n                label=\"Á≥ªÂàóNFT\"\n                name=\"third\"\n              >\n                <div class=\"SeriesNFT\">\n                  <div\n                    style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 1vw;\"\n                    v-if=\"seriesNFTArrays.length == 0\"\n                  >\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <div\n                    class=\"NFTInf\"\n                    v-for=\"inf in seriesNFTArrays\"\n                    :key=\"inf.image\"\n                  >\n                    <div class=\"imageBox\">\n                      <img\n                        class=\"NFTImage\"\n                        :src=\"inf.ipfsPath\"\n                        alt=\"\"\n                      >\n                    </div>\n                    <div class=\"Inf\">\n                      <div class=\"NFTName\">\n                        {{ inf.nftName }}\n                      </div>\n                      <div class=\"ownerAndToSell\">\n                        <div class=\"ToSellBox\">\n                          #{{ inf.tokenId }}\n                        </div>\n                        <div style=\"margin-left: 2%;\">\n                          <span style=\"font-weight: 800;font-size: 2vw;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </el-tab-pane>\n            </el-tabs>\n          </div>\n        </div>\n      </div>\n    </div> -->\n    <!-- <div class=\"footbox\">\n    <el-button\n            type=\"success\"\n            plain\n            class=\"Buy\"\n            @click=\"OpenMessageBox(sale, opt)\"\n            :disabled=\"!$store.state.isconnect || NFTSeller.toUpperCase() == $store.state.currentAddress.toUpperCase() || bought || !NFTIsActive\"\n          >\n            {{ bought?\"Â∑≤Ë¥≠ÂÖ•\":\"Ë¥≠ÂÖ•\" }}\n          </el-button>\n  </div> -->\n    <div\n      class=\"MessageMask\"\n      v-if=\"MessageShow\"\n    >\n      <div class=\"Message animate__animated animate__fadeInUp\">\n        <div class=\"MessageLeft\">\n          <div class=\"imageBox\">\n            <img\n              :src=\"NFTImage\"\n              alt=\"\"\n            >\n          </div>\n        </div>\n        <div class=\"MessageRight\">\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Á≥ªÂàóÂêç <span class=\"tipshelp\">Series Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ NFTSeries }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª£Â∏ÅÁ¨¶Âè∑ <span class=\"tipshelp\">Symbol</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ symbol }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ÂêçÁß∞ <span class=\"tipshelp\">NFT Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ NFTName }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Â∫èÂè∑ <span class=\"tipshelp\">Token ID</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                #{{ NFTTokenId }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle2\">\n                <el-divider />\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª∑Ê†º <span class=\"tipshelp\">Price</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                <span style=\"font-size: 30px;\"> {{ $store.state.Web3.utils.fromWei(NFTPrice, 'ether') }} </span>ETH\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"sumbitBox\">\n              <el-button\n                @click=\"CloseMessageBox(1)\"\n                class=\"createButton\"\n                type=\"primary\"\n                plain\n              >\n                ÂèñÊ∂à\n              </el-button>\n              <el-button\n                @click=\"Buy\"\n                class=\"createButton\"\n                type=\"success\"\n                plain\n              >\n                Ë¥≠‰π∞\n              </el-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { getSaleListByContractAddress } from \"@/api/axios/Sale\";\n  import { getNFTStruct, Buy } from \"@/api/axios/contract\";\n  export default {\n    data() {\n      return {\n        NFTInf: null,\n        NFTMetaData: null,\n        NFTContract: null,\n        NFTContractAddress: null,\n        NFTSaleId: 0,\n        NFTTokenId: 0,\n        NFTPrice: 0,\n        NFTSeller: \"\",\n        NFTIsActive: false,\n        NFTImage: \"\",\n        NFTName: \"\",\n\n        supplyer: \"\",\n        symbol: null,\n        NFTSeries: \"\",\n        description: \"\",\n        maxmums: 0,\n        currentId: 0,\n        activeTab: \"first\",\n        seriesNFTArrays: [],\n        sale: {},\n        bought: false,\n\n        MessageShow: false,\n        changeNFT: {},\n        opt: 0,\n        isChanging: false,\n        imgHeight: \"\",\n      };\n    },\n    watch: {},\n    mounted() {\n      this.init();\n      // ÁõëÂê¨Á™óÂè£ÂèòÂåñÔºå‰ΩøÂæóËΩÆÊí≠ÂõæÈ´òÂ∫¶Ëá™ÈÄÇÂ∫îÂõæÁâáÈ´òÂ∫¶\n      window.addEventListener(\"resize\", () => {\n\n          this.imgHeight = window.innerWidth/15\n        \n       \n      });\n    },\n    methods: {\n      async init() {\n        try {\n          this.NFTInf = this.$store.state.NFTInf;\n          console.log(this.NFTInf);\n          this.NFTImage = JSON.parse(this.NFTInf.tokenURI).image;\n          this.NFTContractAddress = this.NFTInf.nftContract;\n          this.NFTSaleId = this.NFTInf.saleId;\n          this.NFTSeller = this.NFTInf.seller;\n          this.NFTTokenId = this.NFTInf.tokenId;\n          this.NFTPrice = this.NFTInf.price;\n          this.NFTName = JSON.parse(this.NFTInf.tokenURI).name;\n          this.NFTIsActive = this.NFTInf.isActive;\n          this.supplyer = `${this.NFTInf.seller.slice(\n            0,\n            5\n          )}...${this.NFTInf.seller.slice(37)}`;\n          this.description = this.NFTInf.description;\n          this.NFTSeries = this.NFTInf.seriesName;\n          this.maxmums = this.NFTInf.maxmums;\n          this.symbol = this.NFTInf.symbol;\n          await this.getThisSeriesNFT();\n          await getNFTStruct(this.NFTContractAddress).then((re) => {\n            this.NFTContract = re;\n          });\n          await this.NFTContract.methods\n            ._currentId()\n            .call()\n            .then((re) => {\n              this.currentId = re;\n            });\n          await this.NFTContract.methods\n            .symbol()\n            .call()\n            .then((re) => {\n              this.symbol = re;\n            });\n          await this.NFTContract.methods\n            .name()\n            .call()\n            .then((re) => {\n              this.NFTSeries = re;\n            });\n          await this.NFTContract.methods\n            ._maximums()\n            .call()\n            .then((re) => {\n              this.maxmums = re;\n            });\n          this.makeSale();\n        } catch (error) {\n          console.log(error);\n        }\n      },\n      OpenMessageBox(NFT) {\n        this.changeNFT = NFT;\n        this.MessageShow = true;\n      },\n      CloseMessageBox(opt) {\n        this.MessageShow = false;\n        this.changeNFT = {};\n        if (opt == 1) {\n          this.$notify({\n            title: `ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞`,\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      makeSale() {\n        this.sale = {\n          isActive: true,\n          nftAddress: this.NFTContractAddress,\n          price: this.$store.state.Web3.utils.fromWei(this.NFTPrice, \"ether\"),\n          saleId: Number(this.NFTSaleId),\n          ownerAddress: this.NFTSeller,\n          tokenId: Number(this.NFTTokenId),\n        };\n      },\n      async getThisSeriesNFT() {\n        var NFTDto = {\n          nftAddress: this.NFTContractAddress,\n        };\n        await getSaleListByContractAddress(NFTDto).then((re) => {\n          this.seriesNFTArrays = re.data.data;\n          console.log(re);\n        });\n      },\n      async Buy() {\n        try {\n          this.changeNFT.symbol = this.symbol;\n          this.changeNFT.image = this.NFTImage;\n          let isSuccess = false;\n          this.isChanging = true;\n          await Buy(this.changeNFT).then((re) => {\n            isSuccess = re;\n          });\n          if (isSuccess) {\n            this.isChanging = false;\n            this.$notify({\n              title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.bought = true;\n            this.CloseMessageBox(2);\n          } else {\n            this.isChanging = false;\n            this.$notify({\n              title: \"ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.CloseMessageBox(2);\n          }\n        } catch (error) {\n          this.isChanging = false;\n          this.$notify.error({\n            title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      toMarketMain() {\n        this.$router.push(\"/\");\n        this.$store.commit(\"setIsSearch\", false);\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/style/components/NFTInf.scss\";\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}