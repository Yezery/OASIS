{"ast":null,"code":"/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n\n(function () {\n  // helper functions for that ctx\n  function write(buffer, offs) {\n    for (var i = 2; i < arguments.length; i++) {\n      for (var j = 0; j < arguments[i].length; j++) {\n        buffer[offs++] = arguments[i].charAt(j);\n      }\n    }\n  }\n  function byte2(w) {\n    return String.fromCharCode(w >> 8 & 255, w & 255);\n  }\n  function byte4(w) {\n    return String.fromCharCode(w >> 24 & 255, w >> 16 & 255, w >> 8 & 255, w & 255);\n  }\n  function byte2lsb(w) {\n    return String.fromCharCode(w & 255, w >> 8 & 255);\n  }\n\n  // modified from original source to support NPM\n  var PNGlib = function (width, height, depth) {\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n\n    // pixel data and row filter identifier size\n    this.pix_size = height * (width + 1);\n\n    // deflate header, pix_size, block headers, adler32 checksum\n    this.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n    // offsets and sizes of Png chunks\n    this.ihdr_offs = 0; // IHDR offset and size\n    this.ihdr_size = 4 + 4 + 13 + 4;\n    this.plte_offs = this.ihdr_offs + this.ihdr_size; // PLTE offset and size\n    this.plte_size = 4 + 4 + 3 * depth + 4;\n    this.trns_offs = this.plte_offs + this.plte_size; // tRNS offset and size\n    this.trns_size = 4 + 4 + depth + 4;\n    this.idat_offs = this.trns_offs + this.trns_size; // IDAT offset and size\n    this.idat_size = 4 + 4 + this.data_size + 4;\n    this.iend_offs = this.idat_offs + this.idat_size; // IEND offset and size\n    this.iend_size = 4 + 4 + 4;\n    this.buffer_size = this.iend_offs + this.iend_size; // total PNG size\n\n    this.buffer = new Array();\n    this.palette = new Object();\n    this.pindex = 0;\n    var _crc32 = new Array();\n\n    // initialize buffer with zero bytes\n    for (var i = 0; i < this.buffer_size; i++) {\n      this.buffer[i] = \"\\x00\";\n    }\n\n    // initialize non-zero elements\n    write(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n    write(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n    write(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n    write(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n    write(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n    // initialize deflate header\n    var header = 8 + (7 << 4) << 8 | 3 << 6;\n    header += 31 - header % 31;\n    write(this.buffer, this.idat_offs + 8, byte2(header));\n\n    // initialize deflate block headers\n    for (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n      var size, bits;\n      if (i + 0xffff < this.pix_size) {\n        size = 0xffff;\n        bits = \"\\x00\";\n      } else {\n        size = this.pix_size - (i << 16) - i;\n        bits = \"\\x01\";\n      }\n      write(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n    }\n\n    /* Create crc32 lookup table */\n    for (var i = 0; i < 256; i++) {\n      var c = i;\n      for (var j = 0; j < 8; j++) {\n        if (c & 1) {\n          c = -306674912 ^ c >> 1 & 0x7fffffff;\n        } else {\n          c = c >> 1 & 0x7fffffff;\n        }\n      }\n      _crc32[i] = c;\n    }\n\n    // compute the index into a png for a given pixel\n    this.index = function (x, y) {\n      var i = y * (this.width + 1) + x + 1;\n      var j = this.idat_offs + 8 + 2 + 5 * Math.floor(i / 0xffff + 1) + i;\n      return j;\n    };\n\n    // convert a color and build up the palette\n    this.color = function (red, green, blue, alpha) {\n      alpha = alpha >= 0 ? alpha : 255;\n      var color = ((alpha << 8 | red) << 8 | green) << 8 | blue;\n      if (typeof this.palette[color] == \"undefined\") {\n        if (this.pindex == this.depth) return \"\\x00\";\n        var ndx = this.plte_offs + 8 + 3 * this.pindex;\n        this.buffer[ndx + 0] = String.fromCharCode(red);\n        this.buffer[ndx + 1] = String.fromCharCode(green);\n        this.buffer[ndx + 2] = String.fromCharCode(blue);\n        this.buffer[this.trns_offs + 8 + this.pindex] = String.fromCharCode(alpha);\n        this.palette[color] = String.fromCharCode(this.pindex++);\n      }\n      return this.palette[color];\n    };\n\n    // output a PNG string, Base64 encoded\n    this.getBase64 = function () {\n      var s = this.getDump();\n      var ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n      var c1, c2, c3, e1, e2, e3, e4;\n      var l = s.length;\n      var i = 0;\n      var r = \"\";\n      do {\n        c1 = s.charCodeAt(i);\n        e1 = c1 >> 2;\n        c2 = s.charCodeAt(i + 1);\n        e2 = (c1 & 3) << 4 | c2 >> 4;\n        c3 = s.charCodeAt(i + 2);\n        if (l < i + 2) {\n          e3 = 64;\n        } else {\n          e3 = (c2 & 0xf) << 2 | c3 >> 6;\n        }\n        if (l < i + 3) {\n          e4 = 64;\n        } else {\n          e4 = c3 & 0x3f;\n        }\n        r += ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n      } while ((i += 3) < l);\n      return r;\n    };\n\n    // output a PNG string\n    this.getDump = function () {\n      // compute adler32 of output pixels + row filter bytes\n      var BASE = 65521; /* largest prime smaller than 65536 */\n      var NMAX = 5552; /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n      var s1 = 1;\n      var s2 = 0;\n      var n = NMAX;\n      for (var y = 0; y < this.height; y++) {\n        for (var x = -1; x < this.width; x++) {\n          s1 += this.buffer[this.index(x, y)].charCodeAt(0);\n          s2 += s1;\n          if ((n -= 1) == 0) {\n            s1 %= BASE;\n            s2 %= BASE;\n            n = NMAX;\n          }\n        }\n      }\n      s1 %= BASE;\n      s2 %= BASE;\n      write(this.buffer, this.idat_offs + this.idat_size - 8, byte4(s2 << 16 | s1));\n\n      // compute crc32 of the PNG chunks\n      function crc32(png, offs, size) {\n        var crc = -1;\n        for (var i = 4; i < size - 4; i += 1) {\n          crc = _crc32[(crc ^ png[offs + i].charCodeAt(0)) & 0xff] ^ crc >> 8 & 0x00ffffff;\n        }\n        write(png, offs + size - 4, byte4(crc ^ -1));\n      }\n      crc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n      crc32(this.buffer, this.plte_offs, this.plte_size);\n      crc32(this.buffer, this.trns_offs, this.trns_size);\n      crc32(this.buffer, this.idat_offs, this.idat_size);\n      crc32(this.buffer, this.iend_offs, this.iend_size);\n\n      // convert PNG to string\n      return \"\\x89PNG\\r\\n\\x1a\\n\" + this.buffer.join('');\n    };\n  };\n\n  // modified from original source to support NPM\n  if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n    module.exports = PNGlib;\n  } else {\n    window.PNGlib = PNGlib;\n  }\n})();","map":{"version":3,"names":["write","buffer","offs","i","arguments","length","j","charAt","byte2","w","String","fromCharCode","byte4","byte2lsb","PNGlib","width","height","depth","pix_size","data_size","Math","floor","ihdr_offs","ihdr_size","plte_offs","plte_size","trns_offs","trns_size","idat_offs","idat_size","iend_offs","iend_size","buffer_size","Array","palette","Object","pindex","_crc32","header","size","bits","c","index","x","y","color","red","green","blue","alpha","ndx","getBase64","s","getDump","ch","c1","c2","c3","e1","e2","e3","e4","l","r","charCodeAt","BASE","NMAX","s1","s2","n","crc32","png","crc","join","module","exports","window"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/identicon.js@2.3.3/node_modules/identicon.js/pnglib.js"],"sourcesContent":["/**\n* A handy class to calculate color values.\n*\n* @version 1.0\n* @author Robert Eisele <robert@xarg.org>\n* @copyright Copyright (c) 2010, Robert Eisele\n* @link http://www.xarg.org/2010/03/generate-client-side-png-files-using-javascript/\n* @license http://www.opensource.org/licenses/bsd-license.php BSD License\n*\n*/\n\n(function() {\n\n\t// helper functions for that ctx\n\tfunction write(buffer, offs) {\n\t\tfor (var i = 2; i < arguments.length; i++) {\n\t\t\tfor (var j = 0; j < arguments[i].length; j++) {\n\t\t\t\tbuffer[offs++] = arguments[i].charAt(j);\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction byte2(w) {\n\t\treturn String.fromCharCode((w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte4(w) {\n\t\treturn String.fromCharCode((w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w & 255);\n\t}\n\n\tfunction byte2lsb(w) {\n\t\treturn String.fromCharCode(w & 255, (w >> 8) & 255);\n\t}\n\n\t// modified from original source to support NPM\n\tvar PNGlib = function(width,height,depth) {\n\n\t\tthis.width   = width;\n\t\tthis.height  = height;\n\t\tthis.depth   = depth;\n\n\t\t// pixel data and row filter identifier size\n\t\tthis.pix_size = height * (width + 1);\n\n\t\t// deflate header, pix_size, block headers, adler32 checksum\n\t\tthis.data_size = 2 + this.pix_size + 5 * Math.floor((0xfffe + this.pix_size) / 0xffff) + 4;\n\n\t\t// offsets and sizes of Png chunks\n\t\tthis.ihdr_offs = 0;\t\t\t\t\t\t\t\t\t// IHDR offset and size\n\t\tthis.ihdr_size = 4 + 4 + 13 + 4;\n\t\tthis.plte_offs = this.ihdr_offs + this.ihdr_size;\t// PLTE offset and size\n\t\tthis.plte_size = 4 + 4 + 3 * depth + 4;\n\t\tthis.trns_offs = this.plte_offs + this.plte_size;\t// tRNS offset and size\n\t\tthis.trns_size = 4 + 4 + depth + 4;\n\t\tthis.idat_offs = this.trns_offs + this.trns_size;\t// IDAT offset and size\n\t\tthis.idat_size = 4 + 4 + this.data_size + 4;\n\t\tthis.iend_offs = this.idat_offs + this.idat_size;\t// IEND offset and size\n\t\tthis.iend_size = 4 + 4 + 4;\n\t\tthis.buffer_size  = this.iend_offs + this.iend_size;\t// total PNG size\n\n\t\tthis.buffer  = new Array();\n\t\tthis.palette = new Object();\n\t\tthis.pindex  = 0;\n\n\t\tvar _crc32 = new Array();\n\n\t\t// initialize buffer with zero bytes\n\t\tfor (var i = 0; i < this.buffer_size; i++) {\n\t\t\tthis.buffer[i] = \"\\x00\";\n\t\t}\n\n\t\t// initialize non-zero elements\n\t\twrite(this.buffer, this.ihdr_offs, byte4(this.ihdr_size - 12), 'IHDR', byte4(width), byte4(height), \"\\x08\\x03\");\n\t\twrite(this.buffer, this.plte_offs, byte4(this.plte_size - 12), 'PLTE');\n\t\twrite(this.buffer, this.trns_offs, byte4(this.trns_size - 12), 'tRNS');\n\t\twrite(this.buffer, this.idat_offs, byte4(this.idat_size - 12), 'IDAT');\n\t\twrite(this.buffer, this.iend_offs, byte4(this.iend_size - 12), 'IEND');\n\n\t\t// initialize deflate header\n\t\tvar header = ((8 + (7 << 4)) << 8) | (3 << 6);\n\t\theader+= 31 - (header % 31);\n\n\t\twrite(this.buffer, this.idat_offs + 8, byte2(header));\n\n\t\t// initialize deflate block headers\n\t\tfor (var i = 0; (i << 16) - 1 < this.pix_size; i++) {\n\t\t\tvar size, bits;\n\t\t\tif (i + 0xffff < this.pix_size) {\n\t\t\t\tsize = 0xffff;\n\t\t\t\tbits = \"\\x00\";\n\t\t\t} else {\n\t\t\t\tsize = this.pix_size - (i << 16) - i;\n\t\t\t\tbits = \"\\x01\";\n\t\t\t}\n\t\t\twrite(this.buffer, this.idat_offs + 8 + 2 + (i << 16) + (i << 2), bits, byte2lsb(size), byte2lsb(~size));\n\t\t}\n\n\t\t/* Create crc32 lookup table */\n\t\tfor (var i = 0; i < 256; i++) {\n\t\t\tvar c = i;\n\t\t\tfor (var j = 0; j < 8; j++) {\n\t\t\t\tif (c & 1) {\n\t\t\t\t\tc = -306674912 ^ ((c >> 1) & 0x7fffffff);\n\t\t\t\t} else {\n\t\t\t\t\tc = (c >> 1) & 0x7fffffff;\n\t\t\t\t}\n\t\t\t}\n\t\t\t_crc32[i] = c;\n\t\t}\n\n\t\t// compute the index into a png for a given pixel\n\t\tthis.index = function(x,y) {\n\t\t\tvar i = y * (this.width + 1) + x + 1;\n\t\t\tvar j = this.idat_offs + 8 + 2 + 5 * Math.floor((i / 0xffff) + 1) + i;\n\t\t\treturn j;\n\t\t}\n\n\t\t// convert a color and build up the palette\n\t\tthis.color = function(red, green, blue, alpha) {\n\n\t\t\talpha = alpha >= 0 ? alpha : 255;\n\t\t\tvar color = (((((alpha << 8) | red) << 8) | green) << 8) | blue;\n\n\t\t\tif (typeof this.palette[color] == \"undefined\") {\n\t\t\t\tif (this.pindex == this.depth) return \"\\x00\";\n\n\t\t\t\tvar ndx = this.plte_offs + 8 + 3 * this.pindex;\n\n\t\t\t\tthis.buffer[ndx + 0] = String.fromCharCode(red);\n\t\t\t\tthis.buffer[ndx + 1] = String.fromCharCode(green);\n\t\t\t\tthis.buffer[ndx + 2] = String.fromCharCode(blue);\n\t\t\t\tthis.buffer[this.trns_offs+8+this.pindex] = String.fromCharCode(alpha);\n\n\t\t\t\tthis.palette[color] = String.fromCharCode(this.pindex++);\n\t\t\t}\n\t\t\treturn this.palette[color];\n\t\t}\n\n\t\t// output a PNG string, Base64 encoded\n\t\tthis.getBase64 = function() {\n\n\t\t\tvar s = this.getDump();\n\n\t\t\tvar ch = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t\t\tvar c1, c2, c3, e1, e2, e3, e4;\n\t\t\tvar l = s.length;\n\t\t\tvar i = 0;\n\t\t\tvar r = \"\";\n\n\t\t\tdo {\n\t\t\t\tc1 = s.charCodeAt(i);\n\t\t\t\te1 = c1 >> 2;\n\t\t\t\tc2 = s.charCodeAt(i+1);\n\t\t\t\te2 = ((c1 & 3) << 4) | (c2 >> 4);\n\t\t\t\tc3 = s.charCodeAt(i+2);\n\t\t\t\tif (l < i+2) { e3 = 64; } else { e3 = ((c2 & 0xf) << 2) | (c3 >> 6); }\n\t\t\t\tif (l < i+3) { e4 = 64; } else { e4 = c3 & 0x3f; }\n\t\t\t\tr+= ch.charAt(e1) + ch.charAt(e2) + ch.charAt(e3) + ch.charAt(e4);\n\t\t\t} while ((i+= 3) < l);\n\t\t\treturn r;\n\t\t}\n\n\t\t// output a PNG string\n\t\tthis.getDump = function() {\n\n\t\t\t// compute adler32 of output pixels + row filter bytes\n\t\t\tvar BASE = 65521; /* largest prime smaller than 65536 */\n\t\t\tvar NMAX = 5552;  /* NMAX is the largest n such that 255n(n+1)/2 + (n+1)(BASE-1) <= 2^32-1 */\n\t\t\tvar s1 = 1;\n\t\t\tvar s2 = 0;\n\t\t\tvar n = NMAX;\n\n\t\t\tfor (var y = 0; y < this.height; y++) {\n\t\t\t\tfor (var x = -1; x < this.width; x++) {\n\t\t\t\t\ts1+= this.buffer[this.index(x, y)].charCodeAt(0);\n\t\t\t\t\ts2+= s1;\n\t\t\t\t\tif ((n-= 1) == 0) {\n\t\t\t\t\t\ts1%= BASE;\n\t\t\t\t\t\ts2%= BASE;\n\t\t\t\t\t\tn = NMAX;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ts1%= BASE;\n\t\t\ts2%= BASE;\n\t\t\twrite(this.buffer, this.idat_offs + this.idat_size - 8, byte4((s2 << 16) | s1));\n\n\t\t\t// compute crc32 of the PNG chunks\n\t\t\tfunction crc32(png, offs, size) {\n\t\t\t\tvar crc = -1;\n\t\t\t\tfor (var i = 4; i < size-4; i += 1) {\n\t\t\t\t\tcrc = _crc32[(crc ^ png[offs+i].charCodeAt(0)) & 0xff] ^ ((crc >> 8) & 0x00ffffff);\n\t\t\t\t}\n\t\t\t\twrite(png, offs+size-4, byte4(crc ^ -1));\n\t\t\t}\n\n\t\t\tcrc32(this.buffer, this.ihdr_offs, this.ihdr_size);\n\t\t\tcrc32(this.buffer, this.plte_offs, this.plte_size);\n\t\t\tcrc32(this.buffer, this.trns_offs, this.trns_size);\n\t\t\tcrc32(this.buffer, this.idat_offs, this.idat_size);\n\t\t\tcrc32(this.buffer, this.iend_offs, this.iend_size);\n\n\t\t\t// convert PNG to string\n\t\t\treturn \"\\x89PNG\\r\\n\\x1a\\n\"+this.buffer.join('');\n\t\t}\n\t}\n\n\t// modified from original source to support NPM\n\tif (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\n\t\tmodule.exports = PNGlib;\n\t} else {\n\t\twindow.PNGlib = PNGlib;\n\t}\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}