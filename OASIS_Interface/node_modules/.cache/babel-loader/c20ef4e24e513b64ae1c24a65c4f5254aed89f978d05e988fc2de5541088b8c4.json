{"ast":null,"code":"import { BaseBlockstore } from './base.js';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as Errors from './errors.js';\n\n/**\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor() {\n    super();\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {};\n  }\n  open() {\n    return Promise.resolve();\n  }\n  close() {\n    return Promise.resolve();\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n  async put(key, val) {\n    // eslint-disable-line require-await\n    this.data[base32.encode(key.multihash.bytes)] = val;\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists) throw Errors.notFoundError();\n    return this.data[base32.encode(key.multihash.bytes)];\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async has(key) {\n    // eslint-disable-line require-await\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined;\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async delete(key) {\n    // eslint-disable-line require-await\n    delete this.data[base32.encode(key.multihash.bytes)];\n  }\n  async *_all() {\n    yield* Object.entries(this.data).map(([key, value]) => ({\n      key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n      value\n    }));\n  }\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))));\n  }\n}","map":{"version":3,"names":["BaseBlockstore","base32","raw","CID","Digest","Errors","MemoryBlockstore","constructor","data","open","Promise","resolve","close","put","key","val","encode","multihash","bytes","get","exists","has","notFoundError","undefined","delete","_all","Object","entries","map","value","createV1","code","decode","_allKeys"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/blockstore-core@3.0.0/node_modules/blockstore-core/src/memory.js"],"sourcesContent":["import { BaseBlockstore } from './base.js'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport * as Errors from './errors.js'\n\n/**\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[base32.encode(key.multihash.bytes)] = val\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: CID.createV1(raw.code, Digest.decode(base32.decode(key))), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))))\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,WAAW;AAC1C,SAASC,MAAM,QAAQ,2BAA2B;AAClD,OAAO,KAAKC,GAAG,MAAM,yBAAyB;AAC9C,SAASC,GAAG,QAAQ,kBAAkB;AACtC,OAAO,KAAKC,MAAM,MAAM,4BAA4B;AACpD,OAAO,KAAKC,MAAM,MAAM,aAAa;;AAErC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,SAASN,cAAc,CAAC;EACnDO,WAAWA,CAAA,EAAI;IACb,KAAK,CAAC,CAAC;;IAEP;IACA,IAAI,CAACC,IAAI,GAAG,CAAC,CAAC;EAChB;EAEAC,IAAIA,CAAA,EAAI;IACN,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B;EAEAC,KAAKA,CAAA,EAAI;IACP,OAAOF,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B;;EAEA;AACF;AACA;AACA;EACE,MAAME,GAAGA,CAAEC,GAAG,EAAEC,GAAG,EAAE;IAAE;IACrB,IAAI,CAACP,IAAI,CAACP,MAAM,CAACe,MAAM,CAACF,GAAG,CAACG,SAAS,CAACC,KAAK,CAAC,CAAC,GAAGH,GAAG;EACrD;;EAEA;AACF;AACA;EACE,MAAMI,GAAGA,CAAEL,GAAG,EAAE;IACd,MAAMM,MAAM,GAAG,MAAM,IAAI,CAACC,GAAG,CAACP,GAAG,CAAC;IAClC,IAAI,CAACM,MAAM,EAAE,MAAMf,MAAM,CAACiB,aAAa,CAAC,CAAC;IACzC,OAAO,IAAI,CAACd,IAAI,CAACP,MAAM,CAACe,MAAM,CAACF,GAAG,CAACG,SAAS,CAACC,KAAK,CAAC,CAAC;EACtD;;EAEA;AACF;AACA;EACE,MAAMG,GAAGA,CAAEP,GAAG,EAAE;IAAE;IAChB,OAAO,IAAI,CAACN,IAAI,CAACP,MAAM,CAACe,MAAM,CAACF,GAAG,CAACG,SAAS,CAACC,KAAK,CAAC,CAAC,KAAKK,SAAS;EACpE;;EAEA;AACF;AACA;EACE,MAAMC,MAAMA,CAAEV,GAAG,EAAE;IAAE;IACnB,OAAO,IAAI,CAACN,IAAI,CAACP,MAAM,CAACe,MAAM,CAACF,GAAG,CAACG,SAAS,CAACC,KAAK,CAAC,CAAC;EACtD;EAEA,OAAQO,IAAIA,CAAA,EAAI;IACd,OAAQC,MAAM,CAACC,OAAO,CAAC,IAAI,CAACnB,IAAI,CAAC,CAC9BoB,GAAG,CAAC,CAAC,CAACd,GAAG,EAAEe,KAAK,CAAC,MAAM;MAAEf,GAAG,EAAEX,GAAG,CAAC2B,QAAQ,CAAC5B,GAAG,CAAC6B,IAAI,EAAE3B,MAAM,CAAC4B,MAAM,CAAC/B,MAAM,CAAC+B,MAAM,CAAClB,GAAG,CAAC,CAAC,CAAC;MAAEe;IAAM,CAAC,CAAC,CAAC;EACvG;EAEA,OAAQI,QAAQA,CAAA,EAAI;IAClB,OAAQP,MAAM,CAACC,OAAO,CAAC,IAAI,CAACnB,IAAI,CAAC,CAC9BoB,GAAG,CAAC,CAAC,CAACd,GAAG,CAAC,KAAKX,GAAG,CAAC2B,QAAQ,CAAC5B,GAAG,CAAC6B,IAAI,EAAE3B,MAAM,CAAC4B,MAAM,CAAC/B,MAAM,CAAC+B,MAAM,CAAClB,GAAG,CAAC,CAAC,CAAC,CAAC;EAC9E;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}