{"ast":null,"code":"require(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\n/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n  var cur_accum,\n    cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n    ClearCode = 1 << init_bits - 1;\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = c << hshift ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) {\n        // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n    if (cur_bits > 0) cur_accum |= code << cur_bits;else cur_accum = code;\n    cur_bits += n_bits;\n    while (cur_bits >= 8) {\n      char_out(cur_accum & 0xff, outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;else maxcode = MAXCODE(n_bits);\n      }\n    }\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out(cur_accum & 0xff, outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n  this.encode = encode;\n}\nmodule.exports = LZWEncoder;","map":{"version":3,"names":["EOF","BITS","HSIZE","masks","LZWEncoder","width","height","pixels","colorDepth","initCodeSize","Math","max","accum","Uint8Array","htab","Int32Array","codetab","cur_accum","cur_bits","a_count","free_ent","maxcode","clear_flg","g_init_bits","ClearCode","EOFCode","char_out","c","outs","flush_char","cl_block","cl_hash","output","hsize","i","compress","init_bits","fcode","ent","disp","hsize_reg","hshift","n_bits","MAXCODE","nextPixel","outer_loop","encode","writeByte","remaining","curPixel","writeBytes","pix","code","module","exports"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/gif-encoder@0.4.1/node_modules/gif-encoder/lib/LZWEncoder.js"],"sourcesContent":["/*\n  LZWEncoder.js\n\n  Authors\n  Kevin Weiner (original Java version - kweiner@fmsware.com)\n  Thibault Imbert (AS3 version - bytearray.org)\n  Johan Nordberg (JS version - code@johan-nordberg.com)\n\n  Acknowledgements\n  GIFCOMPR.C - GIF Image compression routines\n  Lempel-Ziv compression based on 'compress'. GIF modifications by\n  David Rowley (mgardi@watdcsu.waterloo.edu)\n  GIF Image compression - modified 'compress'\n  Based on: compress.c - File compression ala IEEE Computer, June 1984.\n  By Authors: Spencer W. Thomas (decvax!harpo!utah-cs!utah-gr!thomas)\n  Jim McKie (decvax!mcvax!jim)\n  Steve Davies (decvax!vax135!petsd!peora!srd)\n  Ken Turkowski (decvax!decwrl!turtlevax!ken)\n  James A. Woods (decvax!ihnp4!ames!jaw)\n  Joe Orost (decvax!vax135!petsd!joe)\n*/\n\nvar EOF = -1;\nvar BITS = 12;\nvar HSIZE = 5003; // 80% occupancy\nvar masks = [0x0000, 0x0001, 0x0003, 0x0007, 0x000F, 0x001F,\n             0x003F, 0x007F, 0x00FF, 0x01FF, 0x03FF, 0x07FF,\n             0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF];\n\nfunction LZWEncoder(width, height, pixels, colorDepth) {\n  var initCodeSize = Math.max(2, colorDepth);\n\n  var accum = new Uint8Array(256);\n  var htab = new Int32Array(HSIZE);\n  var codetab = new Int32Array(HSIZE);\n\n  var cur_accum, cur_bits = 0;\n  var a_count;\n  var free_ent = 0; // first unused entry\n  var maxcode;\n\n  // block compression parameters -- after all codes are used up,\n  // and compression rate changes, start over.\n  var clear_flg = false;\n\n  // Algorithm: use open addressing double hashing (no chaining) on the\n  // prefix code / next character combination. We do a variant of Knuth's\n  // algorithm D (vol. 3, sec. 6.4) along with G. Knott's relatively-prime\n  // secondary probe. Here, the modular division first probe is gives way\n  // to a faster exclusive-or manipulation. Also do block compression with\n  // an adaptive reset, whereby the code table is cleared when the compression\n  // ratio decreases, but after the table fills. The variable-length output\n  // codes are re-sized at this point, and a special CLEAR code is generated\n  // for the decompressor. Late addition: construct the table according to\n  // file size for noticeable speed improvement on small files. Please direct\n  // questions about this implementation to ames!jaw.\n  var g_init_bits, ClearCode, EOFCode;\n\n  // Add a character to the end of the current packet, and if it is 254\n  // characters, flush the packet to disk.\n  function char_out(c, outs) {\n    accum[a_count++] = c;\n    if (a_count >= 254) flush_char(outs);\n  }\n\n  // Clear out the hash table\n  // table clear for block compress\n  function cl_block(outs) {\n    cl_hash(HSIZE);\n    free_ent = ClearCode + 2;\n    clear_flg = true;\n    output(ClearCode, outs);\n  }\n\n  // Reset code table\n  function cl_hash(hsize) {\n    for (var i = 0; i < hsize; ++i) htab[i] = -1;\n  }\n\n  function compress(init_bits, outs) {\n    var fcode, c, i, ent, disp, hsize_reg, hshift;\n\n    // Set up the globals: g_init_bits - initial number of bits\n    g_init_bits = init_bits;\n\n    // Set up the necessary values\n    clear_flg = false;\n    n_bits = g_init_bits;\n    maxcode = MAXCODE(n_bits);\n\n    ClearCode = 1 << (init_bits - 1);\n    EOFCode = ClearCode + 1;\n    free_ent = ClearCode + 2;\n\n    a_count = 0; // clear packet\n\n    ent = nextPixel();\n\n    hshift = 0;\n    for (fcode = HSIZE; fcode < 65536; fcode *= 2) ++hshift;\n    hshift = 8 - hshift; // set hash code range bound\n    hsize_reg = HSIZE;\n    cl_hash(hsize_reg); // clear hash table\n\n    output(ClearCode, outs);\n\n    outer_loop: while ((c = nextPixel()) != EOF) {\n      fcode = (c << BITS) + ent;\n      i = (c << hshift) ^ ent; // xor hashing\n      if (htab[i] === fcode) {\n        ent = codetab[i];\n        continue;\n      } else if (htab[i] >= 0) { // non-empty slot\n        disp = hsize_reg - i; // secondary hash (after G. Knott)\n        if (i === 0) disp = 1;\n        do {\n          if ((i -= disp) < 0) i += hsize_reg;\n          if (htab[i] === fcode) {\n            ent = codetab[i];\n            continue outer_loop;\n          }\n        } while (htab[i] >= 0);\n      }\n      output(ent, outs);\n      ent = c;\n      if (free_ent < 1 << BITS) {\n        codetab[i] = free_ent++; // code -> hashtable\n        htab[i] = fcode;\n      } else {\n        cl_block(outs);\n      }\n    }\n\n    // Put out the final code.\n    output(ent, outs);\n    output(EOFCode, outs);\n  }\n\n  function encode(outs) {\n    outs.writeByte(initCodeSize); // write \"initial code size\" byte\n    remaining = width * height; // reset navigation variables\n    curPixel = 0;\n    compress(initCodeSize + 1, outs); // compress and write the pixel data\n    outs.writeByte(0); // write block terminator\n  }\n\n  // Flush the packet to disk, and reset the accumulator\n  function flush_char(outs) {\n    if (a_count > 0) {\n      outs.writeByte(a_count);\n      outs.writeBytes(accum, 0, a_count);\n      a_count = 0;\n    }\n  }\n\n  function MAXCODE(n_bits) {\n    return (1 << n_bits) - 1;\n  }\n\n  // Return the next pixel from the image\n  function nextPixel() {\n    if (remaining === 0) return EOF;\n    --remaining;\n    var pix = pixels[curPixel++];\n    return pix & 0xff;\n  }\n\n  function output(code, outs) {\n    cur_accum &= masks[cur_bits];\n\n    if (cur_bits > 0) cur_accum |= (code << cur_bits);\n    else cur_accum = code;\n\n    cur_bits += n_bits;\n\n    while (cur_bits >= 8) {\n      char_out((cur_accum & 0xff), outs);\n      cur_accum >>= 8;\n      cur_bits -= 8;\n    }\n\n    // If the next entry is going to be too big for the code size,\n    // then increase it, if possible.\n    if (free_ent > maxcode || clear_flg) {\n      if (clear_flg) {\n        maxcode = MAXCODE(n_bits = g_init_bits);\n        clear_flg = false;\n      } else {\n        ++n_bits;\n        if (n_bits == BITS) maxcode = 1 << BITS;\n        else maxcode = MAXCODE(n_bits);\n      }\n    }\n\n    if (code == EOFCode) {\n      // At EOF, write the rest of the buffer.\n      while (cur_bits > 0) {\n        char_out((cur_accum & 0xff), outs);\n        cur_accum >>= 8;\n        cur_bits -= 8;\n      }\n      flush_char(outs);\n    }\n  }\n\n  this.encode = encode;\n}\n\nmodule.exports = LZWEncoder;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}