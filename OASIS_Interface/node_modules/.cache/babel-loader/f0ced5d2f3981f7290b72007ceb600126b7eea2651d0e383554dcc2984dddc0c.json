{"ast":null,"code":"import request from \"@/utils/axiosRequest\";\nimport store from '@/store';\nimport IPFS from 'ipfs';\n//  IPFS的根URL\nconst baseURL = \"\";\n//  铸币合约ABI\nconst MintNFTContractABI = \"\";\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = \"\";\n//  市场合约地址\nconst MarketContractAddress = \"\";\n//  市场合约ABI\n// const MarketContractABI = JSON.parse(``);\n//  IPFS节点地址\n//  ipfsHost = \"\"\n//  IPFS节点端口\n//\n\n//====================  部署铸造NFT合约，返回NFT合约实例\nexport async function DeployNFTContract(Name, symbol) {\n  const contract = new store.state.Web3.Contract(JSON.parse(MintNFTContractABI));\n  //  部署合约\n  let NewContractAddress = await contract.deploy({\n    data: MintNFTContractBytecode,\n    arguments: [Name, symbol, baseURL]\n  }).send({\n    from: store.state.currentAddress\n  });\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NewContract = await new store.state.Web3.Contract(MintNFTContractABI, NewContractAddress._address);\n  return NewContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nexport async function savetoIPFS(uploadFiles) {\n  const publicGatewayUrl = 'https://ipfs.io/';\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await IPFS.create({\n        host: \"localhost\",\n        port: \"5001\",\n        protocol: \"http\"\n      }).add(uploadFiles[0].raw);\n      const ipfsPublicNatPath = `${publicGatewayUrl}ipfs/${result.path}`;\n      return ipfsPublicNatPath;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n//====================  铸造NFT主控函数\nexport async function MakeNFT(Name, symbol, uploadFiles) {\n  let NFTContract = await DeployNFTContract(Name, symbol);\n  let ipfsPath = await savetoIPFS(uploadFiles);\n  console.log(NFTContract);\n  console.log(ipfsPath);\n  // await NFTContract.methods.fetchMarketplaceUnSoldItems().call().then((res) => {\n\n  // })\n\n  // if (ipfsPath != null) {\n  //   let SaveData = {\n  //     \"ownerAddress\": store.state.currentAddress,\n  //     \"nftAddress\": NFTContract._address,\n  //     \"ipfsHash\": ipfsPath\n  //   }\n  //   //====================  信息存储到数据库中\n  //   request({\n  //     url: '/createNFT',\n  //     method: 'post',\n  //     SaveData\n  //   }).then(res => {\n  //     console.log(res);\n  //   })\n  //   return;\n  // }\n}","map":{"version":3,"names":["request","store","IPFS","baseURL","MintNFTContractABI","MintNFTContractBytecode","MarketContractAddress","DeployNFTContract","Name","symbol","contract","state","Web3","Contract","JSON","parse","NewContractAddress","deploy","data","arguments","send","from","currentAddress","NewContract","_address","savetoIPFS","uploadFiles","publicGatewayUrl","length","results","create","host","port","protocol","add","raw","ipfsPublicNatPath","result","path","err","console","error","MakeNFT","NFTContract","ipfsPath","log"],"sources":["/Users/yezery/Oasis/OASIS/src/api/axios/contract.js"],"sourcesContent":["import request from \"@/utils/axiosRequest\"\nimport store from '@/store';\nimport IPFS from 'ipfs'\n//  IPFS的根URL\nconst baseURL = \"\";\n//  铸币合约ABI\nconst MintNFTContractABI = \"\";\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = \"\"\n//  市场合约地址\nconst MarketContractAddress = \"\";\n//  市场合约ABI\n// const MarketContractABI = JSON.parse(``);\n//  IPFS节点地址\n//  ipfsHost = \"\"\n//  IPFS节点端口\n//\n\n\n//====================  部署铸造NFT合约，返回NFT合约实例\nexport async function DeployNFTContract(Name, symbol) {\n  const contract = new store.state.Web3.Contract(JSON.parse(MintNFTContractABI));\n  //  部署合约\n  let NewContractAddress = await contract.deploy({ data: MintNFTContractBytecode, arguments: [Name, symbol, baseURL] })\n    .send({\n      from: store.state.currentAddress\n    });\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NewContract = await new store.state.Web3.Contract(MintNFTContractABI, NewContractAddress._address);\n  return NewContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nexport async function savetoIPFS(uploadFiles) {\n  const publicGatewayUrl = 'https://ipfs.io/';\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await IPFS.create({\n        host: \"localhost\",\n        port: \"5001\",\n        protocol: \"http\",\n      }).add(\n        uploadFiles[0].raw\n      );\n      const ipfsPublicNatPath = `${publicGatewayUrl}ipfs/${result.path}`;\n      return ipfsPublicNatPath;\n    }\n  } catch (err) {\n    console.error(err);\n    return null\n  }\n}\n//====================  铸造NFT主控函数\nexport async function MakeNFT(Name, symbol, uploadFiles) {\n  let NFTContract = await DeployNFTContract(Name, symbol);\n  let ipfsPath = await savetoIPFS(uploadFiles);\n  console.log(NFTContract);\n  console.log(ipfsPath);\n  // await NFTContract.methods.fetchMarketplaceUnSoldItems().call().then((res) => {\n\n  // })\n\n  // if (ipfsPath != null) {\n  //   let SaveData = {\n  //     \"ownerAddress\": store.state.currentAddress,\n  //     \"nftAddress\": NFTContract._address,\n  //     \"ipfsHash\": ipfsPath\n  //   }\n  //   //====================  信息存储到数据库中\n  //   request({\n  //     url: '/createNFT',\n  //     method: 'post',\n  //     SaveData\n  //   }).then(res => {\n  //     console.log(res);\n  //   })\n  //   return;\n  // }\n}\n\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,MAAM;AACvB;AACA,MAAMC,OAAO,GAAG,EAAE;AAClB;AACA,MAAMC,kBAAkB,GAAG,EAAE;AAC7B;AACA,MAAMC,uBAAuB,GAAG,EAAE;AAClC;AACA,MAAMC,qBAAqB,GAAG,EAAE;AAChC;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA,OAAO,eAAeC,iBAAiBA,CAACC,IAAI,EAAEC,MAAM,EAAE;EACpD,MAAMC,QAAQ,GAAG,IAAIT,KAAK,CAACU,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACX,kBAAkB,CAAC,CAAC;EAC9E;EACA,IAAIY,kBAAkB,GAAG,MAAMN,QAAQ,CAACO,MAAM,CAAC;IAAEC,IAAI,EAAEb,uBAAuB;IAAEc,SAAS,EAAE,CAACX,IAAI,EAAEC,MAAM,EAAEN,OAAO;EAAE,CAAC,CAAC,CAClHiB,IAAI,CAAC;IACJC,IAAI,EAAEpB,KAAK,CAACU,KAAK,CAACW;EACpB,CAAC,CAAC;EACJ;EACA,IAAIC,WAAW,GAAG,MAAM,IAAItB,KAAK,CAACU,KAAK,CAACC,IAAI,CAACC,QAAQ,CAACT,kBAAkB,EAAEY,kBAAkB,CAACQ,QAAQ,CAAC;EACtG,OAAOD,WAAW;AACpB;AACA;AACA,OAAO,eAAeE,UAAUA,CAACC,WAAW,EAAE;EAC5C,MAAMC,gBAAgB,GAAG,kBAAkB;EAC3C,IAAI;IACF,IAAID,WAAW,CAACE,MAAM,IAAI,CAAC,EAAE;MAC3B;MACA,IAAIC,OAAO,GAAG,MAAM3B,IAAI,CAAC4B,MAAM,CAAC;QAC9BC,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAACC,GAAG,CACJR,WAAW,CAAC,CAAC,CAAC,CAACS,GACjB,CAAC;MACD,MAAMC,iBAAiB,GAAI,GAAET,gBAAiB,QAAOU,MAAM,CAACC,IAAK,EAAC;MAClE,OAAOF,iBAAiB;IAC1B;EACF,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,IAAI;EACb;AACF;AACA;AACA,OAAO,eAAeG,OAAOA,CAAClC,IAAI,EAAEC,MAAM,EAAEiB,WAAW,EAAE;EACvD,IAAIiB,WAAW,GAAG,MAAMpC,iBAAiB,CAACC,IAAI,EAAEC,MAAM,CAAC;EACvD,IAAImC,QAAQ,GAAG,MAAMnB,UAAU,CAACC,WAAW,CAAC;EAC5Cc,OAAO,CAACK,GAAG,CAACF,WAAW,CAAC;EACxBH,OAAO,CAACK,GAAG,CAACD,QAAQ,CAAC;EACrB;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}