{"ast":null,"code":"// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n  var gopts = gopts === undefined ? {} : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535) throw new Error(\"Width/Height invalid.\");\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 || num_colors & num_colors - 1) {\n      throw new Error(\"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47;\n  buf[p++] = 0x49;\n  buf[p++] = 0x46; // GIF\n  buf[p++] = 0x38;\n  buf[p++] = 0x39;\n  buf[p++] = 0x61; // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors) throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0) throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff;\n  buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff;\n  buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |\n  // Global Color Table Flag.\n  gp_num_colors_pow2; // NOTE: No sort flag (unused?).\n  buf[p++] = background; // Background Color Index.\n  buf[p++] = 0; // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n  if (loop_count !== null) {\n    // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535) throw new Error(\"Loop count invalid.\");\n    // Extension code, label, and length.\n    buf[p++] = 0x21;\n    buf[p++] = 0xff;\n    buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e;\n    buf[p++] = 0x45;\n    buf[p++] = 0x54;\n    buf[p++] = 0x53;\n    buf[p++] = 0x43;\n    buf[p++] = 0x41;\n    buf[p++] = 0x50;\n    buf[p++] = 0x45;\n    buf[p++] = 0x32;\n    buf[p++] = 0x2e;\n    buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03;\n    buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff;\n    buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00; // Terminator.\n  }\n\n  var ended = false;\n  this.addFrame = function (x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) {\n      --p;\n      ended = false;\n    } // Un-end.\n\n    opts = opts === undefined ? {} : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535) throw new Error(\"x/y invalid.\");\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535) throw new Error(\"Width/Height invalid.\");\n    if (indexed_pixels.length < w * h) throw new Error(\"Not enough pixels for the frame size.\");\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n    if (palette === undefined || palette === null) throw new Error(\"Must supply either a local or global palette.\");\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size; // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)\n      // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors) throw new Error(\"Transparent color index.\");\n    }\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21;\n      buf[p++] = 0xf9; // Extension / Label.\n      buf[p++] = 4; // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff;\n      buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index; // Transparent color index.\n      buf[p++] = 0; // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c; // Image Seperator.\n    buf[p++] = x & 0xff;\n    buf[p++] = x >> 8 & 0xff; // Left.\n    buf[p++] = y & 0xff;\n    buf[p++] = y >> 8 & 0xff; // Top.\n    buf[p++] = w & 0xff;\n    buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff;\n    buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? 0x80 | min_code_size - 1 : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n    p = GifWriterOutputLZWCodeStream(buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n    return p;\n  };\n  this.end = function () {\n    if (ended === false) {\n      buf[p++] = 0x3b; // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n  this.getOutputBuffer = function () {\n    return buf;\n  };\n  this.setOutputBuffer = function (v) {\n    buf = v;\n  };\n  this.getOutputBufferPosition = function () {\n    return p;\n  };\n  this.setOutputBufferPosition = function (v) {\n    p = v;\n  };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++; // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n  var cur_code_size = min_code_size + 1; // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8;\n      cur_shift -= 8;\n      if (p === cur_subblock + 256) {\n        // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask; // Load first input index.\n  var code_table = {}; // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code); // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k; // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key]; // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {\n      // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8;\n        cur_shift -= 8;\n        if (p === cur_subblock + 256) {\n          // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n      if (next_code === 4096) {\n        // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = {};\n      } else {\n        // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= 1 << cur_code_size) ++cur_code_size;\n        code_table[cur_key] = next_code++; // Insert into code table.\n      }\n\n      ib_code = k; // Index buffer to single input k.\n    } else {\n      ib_code = cur_code; // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code); // There will still be something in the index buffer.\n  emit_code(eoi_code); // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {\n    // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {\n    // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 || buf[p++] !== 0x49 || buf[p++] !== 0x46 || buf[p++] !== 0x38 || (buf[p++] + 1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++]; // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << num_global_colors_pow2 + 1;\n  var background = buf[p++];\n  buf[p++]; // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size = null;\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3; // Seek past palette.\n  }\n\n  var no_eof = true;\n  var frames = [];\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0; // 0 - No disposal specified.\n  var loop_count = null;\n  this.width = width;\n  this.height = height;\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:\n        // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:\n            // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p] !== 0x0b ||\n            // 21 FF already read, check block size.\n            // NETSCAPE2.0\n            buf[p + 1] == 0x4e && buf[p + 2] == 0x45 && buf[p + 3] == 0x54 && buf[p + 4] == 0x53 && buf[p + 5] == 0x43 && buf[p + 6] == 0x41 && buf[p + 7] == 0x50 && buf[p + 8] == 0x45 && buf[p + 9] == 0x32 && buf[p + 10] == 0x2e && buf[p + 11] == 0x30 &&\n            // Sub-block\n            buf[p + 12] == 0x03 && buf[p + 13] == 0x01 && buf[p + 16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++; // Skip terminator.\n            } else {\n              // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {\n                // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break; // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n          case 0xf9:\n            // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p + 4] !== 0) throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++; // Skip terminator.\n            break;\n          case 0xfe:\n            // Comment Extension.\n            while (true) {\n              // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break; // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n          default:\n            throw new Error(\"Unknown graphic control label: 0x\" + buf[p - 1].toString(16));\n        }\n        break;\n      case 0x2c:\n        // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << num_local_colors_pow2 + 1;\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p; // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3; // Seek past palette.\n        }\n\n        var data_offset = p;\n        p++; // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break; // 0 size is terminator\n          p += block_size;\n        }\n        frames.push({\n          x: x,\n          y: y,\n          width: w,\n          height: h,\n          has_local_palette: has_local_palette,\n          palette_offset: palette_offset,\n          palette_size: palette_size,\n          data_offset: data_offset,\n          data_length: p - data_offset,\n          transparent_index: transparent_index,\n          interlaced: !!interlace_flag,\n          delay: delay,\n          disposal: disposal\n        });\n        break;\n      case 0x3b:\n        // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p - 1].toString(16));\n        break;\n    }\n  }\n  this.numFrames = function () {\n    return frames.length;\n  };\n  this.loopCount = function () {\n    return loop_count;\n  };\n  this.frameInfo = function (frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length) throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  };\n  this.decodeAndBlitFrameBGRA = function (frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth = frame.width;\n    var framestride = width - framewidth;\n    var xleft = framewidth; // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = (frame.y * width + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op = opbeg;\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7; // Pass 1.\n    }\n\n    var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n      if (xleft === 0) {\n        // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) {\n          // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function (frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels); // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth = frame.width;\n    var framestride = width - framewidth;\n    var xleft = framewidth; // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = (frame.y * width + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op = opbeg;\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7; // Pass 1.\n    }\n\n    var interlaceskip = 8; // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n      if (xleft === 0) {\n        // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) {\n          // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip - 1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n  var cur_code_size = min_code_size + 1; // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n  var op = 0; // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096); // Can be signed, we only use 20 bits.\n\n  var prev_code = null; // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break; // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n      if (subblock_size === 1) {\n        // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++]; // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size) break;\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n    var k = chase;\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n    op += chase_length;\n    var b = op; // Track pointer, writing backwards.\n\n    if (chase_code !== code)\n      // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff; // Write backwards.\n      chase >>= 8; // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask + 1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n    prev_code = code;\n  }\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n  return output;\n}\n\n// CommonJS.\ntry {\n  exports.GifWriter = GifWriter;\n  exports.GifReader = GifReader;\n} catch (e) {}","map":{"version":3,"names":["require","GifWriter","buf","width","height","gopts","p","undefined","loop_count","loop","global_palette","palette","Error","check_palette_and_num_colors","num_colors","length","gp_num_colors_pow2","background","gp_num_colors","i","il","rgb","ended","addFrame","x","y","w","h","indexed_pixels","opts","using_local_palette","min_code_size","delay","disposal","use_transparency","transparent_index","transparent","GifWriterOutputLZWCodeStream","end","getOutputBuffer","setOutputBuffer","v","getOutputBufferPosition","setOutputBufferPosition","index_stream","cur_subblock","clear_code","code_mask","eoi_code","next_code","cur_code_size","cur_shift","cur","emit_bytes_to_buffer","bit_block_size","emit_code","c","ib_code","code_table","k","cur_key","cur_code","GifReader","pf0","global_palette_flag","num_global_colors_pow2","num_global_colors","global_palette_offset","global_palette_size","no_eof","frames","block_size","pf1","toString","pf2","local_palette_flag","interlace_flag","num_local_colors_pow2","num_local_colors","palette_offset","palette_size","has_local_palette","data_offset","push","data_length","interlaced","numFrames","loopCount","frameInfo","frame_num","decodeAndBlitFrameBGRA","pixels","frame","num_pixels","Uint8Array","GifReaderLZWOutputIndexStream","trans","framewidth","framestride","xleft","opbeg","opend","op","scanstride","interlaceskip","index","r","g","b","decodeAndBlitFrameRGBA","code_stream","output","output_length","subblock_size","Int32Array","prev_code","code","chase_code","chase_length","chase","op_end","console","log","exports","e"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/omggif@1.0.10/node_modules/omggif/omggif.js"],"sourcesContent":["// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\"use strict\";\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error(\"Width/Height invalid.\");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          \"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error(\"Background index out of range.\");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error(\"Background index explicitly passed as 0.\");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error(\"Loop count invalid.\")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error(\"x/y invalid.\")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error(\"Width/Height invalid.\")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error(\"Not enough pixels for the frame size.\");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error(\"Must supply either a local or global palette.\");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn't really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error(\"Disposal out of range.\");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error(\"Transparent color index.\");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don't want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn't want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for \"timing\" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  'A' might be\n  // 4, then 'AA' might be 10, 'AAA' 11, 'AAAA' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if 'AAAA' has a table entry of 12, the\n  // tuple of ('AAAA', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key'd on our 20-bit \"tuple\".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don't have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on \"timing\" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we've already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error(\"Invalid GIF 87a/89a header.\");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it's a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don't know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error(\"Invalid graphics extension block.\");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString('ascii'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                \"Unknown graphic control label: 0x\" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error(\"Invalid block size\");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error(\"Unknown gif block: 0x\" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error(\"Frame index out of range.\");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it's related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you're supposed to do.  But actually our encoder\n    // now doesn't emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don't actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don't really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don't update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then \"chases\" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn't make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it's a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn't measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log(\"Warning, gif stream longer than expected.\");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log(\"Warning, gif stream shorter than expected.\");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}