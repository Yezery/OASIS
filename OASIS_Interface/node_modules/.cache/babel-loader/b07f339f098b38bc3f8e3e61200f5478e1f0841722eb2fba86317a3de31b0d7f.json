{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/pbe.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport * as Ed25519 from './ed25519-class.js';\nimport generateEphemeralKeyPair from './ephemeral-keys.js';\nimport { importer } from './importer.js';\nimport { keyStretcher } from './key-stretcher.js';\nimport * as keysPBM from './keys.js';\nimport * as RSA from './rsa-class.js';\nimport * as Secp256k1 from './secp256k1-class.js';\nexport { keyStretcher };\nexport { generateEphemeralKeyPair };\nexport { keysPBM };\nexport const supportedKeys = {\n  rsa: RSA,\n  ed25519: Ed25519,\n  secp256k1: Secp256k1\n};\nfunction unsupportedKey(type) {\n  const supported = Object.keys(supportedKeys).join(' / ');\n  return new CodeError(`invalid or unsupported key type ${type}. Must be ${supported}`, 'ERR_UNSUPPORTED_KEY_TYPE');\n}\nfunction typeToKey(type) {\n  type = type.toLowerCase();\n  if (type === 'rsa' || type === 'ed25519' || type === 'secp256k1') {\n    return supportedKeys[type];\n  }\n  throw unsupportedKey(type);\n}\n// Generates a keypair of the given type and bitsize\nexport async function generateKeyPair(type, bits) {\n  return typeToKey(type).generateKeyPair(bits ?? 2048);\n}\n// Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\nexport async function generateKeyPairFromSeed(type, seed, bits) {\n  if (type.toLowerCase() !== 'ed25519') {\n    throw new CodeError('Seed key derivation is unimplemented for RSA or secp256k1', 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n  }\n  return Ed25519.generateKeyPairFromSeed(seed);\n}\n// Converts a protobuf serialized public key into its\n// representative object\nexport function unmarshalPublicKey(buf) {\n  const decoded = keysPBM.PublicKey.decode(buf);\n  const data = decoded.Data ?? new Uint8Array();\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n    case keysPBM.KeyType.Secp256k1:\n      return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n    default:\n      throw unsupportedKey(decoded.Type ?? 'RSA');\n  }\n}\n// Converts a public key object into a protobuf serialized public key\nexport function marshalPublicKey(key, type) {\n  type = (type ?? 'rsa').toLowerCase();\n  typeToKey(type); // check type\n  return key.bytes;\n}\n// Converts a protobuf serialized private key into its\n// representative object\nexport async function unmarshalPrivateKey(buf) {\n  const decoded = keysPBM.PrivateKey.decode(buf);\n  const data = decoded.Data ?? new Uint8Array();\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n    case keysPBM.KeyType.Secp256k1:\n      return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n    default:\n      throw unsupportedKey(decoded.Type ?? 'RSA');\n  }\n}\n// Converts a private key object into a protobuf serialized private key\nexport function marshalPrivateKey(key, type) {\n  type = (type ?? 'rsa').toLowerCase();\n  typeToKey(type); // check type\n  return key.bytes;\n}\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\nexport async function importKey(encryptedKey, password) {\n  try {\n    const key = await importer(encryptedKey, password);\n    return await unmarshalPrivateKey(key);\n  } catch (_) {\n    // Ignore and try the old pem decrypt\n  }\n  // Only rsa supports pem right now\n  const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);\n  if (key === null) {\n    throw new CodeError('Cannot read the key, most likely the password is wrong or not a RSA key', 'ERR_CANNOT_DECRYPT_PEM');\n  }\n  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n  der = uint8ArrayFromString(der.getBytes(), 'ascii');\n  return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n}","map":{"version":3,"names":["CodeError","forge","fromString","uint8ArrayFromString","Ed25519","generateEphemeralKeyPair","importer","keyStretcher","keysPBM","RSA","Secp256k1","supportedKeys","rsa","ed25519","secp256k1","unsupportedKey","type","supported","Object","keys","join","typeToKey","toLowerCase","generateKeyPair","bits","generateKeyPairFromSeed","seed","unmarshalPublicKey","buf","decoded","PublicKey","decode","data","Data","Uint8Array","Type","KeyType","unmarshalRsaPublicKey","unmarshalEd25519PublicKey","unmarshalSecp256k1PublicKey","marshalPublicKey","key","bytes","unmarshalPrivateKey","PrivateKey","unmarshalRsaPrivateKey","unmarshalEd25519PrivateKey","unmarshalSecp256k1PrivateKey","marshalPrivateKey","importKey","encryptedKey","password","_","pki","decryptRsaPrivateKey","der","asn1","toDer","privateKeyToAsn1","getBytes"],"sources":["../../../src/keys/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}