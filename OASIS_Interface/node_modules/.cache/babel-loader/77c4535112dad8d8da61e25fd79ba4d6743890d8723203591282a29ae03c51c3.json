{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB;\n  }\n  if (!options.hasher) {\n    options.hasher = sha256;\n  }\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1;\n  }\n  const multihash = await options.hasher.digest(buffer);\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    });\n  }\n  return cid;\n};","map":{"version":3,"names":["CID","dagPB","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","multihash","digest","cid","create","code","onlyHash","put","signal"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/persist.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,MAAM,QAAQ,0BAA0B;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,EAAEC,OAAO,KAAK;EAC5D,IAAI,CAACA,OAAO,CAACC,KAAK,EAAE;IAClBD,OAAO,CAACC,KAAK,GAAGN,KAAK;EACvB;EAEA,IAAI,CAACK,OAAO,CAACE,MAAM,EAAE;IACnBF,OAAO,CAACE,MAAM,GAAGN,MAAM;EACzB;EAEA,IAAII,OAAO,CAACG,UAAU,KAAKC,SAAS,EAAE;IACpCJ,OAAO,CAACG,UAAU,GAAG,CAAC;EACxB;EAEA,IAAIH,OAAO,CAACC,KAAK,KAAKN,KAAK,IAAIK,OAAO,CAACE,MAAM,KAAKN,MAAM,EAAE;IACxDI,OAAO,CAACG,UAAU,GAAG,CAAC;EACxB;EAEA,MAAME,SAAS,GAAG,MAAML,OAAO,CAACE,MAAM,CAACI,MAAM,CAACR,MAAM,CAAC;EACrD,MAAMS,GAAG,GAAGb,GAAG,CAACc,MAAM,CAACR,OAAO,CAACG,UAAU,EAAEH,OAAO,CAACC,KAAK,CAACQ,IAAI,EAAEJ,SAAS,CAAC;EAEzE,IAAI,CAACL,OAAO,CAACU,QAAQ,EAAE;IACrB,MAAMX,UAAU,CAACY,GAAG,CAACJ,GAAG,EAAET,MAAM,EAAE;MAChCc,MAAM,EAAEZ,OAAO,CAACY;IAClB,CAAC,CAAC;EACJ;EAEA,OAAOL,GAAG;AACZ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}