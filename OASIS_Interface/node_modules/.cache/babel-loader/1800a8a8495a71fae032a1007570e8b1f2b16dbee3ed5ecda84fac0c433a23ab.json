{"ast":null,"code":"import 'node-forge/lib/x509.js';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nconst pki = forge.pki;\n/**\n * Gets a self-signed X.509 certificate for the key.\n *\n * The output Uint8Array contains the PKCS #7 message in DER.\n *\n * TODO: move to libp2p-crypto package\n */\nexport const certificateForKey = (key, privateKey) => {\n  const publicKey = pki.rsa.setPublicKey(privateKey.n, privateKey.e);\n  const cert = pki.createCertificate();\n  cert.publicKey = publicKey;\n  cert.serialNumber = '01';\n  cert.validity.notBefore = new Date();\n  cert.validity.notAfter = new Date();\n  cert.validity.notAfter.setFullYear(cert.validity.notBefore.getFullYear() + 10); // eslint-disable-line @typescript-eslint/restrict-plus-operands\n  const attrs = [{\n    name: 'organizationName',\n    value: 'ipfs'\n  }, {\n    shortName: 'OU',\n    value: 'keystore'\n  }, {\n    name: 'commonName',\n    value: key.id\n  }];\n  cert.setSubject(attrs);\n  cert.setIssuer(attrs);\n  cert.setExtensions([{\n    name: 'basicConstraints',\n    cA: true\n  }, {\n    name: 'keyUsage',\n    keyCertSign: true,\n    digitalSignature: true,\n    nonRepudiation: true,\n    keyEncipherment: true,\n    dataEncipherment: true\n  }, {\n    name: 'extKeyUsage',\n    serverAuth: true,\n    clientAuth: true,\n    codeSigning: true,\n    emailProtection: true,\n    timeStamping: true\n  }, {\n    name: 'nsCertType',\n    client: true,\n    server: true,\n    email: true,\n    objsign: true,\n    sslCA: true,\n    emailCA: true,\n    objCA: true\n  }]);\n  // self-sign certificate\n  cert.sign(privateKey);\n  return cert;\n};\n/**\n * Finds the first item in a collection that is matched in the\n * `asyncCompare` function.\n *\n * `asyncCompare` is an async function that must\n * resolve to either `true` or `false`.\n *\n * @param {Array} array\n * @param {function(*)} asyncCompare - An async function that returns a boolean\n */\nexport async function findAsync(array, asyncCompare) {\n  const promises = array.map(asyncCompare);\n  const results = await Promise.all(promises);\n  const index = results.findIndex(result => result);\n  return array[index];\n}","map":{"version":3,"names":["forge","pki","certificateForKey","key","privateKey","publicKey","rsa","setPublicKey","n","e","cert","createCertificate","serialNumber","validity","notBefore","Date","notAfter","setFullYear","getFullYear","attrs","name","value","shortName","id","setSubject","setIssuer","setExtensions","cA","keyCertSign","digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","serverAuth","clientAuth","codeSigning","emailProtection","timeStamping","client","server","email","objsign","sslCA","emailCA","objCA","sign","findAsync","array","asyncCompare","promises","map","results","Promise","all","index","findIndex","result"],"sources":["../../../src/keychain/util.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAO,wBAAwB;AAC/B;AACA,OAAOA,KAAK,MAAM,yBAAyB;AAE3C,MAAMC,GAAG,GAAGD,KAAK,CAACC,GAAG;AAErB;;;;;;;AAOA,OAAO,MAAMC,iBAAiB,GAAGA,CAACC,GAAQ,EAAEC,UAAoC,KAAI;EAClF,MAAMC,SAAS,GAAGJ,GAAG,CAACK,GAAG,CAACC,YAAY,CAACH,UAAU,CAACI,CAAC,EAAEJ,UAAU,CAACK,CAAC,CAAC;EAClE,MAAMC,IAAI,GAAGT,GAAG,CAACU,iBAAiB,EAAE;EACpCD,IAAI,CAACL,SAAS,GAAGA,SAAS;EAC1BK,IAAI,CAACE,YAAY,GAAG,IAAI;EACxBF,IAAI,CAACG,QAAQ,CAACC,SAAS,GAAG,IAAIC,IAAI,EAAE;EACpCL,IAAI,CAACG,QAAQ,CAACG,QAAQ,GAAG,IAAID,IAAI,EAAE;EACnCL,IAAI,CAACG,QAAQ,CAACG,QAAQ,CAACC,WAAW,CAACP,IAAI,CAACG,QAAQ,CAACC,SAAS,CAACI,WAAW,EAAE,GAAG,EAAE,CAAC,EAAC;EAC/E,MAAMC,KAAK,GAAG,CAAC;IACbC,IAAI,EAAE,kBAAkB;IACxBC,KAAK,EAAE;GACR,EAAE;IACDC,SAAS,EAAE,IAAI;IACfD,KAAK,EAAE;GACR,EAAE;IACDD,IAAI,EAAE,YAAY;IAClBC,KAAK,EAAElB,GAAG,CAACoB;GACZ,CAAC;EACFb,IAAI,CAACc,UAAU,CAACL,KAAK,CAAC;EACtBT,IAAI,CAACe,SAAS,CAACN,KAAK,CAAC;EACrBT,IAAI,CAACgB,aAAa,CAAC,CAAC;IAClBN,IAAI,EAAE,kBAAkB;IACxBO,EAAE,EAAE;GACL,EAAE;IACDP,IAAI,EAAE,UAAU;IAChBQ,WAAW,EAAE,IAAI;IACjBC,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE,IAAI;IACpBC,eAAe,EAAE,IAAI;IACrBC,gBAAgB,EAAE;GACnB,EAAE;IACDZ,IAAI,EAAE,aAAa;IACnBa,UAAU,EAAE,IAAI;IAChBC,UAAU,EAAE,IAAI;IAChBC,WAAW,EAAE,IAAI;IACjBC,eAAe,EAAE,IAAI;IACrBC,YAAY,EAAE;GACf,EAAE;IACDjB,IAAI,EAAE,YAAY;IAClBkB,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE,IAAI;IACbC,KAAK,EAAE;GACR,CAAC,CAAC;EACH;EACAlC,IAAI,CAACmC,IAAI,CAACzC,UAAU,CAAC;EAErB,OAAOM,IAAI;AACb,CAAC;AAED;;;;;;;;;;AAUA,OAAO,eAAeoC,SAASA,CAAMC,KAAU,EAAEC,YAAsC;EACrF,MAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAG,CAACF,YAAY,CAAC;EACxC,MAAMG,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAC3C,MAAMK,KAAK,GAAGH,OAAO,CAACI,SAAS,CAACC,MAAM,IAAIA,MAAM,CAAC;EACjD,OAAOT,KAAK,CAACO,KAAK,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}