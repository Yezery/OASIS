{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { pipe } from 'it-pipe';\nimport { RecordEnvelope } from '@libp2p/peer-record';\nimport { peerIdFromBytes, peerIdFromString } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { MessageCache } from './message-cache.js';\nimport { RPC } from './message/rpc.js';\nimport * as constants from './constants.js';\nimport { shuffle, messageIdToString } from './utils/index.js';\nimport { PeerScore, createPeerScoreParams, createPeerScoreThresholds } from './score/index.js';\nimport { IWantTracer } from './tracer.js';\nimport { SimpleTimeCache } from './utils/time-cache.js';\nimport { ACCEPT_FROM_WHITELIST_DURATION_MS, ACCEPT_FROM_WHITELIST_MAX_MESSAGES, ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE } from './constants.js';\nimport { ChurnReason, getMetrics, IHaveIgnoreReason, InclusionReason, ScorePenalty } from './metrics.js';\nimport { ValidateError, MessageStatus, RejectReason, rejectReasonFromAcceptance } from './types.js';\nimport { buildRawMessage, validateToRawMessage } from './utils/buildRawMessage.js';\nimport { msgIdFnStrictNoSign, msgIdFnStrictSign } from './utils/msgIdFn.js';\nimport { computeAllPeersScoreWeights } from './score/scoreMetrics.js';\nimport { getPublishConfigFromPeerId } from './utils/publishConfig.js';\nimport { StrictNoSign, StrictSign, TopicValidatorResult } from '@libp2p/interface-pubsub';\nimport { removeFirstNItemsFromSet, removeItemsFromSet } from './utils/set.js';\nimport { pushable } from 'it-pushable';\nimport { InboundStream, OutboundStream } from './stream.js';\nimport { decodeRpc, defaultDecodeRpcLimits } from './message/decodeRpc.js';\nimport { multiaddrToIPStr } from './utils/multiaddr.js';\nexport const multicodec = constants.GossipsubIDv11;\nvar GossipStatusCode;\n(function (GossipStatusCode) {\n  GossipStatusCode[GossipStatusCode[\"started\"] = 0] = \"started\";\n  GossipStatusCode[GossipStatusCode[\"stopped\"] = 1] = \"stopped\";\n})(GossipStatusCode || (GossipStatusCode = {}));\nexport class GossipSub extends EventEmitter {\n  constructor(components, options = {}) {\n    super();\n    this.multicodecs = [constants.GossipsubIDv11, constants.GossipsubIDv10];\n    // State\n    this.peers = new Set();\n    this.streamsInbound = new Map();\n    this.streamsOutbound = new Map();\n    /** Ensures outbound streams are created sequentially */\n    this.outboundInflightQueue = pushable({\n      objectMode: true\n    });\n    /** Direct peers */\n    this.direct = new Set();\n    /** Floodsub peers */\n    this.floodsubPeers = new Set();\n    /**\n     * Map of peer id and AcceptRequestWhileListEntry\n     */\n    this.acceptFromWhitelist = new Map();\n    /**\n     * Map of topics to which peers are subscribed to\n     */\n    this.topics = new Map();\n    /**\n     * List of our subscriptions\n     */\n    this.subscriptions = new Set();\n    /**\n     * Map of topic meshes\n     * topic => peer id set\n     */\n    this.mesh = new Map();\n    /**\n     * Map of topics to set of peers. These mesh peers are the ones to which we are publishing without a topic membership\n     * topic => peer id set\n     */\n    this.fanout = new Map();\n    /**\n     * Map of last publish time for fanout topics\n     * topic => last publish time\n     */\n    this.fanoutLastpub = new Map();\n    /**\n     * Map of pending messages to gossip\n     * peer id => control messages\n     */\n    this.gossip = new Map();\n    /**\n     * Map of control messages\n     * peer id => control message\n     */\n    this.control = new Map();\n    /**\n     * Number of IHAVEs received from peer in the last heartbeat\n     */\n    this.peerhave = new Map();\n    /** Number of messages we have asked from peer in the last heartbeat */\n    this.iasked = new Map();\n    /** Prune backoff map */\n    this.backoff = new Map();\n    /**\n     * Connection direction cache, marks peers with outbound connections\n     * peer id => direction\n     */\n    this.outbound = new Map();\n    /**\n     * Custom validator function per topic.\n     * Must return or resolve quickly (< 100ms) to prevent causing penalties for late messages.\n     * If you need to apply validation that may require longer times use `asyncValidation` option and callback the\n     * validation result through `Gossipsub.reportValidationResult`\n     */\n    this.topicValidators = new Map();\n    /**\n     * Number of heartbeats since the beginning of time\n     * This allows us to amortize some resource cleanup -- eg: backoff cleanup\n     */\n    this.heartbeatTicks = 0;\n    this.directPeerInitial = null;\n    this.status = {\n      code: GossipStatusCode.stopped\n    };\n    this.heartbeatTimer = null;\n    this.runHeartbeat = () => {\n      const timer = this.metrics?.heartbeatDuration.startTimer();\n      this.heartbeat().catch(err => {\n        this.log('Error running heartbeat', err);\n      }).finally(() => {\n        if (timer != null) {\n          timer();\n        }\n        // Schedule the next run if still in started status\n        if (this.status.code === GossipStatusCode.started) {\n          // Clear previous timeout before overwriting `status.heartbeatTimeout`, it should be completed tho.\n          clearTimeout(this.status.heartbeatTimeout);\n          // NodeJS setInterval function is innexact, calls drift by a few miliseconds on each call.\n          // To run the heartbeat precisely setTimeout() must be used recomputing the delay on every loop.\n          let msToNextHeartbeat = this.opts.heartbeatInterval - (Date.now() - this.status.hearbeatStartMs) % this.opts.heartbeatInterval;\n          // If too close to next heartbeat, skip one\n          if (msToNextHeartbeat < this.opts.heartbeatInterval * 0.25) {\n            msToNextHeartbeat += this.opts.heartbeatInterval;\n            this.metrics?.heartbeatSkipped.inc();\n          }\n          this.status.heartbeatTimeout = setTimeout(this.runHeartbeat, msToNextHeartbeat);\n        }\n      });\n    };\n    const opts = {\n      fallbackToFloodsub: true,\n      floodPublish: true,\n      doPX: false,\n      directPeers: [],\n      D: constants.GossipsubD,\n      Dlo: constants.GossipsubDlo,\n      Dhi: constants.GossipsubDhi,\n      Dscore: constants.GossipsubDscore,\n      Dout: constants.GossipsubDout,\n      Dlazy: constants.GossipsubDlazy,\n      heartbeatInterval: constants.GossipsubHeartbeatInterval,\n      fanoutTTL: constants.GossipsubFanoutTTL,\n      mcacheLength: constants.GossipsubHistoryLength,\n      mcacheGossip: constants.GossipsubHistoryGossip,\n      seenTTL: constants.GossipsubSeenTTL,\n      gossipsubIWantFollowupMs: constants.GossipsubIWantFollowupTime,\n      prunePeers: constants.GossipsubPrunePeers,\n      pruneBackoff: constants.GossipsubPruneBackoff,\n      graftFloodThreshold: constants.GossipsubGraftFloodThreshold,\n      opportunisticGraftPeers: constants.GossipsubOpportunisticGraftPeers,\n      opportunisticGraftTicks: constants.GossipsubOpportunisticGraftTicks,\n      directConnectTicks: constants.GossipsubDirectConnectTicks,\n      ...options,\n      scoreParams: createPeerScoreParams(options.scoreParams),\n      scoreThresholds: createPeerScoreThresholds(options.scoreThresholds)\n    };\n    this.components = components;\n    this.decodeRpcLimits = opts.decodeRpcLimits ?? defaultDecodeRpcLimits;\n    this.globalSignaturePolicy = opts.globalSignaturePolicy ?? StrictSign;\n    // Also wants to get notified of peers connected using floodsub\n    if (opts.fallbackToFloodsub) {\n      this.multicodecs.push(constants.FloodsubID);\n    }\n    // From pubsub\n    this.log = logger(opts.debugName ?? 'libp2p:gossipsub');\n    // Gossipsub\n    this.opts = opts;\n    this.direct = new Set(opts.directPeers.map(p => p.id.toString()));\n    this.seenCache = new SimpleTimeCache({\n      validityMs: opts.seenTTL\n    });\n    this.publishedMessageIds = new SimpleTimeCache({\n      validityMs: opts.seenTTL\n    });\n    if (options.msgIdFn) {\n      // Use custom function\n      this.msgIdFn = options.msgIdFn;\n    } else {\n      switch (this.globalSignaturePolicy) {\n        case StrictSign:\n          this.msgIdFn = msgIdFnStrictSign;\n          break;\n        case StrictNoSign:\n          this.msgIdFn = msgIdFnStrictNoSign;\n          break;\n      }\n    }\n    if (options.fastMsgIdFn) {\n      this.fastMsgIdFn = options.fastMsgIdFn;\n      this.fastMsgIdCache = new SimpleTimeCache({\n        validityMs: opts.seenTTL\n      });\n    }\n    // By default, gossipsub only provide a browser friendly function to convert Uint8Array message id to string.\n    this.msgIdToStrFn = options.msgIdToStrFn ?? messageIdToString;\n    this.mcache = options.messageCache || new MessageCache(opts.mcacheGossip, opts.mcacheLength, this.msgIdToStrFn);\n    if (options.dataTransform) {\n      this.dataTransform = options.dataTransform;\n    }\n    if (options.metricsRegister) {\n      if (!options.metricsTopicStrToLabel) {\n        throw Error('Must set metricsTopicStrToLabel with metrics');\n      }\n      // in theory, each topic has its own meshMessageDeliveriesWindow param\n      // however in lodestar, we configure it mostly the same so just pick the max of positive ones\n      // (some topics have meshMessageDeliveriesWindow as 0)\n      const maxMeshMessageDeliveriesWindowMs = Math.max(...Object.values(opts.scoreParams.topics).map(topicParam => topicParam.meshMessageDeliveriesWindow), constants.DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS);\n      const metrics = getMetrics(options.metricsRegister, options.metricsTopicStrToLabel, {\n        gossipPromiseExpireSec: this.opts.gossipsubIWantFollowupMs / 1000,\n        behaviourPenaltyThreshold: opts.scoreParams.behaviourPenaltyThreshold,\n        maxMeshMessageDeliveriesWindowSec: maxMeshMessageDeliveriesWindowMs / 1000\n      });\n      metrics.mcacheSize.addCollect(() => this.onScrapeMetrics(metrics));\n      for (const protocol of this.multicodecs) {\n        metrics.protocolsEnabled.set({\n          protocol\n        }, 1);\n      }\n      this.metrics = metrics;\n    } else {\n      this.metrics = null;\n    }\n    this.gossipTracer = new IWantTracer(this.opts.gossipsubIWantFollowupMs, this.msgIdToStrFn, this.metrics);\n    /**\n     * libp2p\n     */\n    this.score = new PeerScore(this.opts.scoreParams, this.metrics, {\n      scoreCacheValidityMs: opts.heartbeatInterval\n    });\n    this.maxInboundStreams = options.maxInboundStreams;\n    this.maxOutboundStreams = options.maxOutboundStreams;\n    this.allowedTopics = opts.allowedTopics ? new Set(opts.allowedTopics) : null;\n  }\n  getPeers() {\n    return [...this.peers.keys()].map(str => peerIdFromString(str));\n  }\n  isStarted() {\n    return this.status.code === GossipStatusCode.started;\n  }\n  // LIFECYCLE METHODS\n  /**\n   * Mounts the gossipsub protocol onto the libp2p node and sends our\n   * our subscriptions to every peer connected\n   */\n  async start() {\n    // From pubsub\n    if (this.isStarted()) {\n      return;\n    }\n    this.log('starting');\n    this.publishConfig = await getPublishConfigFromPeerId(this.globalSignaturePolicy, this.components.peerId);\n    // Create the outbound inflight queue\n    // This ensures that outbound stream creation happens sequentially\n    this.outboundInflightQueue = pushable({\n      objectMode: true\n    });\n    pipe(this.outboundInflightQueue, async source => {\n      for await (const {\n        peerId,\n        connection\n      } of source) {\n        await this.createOutboundStream(peerId, connection);\n      }\n    }).catch(e => this.log.error('outbound inflight queue error', e));\n    // set direct peer addresses in the address book\n    await Promise.all(this.opts.directPeers.map(async p => {\n      await this.components.peerStore.addressBook.add(p.id, p.addrs);\n    }));\n    const registrar = this.components.registrar;\n    // Incoming streams\n    // Called after a peer dials us\n    await Promise.all(this.multicodecs.map(multicodec => registrar.handle(multicodec, this.onIncomingStream.bind(this), {\n      maxInboundStreams: this.maxInboundStreams,\n      maxOutboundStreams: this.maxOutboundStreams\n    })));\n    // # How does Gossipsub interact with libp2p? Rough guide from Mar 2022\n    //\n    // ## Setup:\n    // Gossipsub requests libp2p to callback, TBD\n    //\n    // `this.libp2p.handle()` registers a handler for `/meshsub/1.1.0` and other Gossipsub protocols\n    // The handler callback is registered in libp2p Upgrader.protocols map.\n    //\n    // Upgrader receives an inbound connection from some transport and (`Upgrader.upgradeInbound`):\n    // - Adds encryption (NOISE in our case)\n    // - Multiplex stream\n    // - Create a muxer and register that for each new stream call Upgrader.protocols handler\n    //\n    // ## Topology\n    // - new instance of Topology (unlinked to libp2p) with handlers\n    // - registar.register(topology)\n    // register protocol with topology\n    // Topology callbacks called on connection manager changes\n    const topology = createTopology({\n      onConnect: this.onPeerConnected.bind(this),\n      onDisconnect: this.onPeerDisconnected.bind(this)\n    });\n    const registrarTopologyIds = await Promise.all(this.multicodecs.map(multicodec => registrar.register(multicodec, topology)));\n    // Schedule to start heartbeat after `GossipsubHeartbeatInitialDelay`\n    const heartbeatTimeout = setTimeout(this.runHeartbeat, constants.GossipsubHeartbeatInitialDelay);\n    // Then, run heartbeat every `heartbeatInterval` offset by `GossipsubHeartbeatInitialDelay`\n    this.status = {\n      code: GossipStatusCode.started,\n      registrarTopologyIds,\n      heartbeatTimeout: heartbeatTimeout,\n      hearbeatStartMs: Date.now() + constants.GossipsubHeartbeatInitialDelay\n    };\n    this.score.start();\n    // connect to direct peers\n    this.directPeerInitial = setTimeout(() => {\n      Promise.resolve().then(async () => {\n        await Promise.all(Array.from(this.direct).map(async id => await this.connect(id)));\n      }).catch(err => {\n        this.log(err);\n      });\n    }, constants.GossipsubDirectConnectInitialDelay);\n    this.log('started');\n  }\n  /**\n   * Unmounts the gossipsub protocol and shuts down every connection\n   */\n  async stop() {\n    this.log('stopping');\n    // From pubsub\n    if (this.status.code !== GossipStatusCode.started) {\n      return;\n    }\n    const {\n      registrarTopologyIds\n    } = this.status;\n    this.status = {\n      code: GossipStatusCode.stopped\n    };\n    // unregister protocol and handlers\n    const registrar = this.components.registrar;\n    registrarTopologyIds.forEach(id => registrar.unregister(id));\n    this.outboundInflightQueue.end();\n    for (const outboundStream of this.streamsOutbound.values()) {\n      outboundStream.close();\n    }\n    this.streamsOutbound.clear();\n    for (const inboundStream of this.streamsInbound.values()) {\n      inboundStream.close();\n    }\n    this.streamsInbound.clear();\n    this.peers.clear();\n    this.subscriptions.clear();\n    // Gossipsub\n    if (this.heartbeatTimer) {\n      this.heartbeatTimer.cancel();\n      this.heartbeatTimer = null;\n    }\n    this.score.stop();\n    this.mesh.clear();\n    this.fanout.clear();\n    this.fanoutLastpub.clear();\n    this.gossip.clear();\n    this.control.clear();\n    this.peerhave.clear();\n    this.iasked.clear();\n    this.backoff.clear();\n    this.outbound.clear();\n    this.gossipTracer.clear();\n    this.seenCache.clear();\n    if (this.fastMsgIdCache) this.fastMsgIdCache.clear();\n    if (this.directPeerInitial) clearTimeout(this.directPeerInitial);\n    this.log('stopped');\n  }\n  /** FOR DEBUG ONLY - Dump peer stats for all peers. Data is cloned, safe to mutate */\n  dumpPeerScoreStats() {\n    return this.score.dumpPeerScoreStats();\n  }\n  /**\n   * On an inbound stream opened\n   */\n  onIncomingStream({\n    stream,\n    connection\n  }) {\n    if (!this.isStarted()) {\n      return;\n    }\n    const peerId = connection.remotePeer;\n    // add peer to router\n    this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n    // create inbound stream\n    this.createInboundStream(peerId, stream);\n    // attempt to create outbound stream\n    this.outboundInflightQueue.push({\n      peerId,\n      connection\n    });\n  }\n  /**\n   * Registrar notifies an established connection with pubsub protocol\n   */\n  onPeerConnected(peerId, connection) {\n    this.metrics?.newConnectionCount.inc({\n      status: connection.stat.status\n    });\n    // libp2p may emit a closed connection and never issue peer:disconnect event\n    // see https://github.com/ChainSafe/js-libp2p-gossipsub/issues/398\n    if (!this.isStarted() || connection.stat.status !== 'OPEN') {\n      return;\n    }\n    this.addPeer(peerId, connection.stat.direction, connection.remoteAddr);\n    this.outboundInflightQueue.push({\n      peerId,\n      connection\n    });\n  }\n  /**\n   * Registrar notifies a closing connection with pubsub protocol\n   */\n  onPeerDisconnected(peerId) {\n    this.log('connection ended %p', peerId);\n    this.removePeer(peerId);\n  }\n  async createOutboundStream(peerId, connection) {\n    if (!this.isStarted()) {\n      return;\n    }\n    const id = peerId.toString();\n    if (!this.peers.has(id)) {\n      return;\n    }\n    // TODO make this behavior more robust\n    // This behavior is different than for inbound streams\n    // If an outbound stream already exists, don't create a new stream\n    if (this.streamsOutbound.has(id)) {\n      return;\n    }\n    try {\n      const stream = new OutboundStream(await connection.newStream(this.multicodecs), e => this.log.error('outbound pipe error', e), {\n        maxBufferSize: this.opts.maxOutboundBufferSize\n      });\n      this.log('create outbound stream %p', peerId);\n      this.streamsOutbound.set(id, stream);\n      const protocol = stream.protocol;\n      if (protocol === constants.FloodsubID) {\n        this.floodsubPeers.add(id);\n      }\n      this.metrics?.peersPerProtocol.inc({\n        protocol\n      }, 1);\n      // Immediately send own subscriptions via the newly attached stream\n      if (this.subscriptions.size > 0) {\n        this.log('send subscriptions to', id);\n        this.sendSubscriptions(id, Array.from(this.subscriptions), true);\n      }\n    } catch (e) {\n      this.log.error('createOutboundStream error', e);\n    }\n  }\n  async createInboundStream(peerId, stream) {\n    if (!this.isStarted()) {\n      return;\n    }\n    const id = peerId.toString();\n    if (!this.peers.has(id)) {\n      return;\n    }\n    // TODO make this behavior more robust\n    // This behavior is different than for outbound streams\n    // If a peer initiates a new inbound connection\n    // we assume that one is the new canonical inbound stream\n    const priorInboundStream = this.streamsInbound.get(id);\n    if (priorInboundStream !== undefined) {\n      this.log('replacing existing inbound steam %s', id);\n      priorInboundStream.close();\n    }\n    this.log('create inbound stream %s', id);\n    const inboundStream = new InboundStream(stream, {\n      maxDataLength: this.opts.maxInboundDataLength\n    });\n    this.streamsInbound.set(id, inboundStream);\n    this.pipePeerReadStream(peerId, inboundStream.source).catch(err => this.log(err));\n  }\n  /**\n   * Add a peer to the router\n   */\n  addPeer(peerId, direction, addr) {\n    const id = peerId.toString();\n    if (!this.peers.has(id)) {\n      this.log('new peer %p', peerId);\n      this.peers.add(id);\n      // Add to peer scoring\n      this.score.addPeer(id);\n      const currentIP = multiaddrToIPStr(addr);\n      if (currentIP !== null) {\n        this.score.addIP(id, currentIP);\n      } else {\n        this.log('Added peer has no IP in current address %s %s', id, addr.toString());\n      }\n      // track the connection direction. Don't allow to unset outbound\n      if (!this.outbound.has(id)) {\n        this.outbound.set(id, direction === 'outbound');\n      }\n    }\n  }\n  /**\n   * Removes a peer from the router\n   */\n  removePeer(peerId) {\n    const id = peerId.toString();\n    if (!this.peers.has(id)) {\n      return;\n    }\n    // delete peer\n    this.log('delete peer %p', peerId);\n    this.peers.delete(id);\n    const outboundStream = this.streamsOutbound.get(id);\n    const inboundStream = this.streamsInbound.get(id);\n    if (outboundStream) {\n      this.metrics?.peersPerProtocol.inc({\n        protocol: outboundStream.protocol\n      }, -1);\n    }\n    // close streams\n    outboundStream?.close();\n    inboundStream?.close();\n    // remove streams\n    this.streamsOutbound.delete(id);\n    this.streamsInbound.delete(id);\n    // remove peer from topics map\n    for (const peers of this.topics.values()) {\n      peers.delete(id);\n    }\n    // Remove this peer from the mesh\n    for (const [topicStr, peers] of this.mesh) {\n      if (peers.delete(id) === true) {\n        this.metrics?.onRemoveFromMesh(topicStr, ChurnReason.Dc, 1);\n      }\n    }\n    // Remove this peer from the fanout\n    for (const peers of this.fanout.values()) {\n      peers.delete(id);\n    }\n    // Remove from floodsubPeers\n    this.floodsubPeers.delete(id);\n    // Remove from gossip mapping\n    this.gossip.delete(id);\n    // Remove from control mapping\n    this.control.delete(id);\n    // Remove from backoff mapping\n    this.outbound.delete(id);\n    // Remove from peer scoring\n    this.score.removePeer(id);\n    this.acceptFromWhitelist.delete(id);\n  }\n  // API METHODS\n  get started() {\n    return this.status.code === GossipStatusCode.started;\n  }\n  /**\n   * Get a the peer-ids in a topic mesh\n   */\n  getMeshPeers(topic) {\n    const peersInTopic = this.mesh.get(topic);\n    return peersInTopic ? Array.from(peersInTopic) : [];\n  }\n  /**\n   * Get a list of the peer-ids that are subscribed to one topic.\n   */\n  getSubscribers(topic) {\n    const peersInTopic = this.topics.get(topic);\n    return (peersInTopic ? Array.from(peersInTopic) : []).map(str => peerIdFromString(str));\n  }\n  /**\n   * Get the list of topics which the peer is subscribed to.\n   */\n  getTopics() {\n    return Array.from(this.subscriptions);\n  }\n  // TODO: Reviewing Pubsub API\n  // MESSAGE METHODS\n  /**\n   * Responsible for processing each RPC message received by other peers.\n   */\n  async pipePeerReadStream(peerId, stream) {\n    try {\n      await pipe(stream, async source => {\n        for await (const data of source) {\n          try {\n            // TODO: Check max gossip message size, before decodeRpc()\n            const rpcBytes = data.subarray();\n            // Note: This function may throw, it must be wrapped in a try {} catch {} to prevent closing the stream.\n            // TODO: What should we do if the entire RPC is invalid?\n            const rpc = decodeRpc(rpcBytes, this.decodeRpcLimits);\n            this.metrics?.onRpcRecv(rpc, rpcBytes.length);\n            // Since processRpc may be overridden entirely in unsafe ways,\n            // the simplest/safest option here is to wrap in a function and capture all errors\n            // to prevent a top-level unhandled exception\n            // This processing of rpc messages should happen without awaiting full validation/execution of prior messages\n            if (this.opts.awaitRpcHandler) {\n              try {\n                await this.handleReceivedRpc(peerId, rpc);\n              } catch (err) {\n                this.metrics?.onRpcRecvError();\n                this.log(err);\n              }\n            } else {\n              this.handleReceivedRpc(peerId, rpc).catch(err => {\n                this.metrics?.onRpcRecvError();\n                this.log(err);\n              });\n            }\n          } catch (e) {\n            this.metrics?.onRpcDataError();\n            this.log(e);\n          }\n        }\n      });\n    } catch (err) {\n      this.metrics?.onPeerReadStreamError();\n      this.handlePeerReadStreamError(err, peerId);\n    }\n  }\n  /**\n   * Handle error when read stream pipe throws, less of the functional use but more\n   * to for testing purposes to spy on the error handling\n   * */\n  handlePeerReadStreamError(err, peerId) {\n    this.log.error(err);\n    this.onPeerDisconnected(peerId);\n  }\n  /**\n   * Handles an rpc request from a peer\n   */\n  async handleReceivedRpc(from, rpc) {\n    // Check if peer is graylisted in which case we ignore the event\n    if (!this.acceptFrom(from.toString())) {\n      this.log('received message from unacceptable peer %p', from);\n      this.metrics?.rpcRecvNotAccepted.inc();\n      return;\n    }\n    const subscriptions = rpc.subscriptions ? rpc.subscriptions.length : 0;\n    const messages = rpc.messages ? rpc.messages.length : 0;\n    let ihave = 0;\n    let iwant = 0;\n    let graft = 0;\n    let prune = 0;\n    if (rpc.control) {\n      if (rpc.control.ihave) ihave = rpc.control.ihave.length;\n      if (rpc.control.iwant) iwant = rpc.control.iwant.length;\n      if (rpc.control.graft) graft = rpc.control.graft.length;\n      if (rpc.control.prune) prune = rpc.control.prune.length;\n    }\n    this.log(`rpc.from ${from.toString()} subscriptions ${subscriptions} messages ${messages} ihave ${ihave} iwant ${iwant} graft ${graft} prune ${prune}`);\n    // Handle received subscriptions\n    if (rpc.subscriptions && rpc.subscriptions.length > 0) {\n      // update peer subscriptions\n      const subscriptions = [];\n      rpc.subscriptions.forEach(subOpt => {\n        const topic = subOpt.topic;\n        const subscribe = subOpt.subscribe === true;\n        if (topic != null) {\n          if (this.allowedTopics && !this.allowedTopics.has(topic)) {\n            // Not allowed: subscription data-structures are not bounded by topic count\n            // TODO: Should apply behaviour penalties?\n            return;\n          }\n          this.handleReceivedSubscription(from, topic, subscribe);\n          subscriptions.push({\n            topic,\n            subscribe\n          });\n        }\n      });\n      this.dispatchEvent(new CustomEvent('subscription-change', {\n        detail: {\n          peerId: from,\n          subscriptions\n        }\n      }));\n    }\n    // Handle messages\n    // TODO: (up to limit)\n    if (rpc.messages) {\n      for (const message of rpc.messages) {\n        if (this.allowedTopics && !this.allowedTopics.has(message.topic)) {\n          // Not allowed: message cache data-structures are not bounded by topic count\n          // TODO: Should apply behaviour penalties?\n          continue;\n        }\n        const handleReceivedMessagePromise = this.handleReceivedMessage(from, message)\n        // Should never throw, but handle just in case\n        .catch(err => {\n          this.metrics?.onMsgRecvError(message.topic);\n          this.log(err);\n        });\n        if (this.opts.awaitRpcMessageHandler) {\n          await handleReceivedMessagePromise;\n        }\n      }\n    }\n    // Handle control messages\n    if (rpc.control) {\n      await this.handleControlMessage(from.toString(), rpc.control);\n    }\n  }\n  /**\n   * Handles a subscription change from a peer\n   */\n  handleReceivedSubscription(from, topic, subscribe) {\n    this.log('subscription update from %p topic %s', from, topic);\n    let topicSet = this.topics.get(topic);\n    if (topicSet == null) {\n      topicSet = new Set();\n      this.topics.set(topic, topicSet);\n    }\n    if (subscribe) {\n      // subscribe peer to new topic\n      topicSet.add(from.toString());\n    } else {\n      // unsubscribe from existing topic\n      topicSet.delete(from.toString());\n    }\n    // TODO: rust-libp2p has A LOT more logic here\n  }\n  /**\n   * Handles a newly received message from an RPC.\n   * May forward to all peers in the mesh.\n   */\n  async handleReceivedMessage(from, rpcMsg) {\n    this.metrics?.onMsgRecvPreValidation(rpcMsg.topic);\n    const validationResult = await this.validateReceivedMessage(from, rpcMsg);\n    this.metrics?.onMsgRecvResult(rpcMsg.topic, validationResult.code);\n    switch (validationResult.code) {\n      case MessageStatus.duplicate:\n        // Report the duplicate\n        this.score.duplicateMessage(from.toString(), validationResult.msgIdStr, rpcMsg.topic);\n        // due to the collision of fastMsgIdFn, 2 different messages may end up the same fastMsgId\n        // so we need to also mark the duplicate message as delivered or the promise is not resolved\n        // and peer gets penalized. See https://github.com/ChainSafe/js-libp2p-gossipsub/pull/385\n        this.gossipTracer.deliverMessage(validationResult.msgIdStr, true);\n        this.mcache.observeDuplicate(validationResult.msgIdStr, from.toString());\n        return;\n      case MessageStatus.invalid:\n        // invalid messages received\n        // metrics.register_invalid_message(&raw_message.topic)\n        // Tell peer_score about reject\n        // Reject the original source, and any duplicates we've seen from other peers.\n        if (validationResult.msgIdStr) {\n          const msgIdStr = validationResult.msgIdStr;\n          this.score.rejectMessage(from.toString(), msgIdStr, rpcMsg.topic, validationResult.reason);\n          this.gossipTracer.rejectMessage(msgIdStr, validationResult.reason);\n        } else {\n          this.score.rejectInvalidMessage(from.toString(), rpcMsg.topic);\n        }\n        this.metrics?.onMsgRecvInvalid(rpcMsg.topic, validationResult);\n        return;\n      case MessageStatus.valid:\n        // Tells score that message arrived (but is maybe not fully validated yet).\n        // Consider the message as delivered for gossip promises.\n        this.score.validateMessage(validationResult.messageId.msgIdStr);\n        this.gossipTracer.deliverMessage(validationResult.messageId.msgIdStr);\n        // Add the message to our memcache\n        // if no validation is required, mark the message as validated\n        this.mcache.put(validationResult.messageId, rpcMsg, !this.opts.asyncValidation);\n        // Dispatch the message to the user if we are subscribed to the topic\n        if (this.subscriptions.has(rpcMsg.topic)) {\n          const isFromSelf = this.components.peerId.equals(from);\n          if (!isFromSelf || this.opts.emitSelf) {\n            super.dispatchEvent(new CustomEvent('gossipsub:message', {\n              detail: {\n                propagationSource: from,\n                msgId: validationResult.messageId.msgIdStr,\n                msg: validationResult.msg\n              }\n            }));\n            // TODO: Add option to switch between emit per topic or all messages in one\n            super.dispatchEvent(new CustomEvent('message', {\n              detail: validationResult.msg\n            }));\n          }\n        }\n        // Forward the message to mesh peers, if no validation is required\n        // If asyncValidation is ON, expect the app layer to call reportMessageValidationResult(), then forward\n        if (!this.opts.asyncValidation) {\n          // TODO: in rust-libp2p\n          // .forward_msg(&msg_id, raw_message, Some(propagation_source))\n          this.forwardMessage(validationResult.messageId.msgIdStr, rpcMsg, from.toString());\n        }\n    }\n  }\n  /**\n   * Handles a newly received message from an RPC.\n   * May forward to all peers in the mesh.\n   */\n  async validateReceivedMessage(propagationSource, rpcMsg) {\n    // Fast message ID stuff\n    const fastMsgIdStr = this.fastMsgIdFn?.(rpcMsg);\n    const msgIdCached = fastMsgIdStr !== undefined ? this.fastMsgIdCache?.get(fastMsgIdStr) : undefined;\n    if (msgIdCached) {\n      // This message has been seen previously. Ignore it\n      return {\n        code: MessageStatus.duplicate,\n        msgIdStr: msgIdCached\n      };\n    }\n    // Perform basic validation on message and convert to RawGossipsubMessage for fastMsgIdFn()\n    const validationResult = await validateToRawMessage(this.globalSignaturePolicy, rpcMsg);\n    if (!validationResult.valid) {\n      return {\n        code: MessageStatus.invalid,\n        reason: RejectReason.Error,\n        error: validationResult.error\n      };\n    }\n    const msg = validationResult.message;\n    // Try and perform the data transform to the message. If it fails, consider it invalid.\n    try {\n      if (this.dataTransform) {\n        msg.data = this.dataTransform.inboundTransform(rpcMsg.topic, msg.data);\n      }\n    } catch (e) {\n      this.log('Invalid message, transform failed', e);\n      return {\n        code: MessageStatus.invalid,\n        reason: RejectReason.Error,\n        error: ValidateError.TransformFailed\n      };\n    }\n    // TODO: Check if message is from a blacklisted source or propagation origin\n    // - Reject any message from a blacklisted peer\n    // - Also reject any message that originated from a blacklisted peer\n    // - reject messages claiming to be from ourselves but not locally published\n    // Calculate the message id on the transformed data.\n    const msgId = await this.msgIdFn(msg);\n    const msgIdStr = this.msgIdToStrFn(msgId);\n    const messageId = {\n      msgId,\n      msgIdStr\n    };\n    // Add the message to the duplicate caches\n    if (fastMsgIdStr !== undefined && this.fastMsgIdCache) {\n      const collision = this.fastMsgIdCache.put(fastMsgIdStr, msgIdStr);\n      if (collision) {\n        this.metrics?.fastMsgIdCacheCollision.inc();\n      }\n    }\n    if (this.seenCache.has(msgIdStr)) {\n      return {\n        code: MessageStatus.duplicate,\n        msgIdStr\n      };\n    } else {\n      this.seenCache.put(msgIdStr);\n    }\n    // (Optional) Provide custom validation here with dynamic validators per topic\n    // NOTE: This custom topicValidator() must resolve fast (< 100ms) to allow scores\n    // to not penalize peers for long validation times.\n    const topicValidator = this.topicValidators.get(rpcMsg.topic);\n    if (topicValidator != null) {\n      let acceptance;\n      // Use try {} catch {} in case topicValidator() is synchronous\n      try {\n        acceptance = await topicValidator(propagationSource, msg);\n      } catch (e) {\n        const errCode = e.code;\n        if (errCode === constants.ERR_TOPIC_VALIDATOR_IGNORE) acceptance = TopicValidatorResult.Ignore;\n        if (errCode === constants.ERR_TOPIC_VALIDATOR_REJECT) acceptance = TopicValidatorResult.Reject;else acceptance = TopicValidatorResult.Ignore;\n      }\n      if (acceptance !== TopicValidatorResult.Accept) {\n        return {\n          code: MessageStatus.invalid,\n          reason: rejectReasonFromAcceptance(acceptance),\n          msgIdStr\n        };\n      }\n    }\n    return {\n      code: MessageStatus.valid,\n      messageId,\n      msg\n    };\n  }\n  /**\n   * Return score of a peer.\n   */\n  getScore(peerId) {\n    return this.score.score(peerId);\n  }\n  /**\n   * Send an rpc object to a peer with subscriptions\n   */\n  sendSubscriptions(toPeer, topics, subscribe) {\n    this.sendRpc(toPeer, {\n      subscriptions: topics.map(topic => ({\n        topic,\n        subscribe\n      }))\n    });\n  }\n  /**\n   * Handles an rpc control message from a peer\n   */\n  async handleControlMessage(id, controlMsg) {\n    if (controlMsg === undefined) {\n      return;\n    }\n    const iwant = controlMsg.ihave ? this.handleIHave(id, controlMsg.ihave) : [];\n    const ihave = controlMsg.iwant ? this.handleIWant(id, controlMsg.iwant) : [];\n    const prune = controlMsg.graft ? await this.handleGraft(id, controlMsg.graft) : [];\n    controlMsg.prune && (await this.handlePrune(id, controlMsg.prune));\n    if (!iwant.length && !ihave.length && !prune.length) {\n      return;\n    }\n    const sent = this.sendRpc(id, {\n      messages: ihave,\n      control: {\n        iwant,\n        prune\n      }\n    });\n    const iwantMessageIds = iwant[0]?.messageIDs;\n    if (iwantMessageIds) {\n      if (sent) {\n        this.gossipTracer.addPromise(id, iwantMessageIds);\n      } else {\n        this.metrics?.iwantPromiseUntracked.inc(1);\n      }\n    }\n  }\n  /**\n   * Whether to accept a message from a peer\n   */\n  acceptFrom(id) {\n    if (this.direct.has(id)) {\n      return true;\n    }\n    const now = Date.now();\n    const entry = this.acceptFromWhitelist.get(id);\n    if (entry && entry.messagesAccepted < ACCEPT_FROM_WHITELIST_MAX_MESSAGES && entry.acceptUntil >= now) {\n      entry.messagesAccepted += 1;\n      return true;\n    }\n    const score = this.score.score(id);\n    if (score >= ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE) {\n      // peer is unlikely to be able to drop its score to `graylistThreshold`\n      // after 128 messages or 1s\n      this.acceptFromWhitelist.set(id, {\n        messagesAccepted: 0,\n        acceptUntil: now + ACCEPT_FROM_WHITELIST_DURATION_MS\n      });\n    } else {\n      this.acceptFromWhitelist.delete(id);\n    }\n    return score >= this.opts.scoreThresholds.graylistThreshold;\n  }\n  /**\n   * Handles IHAVE messages\n   */\n  handleIHave(id, ihave) {\n    if (!ihave.length) {\n      return [];\n    }\n    // we ignore IHAVE gossip from any peer whose score is below the gossips threshold\n    const score = this.score.score(id);\n    if (score < this.opts.scoreThresholds.gossipThreshold) {\n      this.log('IHAVE: ignoring peer %s with score below threshold [ score = %d ]', id, score);\n      this.metrics?.ihaveRcvIgnored.inc({\n        reason: IHaveIgnoreReason.LowScore\n      });\n      return [];\n    }\n    // IHAVE flood protection\n    const peerhave = (this.peerhave.get(id) ?? 0) + 1;\n    this.peerhave.set(id, peerhave);\n    if (peerhave > constants.GossipsubMaxIHaveMessages) {\n      this.log('IHAVE: peer %s has advertised too many times (%d) within this heartbeat interval; ignoring', id, peerhave);\n      this.metrics?.ihaveRcvIgnored.inc({\n        reason: IHaveIgnoreReason.MaxIhave\n      });\n      return [];\n    }\n    const iasked = this.iasked.get(id) ?? 0;\n    if (iasked >= constants.GossipsubMaxIHaveLength) {\n      this.log('IHAVE: peer %s has already advertised too many messages (%d); ignoring', id, iasked);\n      this.metrics?.ihaveRcvIgnored.inc({\n        reason: IHaveIgnoreReason.MaxIasked\n      });\n      return [];\n    }\n    // string msgId => msgId\n    const iwant = new Map();\n    ihave.forEach(({\n      topicID,\n      messageIDs\n    }) => {\n      if (!topicID || !messageIDs || !this.mesh.has(topicID)) {\n        return;\n      }\n      let idonthave = 0;\n      messageIDs.forEach(msgId => {\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        if (!this.seenCache.has(msgIdStr)) {\n          iwant.set(msgIdStr, msgId);\n          idonthave++;\n        }\n      });\n      this.metrics?.onIhaveRcv(topicID, messageIDs.length, idonthave);\n    });\n    if (!iwant.size) {\n      return [];\n    }\n    let iask = iwant.size;\n    if (iask + iasked > constants.GossipsubMaxIHaveLength) {\n      iask = constants.GossipsubMaxIHaveLength - iasked;\n    }\n    this.log('IHAVE: Asking for %d out of %d messages from %s', iask, iwant.size, id);\n    let iwantList = Array.from(iwant.values());\n    // ask in random order\n    shuffle(iwantList);\n    // truncate to the messages we are actually asking for and update the iasked counter\n    iwantList = iwantList.slice(0, iask);\n    this.iasked.set(id, iasked + iask);\n    // do not add gossipTracer promise here until a successful sendRpc()\n    return [{\n      messageIDs: iwantList\n    }];\n  }\n  /**\n   * Handles IWANT messages\n   * Returns messages to send back to peer\n   */\n  handleIWant(id, iwant) {\n    if (!iwant.length) {\n      return [];\n    }\n    // we don't respond to IWANT requests from any per whose score is below the gossip threshold\n    const score = this.score.score(id);\n    if (score < this.opts.scoreThresholds.gossipThreshold) {\n      this.log('IWANT: ignoring peer %s with score below threshold [score = %d]', id, score);\n      return [];\n    }\n    const ihave = new Map();\n    const iwantByTopic = new Map();\n    let iwantDonthave = 0;\n    iwant.forEach(({\n      messageIDs\n    }) => {\n      messageIDs && messageIDs.forEach(msgId => {\n        const msgIdStr = this.msgIdToStrFn(msgId);\n        const entry = this.mcache.getWithIWantCount(msgIdStr, id);\n        if (entry == null) {\n          iwantDonthave++;\n          return;\n        }\n        iwantByTopic.set(entry.msg.topic, 1 + (iwantByTopic.get(entry.msg.topic) ?? 0));\n        if (entry.count > constants.GossipsubGossipRetransmission) {\n          this.log('IWANT: Peer %s has asked for message %s too many times: ignoring request', id, msgId);\n          return;\n        }\n        ihave.set(msgIdStr, entry.msg);\n      });\n    });\n    this.metrics?.onIwantRcv(iwantByTopic, iwantDonthave);\n    if (!ihave.size) {\n      this.log('IWANT: Could not provide any wanted messages to %s', id);\n      return [];\n    }\n    this.log('IWANT: Sending %d messages to %s', ihave.size, id);\n    return Array.from(ihave.values());\n  }\n  /**\n   * Handles Graft messages\n   */\n  async handleGraft(id, graft) {\n    const prune = [];\n    const score = this.score.score(id);\n    const now = Date.now();\n    let doPX = this.opts.doPX;\n    graft.forEach(({\n      topicID\n    }) => {\n      if (!topicID) {\n        return;\n      }\n      const peersInMesh = this.mesh.get(topicID);\n      if (!peersInMesh) {\n        // don't do PX when there is an unknown topic to avoid leaking our peers\n        doPX = false;\n        // spam hardening: ignore GRAFTs for unknown topics\n        return;\n      }\n      // check if peer is already in the mesh; if so do nothing\n      if (peersInMesh.has(id)) {\n        return;\n      }\n      // we don't GRAFT to/from direct peers; complain loudly if this happens\n      if (this.direct.has(id)) {\n        this.log('GRAFT: ignoring request from direct peer %s', id);\n        // this is possibly a bug from a non-reciprical configuration; send a PRUNE\n        prune.push(topicID);\n        // but don't px\n        doPX = false;\n        return;\n      }\n      // make sure we are not backing off that peer\n      const expire = this.backoff.get(topicID)?.get(id);\n      if (typeof expire === 'number' && now < expire) {\n        this.log('GRAFT: ignoring backed off peer %s', id);\n        // add behavioral penalty\n        this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n        // no PX\n        doPX = false;\n        // check the flood cutoff -- is the GRAFT coming too fast?\n        const floodCutoff = expire + this.opts.graftFloodThreshold - this.opts.pruneBackoff;\n        if (now < floodCutoff) {\n          // extra penalty\n          this.score.addPenalty(id, 1, ScorePenalty.GraftBackoff);\n        }\n        // refresh the backoff\n        this.addBackoff(id, topicID);\n        prune.push(topicID);\n        return;\n      }\n      // check the score\n      if (score < 0) {\n        // we don't GRAFT peers with negative score\n        this.log('GRAFT: ignoring peer %s with negative score: score=%d, topic=%s', id, score, topicID);\n        // we do send them PRUNE however, because it's a matter of protocol correctness\n        prune.push(topicID);\n        // but we won't PX to them\n        doPX = false;\n        // add/refresh backoff so that we don't reGRAFT too early even if the score decays\n        this.addBackoff(id, topicID);\n        return;\n      }\n      // check the number of mesh peers; if it is at (or over) Dhi, we only accept grafts\n      // from peers with outbound connections; this is a defensive check to restrict potential\n      // mesh takeover attacks combined with love bombing\n      if (peersInMesh.size >= this.opts.Dhi && !this.outbound.get(id)) {\n        prune.push(topicID);\n        this.addBackoff(id, topicID);\n        return;\n      }\n      this.log('GRAFT: Add mesh link from %s in %s', id, topicID);\n      this.score.graft(id, topicID);\n      peersInMesh.add(id);\n      this.metrics?.onAddToMesh(topicID, InclusionReason.Subscribed, 1);\n    });\n    if (!prune.length) {\n      return [];\n    }\n    return await Promise.all(prune.map(topic => this.makePrune(id, topic, doPX)));\n  }\n  /**\n   * Handles Prune messages\n   */\n  async handlePrune(id, prune) {\n    const score = this.score.score(id);\n    for (const {\n      topicID,\n      backoff,\n      peers\n    } of prune) {\n      if (topicID == null) {\n        continue;\n      }\n      const peersInMesh = this.mesh.get(topicID);\n      if (!peersInMesh) {\n        return;\n      }\n      this.log('PRUNE: Remove mesh link to %s in %s', id, topicID);\n      this.score.prune(id, topicID);\n      if (peersInMesh.has(id)) {\n        peersInMesh.delete(id);\n        this.metrics?.onRemoveFromMesh(topicID, ChurnReason.Unsub, 1);\n      }\n      // is there a backoff specified by the peer? if so obey it\n      if (typeof backoff === 'number' && backoff > 0) {\n        this.doAddBackoff(id, topicID, backoff * 1000);\n      } else {\n        this.addBackoff(id, topicID);\n      }\n      // PX\n      if (peers && peers.length) {\n        // we ignore PX from peers with insufficient scores\n        if (score < this.opts.scoreThresholds.acceptPXThreshold) {\n          this.log('PRUNE: ignoring PX from peer %s with insufficient score [score = %d, topic = %s]', id, score, topicID);\n          continue;\n        }\n        await this.pxConnect(peers);\n      }\n    }\n  }\n  /**\n   * Add standard backoff log for a peer in a topic\n   */\n  addBackoff(id, topic) {\n    this.doAddBackoff(id, topic, this.opts.pruneBackoff);\n  }\n  /**\n   * Add backoff expiry interval for a peer in a topic\n   *\n   * @param id\n   * @param topic\n   * @param interval - backoff duration in milliseconds\n   */\n  doAddBackoff(id, topic, interval) {\n    let backoff = this.backoff.get(topic);\n    if (!backoff) {\n      backoff = new Map();\n      this.backoff.set(topic, backoff);\n    }\n    const expire = Date.now() + interval;\n    const existingExpire = backoff.get(id) ?? 0;\n    if (existingExpire < expire) {\n      backoff.set(id, expire);\n    }\n  }\n  /**\n   * Apply penalties from broken IHAVE/IWANT promises\n   */\n  applyIwantPenalties() {\n    this.gossipTracer.getBrokenPromises().forEach((count, p) => {\n      this.log(\"peer %s didn't follow up in %d IWANT requests; adding penalty\", p, count);\n      this.score.addPenalty(p, count, ScorePenalty.BrokenPromise);\n    });\n  }\n  /**\n   * Clear expired backoff expiries\n   */\n  clearBackoff() {\n    // we only clear once every GossipsubPruneBackoffTicks ticks to avoid iterating over the maps too much\n    if (this.heartbeatTicks % constants.GossipsubPruneBackoffTicks !== 0) {\n      return;\n    }\n    const now = Date.now();\n    this.backoff.forEach((backoff, topic) => {\n      backoff.forEach((expire, id) => {\n        if (expire < now) {\n          backoff.delete(id);\n        }\n      });\n      if (backoff.size === 0) {\n        this.backoff.delete(topic);\n      }\n    });\n  }\n  /**\n   * Maybe reconnect to direct peers\n   */\n  async directConnect() {\n    const toconnect = [];\n    this.direct.forEach(id => {\n      if (!this.streamsOutbound.has(id)) {\n        toconnect.push(id);\n      }\n    });\n    await Promise.all(toconnect.map(async id => await this.connect(id)));\n  }\n  /**\n   * Maybe attempt connection given signed peer records\n   */\n  async pxConnect(peers) {\n    if (peers.length > this.opts.prunePeers) {\n      shuffle(peers);\n      peers = peers.slice(0, this.opts.prunePeers);\n    }\n    const toconnect = [];\n    await Promise.all(peers.map(async pi => {\n      if (!pi.peerID) {\n        return;\n      }\n      const p = peerIdFromBytes(pi.peerID).toString();\n      if (this.peers.has(p)) {\n        return;\n      }\n      if (!pi.signedPeerRecord) {\n        toconnect.push(p);\n        return;\n      }\n      // The peer sent us a signed record\n      // This is not a record from the peer who sent the record, but another peer who is connected with it\n      // Ensure that it is valid\n      try {\n        const envelope = await RecordEnvelope.openAndCertify(pi.signedPeerRecord, 'libp2p-peer-record');\n        const eid = envelope.peerId;\n        if (!envelope.peerId.equals(p)) {\n          this.log(\"bogus peer record obtained through px: peer ID %p doesn't match expected peer %p\", eid, p);\n          return;\n        }\n        if (!(await this.components.peerStore.addressBook.consumePeerRecord(envelope))) {\n          this.log('bogus peer record obtained through px: could not add peer record to address book');\n          return;\n        }\n        toconnect.push(p);\n      } catch (e) {\n        this.log('bogus peer record obtained through px: invalid signature or not a peer record');\n      }\n    }));\n    if (!toconnect.length) {\n      return;\n    }\n    await Promise.all(toconnect.map(async id => await this.connect(id)));\n  }\n  /**\n   * Connect to a peer using the gossipsub protocol\n   */\n  async connect(id) {\n    this.log('Initiating connection with %s', id);\n    const peerId = peerIdFromString(id);\n    const connection = await this.components.connectionManager.openConnection(peerId);\n    for (const multicodec of this.multicodecs) {\n      for (const topology of this.components.registrar.getTopologies(multicodec)) {\n        topology.onConnect(peerId, connection);\n      }\n    }\n  }\n  /**\n   * Subscribes to a topic\n   */\n  subscribe(topic) {\n    if (this.status.code !== GossipStatusCode.started) {\n      throw new Error('Pubsub has not started');\n    }\n    if (!this.subscriptions.has(topic)) {\n      this.subscriptions.add(topic);\n      for (const peerId of this.peers.keys()) {\n        this.sendSubscriptions(peerId, [topic], true);\n      }\n    }\n    this.join(topic);\n  }\n  /**\n   * Unsubscribe to a topic\n   */\n  unsubscribe(topic) {\n    if (this.status.code !== GossipStatusCode.started) {\n      throw new Error('Pubsub is not started');\n    }\n    const wasSubscribed = this.subscriptions.delete(topic);\n    this.log('unsubscribe from %s - am subscribed %s', topic, wasSubscribed);\n    if (wasSubscribed) {\n      for (const peerId of this.peers.keys()) {\n        this.sendSubscriptions(peerId, [topic], false);\n      }\n    }\n    this.leave(topic);\n  }\n  /**\n   * Join topic\n   */\n  join(topic) {\n    if (this.status.code !== GossipStatusCode.started) {\n      throw new Error('Gossipsub has not started');\n    }\n    // if we are already in the mesh, return\n    if (this.mesh.has(topic)) {\n      return;\n    }\n    this.log('JOIN %s', topic);\n    this.metrics?.onJoin(topic);\n    const toAdd = new Set();\n    // check if we have mesh_n peers in fanout[topic] and add them to the mesh if we do,\n    // removing the fanout entry.\n    const fanoutPeers = this.fanout.get(topic);\n    if (fanoutPeers) {\n      // Remove fanout entry and the last published time\n      this.fanout.delete(topic);\n      this.fanoutLastpub.delete(topic);\n      // remove explicit peers, peers with negative scores, and backoffed peers\n      fanoutPeers.forEach(id => {\n        // TODO:rust-libp2p checks `self.backoffs.is_backoff_with_slack()`\n        if (!this.direct.has(id) && this.score.score(id) >= 0) {\n          toAdd.add(id);\n        }\n      });\n      this.metrics?.onAddToMesh(topic, InclusionReason.Fanout, toAdd.size);\n    }\n    // check if we need to get more peers, which we randomly select\n    if (toAdd.size < this.opts.D) {\n      const fanoutCount = toAdd.size;\n      const newPeers = this.getRandomGossipPeers(topic, this.opts.D, id =>\n      // filter direct peers and peers with negative score\n      !toAdd.has(id) && !this.direct.has(id) && this.score.score(id) >= 0);\n      newPeers.forEach(peer => {\n        toAdd.add(peer);\n      });\n      this.metrics?.onAddToMesh(topic, InclusionReason.Random, toAdd.size - fanoutCount);\n    }\n    this.mesh.set(topic, toAdd);\n    toAdd.forEach(id => {\n      this.log('JOIN: Add mesh link to %s in %s', id, topic);\n      this.sendGraft(id, topic);\n      // rust-libp2p\n      // - peer_score.graft()\n      // - Self::control_pool_add()\n      // - peer_added_to_mesh()\n    });\n  }\n  /**\n   * Leave topic\n   */\n  leave(topic) {\n    if (this.status.code !== GossipStatusCode.started) {\n      throw new Error('Gossipsub has not started');\n    }\n    this.log('LEAVE %s', topic);\n    this.metrics?.onLeave(topic);\n    // Send PRUNE to mesh peers\n    const meshPeers = this.mesh.get(topic);\n    if (meshPeers) {\n      Promise.all(Array.from(meshPeers).map(async id => {\n        this.log('LEAVE: Remove mesh link to %s in %s', id, topic);\n        return await this.sendPrune(id, topic);\n      })).catch(err => {\n        this.log('Error sending prunes to mesh peers', err);\n      });\n      this.mesh.delete(topic);\n    }\n  }\n  selectPeersToForward(topic, propagationSource, excludePeers) {\n    const tosend = new Set();\n    // Add explicit peers\n    const peersInTopic = this.topics.get(topic);\n    if (peersInTopic) {\n      this.direct.forEach(peer => {\n        if (peersInTopic.has(peer) && propagationSource !== peer && !excludePeers?.has(peer)) {\n          tosend.add(peer);\n        }\n      });\n      // As of Mar 2022, spec + golang-libp2p include this while rust-libp2p does not\n      // rust-libp2p: https://github.com/libp2p/rust-libp2p/blob/6cc3b4ec52c922bfcf562a29b5805c3150e37c75/protocols/gossipsub/src/behaviour.rs#L2693\n      // spec: https://github.com/libp2p/specs/blob/10712c55ab309086a52eec7d25f294df4fa96528/pubsub/gossipsub/gossipsub-v1.0.md?plain=1#L361\n      this.floodsubPeers.forEach(peer => {\n        if (peersInTopic.has(peer) && propagationSource !== peer && !excludePeers?.has(peer) && this.score.score(peer) >= this.opts.scoreThresholds.publishThreshold) {\n          tosend.add(peer);\n        }\n      });\n    }\n    // add mesh peers\n    const meshPeers = this.mesh.get(topic);\n    if (meshPeers && meshPeers.size > 0) {\n      meshPeers.forEach(peer => {\n        if (propagationSource !== peer && !excludePeers?.has(peer)) {\n          tosend.add(peer);\n        }\n      });\n    }\n    return tosend;\n  }\n  selectPeersToPublish(topic) {\n    const tosend = new Set();\n    const tosendCount = {\n      direct: 0,\n      floodsub: 0,\n      mesh: 0,\n      fanout: 0\n    };\n    const peersInTopic = this.topics.get(topic);\n    if (peersInTopic) {\n      // flood-publish behavior\n      // send to direct peers and _all_ peers meeting the publishThreshold\n      if (this.opts.floodPublish) {\n        peersInTopic.forEach(id => {\n          if (this.direct.has(id)) {\n            tosend.add(id);\n            tosendCount.direct++;\n          } else if (this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n            tosend.add(id);\n            tosendCount.floodsub++;\n          }\n        });\n      } else {\n        // non-flood-publish behavior\n        // send to direct peers, subscribed floodsub peers\n        // and some mesh peers above publishThreshold\n        // direct peers (if subscribed)\n        this.direct.forEach(id => {\n          if (peersInTopic.has(id)) {\n            tosend.add(id);\n            tosendCount.direct++;\n          }\n        });\n        // floodsub peers\n        // Note: if there are no floodsub peers, we save a loop through peersInTopic Map\n        this.floodsubPeers.forEach(id => {\n          if (peersInTopic.has(id) && this.score.score(id) >= this.opts.scoreThresholds.publishThreshold) {\n            tosend.add(id);\n            tosendCount.floodsub++;\n          }\n        });\n        // Gossipsub peers handling\n        const meshPeers = this.mesh.get(topic);\n        if (meshPeers && meshPeers.size > 0) {\n          meshPeers.forEach(peer => {\n            tosend.add(peer);\n            tosendCount.mesh++;\n          });\n        }\n        // We are not in the mesh for topic, use fanout peers\n        else {\n          const fanoutPeers = this.fanout.get(topic);\n          if (fanoutPeers && fanoutPeers.size > 0) {\n            fanoutPeers.forEach(peer => {\n              tosend.add(peer);\n              tosendCount.fanout++;\n            });\n          }\n          // We have no fanout peers, select mesh_n of them and add them to the fanout\n          else {\n            // If we are not in the fanout, then pick peers in topic above the publishThreshold\n            const newFanoutPeers = this.getRandomGossipPeers(topic, this.opts.D, id => {\n              return this.score.score(id) >= this.opts.scoreThresholds.publishThreshold;\n            });\n            if (newFanoutPeers.size > 0) {\n              // eslint-disable-line max-depth\n              this.fanout.set(topic, newFanoutPeers);\n              newFanoutPeers.forEach(peer => {\n                // eslint-disable-line max-depth\n                tosend.add(peer);\n                tosendCount.fanout++;\n              });\n            }\n          }\n          // We are publishing to fanout peers - update the time we published\n          this.fanoutLastpub.set(topic, Date.now());\n        }\n      }\n    }\n    return {\n      tosend,\n      tosendCount\n    };\n  }\n  /**\n   * Forwards a message from our peers.\n   *\n   * For messages published by us (the app layer), this class uses `publish`\n   */\n  forwardMessage(msgIdStr, rawMsg, propagationSource, excludePeers) {\n    // message is fully validated inform peer_score\n    if (propagationSource) {\n      this.score.deliverMessage(propagationSource, msgIdStr, rawMsg.topic);\n    }\n    const tosend = this.selectPeersToForward(rawMsg.topic, propagationSource, excludePeers);\n    // Note: Don't throw if tosend is empty, we can have a mesh with a single peer\n    // forward the message to peers\n    tosend.forEach(id => {\n      // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n      this.sendRpc(id, {\n        messages: [rawMsg]\n      });\n    });\n    this.metrics?.onForwardMsg(rawMsg.topic, tosend.size);\n  }\n  /**\n   * App layer publishes a message to peers, return number of peers this message is published to\n   * Note: `async` due to crypto only if `StrictSign`, otherwise it's a sync fn.\n   *\n   * For messages not from us, this class uses `forwardMessage`.\n   */\n  async publish(topic, data, opts) {\n    const transformedData = this.dataTransform ? this.dataTransform.outboundTransform(topic, data) : data;\n    if (this.publishConfig == null) {\n      throw Error('PublishError.Uninitialized');\n    }\n    // Prepare raw message with user's publishConfig\n    const {\n      raw: rawMsg,\n      msg\n    } = await buildRawMessage(this.publishConfig, topic, data, transformedData);\n    // calculate the message id from the un-transformed data\n    const msgId = await this.msgIdFn(msg);\n    const msgIdStr = this.msgIdToStrFn(msgId);\n    // Current publish opt takes precedence global opts, while preserving false value\n    const ignoreDuplicatePublishError = opts?.ignoreDuplicatePublishError ?? this.opts.ignoreDuplicatePublishError;\n    if (this.seenCache.has(msgIdStr)) {\n      // This message has already been seen. We don't re-publish messages that have already\n      // been published on the network.\n      if (ignoreDuplicatePublishError) {\n        this.metrics?.onPublishDuplicateMsg(topic);\n        return {\n          recipients: []\n        };\n      }\n      throw Error('PublishError.Duplicate');\n    }\n    const {\n      tosend,\n      tosendCount\n    } = this.selectPeersToPublish(topic);\n    const willSendToSelf = this.opts.emitSelf === true && this.subscriptions.has(topic);\n    // Current publish opt takes precedence global opts, while preserving false value\n    const allowPublishToZeroPeers = opts?.allowPublishToZeroPeers ?? this.opts.allowPublishToZeroPeers;\n    if (tosend.size === 0 && !allowPublishToZeroPeers && !willSendToSelf) {\n      throw Error('PublishError.InsufficientPeers');\n    }\n    // If the message isn't a duplicate and we have sent it to some peers add it to the\n    // duplicate cache and memcache.\n    this.seenCache.put(msgIdStr);\n    // all published messages are valid\n    this.mcache.put({\n      msgId,\n      msgIdStr\n    }, rawMsg, true);\n    // If the message is anonymous or has a random author add it to the published message ids cache.\n    this.publishedMessageIds.put(msgIdStr);\n    // Send to set of peers aggregated from direct, mesh, fanout\n    for (const id of tosend) {\n      // sendRpc may mutate RPC message on piggyback, create a new message for each peer\n      const sent = this.sendRpc(id, {\n        messages: [rawMsg]\n      });\n      // did not actually send the message\n      if (!sent) {\n        tosend.delete(id);\n      }\n    }\n    this.metrics?.onPublishMsg(topic, tosendCount, tosend.size, rawMsg.data != null ? rawMsg.data.length : 0);\n    // Dispatch the message to the user if we are subscribed to the topic\n    if (willSendToSelf) {\n      tosend.add(this.components.peerId.toString());\n      super.dispatchEvent(new CustomEvent('gossipsub:message', {\n        detail: {\n          propagationSource: this.components.peerId,\n          msgId: msgIdStr,\n          msg\n        }\n      }));\n      // TODO: Add option to switch between emit per topic or all messages in one\n      super.dispatchEvent(new CustomEvent('message', {\n        detail: msg\n      }));\n    }\n    return {\n      recipients: Array.from(tosend.values()).map(str => peerIdFromString(str))\n    };\n  }\n  /**\n   * This function should be called when `asyncValidation` is `true` after\n   * the message got validated by the caller. Messages are stored in the `mcache` and\n   * validation is expected to be fast enough that the messages should still exist in the cache.\n   * There are three possible validation outcomes and the outcome is given in acceptance.\n   *\n   * If acceptance = `MessageAcceptance.Accept` the message will get propagated to the\n   * network. The `propagation_source` parameter indicates who the message was received by and\n   * will not be forwarded back to that peer.\n   *\n   * If acceptance = `MessageAcceptance.Reject` the message will be deleted from the memcache\n   * and the P₄ penalty will be applied to the `propagationSource`.\n   *\n   * If acceptance = `MessageAcceptance.Ignore` the message will be deleted from the memcache\n   * but no P₄ penalty will be applied.\n   *\n   * This function will return true if the message was found in the cache and false if was not\n   * in the cache anymore.\n   *\n   * This should only be called once per message.\n   */\n  reportMessageValidationResult(msgId, propagationSource, acceptance) {\n    if (acceptance === TopicValidatorResult.Accept) {\n      const cacheEntry = this.mcache.validate(msgId);\n      this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n      if (cacheEntry != null) {\n        const {\n          message: rawMsg,\n          originatingPeers\n        } = cacheEntry;\n        // message is fully validated inform peer_score\n        this.score.deliverMessage(propagationSource.toString(), msgId, rawMsg.topic);\n        this.forwardMessage(msgId, cacheEntry.message, propagationSource.toString(), originatingPeers);\n        this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n      }\n      // else, Message not in cache. Ignoring forwarding\n    }\n    // Not valid\n    else {\n      const cacheEntry = this.mcache.remove(msgId);\n      this.metrics?.onReportValidationMcacheHit(cacheEntry !== null);\n      if (cacheEntry) {\n        const rejectReason = rejectReasonFromAcceptance(acceptance);\n        const {\n          message: rawMsg,\n          originatingPeers\n        } = cacheEntry;\n        // Tell peer_score about reject\n        // Reject the original source, and any duplicates we've seen from other peers.\n        this.score.rejectMessage(propagationSource.toString(), msgId, rawMsg.topic, rejectReason);\n        for (const peer of originatingPeers) {\n          this.score.rejectMessage(peer, msgId, rawMsg.topic, rejectReason);\n        }\n        this.metrics?.onReportValidation(rawMsg.topic, acceptance);\n      }\n      // else, Message not in cache. Ignoring forwarding\n    }\n  }\n  /**\n   * Sends a GRAFT message to a peer\n   */\n  sendGraft(id, topic) {\n    const graft = [{\n      topicID: topic\n    }];\n    this.sendRpc(id, {\n      control: {\n        graft\n      }\n    });\n  }\n  /**\n   * Sends a PRUNE message to a peer\n   */\n  async sendPrune(id, topic) {\n    const prune = [await this.makePrune(id, topic, this.opts.doPX)];\n    this.sendRpc(id, {\n      control: {\n        prune\n      }\n    });\n  }\n  /**\n   * Send an rpc object to a peer\n   */\n  sendRpc(id, rpc) {\n    const outboundStream = this.streamsOutbound.get(id);\n    if (!outboundStream) {\n      this.log(`Cannot send RPC to ${id} as there is no open stream to it available`);\n      return false;\n    }\n    // piggyback control message retries\n    const ctrl = this.control.get(id);\n    if (ctrl) {\n      this.piggybackControl(id, rpc, ctrl);\n      this.control.delete(id);\n    }\n    // piggyback gossip\n    const ihave = this.gossip.get(id);\n    if (ihave) {\n      this.piggybackGossip(id, rpc, ihave);\n      this.gossip.delete(id);\n    }\n    const rpcBytes = RPC.encode(rpc).finish();\n    try {\n      outboundStream.push(rpcBytes);\n    } catch (e) {\n      this.log.error(`Cannot send rpc to ${id}`, e);\n      // if the peer had control messages or gossip, re-attach\n      if (ctrl) {\n        this.control.set(id, ctrl);\n      }\n      if (ihave) {\n        this.gossip.set(id, ihave);\n      }\n      return false;\n    }\n    this.metrics?.onRpcSent(rpc, rpcBytes.length);\n    return true;\n  }\n  /** Mutates `outRpc` adding graft and prune control messages */\n  piggybackControl(id, outRpc, ctrl) {\n    if (ctrl.graft) {\n      if (!outRpc.control) outRpc.control = {};\n      if (!outRpc.control.graft) outRpc.control.graft = [];\n      for (const graft of ctrl.graft) {\n        if (graft.topicID && this.mesh.get(graft.topicID)?.has(id)) {\n          outRpc.control.graft.push(graft);\n        }\n      }\n    }\n    if (ctrl.prune) {\n      if (!outRpc.control) outRpc.control = {};\n      if (!outRpc.control.prune) outRpc.control.prune = [];\n      for (const prune of ctrl.prune) {\n        if (prune.topicID && !this.mesh.get(prune.topicID)?.has(id)) {\n          outRpc.control.prune.push(prune);\n        }\n      }\n    }\n  }\n  /** Mutates `outRpc` adding ihave control messages */\n  piggybackGossip(id, outRpc, ihave) {\n    if (!outRpc.control) outRpc.control = {};\n    outRpc.control.ihave = ihave;\n  }\n  /**\n   * Send graft and prune messages\n   *\n   * @param tograft - peer id => topic[]\n   * @param toprune - peer id => topic[]\n   */\n  async sendGraftPrune(tograft, toprune, noPX) {\n    const doPX = this.opts.doPX;\n    for (const [id, topics] of tograft) {\n      const graft = topics.map(topicID => ({\n        topicID\n      }));\n      let prune = [];\n      // If a peer also has prunes, process them now\n      const pruning = toprune.get(id);\n      if (pruning) {\n        prune = await Promise.all(pruning.map(async topicID => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n        toprune.delete(id);\n      }\n      this.sendRpc(id, {\n        control: {\n          graft,\n          prune\n        }\n      });\n    }\n    for (const [id, topics] of toprune) {\n      const prune = await Promise.all(topics.map(async topicID => await this.makePrune(id, topicID, doPX && !(noPX.get(id) ?? false))));\n      this.sendRpc(id, {\n        control: {\n          prune\n        }\n      });\n    }\n  }\n  /**\n   * Emits gossip - Send IHAVE messages to a random set of gossip peers\n   */\n  emitGossip(peersToGossipByTopic) {\n    const gossipIDsByTopic = this.mcache.getGossipIDs(new Set(peersToGossipByTopic.keys()));\n    for (const [topic, peersToGossip] of peersToGossipByTopic) {\n      this.doEmitGossip(topic, peersToGossip, gossipIDsByTopic.get(topic) ?? []);\n    }\n  }\n  /**\n   * Send gossip messages to GossipFactor peers above threshold with a minimum of D_lazy\n   * Peers are randomly selected from the heartbeat which exclude mesh + fanout peers\n   * We also exclude direct peers, as there is no reason to emit gossip to them\n   * @param topic\n   * @param candidateToGossip - peers to gossip\n   * @param messageIDs - message ids to gossip\n   */\n  doEmitGossip(topic, candidateToGossip, messageIDs) {\n    if (!messageIDs.length) {\n      return;\n    }\n    // shuffle to emit in random order\n    shuffle(messageIDs);\n    // if we are emitting more than GossipsubMaxIHaveLength ids, truncate the list\n    if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n      // we do the truncation (with shuffling) per peer below\n      this.log('too many messages for gossip; will truncate IHAVE list (%d messages)', messageIDs.length);\n    }\n    if (!candidateToGossip.size) return;\n    let target = this.opts.Dlazy;\n    const factor = constants.GossipsubGossipFactor * candidateToGossip.size;\n    let peersToGossip = candidateToGossip;\n    if (factor > target) {\n      target = factor;\n    }\n    if (target > peersToGossip.size) {\n      target = peersToGossip.size;\n    } else {\n      // only shuffle if needed\n      peersToGossip = shuffle(Array.from(peersToGossip)).slice(0, target);\n    }\n    // Emit the IHAVE gossip to the selected peers up to the target\n    peersToGossip.forEach(id => {\n      let peerMessageIDs = messageIDs;\n      if (messageIDs.length > constants.GossipsubMaxIHaveLength) {\n        // shuffle and slice message IDs per peer so that we emit a different set for each peer\n        // we have enough reduncancy in the system that this will significantly increase the message\n        // coverage when we do truncate\n        peerMessageIDs = shuffle(peerMessageIDs.slice()).slice(0, constants.GossipsubMaxIHaveLength);\n      }\n      this.pushGossip(id, {\n        topicID: topic,\n        messageIDs: peerMessageIDs\n      });\n    });\n  }\n  /**\n   * Flush gossip and control messages\n   */\n  flush() {\n    // send gossip first, which will also piggyback control\n    for (const [peer, ihave] of this.gossip.entries()) {\n      this.gossip.delete(peer);\n      this.sendRpc(peer, {\n        control: {\n          ihave\n        }\n      });\n    }\n    // send the remaining control messages\n    for (const [peer, control] of this.control.entries()) {\n      this.control.delete(peer);\n      this.sendRpc(peer, {\n        control: {\n          graft: control.graft,\n          prune: control.prune\n        }\n      });\n    }\n  }\n  /**\n   * Adds new IHAVE messages to pending gossip\n   */\n  pushGossip(id, controlIHaveMsgs) {\n    this.log('Add gossip to %s', id);\n    const gossip = this.gossip.get(id) || [];\n    this.gossip.set(id, gossip.concat(controlIHaveMsgs));\n  }\n  /**\n   * Make a PRUNE control message for a peer in a topic\n   */\n  async makePrune(id, topic, doPX) {\n    this.score.prune(id, topic);\n    if (this.streamsOutbound.get(id).protocol === constants.GossipsubIDv10) {\n      // Gossipsub v1.0 -- no backoff, the peer won't be able to parse it anyway\n      return {\n        topicID: topic,\n        peers: []\n      };\n    }\n    // backoff is measured in seconds\n    // GossipsubPruneBackoff is measured in milliseconds\n    // The protobuf has it as a uint64\n    const backoff = this.opts.pruneBackoff / 1000;\n    if (!doPX) {\n      return {\n        topicID: topic,\n        peers: [],\n        backoff: backoff\n      };\n    }\n    // select peers for Peer eXchange\n    const peers = this.getRandomGossipPeers(topic, this.opts.prunePeers, xid => {\n      return xid !== id && this.score.score(xid) >= 0;\n    });\n    const px = await Promise.all(Array.from(peers).map(async peerId => {\n      // see if we have a signed record to send back; if we don't, just send\n      // the peer ID and let the pruned peer find them in the DHT -- we can't trust\n      // unsigned address records through PX anyways\n      // Finding signed records in the DHT is not supported at the time of writing in js-libp2p\n      const id = peerIdFromString(peerId);\n      return {\n        peerID: id.toBytes(),\n        signedPeerRecord: await this.components.peerStore.addressBook.getRawEnvelope(id)\n      };\n    }));\n    return {\n      topicID: topic,\n      peers: px,\n      backoff: backoff\n    };\n  }\n  /**\n   * Maintains the mesh and fanout maps in gossipsub.\n   */\n  async heartbeat() {\n    const {\n      D,\n      Dlo,\n      Dhi,\n      Dscore,\n      Dout,\n      fanoutTTL\n    } = this.opts;\n    this.heartbeatTicks++;\n    // cache scores throught the heartbeat\n    const scores = new Map();\n    const getScore = id => {\n      let s = scores.get(id);\n      if (s === undefined) {\n        s = this.score.score(id);\n        scores.set(id, s);\n      }\n      return s;\n    };\n    // peer id => topic[]\n    const tograft = new Map();\n    // peer id => topic[]\n    const toprune = new Map();\n    // peer id => don't px\n    const noPX = new Map();\n    // clean up expired backoffs\n    this.clearBackoff();\n    // clean up peerhave/iasked counters\n    this.peerhave.clear();\n    this.metrics?.cacheSize.set({\n      cache: 'iasked'\n    }, this.iasked.size);\n    this.iasked.clear();\n    // apply IWANT request penalties\n    this.applyIwantPenalties();\n    // ensure direct peers are connected\n    if (this.heartbeatTicks % this.opts.directConnectTicks === 0) {\n      // we only do this every few ticks to allow pending connections to complete and account for restarts/downtime\n      await this.directConnect();\n    }\n    // EXTRA: Prune caches\n    this.fastMsgIdCache?.prune();\n    this.seenCache.prune();\n    this.gossipTracer.prune();\n    this.publishedMessageIds.prune();\n    /**\n     * Instead of calling getRandomGossipPeers multiple times to:\n     *   + get more mesh peers\n     *   + more outbound peers\n     *   + oppportunistic grafting\n     *   + emitGossip\n     *\n     * We want to loop through the topic peers only a single time and prepare gossip peers for all topics to improve the performance\n     */\n    const peersToGossipByTopic = new Map();\n    // maintain the mesh for topics we have joined\n    this.mesh.forEach((peers, topic) => {\n      const peersInTopic = this.topics.get(topic);\n      const candidateMeshPeers = new Set();\n      const peersToGossip = new Set();\n      peersToGossipByTopic.set(topic, peersToGossip);\n      if (peersInTopic) {\n        const shuffledPeers = shuffle(Array.from(peersInTopic));\n        const backoff = this.backoff.get(topic);\n        for (const id of shuffledPeers) {\n          const peerStreams = this.streamsOutbound.get(id);\n          if (peerStreams && this.multicodecs.includes(peerStreams.protocol) && !peers.has(id) && !this.direct.has(id)) {\n            const score = getScore(id);\n            if ((!backoff || !backoff.has(id)) && score >= 0) candidateMeshPeers.add(id);\n            // instead of having to find gossip peers after heartbeat which require another loop\n            // we prepare peers to gossip in a topic within heartbeat to improve performance\n            if (score >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n          }\n        }\n      }\n      // prune/graft helper functions (defined per topic)\n      const prunePeer = (id, reason) => {\n        this.log('HEARTBEAT: Remove mesh link to %s in %s', id, topic);\n        // no need to update peer score here as we do it in makePrune\n        // add prune backoff record\n        this.addBackoff(id, topic);\n        // remove peer from mesh\n        peers.delete(id);\n        // after pruning a peer from mesh, we want to gossip topic to it if its score meet the gossip threshold\n        if (getScore(id) >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n        this.metrics?.onRemoveFromMesh(topic, reason, 1);\n        // add to toprune\n        const topics = toprune.get(id);\n        if (!topics) {\n          toprune.set(id, [topic]);\n        } else {\n          topics.push(topic);\n        }\n      };\n      const graftPeer = (id, reason) => {\n        this.log('HEARTBEAT: Add mesh link to %s in %s', id, topic);\n        // update peer score\n        this.score.graft(id, topic);\n        // add peer to mesh\n        peers.add(id);\n        // when we add a new mesh peer, we don't want to gossip messages to it\n        peersToGossip.delete(id);\n        this.metrics?.onAddToMesh(topic, reason, 1);\n        // add to tograft\n        const topics = tograft.get(id);\n        if (!topics) {\n          tograft.set(id, [topic]);\n        } else {\n          topics.push(topic);\n        }\n      };\n      // drop all peers with negative score, without PX\n      peers.forEach(id => {\n        const score = getScore(id);\n        // Record the score\n        if (score < 0) {\n          this.log('HEARTBEAT: Prune peer %s with negative score: score=%d, topic=%s', id, score, topic);\n          prunePeer(id, ChurnReason.BadScore);\n          noPX.set(id, true);\n        }\n      });\n      // do we have enough peers?\n      if (peers.size < Dlo) {\n        const ineed = D - peers.size;\n        // slice up to first `ineed` items and remove them from candidateMeshPeers\n        // same to `const newMeshPeers = candidateMeshPeers.slice(0, ineed)`\n        const newMeshPeers = removeFirstNItemsFromSet(candidateMeshPeers, ineed);\n        newMeshPeers.forEach(p => {\n          graftPeer(p, InclusionReason.NotEnough);\n        });\n      }\n      // do we have to many peers?\n      if (peers.size > Dhi) {\n        let peersArray = Array.from(peers);\n        // sort by score\n        peersArray.sort((a, b) => getScore(b) - getScore(a));\n        // We keep the first D_score peers by score and the remaining up to D randomly\n        // under the constraint that we keep D_out peers in the mesh (if we have that many)\n        peersArray = peersArray.slice(0, Dscore).concat(shuffle(peersArray.slice(Dscore)));\n        // count the outbound peers we are keeping\n        let outbound = 0;\n        peersArray.slice(0, D).forEach(p => {\n          if (this.outbound.get(p)) {\n            outbound++;\n          }\n        });\n        // if it's less than D_out, bubble up some outbound peers from the random selection\n        if (outbound < Dout) {\n          const rotate = i => {\n            // rotate the peersArray to the right and put the ith peer in the front\n            const p = peersArray[i];\n            for (let j = i; j > 0; j--) {\n              peersArray[j] = peersArray[j - 1];\n            }\n            peersArray[0] = p;\n          };\n          // first bubble up all outbound peers already in the selection to the front\n          if (outbound > 0) {\n            let ihave = outbound;\n            for (let i = 1; i < D && ihave > 0; i++) {\n              if (this.outbound.get(peersArray[i])) {\n                rotate(i);\n                ihave--;\n              }\n            }\n          }\n          // now bubble up enough outbound peers outside the selection to the front\n          let ineed = D - outbound;\n          for (let i = D; i < peersArray.length && ineed > 0; i++) {\n            if (this.outbound.get(peersArray[i])) {\n              rotate(i);\n              ineed--;\n            }\n          }\n        }\n        // prune the excess peers\n        peersArray.slice(D).forEach(p => {\n          prunePeer(p, ChurnReason.Excess);\n        });\n      }\n      // do we have enough outbound peers?\n      if (peers.size >= Dlo) {\n        // count the outbound peers we have\n        let outbound = 0;\n        peers.forEach(p => {\n          if (this.outbound.get(p)) {\n            outbound++;\n          }\n        });\n        // if it's less than D_out, select some peers with outbound connections and graft them\n        if (outbound < Dout) {\n          const ineed = Dout - outbound;\n          const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, id => this.outbound.get(id) === true);\n          newMeshPeers.forEach(p => {\n            graftPeer(p, InclusionReason.Outbound);\n          });\n        }\n      }\n      // should we try to improve the mesh with opportunistic grafting?\n      if (this.heartbeatTicks % this.opts.opportunisticGraftTicks === 0 && peers.size > 1) {\n        // Opportunistic grafting works as follows: we check the median score of peers in the\n        // mesh; if this score is below the opportunisticGraftThreshold, we select a few peers at\n        // random with score over the median.\n        // The intention is to (slowly) improve an underperforming mesh by introducing good\n        // scoring peers that may have been gossiping at us. This allows us to get out of sticky\n        // situations where we are stuck with poor peers and also recover from churn of good peers.\n        // now compute the median peer score in the mesh\n        const peersList = Array.from(peers).sort((a, b) => getScore(a) - getScore(b));\n        const medianIndex = Math.floor(peers.size / 2);\n        const medianScore = getScore(peersList[medianIndex]);\n        // if the median score is below the threshold, select a better peer (if any) and GRAFT\n        if (medianScore < this.opts.scoreThresholds.opportunisticGraftThreshold) {\n          const ineed = this.opts.opportunisticGraftPeers;\n          const newMeshPeers = removeItemsFromSet(candidateMeshPeers, ineed, id => getScore(id) > medianScore);\n          for (const id of newMeshPeers) {\n            this.log('HEARTBEAT: Opportunistically graft peer %s on topic %s', id, topic);\n            graftPeer(id, InclusionReason.Opportunistic);\n          }\n        }\n      }\n    });\n    // expire fanout for topics we haven't published to in a while\n    const now = Date.now();\n    this.fanoutLastpub.forEach((lastpb, topic) => {\n      if (lastpb + fanoutTTL < now) {\n        this.fanout.delete(topic);\n        this.fanoutLastpub.delete(topic);\n      }\n    });\n    // maintain our fanout for topics we are publishing but we have not joined\n    this.fanout.forEach((fanoutPeers, topic) => {\n      // checks whether our peers are still in the topic and have a score above the publish threshold\n      const topicPeers = this.topics.get(topic);\n      fanoutPeers.forEach(id => {\n        if (!topicPeers.has(id) || getScore(id) < this.opts.scoreThresholds.publishThreshold) {\n          fanoutPeers.delete(id);\n        }\n      });\n      const peersInTopic = this.topics.get(topic);\n      const candidateFanoutPeers = [];\n      // the fanout map contains topics to which we are not subscribed.\n      const peersToGossip = new Set();\n      peersToGossipByTopic.set(topic, peersToGossip);\n      if (peersInTopic) {\n        const shuffledPeers = shuffle(Array.from(peersInTopic));\n        for (const id of shuffledPeers) {\n          const peerStreams = this.streamsOutbound.get(id);\n          if (peerStreams && this.multicodecs.includes(peerStreams.protocol) && !fanoutPeers.has(id) && !this.direct.has(id)) {\n            const score = getScore(id);\n            if (score >= this.opts.scoreThresholds.publishThreshold) candidateFanoutPeers.push(id);\n            // instead of having to find gossip peers after heartbeat which require another loop\n            // we prepare peers to gossip in a topic within heartbeat to improve performance\n            if (score >= this.opts.scoreThresholds.gossipThreshold) peersToGossip.add(id);\n          }\n        }\n      }\n      // do we need more peers?\n      if (fanoutPeers.size < D) {\n        const ineed = D - fanoutPeers.size;\n        candidateFanoutPeers.slice(0, ineed).forEach(id => {\n          fanoutPeers.add(id);\n          peersToGossip?.delete(id);\n        });\n      }\n    });\n    this.emitGossip(peersToGossipByTopic);\n    // send coalesced GRAFT/PRUNE messages (will piggyback gossip)\n    await this.sendGraftPrune(tograft, toprune, noPX);\n    // flush pending gossip that wasn't piggybacked above\n    this.flush();\n    // advance the message history window\n    this.mcache.shift();\n    this.dispatchEvent(new CustomEvent('gossipsub:heartbeat'));\n  }\n  /**\n   * Given a topic, returns up to count peers subscribed to that topic\n   * that pass an optional filter function\n   *\n   * @param topic\n   * @param count\n   * @param filter - a function to filter acceptable peers\n   */\n  getRandomGossipPeers(topic, count, filter = () => true) {\n    const peersInTopic = this.topics.get(topic);\n    if (!peersInTopic) {\n      return new Set();\n    }\n    // Adds all peers using our protocol\n    // that also pass the filter function\n    let peers = [];\n    peersInTopic.forEach(id => {\n      const peerStreams = this.streamsOutbound.get(id);\n      if (!peerStreams) {\n        return;\n      }\n      if (this.multicodecs.includes(peerStreams.protocol) && filter(id)) {\n        peers.push(id);\n      }\n    });\n    // Pseudo-randomly shuffles peers\n    peers = shuffle(peers);\n    if (count > 0 && peers.length > count) {\n      peers = peers.slice(0, count);\n    }\n    return new Set(peers);\n  }\n  onScrapeMetrics(metrics) {\n    /* Data structure sizes */\n    metrics.mcacheSize.set(this.mcache.size);\n    metrics.mcacheNotValidatedCount.set(this.mcache.notValidatedCount);\n    // Arbitrary size\n    metrics.cacheSize.set({\n      cache: 'direct'\n    }, this.direct.size);\n    metrics.cacheSize.set({\n      cache: 'seenCache'\n    }, this.seenCache.size);\n    metrics.cacheSize.set({\n      cache: 'fastMsgIdCache'\n    }, this.fastMsgIdCache?.size ?? 0);\n    metrics.cacheSize.set({\n      cache: 'publishedMessageIds'\n    }, this.publishedMessageIds.size);\n    metrics.cacheSize.set({\n      cache: 'mcache'\n    }, this.mcache.size);\n    metrics.cacheSize.set({\n      cache: 'score'\n    }, this.score.size);\n    metrics.cacheSize.set({\n      cache: 'gossipTracer.promises'\n    }, this.gossipTracer.size);\n    metrics.cacheSize.set({\n      cache: 'gossipTracer.requests'\n    }, this.gossipTracer.requestMsByMsgSize);\n    // Bounded by topic\n    metrics.cacheSize.set({\n      cache: 'topics'\n    }, this.topics.size);\n    metrics.cacheSize.set({\n      cache: 'subscriptions'\n    }, this.subscriptions.size);\n    metrics.cacheSize.set({\n      cache: 'mesh'\n    }, this.mesh.size);\n    metrics.cacheSize.set({\n      cache: 'fanout'\n    }, this.fanout.size);\n    // Bounded by peer\n    metrics.cacheSize.set({\n      cache: 'peers'\n    }, this.peers.size);\n    metrics.cacheSize.set({\n      cache: 'streamsOutbound'\n    }, this.streamsOutbound.size);\n    metrics.cacheSize.set({\n      cache: 'streamsInbound'\n    }, this.streamsInbound.size);\n    metrics.cacheSize.set({\n      cache: 'acceptFromWhitelist'\n    }, this.acceptFromWhitelist.size);\n    metrics.cacheSize.set({\n      cache: 'gossip'\n    }, this.gossip.size);\n    metrics.cacheSize.set({\n      cache: 'control'\n    }, this.control.size);\n    metrics.cacheSize.set({\n      cache: 'peerhave'\n    }, this.peerhave.size);\n    metrics.cacheSize.set({\n      cache: 'outbound'\n    }, this.outbound.size);\n    // 2D nested data structure\n    let backoffSize = 0;\n    for (const backoff of this.backoff.values()) {\n      backoffSize += backoff.size;\n    }\n    metrics.cacheSize.set({\n      cache: 'backoff'\n    }, backoffSize);\n    // Peer counts\n    for (const [topicStr, peers] of this.topics) {\n      metrics.topicPeersCount.set({\n        topicStr\n      }, peers.size);\n    }\n    for (const [topicStr, peers] of this.mesh) {\n      metrics.meshPeerCounts.set({\n        topicStr\n      }, peers.size);\n    }\n    // Peer scores\n    const scores = [];\n    const scoreByPeer = new Map();\n    metrics.behaviourPenalty.reset();\n    for (const peerIdStr of this.peers.keys()) {\n      const score = this.score.score(peerIdStr);\n      scores.push(score);\n      scoreByPeer.set(peerIdStr, score);\n      metrics.behaviourPenalty.observe(this.score.peerStats.get(peerIdStr)?.behaviourPenalty ?? 0);\n    }\n    metrics.registerScores(scores, this.opts.scoreThresholds);\n    // Breakdown score per mesh topicLabel\n    metrics.registerScorePerMesh(this.mesh, scoreByPeer);\n    // Breakdown on each score weight\n    const sw = computeAllPeersScoreWeights(this.peers.keys(), this.score.peerStats, this.score.params, this.score.peerIPs, metrics.topicStrToLabel);\n    metrics.registerScoreWeights(sw);\n  }\n}\nGossipSub.multicodec = constants.GossipsubIDv11;\nexport function gossipsub(init = {}) {\n  return components => new GossipSub(components, init);\n}","map":{"version":3,"names":["pipe","RecordEnvelope","peerIdFromBytes","peerIdFromString","logger","createTopology","CustomEvent","EventEmitter","MessageCache","RPC","constants","shuffle","messageIdToString","PeerScore","createPeerScoreParams","createPeerScoreThresholds","IWantTracer","SimpleTimeCache","ACCEPT_FROM_WHITELIST_DURATION_MS","ACCEPT_FROM_WHITELIST_MAX_MESSAGES","ACCEPT_FROM_WHITELIST_THRESHOLD_SCORE","ChurnReason","getMetrics","IHaveIgnoreReason","InclusionReason","ScorePenalty","ValidateError","MessageStatus","RejectReason","rejectReasonFromAcceptance","buildRawMessage","validateToRawMessage","msgIdFnStrictNoSign","msgIdFnStrictSign","computeAllPeersScoreWeights","getPublishConfigFromPeerId","StrictNoSign","StrictSign","TopicValidatorResult","removeFirstNItemsFromSet","removeItemsFromSet","pushable","InboundStream","OutboundStream","decodeRpc","defaultDecodeRpcLimits","multiaddrToIPStr","multicodec","GossipsubIDv11","GossipStatusCode","GossipSub","constructor","components","options","multicodecs","GossipsubIDv10","peers","Set","streamsInbound","Map","streamsOutbound","outboundInflightQueue","objectMode","direct","floodsubPeers","acceptFromWhitelist","topics","subscriptions","mesh","fanout","fanoutLastpub","gossip","control","peerhave","iasked","backoff","outbound","topicValidators","heartbeatTicks","directPeerInitial","status","code","stopped","heartbeatTimer","runHeartbeat","timer","metrics","heartbeatDuration","startTimer","heartbeat","catch","err","log","finally","started","clearTimeout","heartbeatTimeout","msToNextHeartbeat","opts","heartbeatInterval","Date","now","hearbeatStartMs","heartbeatSkipped","inc","setTimeout","fallbackToFloodsub","floodPublish","doPX","directPeers","D","GossipsubD","Dlo","GossipsubDlo","Dhi","GossipsubDhi","Dscore","GossipsubDscore","Dout","GossipsubDout","Dlazy","GossipsubDlazy","GossipsubHeartbeatInterval","fanoutTTL","GossipsubFanoutTTL","mcacheLength","GossipsubHistoryLength","mcacheGossip","GossipsubHistoryGossip","seenTTL","GossipsubSeenTTL","gossipsubIWantFollowupMs","GossipsubIWantFollowupTime","prunePeers","GossipsubPrunePeers","pruneBackoff","GossipsubPruneBackoff","graftFloodThreshold","GossipsubGraftFloodThreshold","opportunisticGraftPeers","GossipsubOpportunisticGraftPeers","opportunisticGraftTicks","GossipsubOpportunisticGraftTicks","directConnectTicks","GossipsubDirectConnectTicks","scoreParams","scoreThresholds","decodeRpcLimits","globalSignaturePolicy","push","FloodsubID","debugName","map","p","id","toString","seenCache","validityMs","publishedMessageIds","msgIdFn","fastMsgIdFn","fastMsgIdCache","msgIdToStrFn","mcache","messageCache","dataTransform","metricsRegister","metricsTopicStrToLabel","Error","maxMeshMessageDeliveriesWindowMs","Math","max","Object","values","topicParam","meshMessageDeliveriesWindow","DEFAULT_METRIC_MESH_MESSAGE_DELIVERIES_WINDOWS","gossipPromiseExpireSec","behaviourPenaltyThreshold","maxMeshMessageDeliveriesWindowSec","mcacheSize","addCollect","onScrapeMetrics","protocol","protocolsEnabled","set","gossipTracer","score","scoreCacheValidityMs","maxInboundStreams","maxOutboundStreams","allowedTopics","getPeers","keys","str","isStarted","start","publishConfig","peerId","source","connection","createOutboundStream","e","error","Promise","all","peerStore","addressBook","add","addrs","registrar","handle","onIncomingStream","bind","topology","onConnect","onPeerConnected","onDisconnect","onPeerDisconnected","registrarTopologyIds","register","GossipsubHeartbeatInitialDelay","resolve","then","Array","from","connect","GossipsubDirectConnectInitialDelay","stop","forEach","unregister","end","outboundStream","close","clear","inboundStream","cancel","dumpPeerScoreStats","stream","remotePeer","addPeer","stat","direction","remoteAddr","createInboundStream","newConnectionCount","removePeer","has","newStream","maxBufferSize","maxOutboundBufferSize","peersPerProtocol","size","sendSubscriptions","priorInboundStream","get","undefined","maxDataLength","maxInboundDataLength","pipePeerReadStream","addr","currentIP","addIP","delete","topicStr","onRemoveFromMesh","Dc","getMeshPeers","topic","peersInTopic","getSubscribers","getTopics","data","rpcBytes","subarray","rpc","onRpcRecv","length","awaitRpcHandler","handleReceivedRpc","onRpcRecvError","onRpcDataError","onPeerReadStreamError","handlePeerReadStreamError","acceptFrom","rpcRecvNotAccepted","messages","ihave","iwant","graft","prune","subOpt","subscribe","handleReceivedSubscription","dispatchEvent","detail","message","handleReceivedMessagePromise","handleReceivedMessage","onMsgRecvError","awaitRpcMessageHandler","handleControlMessage","topicSet","rpcMsg","onMsgRecvPreValidation","validationResult","validateReceivedMessage","onMsgRecvResult","duplicate","duplicateMessage","msgIdStr","deliverMessage","observeDuplicate","invalid","rejectMessage","reason","rejectInvalidMessage","onMsgRecvInvalid","valid","validateMessage","messageId","put","asyncValidation","isFromSelf","equals","emitSelf","propagationSource","msgId","msg","forwardMessage","fastMsgIdStr","msgIdCached","inboundTransform","TransformFailed","collision","fastMsgIdCacheCollision","topicValidator","acceptance","errCode","ERR_TOPIC_VALIDATOR_IGNORE","Ignore","ERR_TOPIC_VALIDATOR_REJECT","Reject","Accept","getScore","toPeer","sendRpc","controlMsg","handleIHave","handleIWant","handleGraft","handlePrune","sent","iwantMessageIds","messageIDs","addPromise","iwantPromiseUntracked","entry","messagesAccepted","acceptUntil","graylistThreshold","gossipThreshold","ihaveRcvIgnored","LowScore","GossipsubMaxIHaveMessages","MaxIhave","GossipsubMaxIHaveLength","MaxIasked","topicID","idonthave","onIhaveRcv","iask","iwantList","slice","iwantByTopic","iwantDonthave","getWithIWantCount","count","GossipsubGossipRetransmission","onIwantRcv","peersInMesh","expire","addPenalty","GraftBackoff","floodCutoff","addBackoff","onAddToMesh","Subscribed","makePrune","Unsub","doAddBackoff","acceptPXThreshold","pxConnect","interval","existingExpire","applyIwantPenalties","getBrokenPromises","BrokenPromise","clearBackoff","GossipsubPruneBackoffTicks","directConnect","toconnect","pi","peerID","signedPeerRecord","envelope","openAndCertify","eid","consumePeerRecord","connectionManager","openConnection","getTopologies","join","unsubscribe","wasSubscribed","leave","onJoin","toAdd","fanoutPeers","Fanout","fanoutCount","newPeers","getRandomGossipPeers","peer","Random","sendGraft","onLeave","meshPeers","sendPrune","selectPeersToForward","excludePeers","tosend","publishThreshold","selectPeersToPublish","tosendCount","floodsub","newFanoutPeers","rawMsg","onForwardMsg","publish","transformedData","outboundTransform","raw","ignoreDuplicatePublishError","onPublishDuplicateMsg","recipients","willSendToSelf","allowPublishToZeroPeers","onPublishMsg","reportMessageValidationResult","cacheEntry","validate","onReportValidationMcacheHit","originatingPeers","onReportValidation","remove","rejectReason","ctrl","piggybackControl","piggybackGossip","encode","finish","onRpcSent","outRpc","sendGraftPrune","tograft","toprune","noPX","pruning","emitGossip","peersToGossipByTopic","gossipIDsByTopic","getGossipIDs","peersToGossip","doEmitGossip","candidateToGossip","target","factor","GossipsubGossipFactor","peerMessageIDs","pushGossip","flush","entries","controlIHaveMsgs","concat","xid","px","toBytes","getRawEnvelope","scores","s","cacheSize","cache","candidateMeshPeers","shuffledPeers","peerStreams","includes","prunePeer","graftPeer","BadScore","ineed","newMeshPeers","NotEnough","peersArray","sort","a","b","rotate","i","j","Excess","Outbound","peersList","medianIndex","floor","medianScore","opportunisticGraftThreshold","Opportunistic","lastpb","topicPeers","candidateFanoutPeers","shift","filter","mcacheNotValidatedCount","notValidatedCount","requestMsByMsgSize","backoffSize","topicPeersCount","meshPeerCounts","scoreByPeer","behaviourPenalty","reset","peerIdStr","observe","peerStats","registerScores","registerScorePerMesh","sw","params","peerIPs","topicStrToLabel","registerScoreWeights","gossipsub","init"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}