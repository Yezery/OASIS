{"ast":null,"code":"import last from 'it-last';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single';\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd({\n  addAll\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add(entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options));\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug');\n    }\n    return result;\n  }\n  return add;\n}","map":{"version":3,"names":["last","normaliseInput","createAdd","addAll","add","entry","options","result","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/add.js"],"sourcesContent":["import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,SAAS;AAC1B,SAASC,cAAc,QAAQ,8CAA8C;;AAE7E;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC;AAAO,CAAC,EAAE;EACrC;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC;IACA,MAAMC,MAAM,GAAG,MAAMP,IAAI,CAACG,MAAM,CAACF,cAAc,CAACI,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAC;IACjE;IACA;IACA;IACA,IAAIC,MAAM,IAAI,IAAI,EAAE;MAClB,MAAMC,KAAK,CAAC,2DAA2D,CAAC;IAC1E;IAEA,OAAOD,MAAM;EACf;EAEA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}