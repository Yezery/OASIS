{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:metadata-book');\nconst EVENT_NAME = 'change:metadata';\nexport class PeerStoreMetadataBook {\n  /**\n   * The MetadataBook is responsible for keeping metadata\n   * about known peers\n   */\n  constructor(dispatchEvent, store) {\n    this.dispatchEvent = dispatchEvent;\n    this.store = store;\n  }\n  /**\n   * Get the known data of a provided peer\n   */\n  async get(peerId) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('get await read lock');\n    const release = await this.store.lock.readLock();\n    log.trace('get got read lock');\n    try {\n      const peer = await this.store.load(peerId);\n      return peer.metadata;\n    } catch (err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log.trace('get release read lock');\n      release();\n    }\n    return new Map();\n  }\n  /**\n   * Get specific metadata value, if it exists\n   */\n  async getValue(peerId, key) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('getValue await read lock');\n    const release = await this.store.lock.readLock();\n    log.trace('getValue got read lock');\n    try {\n      const peer = await this.store.load(peerId);\n      return peer.metadata.get(key);\n    } catch (err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log.trace('getValue release write lock');\n      release();\n    }\n  }\n  async set(peerId, metadata) {\n    peerId = peerIdFromPeerId(peerId);\n    if (!(metadata instanceof Map)) {\n      log.error('valid metadata must be provided to store data');\n      throw new CodeError('valid metadata must be provided', codes.ERR_INVALID_PARAMETERS);\n    }\n    log.trace('set await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('set got write lock');\n    let peer;\n    try {\n      try {\n        peer = await this.store.load(peerId);\n      } catch (err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n      await this.store.mergeOrCreate(peerId, {\n        metadata\n      });\n    } finally {\n      log.trace('set release write lock');\n      release();\n    }\n    this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n      detail: {\n        peerId,\n        metadata,\n        oldMetadata: peer == null ? new Map() : peer.metadata\n      }\n    }));\n  }\n  /**\n   * Set metadata key and value of a provided peer\n   */\n  async setValue(peerId, key, value) {\n    peerId = peerIdFromPeerId(peerId);\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data');\n      throw new CodeError('valid key and value must be provided', codes.ERR_INVALID_PARAMETERS);\n    }\n    log.trace('setValue await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('setValue got write lock');\n    let peer;\n    let updatedPeer;\n    try {\n      try {\n        peer = await this.store.load(peerId);\n        const existingValue = peer.metadata.get(key);\n        if (existingValue != null && uint8ArrayEquals(value, existingValue)) {\n          return;\n        }\n      } catch (err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n      updatedPeer = await this.store.mergeOrCreate(peerId, {\n        metadata: new Map([[key, value]])\n      });\n    } finally {\n      log.trace('setValue release write lock');\n      release();\n    }\n    this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n      detail: {\n        peerId,\n        metadata: updatedPeer.metadata,\n        oldMetadata: peer == null ? new Map() : peer.metadata\n      }\n    }));\n  }\n  async delete(peerId) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('delete await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('delete got write lock');\n    let peer;\n    try {\n      try {\n        peer = await this.store.load(peerId);\n      } catch (err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n      if (peer != null) {\n        await this.store.patch(peerId, {\n          metadata: new Map()\n        });\n      }\n    } finally {\n      log.trace('delete release write lock');\n      release();\n    }\n    if (peer != null) {\n      this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n        detail: {\n          peerId,\n          metadata: new Map(),\n          oldMetadata: peer.metadata\n        }\n      }));\n    }\n  }\n  async deleteValue(peerId, key) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('deleteValue await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('deleteValue got write lock');\n    let metadata;\n    let peer;\n    try {\n      peer = await this.store.load(peerId);\n      metadata = peer.metadata;\n      metadata.delete(key);\n      await this.store.patch(peerId, {\n        metadata\n      });\n    } catch (err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log.trace('deleteValue release write lock');\n      release();\n    }\n    if (metadata != null) {\n      this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n        detail: {\n          peerId,\n          metadata,\n          oldMetadata: peer == null ? new Map() : peer.metadata\n        }\n      }));\n    }\n  }\n}","map":{"version":3,"names":["logger","CodeError","codes","peerIdFromPeerId","equals","uint8ArrayEquals","CustomEvent","log","EVENT_NAME","PeerStoreMetadataBook","constructor","dispatchEvent","store","get","peerId","trace","release","lock","readLock","peer","load","metadata","err","code","ERR_NOT_FOUND","Map","getValue","key","set","error","ERR_INVALID_PARAMETERS","writeLock","mergeOrCreate","detail","oldMetadata","setValue","value","Uint8Array","updatedPeer","existingValue","delete","patch","deleteValue"],"sources":["../../src/metadata-book.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}