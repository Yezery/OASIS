{"ast":null,"code":"// @ts-ignore\nimport debounce from 'just-debounce-it';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nimport { wantlistSendDebounceMs } from '../constants.js';\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = [];\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n    this.send(msg);\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n    const msg = new Message(false);\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n    this._entries = [];\n    this.addMessage(msg);\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch ( /** @type {any} */err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message);\n      return;\n    }\n    this._log('sending message to peer %s', this.peerId.toString());\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n}","map":{"version":3,"names":["debounce","BitswapMessage","Message","logger","wantlistSendDebounceMs","MsgQueue","constructor","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","sendEntries","_sendEntries","bind","addMessage","msg","empty","send","addEntries","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","connectTo","err","error","toString","message","sendMessage","catch"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"sourcesContent":["\n// @ts-ignore\nimport debounce from 'just-debounce-it'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { logger } from '../utils/index.js'\nimport { wantlistSendDebounceMs } from '../constants.js'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (/** @type {any} */ err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"],"mappings":"AACA;AACA,OAAOA,QAAQ,MAAM,kBAAkB;AACvC,SAASC,cAAc,IAAIC,OAAO,QAAQ,qBAAqB;AAC/D,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,sBAAsB,QAAQ,iBAAiB;;AAExD;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,CAAC;EACpB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,UAAU,EAAEC,WAAW,EAAEC,OAAO,EAAE;IAC7C,IAAI,CAACC,MAAM,GAAGF,WAAW;IACzB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACE,MAAM,GAAG,CAAC;;IAEf;AACJ;AACA;AACA;IACI,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB;IACA,IAAI,CAACC,IAAI,GAAGV,MAAM,CAACI,UAAU,EAAE,UAAU,CAAC;IAC1C,IAAI,CAACO,WAAW,GAAGd,QAAQ,CAAC,IAAI,CAACe,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC,EAAEZ,sBAAsB,CAAC;EACnF;;EAEA;AACF;AACA;EACEa,UAAUA,CAAEC,GAAG,EAAE;IACf,IAAIA,GAAG,CAACC,KAAK,EAAE;MACb;IACF;IAEA,IAAI,CAACC,IAAI,CAACF,GAAG,CAAC;EAChB;;EAEA;AACF;AACA;EACEG,UAAUA,CAAEC,OAAO,EAAE;IACnB,IAAI,CAACV,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACW,MAAM,CAACD,OAAO,CAAC;IAC7C,IAAI,CAACR,WAAW,CAAC,CAAC;EACpB;;EAEA;AACF;AACA;EACEC,YAAYA,CAAA,EAAI;IACd,IAAI,CAAC,IAAI,CAACH,QAAQ,CAACY,MAAM,EAAE;MACzB;IACF;IAEA,MAAMN,GAAG,GAAG,IAAIhB,OAAO,CAAC,KAAK,CAAC;IAC9B,IAAI,CAACU,QAAQ,CAACa,OAAO,CAAEC,KAAK,IAAK;MAC/B,IAAIA,KAAK,CAACC,MAAM,EAAE;QAChBT,GAAG,CAACS,MAAM,CAACD,KAAK,CAACE,GAAG,CAAC;MACvB,CAAC,MAAM;QACLV,GAAG,CAACW,QAAQ,CAACH,KAAK,CAACE,GAAG,EAAEF,KAAK,CAACI,QAAQ,CAAC;MACzC;IACF,CAAC,CAAC;IACF,IAAI,CAAClB,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACK,UAAU,CAACC,GAAG,CAAC;EACtB;;EAEA;AACF;AACA;EACE,MAAME,IAAIA,CAAEF,GAAG,EAAE;IACf,IAAI;MACF,MAAM,IAAI,CAACT,OAAO,CAACsB,SAAS,CAAC,IAAI,CAACrB,MAAM,CAAC;IAC3C,CAAC,CAAC,QAAO,kBAAmBsB,GAAG,EAAE;MAC/B,IAAI,CAACnB,IAAI,CAACoB,KAAK,CAAC,6BAA6B,EAAE,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,EAAEF,GAAG,CAACG,OAAO,CAAC;MACnF;IACF;IAEA,IAAI,CAACtB,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAACH,MAAM,CAACwB,QAAQ,CAAC,CAAC,CAAC;;IAE/D;IACA,IAAI,CAACzB,OAAO,CAAC2B,WAAW,CAAC,IAAI,CAAC1B,MAAM,EAAEQ,GAAG,CAAC,CAACmB,KAAK,CAAEL,GAAG,IAAK;MACxD,IAAI,CAACnB,IAAI,CAACoB,KAAK,CAAC,gBAAgB,EAAED,GAAG,CAACG,OAAO,CAAC;IAChD,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}