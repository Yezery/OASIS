{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent(input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input]);\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input;\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n\n    /** @type {any} value **/\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable);\n    }\n    peekable.push(value);\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob(stream) {\n  const parts = [];\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n  return new Blob(parts);\n}","map":{"version":3,"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/files/normalise-content.browser.js"],"sourcesContent":["import errCode from 'err-code'\nimport itPeekable from 'it-peekable'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport all from 'it-all'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js'\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes\n  if (isBytes(input)) {\n    return new Blob([input])\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()])\n  }\n\n  // Blob | File\n  if (isBlob(input)) {\n    return input\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return itToBlob(peekable)\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))])\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {AsyncIterable<BlobPart>|Iterable<BlobPart>} stream\n */\nasync function itToBlob (stream) {\n  const parts = []\n\n  for await (const chunk of stream) {\n    parts.push(chunk)\n  }\n\n  return new Blob(parts)\n}\n"],"mappings":";;;;AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,GAAG,MAAM,QAAQ;AACxB,SACEC,OAAO,EACPC,MAAM,EACNC,gBAAgB,QACX,YAAY;;AAEnB;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAAEC,KAAK,EAAE;EAC7C;EACA,IAAIJ,OAAO,CAACI,KAAK,CAAC,EAAE;IAClB,OAAO,IAAIC,IAAI,CAAC,CAACD,KAAK,CAAC,CAAC;EAC1B;;EAEA;EACA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM,EAAE;IACxD,OAAO,IAAID,IAAI,CAAC,CAACD,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EACrC;;EAEA;EACA,IAAIN,MAAM,CAACG,KAAK,CAAC,EAAE;IACjB,OAAOA,KAAK;EACd;;EAEA;EACA,IAAIF,gBAAgB,CAACE,KAAK,CAAC,EAAE;IAC3BA,KAAK,GAAGN,iBAAiB,CAACM,KAAK,CAAC;EAClC;;EAEA;EACA,IAAII,MAAM,CAACC,QAAQ,IAAIL,KAAK,IAAII,MAAM,CAACE,aAAa,IAAIN,KAAK,EAAE;IAC7D;IACA,MAAMO,QAAQ,GAAGd,UAAU,CAACO,KAAK,CAAC;;IAElC;IACA,MAAM;MAAEQ,KAAK;MAAEC;IAAK,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAE7C,IAAID,IAAI,EAAE;MACR;MACA,OAAOE,QAAQ,CAACJ,QAAQ,CAAC;IAC3B;IAEAA,QAAQ,CAACK,IAAI,CAACJ,KAAK,CAAC;;IAEpB;IACA,IAAIK,MAAM,CAACC,SAAS,CAACN,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAIP,IAAI,CAAC,CAACc,UAAU,CAACC,IAAI,CAAC,MAAMrB,GAAG,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzD;;IAEA;IACA,IAAIX,OAAO,CAACY,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYN,MAAM,EAAE;MAC1E,OAAOS,QAAQ,CAACJ,QAAQ,CAAC;IAC3B;EACF;EAEA,MAAMf,OAAO,CAAC,IAAIyB,KAAK,CAAE,qBAAoBjB,KAAM,EAAC,CAAC,EAAE,sBAAsB,CAAC;AAChF;;AAEA;AACA;AACA;AACA,eAAeW,QAAQA,CAAEO,MAAM,EAAE;EAC/B,MAAMC,KAAK,GAAG,EAAE;EAEhB,WAAW,MAAMC,KAAK,IAAIF,MAAM,EAAE;IAChCC,KAAK,CAACP,IAAI,CAACQ,KAAK,CAAC;EACnB;EAEA,OAAO,IAAInB,IAAI,CAACkB,KAAK,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}