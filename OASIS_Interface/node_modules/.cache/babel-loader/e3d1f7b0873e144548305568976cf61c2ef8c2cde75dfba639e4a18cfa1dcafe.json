{"ast":null,"code":"import request from \"@/utils/axiosRequest\";\nimport store from '@/store';\nimport { create } from \"ipfs-http-client\";\nimport Web3 from 'web3';\nimport { updateSaleactive, insertSale, deleteSale } from \"./Sale\";\nimport { postOwnerContractList, getOwnerUpSaleNFTs, updateNFTOwnerListAfterBuy } from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\";\n//  IPFS的根URL\n// const baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI();\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode();\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\n// const peerAddress = ipfsPeerAddress()\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n// 服务器IP\nconst IP = store.state.IP;\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({\n    data: MintNFTContractBytecode,\n    arguments: [Name, Symbol, publicGatewayUrl, Maxmums]\n  }).send({\n    from: store.state.currentAddress\n  });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: `${IP}`,\n        port: \"5001\",\n        protocol: \"http\"\n      }).add(uploadFiles[0].raw, {\n        remote: true,\n        pin: true\n      });\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n\n// \nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0;\n  let ipfsHash = await savetoIPFS(uploadFiles);\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`;\n  if (ipfsHash != null) {\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({\n      from: store.state.currentAddress\n    });\n    await NFTContract.methods._currentId().call().then(re => {\n      nftCount = re;\n    });\n    await AddNewNFTToMetaMask(NFTContract._address, nftCount, symbol, `${publicGatewayUrl}${ipfsPath}`);\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        postOwnerContractList({\n          ownerAddress: store.state.currentAddress\n        }).then(re => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return;\n      } else {\n        return;\n      }\n    });\n  }\n}\nexport async function addMint(to, nftAddress, NFTName, description, uploadFiles, seriesName, symbol, maxmums) {\n  let nftCount = 0;\n  let ipfsHash = await savetoIPFS(uploadFiles);\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`;\n  let contract = await getNFTStruct(nftAddress);\n  if (ipfsHash != null) {\n    await contract.methods._currentId().call().then(re => {\n      nftCount = re;\n    });\n    await contract.methods.giveMint(to, NFTName, description, ipfsHash).send({\n      from: store.state.currentAddress\n    });\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": to,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": contract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": seriesName,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        postOwnerContractList({\n          ownerAddress: store.state.currentAddress\n        }).then(re => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return;\n      } else {\n        return;\n      }\n    });\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles);\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\n\nconsole.log(\"初始化WEB3......\");\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n  store.commit(\"setWEB3\", new Web3(window.ethereum));\n  console.log(\"初始化WEB3(MetaMask)完毕\");\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n  store.commit(\"setWEB3\", new Web3(rpcUrl()));\n  console.log(\"初始化WEB3(RPC)完毕\");\n}\nMarketContract = new marketUseWeb3.eth.Contract(MarketContractABI, MarketContractAddress);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = [];\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re;\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList;\n}\nexport async function UpSale(NFT) {\n  let SaleId;\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  };\n  try {\n    //授权\n    let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NFT.nftAddress);\n    await NFTContract.methods.approve(MarketContractAddress, NFT.tokenId).send({\n      from: store.state.currentAddress\n    });\n    await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether'), \"\").send({\n      from: store.state.currentAddress\n    });\n    await MarketContract.methods.getSalesId().call().then(re => {\n      SaleId = re;\n    });\n    await insertSale(Sale);\n    NFT.isActive = true;\n    NFT.price = store.state.Web3.utils.toWei(NFT.price, 'ether');\n    await updateSaleactive(NFT);\n    await postOwnerContractList({\n      ownerAddress: store.state.currentAddress\n    }).then(re => {\n      store.commit(\"setOwnerNFTList\", re.data.data);\n    });\n    return true;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\nexport async function Buy(NFT) {\n  try {\n    await MarketContract.methods.buy(NFT.saleId - 1).send({\n      from: store.state.currentAddress,\n      value: store.state.Web3.utils.toWei(NFT.price, 'ether')\n    });\n    console.log(NFT);\n    await AddNewNFTToMetaMask(NFT.nftAddress, NFT.tokenId.toString(), NFT.symbol, NFT.image);\n    NFT.isActive = false;\n    NFT.currentOwner = store.state.currentAddress;\n    await updateNFTOwnerListAfterBuy(NFT);\n    await deleteSale(NFT);\n    await postOwnerContractList({\n      ownerAddress: store.state.currentAddress\n    }).then(re => {\n      store.commit(\"setOwnerNFTList\", re.data.data);\n    });\n    return true;\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => {\n    FeePercentage = re;\n  });\n  return FeePercentage;\n}\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => {\n      SaleId = re.data.data.saleId;\n    });\n    if (SaleId != undefined) {\n      await MarketContract.methods.cancelSale(SaleId).send({\n        from: store.state.currentAddress\n      });\n      NFT.isActive = false;\n      NFT.price = \"0\";\n      await updateSaleactive(NFT);\n      await deleteSale(NFT);\n      await postOwnerContractList({\n        ownerAddress: store.state.currentAddress\n      }).then(re => {\n        store.commit(\"setOwnerNFTList\", re.data.data);\n      });\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n}\nexport async function AddNewNFTToMetaMask(address, tokenId, symbol, image) {\n  await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC721',\n      options: {\n        address: address,\n        tokenId: tokenId,\n        symbol: symbol,\n        image: JSON.stringify(image)\n      }\n    }\n  }).then(success => {\n    if (success) {\n      console.log(`${JSON.stringify(symbol)} successfully added to wallet!`);\n    } else {\n      throw new Error('Something went wrong.');\n    }\n  }).catch(console.error);\n}","map":{"version":3,"names":["request","store","create","Web3","updateSaleactive","insertSale","deleteSale","postOwnerContractList","getOwnerUpSaleNFTs","updateNFTOwnerListAfterBuy","mintNFTContractABI","mintNFTContractBytecode","marketContractAddress","marketContractABI","ipfsPublicGatewayUrl","rpcUrl","MintNFTContractABI","MintNFTContractBytecode","MarketContractAddress","MarketContractABI","publicGatewayUrl","IP","state","deployNFTContract","Name","Symbol","Maxmums","contract","eth","Contract","NewNFTContractAddress","deploy","data","arguments","send","from","currentAddress","console","log","_address","NFTContract","savetoIPFS","uploadFiles","length","results","host","port","protocol","add","raw","remote","pin","path","err","error","mintNFT","name","symbol","maxmums","NFTName","description","nftCount","ipfsHash","ipfsPath","methods","mint","_currentId","call","then","re","AddNewNFTToMetaMask","url","method","Number","res","status","ownerAddress","commit","addMint","to","nftAddress","seriesName","getNFTStruct","giveMint","MakeNFT","FirstNFTName","Description","MarketContract","marketUseWeb3","window","ethereum","undefined","getSaleList","SaleList","getSales","UpSale","NFT","SaleId","Sale","saleId","NFTOwnerList","approve","tokenId","createSale","utils","toWei","price","getSalesId","isActive","Buy","buy","value","toString","image","currentOwner","getFeePercentage","FeePercentage","feePercentage","DownSale","cancelSale","address","params","type","options","JSON","stringify","success","Error","catch"],"sources":["/Users/yezery/OASIS/OASIS_Interface/src/api/axios/contract.js"],"sourcesContent":["import request from \"@/utils/axiosRequest\"\nimport store from '@/store';\nimport { create } from \"ipfs-http-client\"\nimport Web3 from 'web3'\nimport { updateSaleactive, insertSale, deleteSale, } from \"./Sale\"\nimport { postOwnerContractList, getOwnerUpSaleNFTs, updateNFTOwnerListAfterBuy} from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\"\n//  IPFS的根URL\n// const baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI()\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode()\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\n// const peerAddress = ipfsPeerAddress()\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n// 服务器IP\nconst IP = store.state.IP\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({ data: MintNFTContractBytecode, arguments: [Name, Symbol, publicGatewayUrl, Maxmums] })\n    .send({\n      from: store.state.currentAddress\n    });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: `${IP}`,\n        port: \"5001\",\n        protocol: \"http\",\n      }).add(\n        uploadFiles[0].raw,\n        { remote: true, pin: true, }\n      );\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null\n  }\n}\n\n// \nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0\n  let ipfsHash = await savetoIPFS(uploadFiles)\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`\n  if (ipfsHash != null) {\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({ from: store.state.currentAddress })\n    await NFTContract.methods._currentId().call().then(re => { nftCount = re })\n    await AddNewNFTToMetaMask(NFTContract._address,nftCount,symbol,`${publicGatewayUrl}${ipfsPath}`)\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then( res => {\n      if (res.status == 200) {\n        postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return\n      } else {\n        return\n      }\n    })\n  }\n}\nexport async function addMint(to, nftAddress, NFTName, description, uploadFiles, seriesName, symbol, maxmums) {\n  let nftCount = 0\n  let ipfsHash = await savetoIPFS(uploadFiles)\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`\n  let contract = await getNFTStruct(nftAddress)\n  if (ipfsHash != null) { \n    await contract.methods._currentId().call().then(re => { nftCount = re })\n    await contract.methods.giveMint(to, NFTName, description, ipfsHash).send({ from: store.state.currentAddress })\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": to,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": contract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": seriesName,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n          store.commit(\"setOwnerNFTList\", re.data.data);\n        });\n        return\n      } else {\n        return\n      }\n    })\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles)\n\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\n\nconsole.log(\"初始化WEB3......\");\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n  store.commit(\"setWEB3\", new Web3(window.ethereum));\n  console.log(\"初始化WEB3(MetaMask)完毕\");\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n  store.commit(\"setWEB3\", new Web3(rpcUrl()));\n  console.log(\"初始化WEB3(RPC)完毕\");\n}\n\nMarketContract = new marketUseWeb3.eth.Contract(\n  MarketContractABI,\n  MarketContractAddress\n);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = []\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList\n}\n\nexport async function UpSale(NFT) {\n  let SaleId;\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  }\n  try {\n    //授权\n    let NFTContract = await new store.state.Web3.eth.Contract(\n      MintNFTContractABI,\n      NFT.nftAddress\n    );\n    await NFTContract.methods\n      .approve(MarketContractAddress, NFT.tokenId)\n      .send({ from: store.state.currentAddress });\n\n    await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether')\n      , \"\").send({ from: store.state.currentAddress })\n    await MarketContract.methods.getSalesId().call().then(re => {\n      SaleId = re\n    })\n    await insertSale(Sale)\n    NFT.isActive = true\n    NFT.price = store.state.Web3.utils.toWei(NFT.price, 'ether')\n    await updateSaleactive(NFT)\n    await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n      store.commit(\"setOwnerNFTList\", re.data.data);\n    });\n    return true\n  } catch (error) {\n    console.log(error);\n    return false\n  }\n  \n}\n\nexport async function Buy(NFT) {\n  try {\n    await MarketContract.methods.buy(NFT.saleId - 1)\n      .send({\n        from: store.state.currentAddress,\n        value: store.state.Web3.utils.toWei(NFT.price, 'ether'),\n      });\n    console.log(NFT);\n    await AddNewNFTToMetaMask(NFT.nftAddress, NFT.tokenId.toString(), NFT.symbol, NFT.image)\n    NFT.isActive = false\n    NFT.currentOwner = store.state.currentAddress\n    await updateNFTOwnerListAfterBuy(NFT)\n    await deleteSale(NFT)\n    await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n      store.commit(\"setOwnerNFTList\", re.data.data);\n    });\n    return true\n  } catch (error) {\n    console.log(error);\n    return false\n  }\n\n}\n\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => { FeePercentage = re })\n  return FeePercentage;\n}\n\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => { SaleId = re.data.data.saleId; })\n    if (SaleId != undefined) {\n      await MarketContract.methods.cancelSale(SaleId)\n        .send({\n          from: store.state.currentAddress\n        });\n      NFT.isActive = false\n      NFT.price = \"0\"\n      await updateSaleactive(NFT)\n      await deleteSale(NFT)\n      await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n        store.commit(\"setOwnerNFTList\", re.data.data);\n      });\n      return true\n    } else {\n      return false\n    }\n  } catch (error) {\n    console.log(error);\n    return false\n  }\n}\n\nexport async function AddNewNFTToMetaMask(address, tokenId, symbol, image) {\n\n  await window.ethereum\n    .request({\n      method: 'wallet_watchAsset',\n      params: {\n        type: 'ERC721',\n        options: {\n          address: address,\n          tokenId: tokenId,\n          symbol: symbol,\n          image: JSON.stringify(image),\n        },\n      },\n    })\n    .then((success) => {\n      if (success) {\n        console.log(`${JSON.stringify(symbol)} successfully added to wallet!`);\n      } else {\n        throw new Error('Something went wrong.');\n      }\n    })\n    .catch(console.error);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}