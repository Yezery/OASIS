{"ast":null,"code":"import varint from 'varint';\nexport const CIDV0_BYTES = {\n  SHA2_256: 0x12,\n  LENGTH: 0x20,\n  DAG_PB: 0x70\n};\nexport const V2_HEADER_LENGTH = /* characteristics */16 /* v1 offset */ + 8 /* v1 size */ + 8 /* index offset */ + 8;\n\n/**\n * Decodes varint and seeks the buffer\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @param {import('./coding').Seekable} seeker\n * @returns {number}\n */\nexport function decodeVarint(bytes, seeker) {\n  if (!bytes.length) {\n    throw new Error('Unexpected end of data');\n  }\n  const i = varint.decode(bytes);\n  seeker.seek( /** @type {number} */varint.decode.bytes);\n  return i;\n}\n\n/**\n * Decode v2 header\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.exactly(V2_HEADER_LENGTH, true) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @returns {import('./coding').CarV2FixedHeader}\n */\nexport function decodeV2Header(bytes) {\n  const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n  let offset = 0;\n  const header = {\n    version: 2,\n    /** @type {[bigint, bigint]} */\n    characteristics: [dv.getBigUint64(offset, true), dv.getBigUint64(offset += 8, true)],\n    dataOffset: Number(dv.getBigUint64(offset += 8, true)),\n    dataSize: Number(dv.getBigUint64(offset += 8, true)),\n    indexOffset: Number(dv.getBigUint64(offset += 8, true))\n  };\n  return header;\n}\n\n/**\n * Checks the length of the multihash to be read afterwards\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n */\nexport function getMultihashLength(bytes) {\n  // | code | length | .... |\n  // where both code and length are varints, so we have to decode\n  // them first before we can know total length\n\n  varint.decode(bytes); // code\n  const codeLength = /** @type {number} */varint.decode.bytes;\n  const length = varint.decode(bytes.subarray(varint.decode.bytes));\n  const lengthLength = /** @type {number} */varint.decode.bytes;\n  const mhLength = codeLength + lengthLength + length;\n  return mhLength;\n}","map":{"version":3,"names":["varint","CIDV0_BYTES","SHA2_256","LENGTH","DAG_PB","V2_HEADER_LENGTH","decodeVarint","bytes","seeker","length","Error","i","decode","seek","decodeV2Header","dv","DataView","buffer","byteOffset","byteLength","offset","header","version","characteristics","getBigUint64","dataOffset","Number","dataSize","indexOffset","getMultihashLength","codeLength","subarray","lengthLength","mhLength"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/@ipld+car@5.2.3/node_modules/@ipld/car/src/decoder-common.js"],"sourcesContent":["import varint from 'varint'\n\nexport const CIDV0_BYTES = {\n  SHA2_256: 0x12,\n  LENGTH: 0x20,\n  DAG_PB: 0x70\n}\n\nexport const V2_HEADER_LENGTH = /* characteristics */ 16 /* v1 offset */ + 8 /* v1 size */ + 8 /* index offset */ + 8\n\n/**\n * Decodes varint and seeks the buffer\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @param {import('./coding').Seekable} seeker\n * @returns {number}\n */\nexport function decodeVarint (bytes, seeker) {\n  if (!bytes.length) {\n    throw new Error('Unexpected end of data')\n  }\n  const i = varint.decode(bytes)\n  seeker.seek(/** @type {number} */(varint.decode.bytes))\n  return i\n}\n\n/**\n * Decode v2 header\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.exactly(V2_HEADER_LENGTH, true) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n * @returns {import('./coding').CarV2FixedHeader}\n */\nexport function decodeV2Header (bytes) {\n  const dv = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n  let offset = 0\n  const header = {\n    version: 2,\n    /** @type {[bigint, bigint]} */\n    characteristics: [\n      dv.getBigUint64(offset, true),\n      dv.getBigUint64(offset += 8, true)\n    ],\n    dataOffset: Number(dv.getBigUint64(offset += 8, true)),\n    dataSize: Number(dv.getBigUint64(offset += 8, true)),\n    indexOffset: Number(dv.getBigUint64(offset += 8, true))\n  }\n  return header\n}\n\n/**\n * Checks the length of the multihash to be read afterwards\n *\n * ```js\n * // needs bytes to be read first\n * const bytes = reader.upTo(8) // maybe async\n * ```\n *\n * @param {Uint8Array} bytes\n */\nexport function getMultihashLength (bytes) {\n  // | code | length | .... |\n  // where both code and length are varints, so we have to decode\n  // them first before we can know total length\n\n  varint.decode(bytes) // code\n  const codeLength = /** @type {number} */(varint.decode.bytes)\n  const length = varint.decode(bytes.subarray(varint.decode.bytes))\n  const lengthLength = /** @type {number} */(varint.decode.bytes)\n  const mhLength = codeLength + lengthLength + length\n\n  return mhLength\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAE3B,OAAO,MAAMC,WAAW,GAAG;EACzBC,QAAQ,EAAE,IAAI;EACdC,MAAM,EAAE,IAAI;EACZC,MAAM,EAAE;AACV,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,qBAAsB,EAAE,CAAC,kBAAkB,CAAC,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC;;AAErH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAEC,KAAK,EAAEC,MAAM,EAAE;EAC3C,IAAI,CAACD,KAAK,CAACE,MAAM,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EAC3C;EACA,MAAMC,CAAC,GAAGX,MAAM,CAACY,MAAM,CAACL,KAAK,CAAC;EAC9BC,MAAM,CAACK,IAAI,EAAC,qBAAsBb,MAAM,CAACY,MAAM,CAACL,KAAM,CAAC;EACvD,OAAOI,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,cAAcA,CAAEP,KAAK,EAAE;EACrC,MAAMQ,EAAE,GAAG,IAAIC,QAAQ,CAACT,KAAK,CAACU,MAAM,EAAEV,KAAK,CAACW,UAAU,EAAEX,KAAK,CAACY,UAAU,CAAC;EACzE,IAAIC,MAAM,GAAG,CAAC;EACd,MAAMC,MAAM,GAAG;IACbC,OAAO,EAAE,CAAC;IACV;IACAC,eAAe,EAAE,CACfR,EAAE,CAACS,YAAY,CAACJ,MAAM,EAAE,IAAI,CAAC,EAC7BL,EAAE,CAACS,YAAY,CAACJ,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC,CACnC;IACDK,UAAU,EAAEC,MAAM,CAACX,EAAE,CAACS,YAAY,CAACJ,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IACtDO,QAAQ,EAAED,MAAM,CAACX,EAAE,CAACS,YAAY,CAACJ,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;IACpDQ,WAAW,EAAEF,MAAM,CAACX,EAAE,CAACS,YAAY,CAACJ,MAAM,IAAI,CAAC,EAAE,IAAI,CAAC;EACxD,CAAC;EACD,OAAOC,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,kBAAkBA,CAAEtB,KAAK,EAAE;EACzC;EACA;EACA;;EAEAP,MAAM,CAACY,MAAM,CAACL,KAAK,CAAC,EAAC;EACrB,MAAMuB,UAAU,GAAG,qBAAsB9B,MAAM,CAACY,MAAM,CAACL,KAAM;EAC7D,MAAME,MAAM,GAAGT,MAAM,CAACY,MAAM,CAACL,KAAK,CAACwB,QAAQ,CAAC/B,MAAM,CAACY,MAAM,CAACL,KAAK,CAAC,CAAC;EACjE,MAAMyB,YAAY,GAAG,qBAAsBhC,MAAM,CAACY,MAAM,CAACL,KAAM;EAC/D,MAAM0B,QAAQ,GAAGH,UAAU,GAAGE,YAAY,GAAGvB,MAAM;EAEnD,OAAOwB,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}