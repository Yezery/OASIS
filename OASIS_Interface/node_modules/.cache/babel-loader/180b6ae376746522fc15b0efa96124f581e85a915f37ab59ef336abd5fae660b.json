{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TieredDatastore } from 'datastore-core/tiered';\nimport get from 'dlv';\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js';\nimport { OfflineDatastore } from './offline-datastore.js';\nimport { DHTDatastore } from './dht-datastore.js';\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting({\n  libp2p,\n  repo,\n  peerId,\n  options\n}) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = [];\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs;\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId);\n    ipnsStores.push(pubsubDs);\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht));\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore);\n    ipnsStores.push(offlineDatastore);\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores);\n}","map":{"version":3,"names":["TieredDatastore","get","IpnsPubsubDatastore","OfflineDatastore","DHTDatastore","createRouting","libp2p","repo","peerId","options","ipnsStores","pubsubDs","pubsub","datastore","push","includes","dht","length","offlineDatastore"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/ipns/routing/config.js"],"sourcesContent":["import { TieredDatastore } from 'datastore-core/tiered'\nimport get from 'dlv'\nimport { IpnsPubsubDatastore } from './pubsub-datastore.js'\nimport { OfflineDatastore } from './offline-datastore.js'\nimport { DHTDatastore } from './dht-datastore.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {object} arg\n * @param {import('libp2p').Libp2p} arg.libp2p\n * @param {import('ipfs-repo').IPFSRepo} arg.repo\n * @param {import('@libp2p/interface-peer-id').PeerId} arg.peerId\n * @param {object} arg.options\n */\nexport function createRouting ({ libp2p, repo, peerId, options }) {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  /** @type {any[]} */\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    pubsubDs = new IpnsPubsubDatastore(libp2p.pubsub, repo.datastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // Add DHT datastore if enabled\n  if (get(options, 'offline', false) !== true && ['dht', 'dhtclient', 'dhtserver'].includes(get(options, 'config.Routing.Type', 'none'))) {\n    ipnsStores.push(new DHTDatastore(libp2p.dht))\n  }\n\n  // Add an offline datastore if we are offline or no other datastores are configured\n  if (get(options, 'offline', false) || ipnsStores.length === 0) {\n    const offlineDatastore = new OfflineDatastore(repo.datastore)\n    ipnsStores.push(offlineDatastore)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,uBAAuB;AACvD,OAAOC,GAAG,MAAM,KAAK;AACrB,SAASC,mBAAmB,QAAQ,uBAAuB;AAC3D,SAASC,gBAAgB,QAAQ,wBAAwB;AACzD,SAASC,YAAY,QAAQ,oBAAoB;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAE;EAAEC,MAAM;EAAEC,IAAI;EAAEC,MAAM;EAAEC;AAAQ,CAAC,EAAE;EAChE;EACA;EACA,MAAMC,UAAU,GAAG,EAAE;;EAErB;EACA,IAAIC,QAAQ;EACZ,IAAIV,GAAG,CAACQ,OAAO,EAAE,yBAAyB,EAAE,KAAK,CAAC,EAAE;IAClDE,QAAQ,GAAG,IAAIT,mBAAmB,CAACI,MAAM,CAACM,MAAM,EAAEL,IAAI,CAACM,SAAS,EAAEL,MAAM,CAAC;IACzEE,UAAU,CAACI,IAAI,CAACH,QAAQ,CAAC;EAC3B;;EAEA;EACA,IAAIV,GAAG,CAACQ,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC,CAACM,QAAQ,CAACd,GAAG,CAACQ,OAAO,EAAE,qBAAqB,EAAE,MAAM,CAAC,CAAC,EAAE;IACtIC,UAAU,CAACI,IAAI,CAAC,IAAIV,YAAY,CAACE,MAAM,CAACU,GAAG,CAAC,CAAC;EAC/C;;EAEA;EACA,IAAIf,GAAG,CAACQ,OAAO,EAAE,SAAS,EAAE,KAAK,CAAC,IAAIC,UAAU,CAACO,MAAM,KAAK,CAAC,EAAE;IAC7D,MAAMC,gBAAgB,GAAG,IAAIf,gBAAgB,CAACI,IAAI,CAACM,SAAS,CAAC;IAC7DH,UAAU,CAACI,IAAI,CAACI,gBAAgB,CAAC;EACnC;;EAEA;EACA,OAAO,IAAIlB,eAAe,CAACU,UAAU,CAAC;AACxC"},"metadata":{},"sourceType":"module","externalDependencies":[]}