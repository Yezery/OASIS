{"ast":null,"code":"import * as isIPFS from 'is-ipfs';\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path';\nimport drain from 'it-drain';\nimport { resolve } from '../../utils.js';\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath({\n  ipns,\n  repo,\n  codecs\n}, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name);\n  }\n  const {\n    cid,\n    path\n  } = toCidAndPath(name);\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options));\n}","map":{"version":3,"names":["isIPFS","toCidAndPath","drain","resolve","resolvePath","ipns","repo","codecs","name","options","ipnsPath","cid","path"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/name/utils.js"],"sourcesContent":["import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,SAAS;AACjC,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,OAAOC,KAAK,MAAM,UAAU;AAC5B,SAASC,OAAO,QAAQ,gBAAgB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,WAAWA,CAAE;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACxE;EACA,IAAIT,MAAM,CAACU,QAAQ,CAACF,IAAI,CAAC,EAAE;IACzB,OAAOH,IAAI,CAACF,OAAO,CAACK,IAAI,CAAC;EAC3B;EAEA,MAAM;IACJG,GAAG;IACHC;EACF,CAAC,GAAGX,YAAY,CAACO,IAAI,CAAC;;EAEtB;EACA,MAAMN,KAAK,CAACC,OAAO,CAACQ,GAAG,EAAEC,IAAI,IAAI,EAAE,EAAEL,MAAM,EAAED,IAAI,EAAEG,OAAO,CAAC,CAAC;AAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}