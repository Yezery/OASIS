{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n  fetch(path, init) {\n    return fetch(path, init);\n  }\n  now() {\n    return performance.now();\n  }\n  encode(text, encoding) {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes, encoding) {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n}\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser());\n  // Register LocalStorage IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {}\n  // Register IndexedDB IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {}\n}","map":{"version":3,"names":["env","BrowserIndexedDB","BrowserIndexedDBManager","BrowserLocalStorage","BrowserLocalStorageManager","ModelStoreManagerRegistry","PlatformBrowser","fetch","path","init","now","performance","encode","text","encoding","Error","textEncoder","TextEncoder","decode","bytes","TextDecoder","get","setPlatform","registerManager","URL_SCHEME","err"],"sources":["../../../../../../tfjs-core/src/platforms/platform_browser.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\nimport {BrowserIndexedDB, BrowserIndexedDBManager} from '../io/indexed_db';\nimport {BrowserLocalStorage, BrowserLocalStorageManager} from '../io/local_storage';\nimport {ModelStoreManagerRegistry} from '../io/model_management';\n\nimport {Platform} from './platform';\n\nexport class PlatformBrowser implements Platform {\n  // According to the spec, the built-in encoder can do only UTF-8 encoding.\n  // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n  private textEncoder: TextEncoder;\n\n  fetch(path: string, init?: RequestInit): Promise<Response> {\n    return fetch(path, init);\n  }\n\n  now(): number {\n    return performance.now();\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser());\n\n  // Register LocalStorage IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {\n  }\n\n  // Register IndexedDB IOHandler\n  try {\n    ModelStoreManagerRegistry.registerManager(\n        BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,UAAU;AAEjB,SAAQA,GAAG,QAAO,gBAAgB;AAClC,SAAQC,gBAAgB,EAAEC,uBAAuB,QAAO,kBAAkB;AAC1E,SAAQC,mBAAmB,EAAEC,0BAA0B,QAAO,qBAAqB;AACnF,SAAQC,yBAAyB,QAAO,wBAAwB;AAIhE,OAAM,MAAOC,eAAe;EAK1BC,KAAKA,CAACC,IAAY,EAAEC,IAAkB;IACpC,OAAOF,KAAK,CAACC,IAAI,EAAEC,IAAI,CAAC;EAC1B;EAEAC,GAAGA,CAAA;IACD,OAAOC,WAAW,CAACD,GAAG,EAAE;EAC1B;EAEAE,MAAMA,CAACC,IAAY,EAAEC,QAAgB;IACnC,IAAIA,QAAQ,KAAK,OAAO,IAAIA,QAAQ,KAAK,MAAM,EAAE;MAC/C,MAAM,IAAIC,KAAK,CACX,kDAAkDD,QAAQ,EAAE,CAAC;;IAEnE,IAAI,IAAI,CAACE,WAAW,IAAI,IAAI,EAAE;MAC5B,IAAI,CAACA,WAAW,GAAG,IAAIC,WAAW,EAAE;;IAEtC,OAAO,IAAI,CAACD,WAAW,CAACJ,MAAM,CAACC,IAAI,CAAC;EACtC;EACAK,MAAMA,CAACC,KAAiB,EAAEL,QAAgB;IACxC,OAAO,IAAIM,WAAW,CAACN,QAAQ,CAAC,CAACI,MAAM,CAACC,KAAK,CAAC;EAChD;;AAGF,IAAInB,GAAG,EAAE,CAACqB,GAAG,CAAC,YAAY,CAAC,EAAE;EAC3BrB,GAAG,EAAE,CAACsB,WAAW,CAAC,SAAS,EAAE,IAAIhB,eAAe,EAAE,CAAC;EAEnD;EACA,IAAI;IACFD,yBAAyB,CAACkB,eAAe,CACrCpB,mBAAmB,CAACqB,UAAU,EAAE,IAAIpB,0BAA0B,EAAE,CAAC;GACtE,CAAC,OAAOqB,GAAG,EAAE,C;EAGd;EACA,IAAI;IACFpB,yBAAyB,CAACkB,eAAe,CACrCtB,gBAAgB,CAACuB,UAAU,EAAE,IAAItB,uBAAuB,EAAE,CAAC;GAChE,CAAC,OAAOuB,GAAG,EAAE,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}