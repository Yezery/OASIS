{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TimeCacheDuration } from '../constants.js';\nimport Denque from 'denque';\nexport var DeliveryRecordStatus;\n(function (DeliveryRecordStatus) {\n  /**\n   * we don't know (yet) if the message is valid\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n  /**\n   * we know the message is valid\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n  /**\n   * we know the message is invalid\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n  /**\n   * we were instructed by the validator to ignore the message\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus || (DeliveryRecordStatus = {}));\n/**\n * Map of canonical message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\nexport class MessageDeliveries {\n  constructor() {\n    this.records = new Map();\n    this.queue = new Denque();\n  }\n  ensureRecord(msgIdStr) {\n    let drec = this.records.get(msgIdStr);\n    if (drec) {\n      return drec;\n    }\n    // record doesn't exist yet\n    // create record\n    drec = {\n      status: DeliveryRecordStatus.unknown,\n      firstSeen: Date.now(),\n      validated: 0,\n      peers: new Set()\n    };\n    this.records.set(msgIdStr, drec);\n    // and add msgId to the queue\n    const entry = {\n      msgId: msgIdStr,\n      expire: Date.now() + TimeCacheDuration\n    };\n    this.queue.push(entry);\n    return drec;\n  }\n  gc() {\n    const now = Date.now();\n    // queue is sorted by expiry time\n    // remove expired messages, remove from queue until first un-expired message found\n    let head = this.queue.peekFront();\n    while (head && head.expire < now) {\n      this.records.delete(head.msgId);\n      this.queue.shift();\n      head = this.queue.peekFront();\n    }\n  }\n  clear() {\n    this.records.clear();\n    this.queue.clear();\n  }\n}","map":{"version":3,"names":["TimeCacheDuration","Denque","DeliveryRecordStatus","MessageDeliveries","constructor","records","Map","queue","ensureRecord","msgIdStr","drec","get","status","unknown","firstSeen","Date","now","validated","peers","Set","set","entry","msgId","expire","push","gc","head","peekFront","delete","shift","clear"],"sources":["../../../src/score/message-deliveries.ts"],"sourcesContent":[null],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,iBAAiB;AACnD,OAAOC,MAAM,MAAM,QAAQ;AAE3B,WAAYC,oBAiBX;AAjBD,WAAYA,oBAAoB;EAC9B;;;EAGAA,oBAAA,CAAAA,oBAAA,4BAAO;EACP;;;EAGAA,oBAAA,CAAAA,oBAAA,wBAAK;EACL;;;EAGAA,oBAAA,CAAAA,oBAAA,4BAAO;EACP;;;EAGAA,oBAAA,CAAAA,oBAAA,4BAAO;AACT,CAAC,EAjBWA,oBAAoB,KAApBA,oBAAoB;AA+BhC;;;;;AAKA,OAAM,MAAOC,iBAAiB;EAI5BC,YAAA;IACE,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,EAAE;IACxB,IAAI,CAACC,KAAK,GAAG,IAAIN,MAAM,EAAE;EAC3B;EAEAO,YAAYA,CAACC,QAAgB;IAC3B,IAAIC,IAAI,GAAG,IAAI,CAACL,OAAO,CAACM,GAAG,CAACF,QAAQ,CAAC;IACrC,IAAIC,IAAI,EAAE;MACR,OAAOA,IAAI;;IAGb;IACA;IACAA,IAAI,GAAG;MACLE,MAAM,EAAEV,oBAAoB,CAACW,OAAO;MACpCC,SAAS,EAAEC,IAAI,CAACC,GAAG,EAAE;MACrBC,SAAS,EAAE,CAAC;MACZC,KAAK,EAAE,IAAIC,GAAG;KACf;IACD,IAAI,CAACd,OAAO,CAACe,GAAG,CAACX,QAAQ,EAAEC,IAAI,CAAC;IAEhC;IACA,MAAMW,KAAK,GAAuB;MAChCC,KAAK,EAAEb,QAAQ;MACfc,MAAM,EAAER,IAAI,CAACC,GAAG,EAAE,GAAGhB;KACtB;IACD,IAAI,CAACO,KAAK,CAACiB,IAAI,CAACH,KAAK,CAAC;IAEtB,OAAOX,IAAI;EACb;EAEAe,EAAEA,CAAA;IACA,MAAMT,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE;IACtB;IACA;IACA,IAAIU,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACoB,SAAS,EAAE;IACjC,OAAOD,IAAI,IAAIA,IAAI,CAACH,MAAM,GAAGP,GAAG,EAAE;MAChC,IAAI,CAACX,OAAO,CAACuB,MAAM,CAACF,IAAI,CAACJ,KAAK,CAAC;MAC/B,IAAI,CAACf,KAAK,CAACsB,KAAK,EAAE;MAClBH,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACoB,SAAS,EAAE;;EAEjC;EAEAG,KAAKA,CAAA;IACH,IAAI,CAACzB,OAAO,CAACyB,KAAK,EAAE;IACpB,IAAI,CAACvB,KAAK,CAACuB,KAAK,EAAE;EACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}