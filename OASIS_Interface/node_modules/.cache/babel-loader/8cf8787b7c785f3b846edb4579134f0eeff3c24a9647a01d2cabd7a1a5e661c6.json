{"ast":null,"code":"import Vue from 'vue';\nimport App from './App.vue';\nimport router from './router';\nimport store from './store';\nimport Web3 from 'web3';\nVue.config.productionTip = false;\n// Vue.prototype.echarts = echarts\nimport 'animate.css';\nimport './plugins/element.js';\nimport Identicon from \"identicon.js\";\nimport axios from 'axios';\nVue.prototype.axios = axios;\nVue.prototype.Web3 = Web3;\nVue.prototype.Identicon = Identicon;\nconst eventBus = new Vue();\nexport default eventBus;\nnew Vue({\n  Web3,\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app');\nimport https from 'https';\n\n// 创建一个新的https Agent并设置证书和私钥\nconst agent = new https.Agent({\n  cert: fs.readFileSync('/path/to/client_cert.pem'),\n  key: fs.readFileSync('/path/to/client_key.pem')\n});\n\n// 设置axios的默认配置\naxios.defaults.httpsAgent = agent;\n\n// 请求拦截器\naxios.interceptors.request.use(config => {\n  // 在请求发送前的处理逻辑\n  return config;\n}, error => {\n  // 处理请求错误\n  return Promise.reject(error);\n});\n\n// 将axios实例添加到Vue原型对象中，以便在组件中使用\nVue.prototype.$axios = axios;","map":{"version":3,"names":["Vue","App","router","store","Web3","config","productionTip","Identicon","axios","prototype","eventBus","render","h","$mount","https","agent","Agent","cert","fs","readFileSync","key","defaults","httpsAgent","interceptors","request","use","error","Promise","reject","$axios"],"sources":["/Users/yezery/OASIS/OASIS_Interface/src/main.js"],"sourcesContent":["import Vue from 'vue'\nimport App from './App.vue'\nimport router from './router'\nimport store from './store'\nimport Web3 from 'web3'\nVue.config.productionTip = false\n// Vue.prototype.echarts = echarts\nimport 'animate.css';\nimport './plugins/element.js'\nimport Identicon from \"identicon.js\"\nimport axios from 'axios'\nVue.prototype.axios = axios\nVue.prototype.Web3 = Web3\nVue.prototype.Identicon = Identicon\nconst eventBus = new Vue();\nexport default eventBus;\nnew Vue({\n  Web3,\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n\n\nimport https from 'https';\n\n// 创建一个新的https Agent并设置证书和私钥\nconst agent = new https.Agent({\n  cert: fs.readFileSync('/path/to/client_cert.pem'),\n  key: fs.readFileSync('/path/to/client_key.pem'),\n});\n\n// 设置axios的默认配置\naxios.defaults.httpsAgent = agent;\n\n// 请求拦截器\naxios.interceptors.request.use(\n  config => {\n    // 在请求发送前的处理逻辑\n    return config;\n  },\n  error => {\n    // 处理请求错误\n    return Promise.reject(error);\n  }\n);\n\n// 将axios实例添加到Vue原型对象中，以便在组件中使用\nVue.prototype.$axios = axios;"],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,IAAI,MAAM,MAAM;AACvBJ,GAAG,CAACK,MAAM,CAACC,aAAa,GAAG,KAAK;AAChC;AACA,OAAO,aAAa;AACpB,OAAO,sBAAsB;AAC7B,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzBR,GAAG,CAACS,SAAS,CAACD,KAAK,GAAGA,KAAK;AAC3BR,GAAG,CAACS,SAAS,CAACL,IAAI,GAAGA,IAAI;AACzBJ,GAAG,CAACS,SAAS,CAACF,SAAS,GAAGA,SAAS;AACnC,MAAMG,QAAQ,GAAG,IAAIV,GAAG,CAAC,CAAC;AAC1B,eAAeU,QAAQ;AACvB,IAAIV,GAAG,CAAC;EACNI,IAAI;EACJF,MAAM;EACNC,KAAK;EACLQ,MAAM,EAAEC,CAAC,IAAIA,CAAC,CAACX,GAAG;AACpB,CAAC,CAAC,CAACY,MAAM,CAAC,MAAM,CAAC;AAGjB,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,KAAK,GAAG,IAAID,KAAK,CAACE,KAAK,CAAC;EAC5BC,IAAI,EAAEC,EAAE,CAACC,YAAY,CAAC,0BAA0B,CAAC;EACjDC,GAAG,EAAEF,EAAE,CAACC,YAAY,CAAC,yBAAyB;AAChD,CAAC,CAAC;;AAEF;AACAX,KAAK,CAACa,QAAQ,CAACC,UAAU,GAAGP,KAAK;;AAEjC;AACAP,KAAK,CAACe,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BpB,MAAM,IAAI;EACR;EACA,OAAOA,MAAM;AACf,CAAC,EACDqB,KAAK,IAAI;EACP;EACA,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA1B,GAAG,CAACS,SAAS,CAACoB,MAAM,GAAGrB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}