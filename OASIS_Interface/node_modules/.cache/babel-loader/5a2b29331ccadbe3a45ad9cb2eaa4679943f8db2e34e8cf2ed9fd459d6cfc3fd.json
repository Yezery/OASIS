{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { decode as _decode, decodeFirst as _decodeFirst } from '../decode.js';\nimport { Token, Type } from '../token.js';\nimport { decodeCodePointsArray } from '../byte-utils.js';\nimport { decodeErrPrefix } from '../common.js';\n\n/**\n * @typedef {import('../../interface').DecodeOptions} DecodeOptions\n * @typedef {import('../../interface').DecodeTokenizer} DecodeTokenizer\n */\n\n/**\n * @implements {DecodeTokenizer}\n */\nclass Tokenizer {\n  /**\n   * @param {Uint8Array} data\n   * @param {DecodeOptions} options\n   */\n  constructor(data, options = {}) {\n    this._pos = 0;\n    this.data = data;\n    this.options = options;\n    /** @type {string[]} */\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n  pos() {\n    return this._pos;\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  done() {\n    return this._pos >= this.data.length;\n  }\n\n  /**\n   * @returns {number}\n   */\n  ch() {\n    return this.data[this._pos];\n  }\n\n  /**\n   * @returns {string}\n   */\n  currentMode() {\n    return this.modeStack[this.modeStack.length - 1];\n  }\n  skipWhitespace() {\n    let c = this.ch();\n    // @ts-ignore\n    while (c === 32 /* ' ' */ || c === 9 /* '\\t' */ || c === 13 /* '\\r' */ || c === 10 /* '\\n' */) {\n      c = this.data[++this._pos];\n    }\n  }\n\n  /**\n   * @param {number[]} str\n   */\n  expect(str) {\n    if (this.data.length - this._pos < str.length) {\n      throw new Error(`${decodeErrPrefix} unexpected end of input at position ${this._pos}`);\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this._pos++] !== str[i]) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}, expected to find '${String.fromCharCode(...str)}'`);\n      }\n    }\n  }\n  parseNumber() {\n    const startPos = this._pos;\n    let negative = false;\n    let float = false;\n\n    /**\n     * @param {number[]} chars\n     */\n    const swallow = chars => {\n      while (!this.done()) {\n        const ch = this.ch();\n        if (chars.includes(ch)) {\n          this._pos++;\n        } else {\n          break;\n        }\n      }\n    };\n\n    // lead\n    if (this.ch() === 45) {\n      // '-'\n      negative = true;\n      this._pos++;\n    }\n    if (this.ch() === 48) {\n      // '0'\n      this._pos++;\n      if (this.ch() === 46) {\n        // '.'\n        this._pos++;\n        float = true;\n      } else {\n        return new Token(Type.uint, 0, this._pos - startPos);\n      }\n    }\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]); // DIGIT\n    if (negative && this._pos === startPos + 1) {\n      throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`);\n    }\n    if (!this.done() && this.ch() === 46) {\n      // '.'\n      if (float) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`);\n      }\n      float = true;\n      this._pos++;\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]); // DIGIT\n    }\n\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n      // '[eE]'\n      float = true;\n      this._pos++;\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n        // '+', '-'\n        this._pos++;\n      }\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]); // DIGIT\n    }\n    // @ts-ignore\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this._pos));\n    const num = parseFloat(numStr);\n    if (float) {\n      return new Token(Type.float, num, this._pos - startPos);\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this._pos - startPos);\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this._pos - startPos);\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseString() {\n    /* c8 ignore next 4 */\n    if (this.ch() !== 34) {\n      // '\"'\n      // this would be a programming error\n      throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}; this shouldn't happen`);\n    }\n    this._pos++;\n\n    // check for simple fast-path, all printable ascii, no escapes\n    // >0x10000 elements may fail fn.apply() (http://stackoverflow.com/a/22747272/680742)\n    for (let i = this._pos, l = 0; i < this.data.length && l < 0x10000; i++, l++) {\n      const ch = this.data[i];\n      if (ch === 92 || ch < 32 || ch >= 128) {\n        // '\\', ' ', control-chars or non-trivial\n        break;\n      }\n      if (ch === 34) {\n        // '\"'\n        // @ts-ignore\n        const str = String.fromCharCode.apply(null, this.data.subarray(this._pos, i));\n        this._pos = i + 1;\n        return new Token(Type.string, str, l);\n      }\n    }\n    const startPos = this._pos;\n    const chars = [];\n    const readu4 = () => {\n      if (this._pos + 4 >= this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected end of unicode escape sequence at position ${this._pos}`);\n      }\n      let u4 = 0;\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch();\n        if (ch >= 48 && ch <= 57) {\n          // '0' && '9'\n          ch -= 48;\n        } else if (ch >= 97 && ch <= 102) {\n          // 'a' && 'f'\n          ch = ch - 97 + 10;\n        } else if (ch >= 65 && ch <= 70) {\n          // 'A' && 'F'\n          ch = ch - 65 + 10;\n        } else {\n          throw new Error(`${decodeErrPrefix} unexpected unicode escape character at position ${this._pos}`);\n        }\n        u4 = u4 * 16 + ch;\n        this._pos++;\n      }\n      return u4;\n    };\n\n    // mostly taken from feross/buffer and adjusted to fit\n    const readUtf8Char = () => {\n      const firstByte = this.ch();\n      let codePoint = null;\n      /* c8 ignore next 1 */\n      let bytesPerSequence = firstByte > 0xef ? 4 : firstByte > 0xdf ? 3 : firstByte > 0xbf ? 2 : 1;\n      if (this._pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected unicode sequence at position ${this._pos}`);\n      }\n      let secondByte, thirdByte, fourthByte, tempCodePoint;\n      switch (bytesPerSequence) {\n        /* c8 ignore next 6 */\n        // this case is dealt with by the caller function\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte;\n          }\n          break;\n        case 2:\n          secondByte = this.data[this._pos + 1];\n          if ((secondByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1f) << 0x6 | secondByte & 0x3f;\n            if (tempCodePoint > 0x7f) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 3:\n          secondByte = this.data[this._pos + 1];\n          thirdByte = this.data[this._pos + 2];\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | thirdByte & 0x3f;\n            /* c8 ignore next 3 */\n            if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {\n              codePoint = tempCodePoint;\n            }\n          }\n          break;\n        case 4:\n          secondByte = this.data[this._pos + 1];\n          thirdByte = this.data[this._pos + 2];\n          fourthByte = this.data[this._pos + 3];\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | fourthByte & 0x3f;\n            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint;\n            }\n          }\n      }\n\n      /* c8 ignore next 5 */\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xfffd;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xffff) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        chars.push(codePoint >>> 10 & 0x3ff | 0xd800);\n        codePoint = 0xdc00 | codePoint & 0x3ff;\n      }\n      chars.push(codePoint);\n      this._pos += bytesPerSequence;\n    };\n\n    // TODO: could take the approach of a quick first scan for special chars like encoding/json/decode.go#unquoteBytes\n    // and converting all of the ascii chars from the base array in bulk\n    while (!this.done()) {\n      const ch = this.ch();\n      let ch1;\n      switch (ch) {\n        case 92:\n          // '\\'\n          this._pos++;\n          if (this.done()) {\n            throw new Error(`${decodeErrPrefix} unexpected string termination at position ${this._pos}`);\n          }\n          ch1 = this.ch();\n          this._pos++;\n          switch (ch1) {\n            case 34: // '\"'\n            case 39: // '\\''\n            case 92: // '\\'\n            case 47:\n              // '/'\n              chars.push(ch1);\n              break;\n            case 98:\n              // 'b'\n              chars.push(8);\n              break;\n            case 116:\n              // 't'\n              chars.push(9);\n              break;\n            case 110:\n              // 'n'\n              chars.push(10);\n              break;\n            case 102:\n              // 'f'\n              chars.push(12);\n              break;\n            case 114:\n              // 'r'\n              chars.push(13);\n              break;\n            case 117:\n              // 'u'\n              chars.push(readu4());\n              break;\n            default:\n              throw new Error(`${decodeErrPrefix} unexpected string escape character at position ${this._pos}`);\n          }\n          break;\n        case 34:\n          // '\"'\n          this._pos++;\n          return new Token(Type.string, decodeCodePointsArray(chars), this._pos - startPos);\n        default:\n          if (ch < 32) {\n            // ' '\n            throw new Error(`${decodeErrPrefix} invalid control character at position ${this._pos}`);\n          } else if (ch < 0x80) {\n            chars.push(ch);\n            this._pos++;\n          } else {\n            readUtf8Char();\n          }\n      }\n    }\n    throw new Error(`${decodeErrPrefix} unexpected end of string at position ${this._pos}`);\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseValue() {\n    switch (this.ch()) {\n      case 123:\n        // '{'\n        this.modeStack.push('obj-start');\n        this._pos++;\n        return new Token(Type.map, Infinity, 1);\n      case 91:\n        // '['\n        this.modeStack.push('array-start');\n        this._pos++;\n        return new Token(Type.array, Infinity, 1);\n      case 34:\n        {\n          // '\"'\n          return this.parseString();\n        }\n      case 110:\n        // 'n' / null\n        this.expect([110, 117, 108, 108]); // 'null'\n        return new Token(Type.null, null, 4);\n      case 102:\n        // 'f' / // false\n        this.expect([102, 97, 108, 115, 101]); // 'false'\n        return new Token(Type.false, false, 5);\n      case 116:\n        // 't' / // true\n        this.expect([116, 114, 117, 101]); // 'true'\n        return new Token(Type.true, true, 4);\n      case 45: // '-'\n      case 48: // '0'\n      case 49: // '1'\n      case 50: // '2'\n      case 51: // '3'\n      case 52: // '4'\n      case 53: // '5'\n      case 54: // '6'\n      case 55: // '7'\n      case 56: // '8'\n      case 57:\n        // '9'\n        return this.parseNumber();\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}`);\n    }\n  }\n\n  /**\n   * @returns {Token}\n   */\n  next() {\n    this.skipWhitespace();\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop();\n        return this.parseValue();\n      case 'array-value':\n        {\n          this.modeStack.pop();\n          if (this.ch() === 93) {\n            // ']'\n            this._pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          if (this.ch() !== 44) {\n            // ','\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`);\n          }\n          this._pos++;\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      case 'array-start':\n        {\n          this.modeStack.pop();\n          if (this.ch() === 93) {\n            // ']'\n            this._pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          this.modeStack.push('array-value');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      // @ts-ignore\n      case 'obj-key':\n        if (this.ch() === 125) {\n          // '}'\n          this.modeStack.pop();\n          this._pos++;\n          this.skipWhitespace();\n          return new Token(Type.break, undefined, 1);\n        }\n        if (this.ch() !== 44) {\n          // ','\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`);\n        }\n        this._pos++;\n        this.skipWhitespace();\n      case 'obj-start':\n        {\n          // eslint-disable-line no-fallthrough\n          this.modeStack.pop();\n          if (this.ch() === 125) {\n            // '}'\n            this._pos++;\n            this.skipWhitespace();\n            return new Token(Type.break, undefined, 1);\n          }\n          const token = this.parseString();\n          this.skipWhitespace();\n          if (this.ch() !== 58) {\n            // ':'\n            throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`);\n          }\n          this._pos++;\n          this.modeStack.push('obj-value');\n          return token;\n        }\n      case 'obj-value':\n        {\n          this.modeStack.pop();\n          this.modeStack.push('obj-key');\n          this.skipWhitespace();\n          return this.parseValue();\n        }\n      /* c8 ignore next 2 */\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected parse state at position ${this._pos}; this shouldn't happen`);\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {any}\n */\nfunction decode(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return _decode(data, options);\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {[any, Uint8Array]}\n */\nfunction decodeFirst(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return _decodeFirst(data, options);\n}\nexport { decode, decodeFirst, Tokenizer };","map":{"version":3,"names":["decode","_decode","decodeFirst","_decodeFirst","Token","Type","decodeCodePointsArray","decodeErrPrefix","Tokenizer","constructor","data","options","_pos","modeStack","lastToken","pos","done","length","ch","currentMode","skipWhitespace","c","expect","str","Error","i","String","fromCharCode","parseNumber","startPos","negative","float","swallow","chars","includes","uint","numStr","apply","subarray","num","parseFloat","allowBigInt","Number","isSafeInteger","negint","BigInt","parseString","l","string","readu4","u4","readUtf8Char","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","push","ch1","parseValue","map","Infinity","array","null","false","true","next","pop","break","undefined","token","Object","assign","tokenizer"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/cborg@4.0.1/node_modules/cborg/lib/json/decode.js"],"sourcesContent":["import { decode as _decode, decodeFirst as _decodeFirst } from '../decode.js'\nimport { Token, Type } from '../token.js'\nimport { decodeCodePointsArray } from '../byte-utils.js'\nimport { decodeErrPrefix } from '../common.js'\n\n/**\n * @typedef {import('../../interface').DecodeOptions} DecodeOptions\n * @typedef {import('../../interface').DecodeTokenizer} DecodeTokenizer\n */\n\n/**\n * @implements {DecodeTokenizer}\n */\nclass Tokenizer {\n  /**\n   * @param {Uint8Array} data\n   * @param {DecodeOptions} options\n   */\n  constructor (data, options = {}) {\n    this._pos = 0\n    this.data = data\n    this.options = options\n    /** @type {string[]} */\n    this.modeStack = ['value']\n    this.lastToken = ''\n  }\n\n  pos () {\n    return this._pos\n  }\n\n  /**\n   * @returns {boolean}\n   */\n  done () {\n    return this._pos >= this.data.length\n  }\n\n  /**\n   * @returns {number}\n   */\n  ch () {\n    return this.data[this._pos]\n  }\n\n  /**\n   * @returns {string}\n   */\n  currentMode () {\n    return this.modeStack[this.modeStack.length - 1]\n  }\n\n  skipWhitespace () {\n    let c = this.ch()\n    // @ts-ignore\n    while (c === 32 /* ' ' */ || c === 9 /* '\\t' */ || c === 13 /* '\\r' */ || c === 10 /* '\\n' */) {\n      c = this.data[++this._pos]\n    }\n  }\n\n  /**\n   * @param {number[]} str\n   */\n  expect (str) {\n    if (this.data.length - this._pos < str.length) {\n      throw new Error(`${decodeErrPrefix} unexpected end of input at position ${this._pos}`)\n    }\n    for (let i = 0; i < str.length; i++) {\n      if (this.data[this._pos++] !== str[i]) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}, expected to find '${String.fromCharCode(...str)}'`)\n      }\n    }\n  }\n\n  parseNumber () {\n    const startPos = this._pos\n    let negative = false\n    let float = false\n\n    /**\n     * @param {number[]} chars\n     */\n    const swallow = (chars) => {\n      while (!this.done()) {\n        const ch = this.ch()\n        if (chars.includes(ch)) {\n          this._pos++\n        } else {\n          break\n        }\n      }\n    }\n\n    // lead\n    if (this.ch() === 45) { // '-'\n      negative = true\n      this._pos++\n    }\n    if (this.ch() === 48) { // '0'\n      this._pos++\n      if (this.ch() === 46) { // '.'\n        this._pos++\n        float = true\n      } else {\n        return new Token(Type.uint, 0, this._pos - startPos)\n      }\n    }\n    swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    if (negative && this._pos === startPos + 1) {\n      throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`)\n    }\n    if (!this.done() && this.ch() === 46) { // '.'\n      if (float) {\n        throw new Error(`${decodeErrPrefix} unexpected token at position ${this._pos}`)\n      }\n      float = true\n      this._pos++\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    }\n    if (!this.done() && (this.ch() === 101 || this.ch() === 69)) { // '[eE]'\n      float = true\n      this._pos++\n      if (!this.done() && (this.ch() === 43 || this.ch() === 45)) { // '+', '-'\n        this._pos++\n      }\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]) // DIGIT\n    }\n    // @ts-ignore\n    const numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this._pos))\n    const num = parseFloat(numStr)\n    if (float) {\n      return new Token(Type.float, num, this._pos - startPos)\n    }\n    if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n      return new Token(num >= 0 ? Type.uint : Type.negint, num, this._pos - startPos)\n    }\n    return new Token(num >= 0 ? Type.uint : Type.negint, BigInt(numStr), this._pos - startPos)\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseString () {\n    /* c8 ignore next 4 */\n    if (this.ch() !== 34) { // '\"'\n      // this would be a programming error\n      throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}; this shouldn't happen`)\n    }\n    this._pos++\n\n    // check for simple fast-path, all printable ascii, no escapes\n    // >0x10000 elements may fail fn.apply() (http://stackoverflow.com/a/22747272/680742)\n    for (let i = this._pos, l = 0; i < this.data.length && l < 0x10000; i++, l++) {\n      const ch = this.data[i]\n      if (ch === 92 || ch < 32 || ch >= 128) { // '\\', ' ', control-chars or non-trivial\n        break\n      }\n      if (ch === 34) { // '\"'\n        // @ts-ignore\n        const str = String.fromCharCode.apply(null, this.data.subarray(this._pos, i))\n        this._pos = i + 1\n        return new Token(Type.string, str, l)\n      }\n    }\n\n    const startPos = this._pos\n    const chars = []\n\n    const readu4 = () => {\n      if (this._pos + 4 >= this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected end of unicode escape sequence at position ${this._pos}`)\n      }\n      let u4 = 0\n      for (let i = 0; i < 4; i++) {\n        let ch = this.ch()\n        if (ch >= 48 && ch <= 57) { // '0' && '9'\n          ch -= 48\n        } else if (ch >= 97 && ch <= 102) { // 'a' && 'f'\n          ch = ch - 97 + 10\n        } else if (ch >= 65 && ch <= 70) { // 'A' && 'F'\n          ch = ch - 65 + 10\n        } else {\n          throw new Error(`${decodeErrPrefix} unexpected unicode escape character at position ${this._pos}`)\n        }\n        u4 = u4 * 16 + ch\n        this._pos++\n      }\n      return u4\n    }\n\n    // mostly taken from feross/buffer and adjusted to fit\n    const readUtf8Char = () => {\n      const firstByte = this.ch()\n      let codePoint = null\n      /* c8 ignore next 1 */\n      let bytesPerSequence = (firstByte > 0xef) ? 4 : (firstByte > 0xdf) ? 3 : (firstByte > 0xbf) ? 2 : 1\n\n      if (this._pos + bytesPerSequence > this.data.length) {\n        throw new Error(`${decodeErrPrefix} unexpected unicode sequence at position ${this._pos}`)\n      }\n\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        /* c8 ignore next 6 */\n        // this case is dealt with by the caller function\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = this.data[this._pos + 1]\n          if ((secondByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1f) << 0x6 | (secondByte & 0x3f)\n            if (tempCodePoint > 0x7f) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = this.data[this._pos + 1]\n          thirdByte = this.data[this._pos + 2]\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0xc | (secondByte & 0x3f) << 0x6 | (thirdByte & 0x3f)\n            /* c8 ignore next 3 */\n            if (tempCodePoint > 0x7ff && (tempCodePoint < 0xd800 || tempCodePoint > 0xdfff)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = this.data[this._pos + 1]\n          thirdByte = this.data[this._pos + 2]\n          fourthByte = this.data[this._pos + 3]\n          if ((secondByte & 0xc0) === 0x80 && (thirdByte & 0xc0) === 0x80 && (fourthByte & 0xc0) === 0x80) {\n            tempCodePoint = (firstByte & 0xf) << 0x12 | (secondByte & 0x3f) << 0xc | (thirdByte & 0x3f) << 0x6 | (fourthByte & 0x3f)\n            if (tempCodePoint > 0xffff && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n\n      /* c8 ignore next 5 */\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xfffd\n        bytesPerSequence = 1\n      } else if (codePoint > 0xffff) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000\n        chars.push(codePoint >>> 10 & 0x3ff | 0xd800)\n        codePoint = 0xdc00 | codePoint & 0x3ff\n      }\n\n      chars.push(codePoint)\n      this._pos += bytesPerSequence\n    }\n\n    // TODO: could take the approach of a quick first scan for special chars like encoding/json/decode.go#unquoteBytes\n    // and converting all of the ascii chars from the base array in bulk\n    while (!this.done()) {\n      const ch = this.ch()\n      let ch1\n      switch (ch) {\n        case 92: // '\\'\n          this._pos++\n          if (this.done()) {\n            throw new Error(`${decodeErrPrefix} unexpected string termination at position ${this._pos}`)\n          }\n          ch1 = this.ch()\n          this._pos++\n          switch (ch1) {\n            case 34: // '\"'\n            case 39: // '\\''\n            case 92: // '\\'\n            case 47: // '/'\n              chars.push(ch1)\n              break\n            case 98: // 'b'\n              chars.push(8)\n              break\n            case 116: // 't'\n              chars.push(9)\n              break\n            case 110: // 'n'\n              chars.push(10)\n              break\n            case 102: // 'f'\n              chars.push(12)\n              break\n            case 114: // 'r'\n              chars.push(13)\n              break\n            case 117: // 'u'\n              chars.push(readu4())\n              break\n            default:\n              throw new Error(`${decodeErrPrefix} unexpected string escape character at position ${this._pos}`)\n          }\n          break\n        case 34: // '\"'\n          this._pos++\n          return new Token(Type.string, decodeCodePointsArray(chars), this._pos - startPos)\n        default:\n          if (ch < 32) { // ' '\n            throw new Error(`${decodeErrPrefix} invalid control character at position ${this._pos}`)\n          } else if (ch < 0x80) {\n            chars.push(ch)\n            this._pos++\n          } else {\n            readUtf8Char()\n          }\n      }\n    }\n\n    throw new Error(`${decodeErrPrefix} unexpected end of string at position ${this._pos}`)\n  }\n\n  /**\n   * @returns {Token}\n   */\n  parseValue () {\n    switch (this.ch()) {\n      case 123: // '{'\n        this.modeStack.push('obj-start')\n        this._pos++\n        return new Token(Type.map, Infinity, 1)\n      case 91: // '['\n        this.modeStack.push('array-start')\n        this._pos++\n        return new Token(Type.array, Infinity, 1)\n      case 34: { // '\"'\n        return this.parseString()\n      }\n      case 110: // 'n' / null\n        this.expect([110, 117, 108, 108]) // 'null'\n        return new Token(Type.null, null, 4)\n      case 102: // 'f' / // false\n        this.expect([102, 97, 108, 115, 101]) // 'false'\n        return new Token(Type.false, false, 5)\n      case 116: // 't' / // true\n        this.expect([116, 114, 117, 101]) // 'true'\n        return new Token(Type.true, true, 4)\n      case 45: // '-'\n      case 48: // '0'\n      case 49: // '1'\n      case 50: // '2'\n      case 51: // '3'\n      case 52: // '4'\n      case 53: // '5'\n      case 54: // '6'\n      case 55: // '7'\n      case 56: // '8'\n      case 57: // '9'\n        return this.parseNumber()\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}`)\n    }\n  }\n\n  /**\n   * @returns {Token}\n   */\n  next () {\n    this.skipWhitespace()\n    switch (this.currentMode()) {\n      case 'value':\n        this.modeStack.pop()\n        return this.parseValue()\n      case 'array-value': {\n        this.modeStack.pop()\n        if (this.ch() === 93) { // ']'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        if (this.ch() !== 44) { // ','\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting array delimiter but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.modeStack.push('array-value')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      case 'array-start': {\n        this.modeStack.pop()\n        if (this.ch() === 93) { // ']'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        this.modeStack.push('array-value')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      // @ts-ignore\n      case 'obj-key':\n        if (this.ch() === 125) { // '}'\n          this.modeStack.pop()\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        if (this.ch() !== 44) { // ','\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting object delimiter but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.skipWhitespace()\n      case 'obj-start': { // eslint-disable-line no-fallthrough\n        this.modeStack.pop()\n        if (this.ch() === 125) { // '}'\n          this._pos++\n          this.skipWhitespace()\n          return new Token(Type.break, undefined, 1)\n        }\n        const token = this.parseString()\n        this.skipWhitespace()\n        if (this.ch() !== 58) { // ':'\n          throw new Error(`${decodeErrPrefix} unexpected character at position ${this._pos}, was expecting key/value delimiter ':' but found '${String.fromCharCode(this.ch())}'`)\n        }\n        this._pos++\n        this.modeStack.push('obj-value')\n        return token\n      }\n      case 'obj-value': {\n        this.modeStack.pop()\n        this.modeStack.push('obj-key')\n        this.skipWhitespace()\n        return this.parseValue()\n      }\n      /* c8 ignore next 2 */\n      default:\n        throw new Error(`${decodeErrPrefix} unexpected parse state at position ${this._pos}; this shouldn't happen`)\n    }\n  }\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {any}\n */\nfunction decode (data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options)\n  return _decode(data, options)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {DecodeOptions} [options]\n * @returns {[any, Uint8Array]}\n */\nfunction decodeFirst (data, options) {\n  options = Object.assign({ tokenizer: new Tokenizer(data, options) }, options)\n  return _decodeFirst(data, options)\n}\n\nexport { decode, decodeFirst, Tokenizer }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}