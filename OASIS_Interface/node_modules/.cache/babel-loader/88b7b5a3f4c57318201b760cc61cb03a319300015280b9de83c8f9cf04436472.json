{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n    case 'Where':\n      {\n        const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await tfOps.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n    case 'ListDiff':\n      {\n        return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":{"version":3,"names":["tfOps","getParamValue","nmsParams","node","tensorMap","context","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","executeOp","op","result","image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","condition","cast","whereAsync","dispose","setdiff1dAsync","TypeError","CATEGORY"],"sources":["../../../../../../../tfjs-converter/src/operations/executors/dynamic_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}