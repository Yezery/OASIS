{"ast":null,"code":"const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\nclass RateLimiterMySQL extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: anySqlClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   dbName: 'string',\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createDbAndTable().then(() => {\n        this.tableCreated = true;\n        if (this.clearExpiredByTimeout) {\n          this._clearExpiredHourAgo();\n        }\n        if (typeof cb === 'function') {\n          cb();\n        }\n      }).catch(err => {\n        if (typeof cb === 'function') {\n          cb(err);\n        } else {\n          throw err;\n        }\n      });\n    } else {\n      if (this.clearExpiredByTimeout) {\n        this._clearExpiredHourAgo();\n      }\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n  clearExpired(expire) {\n    return new Promise(resolve => {\n      this._getConnection().then(conn => {\n        conn.query(`DELETE FROM ??.?? WHERE expire < ?`, [this.dbName, this.tableName, expire], () => {\n          this._releaseConnection(conn);\n          resolve();\n        });\n      }).catch(() => {\n        resolve();\n      });\n    });\n  }\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n      .then(() => {\n        this._clearExpiredHourAgo();\n      });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return new Promise((resolve, reject) => {\n          this.client.getConnection((errConn, conn) => {\n            if (errConn) {\n              return reject(errConn);\n            }\n            resolve(conn);\n          });\n        });\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return conn.release();\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createDbAndTable() {\n    return new Promise((resolve, reject) => {\n      this._getConnection().then(conn => {\n        conn.query(`CREATE DATABASE IF NOT EXISTS \\`${this.dbName}\\`;`, errDb => {\n          if (errDb) {\n            this._releaseConnection(conn);\n            return reject(errDb);\n          }\n          conn.query(this._getCreateTableStmt(), err => {\n            if (err) {\n              this._releaseConnection(conn);\n              return reject(err);\n            }\n            this._releaseConnection(conn);\n            resolve();\n          });\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS \\`${this.dbName}\\`.\\`${this.tableName}\\` (` + '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' + '`points` INT(9) NOT NULL default 0,' + '`expire` BIGINT UNSIGNED,' + 'PRIMARY KEY (`key`)' + ') ENGINE = INNODB;';\n  }\n  get clientType() {\n    return this._clientType;\n  }\n  set clientType(value) {\n    if (typeof value === 'undefined') {\n      if (this.client.constructor.name === 'Connection') {\n        value = 'connection';\n      } else if (this.client.constructor.name === 'Pool') {\n        value = 'pool';\n      } else if (this.client.constructor.name === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n    this._clientType = value.toLowerCase();\n  }\n  get dbName() {\n    return this._dbName;\n  }\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;\n  }\n  get tableName() {\n    return this._tableName;\n  }\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n  get tableCreated() {\n    return this._tableCreated;\n  }\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const [row] = result;\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire ? Math.max(row.expire - Date.now(), 0) : -1;\n    return res;\n  }\n  _upsertTransaction(conn, key, points, msDuration, forceExpire) {\n    return new Promise((resolve, reject) => {\n      conn.query('BEGIN', errBegin => {\n        if (errBegin) {\n          conn.rollback();\n          return reject(errBegin);\n        }\n        const dateNow = Date.now();\n        const newExpire = msDuration > 0 ? dateNow + msDuration : null;\n        let q;\n        let values;\n        if (forceExpire) {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = ?, \n            expire = ?;`;\n          values = [this.dbName, this.tableName, key, points, newExpire, points, newExpire];\n        } else {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = IF(expire <= ?, ?, points + (?)), \n            expire = IF(expire <= ?, ?, expire);`;\n          values = [this.dbName, this.tableName, key, points, newExpire, dateNow, points, points, dateNow, newExpire];\n        }\n        conn.query(q, values, errUpsert => {\n          if (errUpsert) {\n            conn.rollback();\n            return reject(errUpsert);\n          }\n          conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [this.dbName, this.tableName, key], (errSelect, res) => {\n            if (errSelect) {\n              conn.rollback();\n              return reject(errSelect);\n            }\n            conn.query('COMMIT', err => {\n              if (err) {\n                conn.rollback();\n                return reject(err);\n              }\n              resolve(res);\n            });\n          });\n        });\n      });\n    });\n  }\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n    return new Promise((resolve, reject) => {\n      this._getConnection().then(conn => {\n        this._upsertTransaction(conn, key, points, msDuration, forceExpire).then(res => {\n          resolve(res);\n          this._releaseConnection(conn);\n        }).catch(err => {\n          reject(err);\n          this._releaseConnection(conn);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n    return new Promise((resolve, reject) => {\n      this._getConnection().then(conn => {\n        conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)', [this.dbName, this.tableName, rlKey, Date.now()], (err, res) => {\n          if (err) {\n            reject(err);\n          } else if (res.length === 0) {\n            resolve(null);\n          } else {\n            resolve(res);\n          }\n          this._releaseConnection(conn);\n        } // eslint-disable-line\n        );\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n    return new Promise((resolve, reject) => {\n      this._getConnection().then(conn => {\n        conn.query('DELETE FROM ??.?? WHERE `key` = ?', [this.dbName, this.tableName, rlKey], (err, res) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(res.affectedRows > 0);\n          }\n          this._releaseConnection(conn);\n        } // eslint-disable-line\n        );\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n}\nmodule.exports = RateLimiterMySQL;","map":{"version":3,"names":["RateLimiterStoreAbstract","require","RateLimiterRes","RateLimiterMySQL","constructor","opts","cb","client","storeClient","clientType","storeType","dbName","tableName","clearExpiredByTimeout","tableCreated","_createDbAndTable","then","_clearExpiredHourAgo","catch","err","clearExpired","expire","Promise","resolve","_getConnection","conn","query","_releaseConnection","_clearExpiredTimeoutId","clearTimeout","setTimeout","Date","now","unref","reject","getConnection","errConn","connectionManager","acquireConnection","release","releaseConnection","errDb","_getCreateTableStmt","_clientType","value","name","Error","toLowerCase","_dbName","_tableName","keyPrefix","_tableCreated","_clearExpiredByTimeout","Boolean","_getRateLimiterRes","rlKey","changedPoints","result","res","row","isFirstInDuration","points","consumedPoints","remainingPoints","Math","max","msBeforeNext","_upsertTransaction","key","msDuration","forceExpire","errBegin","rollback","dateNow","newExpire","q","values","errUpsert","errSelect","_upsert","_get","length","_delete","affectedRows","module","exports"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/rate-limiter-flexible@2.4.2/node_modules/rate-limiter-flexible/lib/RateLimiterMySQL.js"],"sourcesContent":["const RateLimiterStoreAbstract = require('./RateLimiterStoreAbstract');\nconst RateLimiterRes = require('./RateLimiterRes');\n\nclass RateLimiterMySQL extends RateLimiterStoreAbstract {\n  /**\n   * @callback callback\n   * @param {Object} err\n   *\n   * @param {Object} opts\n   * @param {callback} cb\n   * Defaults {\n   *   ... see other in RateLimiterStoreAbstract\n   *\n   *   storeClient: anySqlClient,\n   *   storeType: 'knex', // required only for Knex instance\n   *   dbName: 'string',\n   *   tableName: 'string',\n   * }\n   */\n  constructor(opts, cb = null) {\n    super(opts);\n\n    this.client = opts.storeClient;\n    this.clientType = opts.storeType;\n\n    this.dbName = opts.dbName;\n    this.tableName = opts.tableName;\n\n    this.clearExpiredByTimeout = opts.clearExpiredByTimeout;\n\n    this.tableCreated = opts.tableCreated;\n    if (!this.tableCreated) {\n      this._createDbAndTable()\n        .then(() => {\n          this.tableCreated = true;\n          if (this.clearExpiredByTimeout) {\n            this._clearExpiredHourAgo();\n          }\n          if (typeof cb === 'function') {\n            cb();\n          }\n        })\n        .catch((err) => {\n          if (typeof cb === 'function') {\n            cb(err);\n          } else {\n            throw err;\n          }\n        });\n    } else {\n      if (this.clearExpiredByTimeout) {\n        this._clearExpiredHourAgo();\n      }\n      if (typeof cb === 'function') {\n        cb();\n      }\n    }\n  }\n\n  clearExpired(expire) {\n    return new Promise((resolve) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`DELETE FROM ??.?? WHERE expire < ?`, [this.dbName, this.tableName, expire], () => {\n            this._releaseConnection(conn);\n            resolve();\n          });\n        })\n        .catch(() => {\n          resolve();\n        });\n    });\n  }\n\n  _clearExpiredHourAgo() {\n    if (this._clearExpiredTimeoutId) {\n      clearTimeout(this._clearExpiredTimeoutId);\n    }\n    this._clearExpiredTimeoutId = setTimeout(() => {\n      this.clearExpired(Date.now() - 3600000) // Never rejected\n        .then(() => {\n          this._clearExpiredHourAgo();\n        });\n    }, 300000);\n    this._clearExpiredTimeoutId.unref();\n  }\n\n  /**\n   *\n   * @return Promise<any>\n   * @private\n   */\n  _getConnection() {\n    switch (this.clientType) {\n      case 'pool':\n        return new Promise((resolve, reject) => {\n          this.client.getConnection((errConn, conn) => {\n            if (errConn) {\n              return reject(errConn);\n            }\n\n            resolve(conn);\n          });\n        });\n      case 'sequelize':\n        return this.client.connectionManager.getConnection();\n      case 'knex':\n        return this.client.client.acquireConnection();\n      default:\n        return Promise.resolve(this.client);\n    }\n  }\n\n  _releaseConnection(conn) {\n    switch (this.clientType) {\n      case 'pool':\n        return conn.release();\n      case 'sequelize':\n        return this.client.connectionManager.releaseConnection(conn);\n      case 'knex':\n        return this.client.client.releaseConnection(conn);\n      default:\n        return true;\n    }\n  }\n\n  /**\n   *\n   * @returns {Promise<any>}\n   * @private\n   */\n  _createDbAndTable() {\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(`CREATE DATABASE IF NOT EXISTS \\`${this.dbName}\\`;`, (errDb) => {\n            if (errDb) {\n              this._releaseConnection(conn);\n              return reject(errDb);\n            }\n            conn.query(this._getCreateTableStmt(), (err) => {\n              if (err) {\n                this._releaseConnection(conn);\n                return reject(err);\n              }\n              this._releaseConnection(conn);\n              resolve();\n            });\n          });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _getCreateTableStmt() {\n    return `CREATE TABLE IF NOT EXISTS \\`${this.dbName}\\`.\\`${this.tableName}\\` (` +\n      '`key` VARCHAR(255) CHARACTER SET utf8 NOT NULL,' +\n      '`points` INT(9) NOT NULL default 0,' +\n      '`expire` BIGINT UNSIGNED,' +\n      'PRIMARY KEY (`key`)' +\n      ') ENGINE = INNODB;';\n  }\n\n  get clientType() {\n    return this._clientType;\n  }\n\n  set clientType(value) {\n    if (typeof value === 'undefined') {\n      if (this.client.constructor.name === 'Connection') {\n        value = 'connection';\n      } else if (this.client.constructor.name === 'Pool') {\n        value = 'pool';\n      } else if (this.client.constructor.name === 'Sequelize') {\n        value = 'sequelize';\n      } else {\n        throw new Error('storeType is not defined');\n      }\n    }\n    this._clientType = value.toLowerCase();\n  }\n\n  get dbName() {\n    return this._dbName;\n  }\n\n  set dbName(value) {\n    this._dbName = typeof value === 'undefined' ? 'rtlmtrflx' : value;\n  }\n\n  get tableName() {\n    return this._tableName;\n  }\n\n  set tableName(value) {\n    this._tableName = typeof value === 'undefined' ? this.keyPrefix : value;\n  }\n\n  get tableCreated() {\n    return this._tableCreated\n  }\n\n  set tableCreated(value) {\n    this._tableCreated = typeof value === 'undefined' ? false : !!value;\n  }\n\n  get clearExpiredByTimeout() {\n    return this._clearExpiredByTimeout;\n  }\n\n  set clearExpiredByTimeout(value) {\n    this._clearExpiredByTimeout = typeof value === 'undefined' ? true : Boolean(value);\n  }\n\n  _getRateLimiterRes(rlKey, changedPoints, result) {\n    const res = new RateLimiterRes();\n    const [row] = result;\n\n    res.isFirstInDuration = changedPoints === row.points;\n    res.consumedPoints = res.isFirstInDuration ? changedPoints : row.points;\n\n    res.remainingPoints = Math.max(this.points - res.consumedPoints, 0);\n    res.msBeforeNext = row.expire\n      ? Math.max(row.expire - Date.now(), 0)\n      : -1;\n\n    return res;\n  }\n\n  _upsertTransaction(conn, key, points, msDuration, forceExpire) {\n    return new Promise((resolve, reject) => {\n      conn.query('BEGIN', (errBegin) => {\n        if (errBegin) {\n          conn.rollback();\n\n          return reject(errBegin);\n        }\n\n        const dateNow = Date.now();\n        const newExpire = msDuration > 0 ? dateNow + msDuration : null;\n\n        let q;\n        let values;\n        if (forceExpire) {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = ?, \n            expire = ?;`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            points,\n            newExpire,\n          ];\n        } else {\n          q = `INSERT INTO ??.?? VALUES (?, ?, ?)\n          ON DUPLICATE KEY UPDATE \n            points = IF(expire <= ?, ?, points + (?)), \n            expire = IF(expire <= ?, ?, expire);`;\n          values = [\n            this.dbName, this.tableName, key, points, newExpire,\n            dateNow, points, points,\n            dateNow, newExpire,\n          ];\n        }\n\n        conn.query(q, values, (errUpsert) => {\n          if (errUpsert) {\n            conn.rollback();\n\n            return reject(errUpsert);\n          }\n          conn.query('SELECT points, expire FROM ??.?? WHERE `key` = ?;', [this.dbName, this.tableName, key], (errSelect, res) => {\n            if (errSelect) {\n              conn.rollback();\n\n              return reject(errSelect);\n            }\n\n            conn.query('COMMIT', (err) => {\n              if (err) {\n                conn.rollback();\n\n                return reject(err);\n              }\n\n              resolve(res);\n            });\n          });\n        });\n      });\n    });\n  }\n\n  _upsert(key, points, msDuration, forceExpire = false) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          this._upsertTransaction(conn, key, points, msDuration, forceExpire)\n            .then((res) => {\n              resolve(res);\n              this._releaseConnection(conn);\n            })\n            .catch((err) => {\n              reject(err);\n              this._releaseConnection(conn);\n            });\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _get(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'SELECT points, expire FROM ??.?? WHERE `key` = ? AND (`expire` > ? OR `expire` IS NULL)',\n            [this.dbName, this.tableName, rlKey, Date.now()],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else if (res.length === 0) {\n                resolve(null);\n              } else {\n                resolve(res);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n\n  _delete(rlKey) {\n    if (!this.tableCreated) {\n      return Promise.reject(Error('Table is not created yet'));\n    }\n\n    return new Promise((resolve, reject) => {\n      this._getConnection()\n        .then((conn) => {\n          conn.query(\n            'DELETE FROM ??.?? WHERE `key` = ?',\n            [this.dbName, this.tableName, rlKey],\n            (err, res) => {\n              if (err) {\n                reject(err);\n              } else {\n                resolve(res.affectedRows > 0);\n              }\n\n              this._releaseConnection(conn);\n            } // eslint-disable-line\n          );\n        })\n        .catch((err) => {\n          reject(err);\n        });\n    });\n  }\n}\n\nmodule.exports = RateLimiterMySQL;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}