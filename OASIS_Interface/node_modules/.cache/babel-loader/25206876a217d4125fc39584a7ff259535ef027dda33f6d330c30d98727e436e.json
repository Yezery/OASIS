{"ast":null,"code":"import { Uint8ArrayList } from 'uint8arraylist';\nimport defer from 'p-defer';\nconst DEFAULT_BATCH_SIZE = 1024 * 1024;\nconst DEFAULT_SERIALIZE = (buf, list) => {\n  list.append(buf);\n};\nasync function* batchedBytes(source, options = {}) {\n  let buffer = new Uint8ArrayList();\n  let ended = false;\n  let deferred = defer();\n  let size = Number(options.size ?? DEFAULT_BATCH_SIZE);\n  if (isNaN(size) || size === 0 || size < 0) {\n    size = DEFAULT_BATCH_SIZE;\n  }\n  const yieldAfter = options.yieldAfter ?? 0;\n  const serialize = options.serialize ?? DEFAULT_SERIALIZE;\n  void Promise.resolve().then(async () => {\n    try {\n      let timeout;\n      for await (const buf of source) {\n        serialize(buf, buffer);\n        if (buffer.byteLength >= size) {\n          clearTimeout(timeout);\n          deferred.resolve();\n          continue;\n        }\n        timeout = setTimeout(() => {\n          deferred.resolve();\n        }, yieldAfter);\n      }\n      clearTimeout(timeout);\n      deferred.resolve();\n    } catch (err) {\n      deferred.reject(err);\n    } finally {\n      ended = true;\n    }\n  });\n  while (!ended) {\n    // eslint-disable-line no-unmodified-loop-condition\n    await deferred.promise;\n    deferred = defer();\n    if (buffer.byteLength > 0) {\n      const b = buffer;\n      buffer = new Uint8ArrayList();\n      yield b.subarray();\n    }\n  }\n}\nexport default batchedBytes;","map":{"version":3,"names":["Uint8ArrayList","defer","DEFAULT_BATCH_SIZE","DEFAULT_SERIALIZE","buf","list","append","batchedBytes","source","options","buffer","ended","deferred","size","Number","isNaN","yieldAfter","serialize","Promise","resolve","then","timeout","byteLength","clearTimeout","setTimeout","err","reject","promise","b","subarray"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;AAC/C,OAAOC,KAAK,MAAM,SAAS;AAG3B,MAAMC,kBAAkB,GAAG,IAAI,GAAG,IAAI;AACtC,MAAMC,iBAAiB,GAAGA,CAACC,GAAgC,EAAEC,IAAoB,KAAU;EAAGA,IAAI,CAACC,MAAM,CAACF,GAAG,CAAC;AAAC,CAAC;AAyChH,gBAAiBG,YAAYA,CAAEC,MAAmB,EAAEC,OAAA,GAAe,EAAE;EACnE,IAAIC,MAAM,GAAG,IAAIV,cAAc,EAAE;EACjC,IAAIW,KAAK,GAAG,KAAK;EACjB,IAAIC,QAAQ,GAAGX,KAAK,EAAE;EAEtB,IAAIY,IAAI,GAAGC,MAAM,CAACL,OAAO,CAACI,IAAI,IAAIX,kBAAkB,CAAC;EAErD,IAAIa,KAAK,CAACF,IAAI,CAAC,IAAIA,IAAI,KAAK,CAAC,IAAIA,IAAI,GAAG,CAAC,EAAE;IACzCA,IAAI,GAAGX,kBAAkB;;EAG3B,MAAMc,UAAU,GAAGP,OAAO,CAACO,UAAU,IAAI,CAAC;EAC1C,MAAMC,SAAS,GAAGR,OAAO,CAACQ,SAAS,IAAId,iBAAiB;EAExD,KAAKe,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC,YAAW;IACrC,IAAI;MACF,IAAIC,OAAO;MAEX,WAAW,MAAMjB,GAAG,IAAII,MAAM,EAAE;QAC9BS,SAAS,CAACb,GAAG,EAAEM,MAAM,CAAC;QAEtB,IAAIA,MAAM,CAACY,UAAU,IAAIT,IAAI,EAAE;UAC7BU,YAAY,CAACF,OAAO,CAAC;UACrBT,QAAQ,CAACO,OAAO,EAAE;UAClB;;QAGFE,OAAO,GAAGG,UAAU,CAAC,MAAK;UACxBZ,QAAQ,CAACO,OAAO,EAAE;QACpB,CAAC,EAAEH,UAAU,CAAC;;MAGhBO,YAAY,CAACF,OAAO,CAAC;MACrBT,QAAQ,CAACO,OAAO,EAAE;KACnB,CAAC,OAAOM,GAAG,EAAE;MACZb,QAAQ,CAACc,MAAM,CAACD,GAAG,CAAC;KACrB,SAAS;MACRd,KAAK,GAAG,IAAI;;EAEhB,CAAC,CAAC;EAEF,OAAO,CAACA,KAAK,EAAE;IAAE;IACf,MAAMC,QAAQ,CAACe,OAAO;IACtBf,QAAQ,GAAGX,KAAK,EAAE;IAClB,IAAIS,MAAM,CAACY,UAAU,GAAG,CAAC,EAAE;MACzB,MAAMM,CAAC,GAAGlB,MAAM;MAChBA,MAAM,GAAG,IAAIV,cAAc,EAAE;MAC7B,MAAM4B,CAAC,CAACC,QAAQ,EAAE;;;AAGxB;AAEA,eAAetB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}