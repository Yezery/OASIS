{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { ALPHA, K, DEFAULT_QUERY_TIMEOUT } from '../constants.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { queryPath } from './query-path.js';\nimport merge from 'it-merge';\nimport { setMaxListeners } from 'events';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nimport { PeerSet } from '@libp2p/peer-collections';\n/**\n * Keeps track of all running queries\n */\nexport class QueryManager {\n  constructor(components, init) {\n    const {\n      lan = false,\n      disjointPaths = K,\n      alpha = ALPHA\n    } = init;\n    this.components = components;\n    this.disjointPaths = disjointPaths ?? K;\n    this.controllers = new Set();\n    this.running = false;\n    this.alpha = alpha ?? ALPHA;\n    this.lan = lan;\n    this.queries = 0;\n  }\n  isStarted() {\n    return this.running;\n  }\n  /**\n   * Starts the query manager\n   */\n  async start() {\n    this.running = true;\n    if (this.components.metrics != null && this.metrics == null) {\n      this.metrics = {\n        runningQueries: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_running_queries`),\n        queryTime: this.components.metrics.registerMetric(`libp2p_kad_dht_${this.lan ? 'lan' : 'wan'}_query_time_seconds`)\n      };\n    }\n  }\n  /**\n   * Stops all queries\n   */\n  async stop() {\n    this.running = false;\n    for (const controller of this.controllers) {\n      controller.abort();\n    }\n    this.controllers.clear();\n  }\n  async *run(key, peers, queryFunc, options = {}) {\n    if (!this.running) {\n      throw new Error('QueryManager not started');\n    }\n    const stopQueryTimer = this.metrics?.queryTime.timer();\n    let timeoutController;\n    if (options.signal == null) {\n      // don't let queries run forever\n      timeoutController = new TimeoutController(DEFAULT_QUERY_TIMEOUT);\n      options.signal = timeoutController.signal;\n      // this signal will get listened to for network requests, etc\n      // so make sure we don't make a lot of noise in the logs\n      try {\n        if (setMaxListeners != null) {\n          setMaxListeners(Infinity, timeoutController.signal);\n        }\n      } catch {} // fails on node < 15.4\n    }\n    // allow us to stop queries on shut down\n    const abortController = new AbortController();\n    this.controllers.add(abortController);\n    const signals = [abortController.signal];\n    if (options.signal != null) {\n      signals.push(options.signal);\n    }\n    const signal = anySignal(signals);\n    // this signal will get listened to for every invocation of queryFunc\n    // so make sure we don't make a lot of noise in the logs\n    try {\n      if (setMaxListeners != null) {\n        setMaxListeners(Infinity, signal);\n      }\n    } catch {} // fails on node < 15.4\n    const log = logger(`libp2p:kad-dht:${this.lan ? 'lan' : 'wan'}:query:` + uint8ArrayToString(key, 'base58btc'));\n    // query a subset of peers up to `kBucketSize / 2` in length\n    const peersToQuery = peers.slice(0, Math.min(this.disjointPaths, peers.length));\n    const startTime = Date.now();\n    const cleanUp = new EventEmitter();\n    try {\n      log('query:start');\n      this.queries++;\n      this.metrics?.runningQueries.update(this.queries);\n      if (peers.length === 0) {\n        log.error('Running query with no peers');\n        return;\n      }\n      // make sure we don't get trapped in a loop\n      const peersSeen = new PeerSet();\n      // Create query paths from the starting peers\n      const paths = peersToQuery.map((peer, index) => {\n        return queryPath({\n          key,\n          startingPeer: peer,\n          ourPeerId: this.components.peerId,\n          signal,\n          query: queryFunc,\n          pathIndex: index,\n          numPaths: peersToQuery.length,\n          alpha: this.alpha,\n          cleanUp,\n          queryFuncTimeout: options.queryFuncTimeout,\n          log,\n          peersSeen\n        });\n      });\n      // Execute the query along each disjoint path and yield their results as they become available\n      for await (const event of merge(...paths)) {\n        yield event;\n        if (event.name === 'QUERY_ERROR') {\n          log('error', event.error);\n        }\n      }\n    } catch (err) {\n      if (!this.running && err.code === 'ERR_QUERY_ABORTED') {\n        // ignore query aborted errors that were thrown during query manager shutdown\n      } else {\n        throw err;\n      }\n    } finally {\n      this.controllers.delete(abortController);\n      if (timeoutController != null) {\n        timeoutController.clear();\n      }\n      this.queries--;\n      this.metrics?.runningQueries.update(this.queries);\n      if (stopQueryTimer != null) {\n        stopQueryTimer();\n      }\n      cleanUp.dispatchEvent(new CustomEvent('cleanup'));\n      log('query:done in %dms', Date.now() - startTime);\n    }\n  }\n}","map":{"version":3,"names":["TimeoutController","anySignal","ALPHA","K","DEFAULT_QUERY_TIMEOUT","toString","uint8ArrayToString","queryPath","merge","setMaxListeners","EventEmitter","CustomEvent","logger","PeerSet","QueryManager","constructor","components","init","lan","disjointPaths","alpha","controllers","Set","running","queries","isStarted","start","metrics","runningQueries","registerMetric","queryTime","stop","controller","abort","clear","run","key","peers","queryFunc","options","Error","stopQueryTimer","timer","timeoutController","signal","Infinity","abortController","AbortController","add","signals","push","log","peersToQuery","slice","Math","min","length","startTime","Date","now","cleanUp","update","error","peersSeen","paths","map","peer","index","startingPeer","ourPeerId","peerId","query","pathIndex","numPaths","queryFuncTimeout","event","name","err","code","delete","dispatchEvent"],"sources":["../../../src/query/manager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}