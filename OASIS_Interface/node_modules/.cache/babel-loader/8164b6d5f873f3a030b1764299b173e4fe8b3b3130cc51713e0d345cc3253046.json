{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut({\n  repo,\n  codecs,\n  hashers,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put(dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor');\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`);\n      }\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec);\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`);\n        }\n        dagNode = inputCodec.decode(dagNode);\n      }\n      const cidVersion = options.version != null ? options.version : 1;\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`);\n      }\n      const buf = storeCodec.encode(dagNode);\n      const hash = await hasher.digest(buf);\n      const cid = CID.create(cidVersion, storeCodec.code, hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid);\n      }\n      if (options.preload !== false) {\n        preload(cid);\n      }\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n  return withTimeoutOption(put);\n}","map":{"version":3,"names":["CID","withTimeoutOption","createPut","repo","codecs","hashers","preload","put","dagNode","options","release","pin","gcLock","readLock","storeCodec","getCodec","Error","inputCodec","Uint8Array","decode","cidVersion","version","hasher","getHasher","hashAlg","buf","encode","hash","digest","cid","create","code","blocks","signal","pins","pinRecursively"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/dag/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":";;;AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,IAAI;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAQ,CAAC,EAAE;EAC7D;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,OAAO,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACzC,MAAMC,OAAO,GAAGD,OAAO,CAACE,GAAG,GAAG,MAAMR,IAAI,CAACS,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAG,IAAI;IAEjE,IAAI;MACF,MAAMC,UAAU,GAAG,MAAMV,MAAM,CAACW,QAAQ,CAACN,OAAO,CAACK,UAAU,IAAI,UAAU,CAAC;MAC1E;MACA,IAAI,CAACA,UAAU,EAAE;QACf,MAAM,IAAIE,KAAK,CAAE,sBAAqBP,OAAO,CAACK,UAAW,kEAAiE,CAAC;MAC7H;MAEA,IAAIL,OAAO,CAACQ,UAAU,EAAE;QACtB,IAAI,EAAET,OAAO,YAAYU,UAAU,CAAC,EAAE;UACpC,MAAM,IAAIF,KAAK,CAAC,sDAAsD,CAAC;QACzE;QACA,MAAMC,UAAU,GAAG,MAAMb,MAAM,CAACW,QAAQ,CAACN,OAAO,CAACQ,UAAU,CAAC;QAC5D,IAAI,CAACA,UAAU,EAAE;UACf,MAAM,IAAID,KAAK,CAAE,sBAAqBP,OAAO,CAACQ,UAAW,kEAAiE,CAAC;QAC7H;QACAT,OAAO,GAAGS,UAAU,CAACE,MAAM,CAACX,OAAO,CAAC;MACtC;MAEA,MAAMY,UAAU,GAAGX,OAAO,CAACY,OAAO,IAAI,IAAI,GAAGZ,OAAO,CAACY,OAAO,GAAG,CAAC;MAChE,MAAMC,MAAM,GAAG,MAAMjB,OAAO,CAACkB,SAAS,CAACd,OAAO,CAACe,OAAO,IAAI,UAAU,CAAC;MAErE,IAAI,CAACF,MAAM,EAAE;QACX,MAAM,IAAIN,KAAK,CAAE,0BAAyBP,OAAO,CAACe,OAAQ,uEAAsE,CAAC;MACnI;MAEA,MAAMC,GAAG,GAAGX,UAAU,CAACY,MAAM,CAAClB,OAAO,CAAC;MACtC,MAAMmB,IAAI,GAAG,MAAML,MAAM,CAACM,MAAM,CAACH,GAAG,CAAC;MACrC,MAAMI,GAAG,GAAG7B,GAAG,CAAC8B,MAAM,CAACV,UAAU,EAAEN,UAAU,CAACiB,IAAI,EAAEJ,IAAI,CAAC;MAEzD,MAAMxB,IAAI,CAAC6B,MAAM,CAACzB,GAAG,CAACsB,GAAG,EAAEJ,GAAG,EAAE;QAC9BQ,MAAM,EAAExB,OAAO,CAACwB;MAClB,CAAC,CAAC;MAEF,IAAIxB,OAAO,CAACE,GAAG,EAAE;QACf,MAAMR,IAAI,CAAC+B,IAAI,CAACC,cAAc,CAACN,GAAG,CAAC;MACrC;MAEA,IAAIpB,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;QAC7BA,OAAO,CAACuB,GAAG,CAAC;MACd;MAEA,OAAOA,GAAG;IACZ,CAAC,SAAS;MACR,IAAInB,OAAO,EAAE;QACXA,OAAO,CAAC,CAAC;MACX;IACF;EACF;EAEA,OAAOT,iBAAiB,CAACM,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}