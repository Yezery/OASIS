{"ast":null,"code":"import Queue from 'yocto-queue';\nexport default function pLimit(concurrency) {\n  if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n  const queue = new Queue();\n  let activeCount = 0;\n  const next = () => {\n    activeCount--;\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n  const run = async (fn, resolve, args) => {\n    activeCount++;\n    const result = (async () => fn(...args))();\n    resolve(result);\n    try {\n      await result;\n    } catch {}\n    next();\n  };\n  const enqueue = (fn, resolve, args) => {\n    queue.enqueue(run.bind(undefined, fn, resolve, args));\n    (async () => {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      await Promise.resolve();\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n  const generator = (fn, ...args) => new Promise(resolve => {\n    enqueue(fn, resolve, args);\n  });\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n}","map":{"version":3,"names":["Queue","pLimit","concurrency","Number","isInteger","POSITIVE_INFINITY","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","args","result","enqueue","bind","undefined","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/p-limit@4.0.0/node_modules/p-limit/index.js"],"sourcesContent":["import Queue from 'yocto-queue';\n\nexport default function pLimit(concurrency) {\n\tif (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, args) => {\n\t\tqueue.enqueue(run.bind(undefined, fn, resolve, args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount,\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size,\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t},\n\t\t},\n\t});\n\n\treturn generator;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,aAAa;AAE/B,eAAe,SAASC,MAAMA,CAACC,WAAW,EAAE;EAC3C,IAAI,EAAE,CAACC,MAAM,CAACC,SAAS,CAACF,WAAW,CAAC,IAAIA,WAAW,KAAKC,MAAM,CAACE,iBAAiB,KAAKH,WAAW,GAAG,CAAC,CAAC,EAAE;IACtG,MAAM,IAAII,SAAS,CAAC,qDAAqD,CAAC;EAC3E;EAEA,MAAMC,KAAK,GAAG,IAAIP,KAAK,CAAC,CAAC;EACzB,IAAIQ,WAAW,GAAG,CAAC;EAEnB,MAAMC,IAAI,GAAGA,CAAA,KAAM;IAClBD,WAAW,EAAE;IAEb,IAAID,KAAK,CAACG,IAAI,GAAG,CAAC,EAAE;MACnBH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;IAClB;EACD,CAAC;EAED,MAAMC,GAAG,GAAG,MAAAA,CAAOC,EAAE,EAAEC,OAAO,EAAEC,IAAI,KAAK;IACxCP,WAAW,EAAE;IAEb,MAAMQ,MAAM,GAAG,CAAC,YAAYH,EAAE,CAAC,GAAGE,IAAI,CAAC,EAAE,CAAC;IAE1CD,OAAO,CAACE,MAAM,CAAC;IAEf,IAAI;MACH,MAAMA,MAAM;IACb,CAAC,CAAC,MAAM,CAAC;IAETP,IAAI,CAAC,CAAC;EACP,CAAC;EAED,MAAMQ,OAAO,GAAGA,CAACJ,EAAE,EAAEC,OAAO,EAAEC,IAAI,KAAK;IACtCR,KAAK,CAACU,OAAO,CAACL,GAAG,CAACM,IAAI,CAACC,SAAS,EAAEN,EAAE,EAAEC,OAAO,EAAEC,IAAI,CAAC,CAAC;IAErD,CAAC,YAAY;MACZ;MACA;MACA;MACA;MACA,MAAMK,OAAO,CAACN,OAAO,CAAC,CAAC;MAEvB,IAAIN,WAAW,GAAGN,WAAW,IAAIK,KAAK,CAACG,IAAI,GAAG,CAAC,EAAE;QAChDH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAAC;MAClB;IACD,CAAC,EAAE,CAAC;EACL,CAAC;EAED,MAAMU,SAAS,GAAGA,CAACR,EAAE,EAAE,GAAGE,IAAI,KAAK,IAAIK,OAAO,CAACN,OAAO,IAAI;IACzDG,OAAO,CAACJ,EAAE,EAAEC,OAAO,EAAEC,IAAI,CAAC;EAC3B,CAAC,CAAC;EAEFO,MAAM,CAACC,gBAAgB,CAACF,SAAS,EAAE;IAClCb,WAAW,EAAE;MACZgB,GAAG,EAAEA,CAAA,KAAMhB;IACZ,CAAC;IACDiB,YAAY,EAAE;MACbD,GAAG,EAAEA,CAAA,KAAMjB,KAAK,CAACG;IAClB,CAAC;IACDgB,UAAU,EAAE;MACXC,KAAK,EAAEA,CAAA,KAAM;QACZpB,KAAK,CAACqB,KAAK,CAAC,CAAC;MACd;IACD;EACD,CAAC,CAAC;EAEF,OAAOP,SAAS;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}