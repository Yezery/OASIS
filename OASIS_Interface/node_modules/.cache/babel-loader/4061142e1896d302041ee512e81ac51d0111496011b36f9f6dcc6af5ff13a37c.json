{"ast":null,"code":"import { RecordEnvelope, PeerRecord } from '@libp2p/peer-record';\nimport { logger } from '@libp2p/logger';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:peer-record-updater');\nexport class PeerRecordUpdater {\n  constructor(components) {\n    this.components = components;\n    this.started = false;\n    this.update = this.update.bind(this);\n  }\n  isStarted() {\n    return this.started;\n  }\n  async start() {\n    this.started = true;\n    this.components.transportManager.addEventListener('listener:listening', this.update);\n    this.components.transportManager.addEventListener('listener:close', this.update);\n    this.components.addressManager.addEventListener('change:addresses', this.update);\n  }\n  async stop() {\n    this.started = false;\n    this.components.transportManager.removeEventListener('listener:listening', this.update);\n    this.components.transportManager.removeEventListener('listener:close', this.update);\n    this.components.addressManager.removeEventListener('change:addresses', this.update);\n  }\n  /**\n   * Create (or update if existing) self peer record and store it in the AddressBook.\n   */\n  update() {\n    Promise.resolve().then(async () => {\n      const peerRecord = new PeerRecord({\n        peerId: this.components.peerId,\n        multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code))\n      });\n      const envelope = await RecordEnvelope.seal(peerRecord, this.components.peerId);\n      await this.components.peerStore.addressBook.consumePeerRecord(envelope);\n    }).catch(err => {\n      log.error('Could not update self peer record: %o', err);\n    });\n  }\n}","map":{"version":3,"names":["RecordEnvelope","PeerRecord","logger","protocols","log","PeerRecordUpdater","constructor","components","started","update","bind","isStarted","start","transportManager","addEventListener","addressManager","stop","removeEventListener","Promise","resolve","then","peerRecord","peerId","multiaddrs","getAddresses","map","ma","decapsulateCode","code","envelope","seal","peerStore","addressBook","consumePeerRecord","catch","err","error"],"sources":["../../src/peer-record-updater.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,cAAc,EAAEC,UAAU,QAAQ,qBAAqB;AAEhE,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,SAAS,QAAQ,yBAAyB;AAMnD,MAAMC,GAAG,GAAGF,MAAM,CAAC,4BAA4B,CAAC;AAShD,OAAM,MAAOG,iBAAiB;EAI5BC,YAAaC,UAAuC;IAClD,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACtC;EAEAC,SAASA,CAAA;IACP,OAAO,IAAI,CAACH,OAAO;EACrB;EAEA,MAAMI,KAAKA,CAAA;IACT,IAAI,CAACJ,OAAO,GAAG,IAAI;IACnB,IAAI,CAACD,UAAU,CAACM,gBAAgB,CAACC,gBAAgB,CAAC,oBAAoB,EAAE,IAAI,CAACL,MAAM,CAAC;IACpF,IAAI,CAACF,UAAU,CAACM,gBAAgB,CAACC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAACL,MAAM,CAAC;IAChF,IAAI,CAACF,UAAU,CAACQ,cAAc,CAACD,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAACL,MAAM,CAAC;EAClF;EAEA,MAAMO,IAAIA,CAAA;IACR,IAAI,CAACR,OAAO,GAAG,KAAK;IACpB,IAAI,CAACD,UAAU,CAACM,gBAAgB,CAACI,mBAAmB,CAAC,oBAAoB,EAAE,IAAI,CAACR,MAAM,CAAC;IACvF,IAAI,CAACF,UAAU,CAACM,gBAAgB,CAACI,mBAAmB,CAAC,gBAAgB,EAAE,IAAI,CAACR,MAAM,CAAC;IACnF,IAAI,CAACF,UAAU,CAACQ,cAAc,CAACE,mBAAmB,CAAC,kBAAkB,EAAE,IAAI,CAACR,MAAM,CAAC;EACrF;EAEA;;;EAGAA,MAAMA,CAAA;IACJS,OAAO,CAACC,OAAO,EAAE,CACdC,IAAI,CAAC,YAAW;MACf,MAAMC,UAAU,GAAG,IAAIpB,UAAU,CAAC;QAChCqB,MAAM,EAAE,IAAI,CAACf,UAAU,CAACe,MAAM;QAC9BC,UAAU,EAAE,IAAI,CAAChB,UAAU,CAACQ,cAAc,CAACS,YAAY,EAAE,CAACC,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,eAAe,CAACxB,SAAS,CAAC,KAAK,CAAC,CAACyB,IAAI,CAAC;OAC9G,CAAC;MAEF,MAAMC,QAAQ,GAAG,MAAM7B,cAAc,CAAC8B,IAAI,CAACT,UAAU,EAAE,IAAI,CAACd,UAAU,CAACe,MAAM,CAAC;MAC9E,MAAM,IAAI,CAACf,UAAU,CAACwB,SAAS,CAACC,WAAW,CAACC,iBAAiB,CAACJ,QAAQ,CAAC;IACzE,CAAC,CAAC,CACDK,KAAK,CAACC,GAAG,IAAG;MACX/B,GAAG,CAACgC,KAAK,CAAC,uCAAuC,EAAED,GAAG,CAAC;IACzD,CAAC,CAAC;EACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}