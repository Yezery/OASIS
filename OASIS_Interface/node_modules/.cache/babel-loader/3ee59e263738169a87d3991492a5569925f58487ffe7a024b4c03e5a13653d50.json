{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers))\n    });\n    await res.text();\n  };\n  return replace;\n});","map":{"version":3,"names":["fromString","uint8ArrayFromString","multipartRequest","configure","toUrlSearchParams","abortSignal","createReplace","api","replace","config","options","controller","AbortController","signal","res","post","searchParams","JSON","stringify","headers","text"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/config/replace.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/config').API<HTTPClientExtraOptions>} ConfigAPI\n */\n\nexport const createReplace = configure(api => {\n  /**\n   * @type {ConfigAPI[\"replace\"]}\n   */\n  const replace = async (config, options = {}) => {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('config/replace', {\n      signal,\n      searchParams: toUrlSearchParams(options),\n      ...(\n        await multipartRequest([uint8ArrayFromString(JSON.stringify(config))], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n\n  return replace\n})\n"],"mappings":"AAAA,SAASA,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGH,SAAS,CAACI,GAAG,IAAI;EAC5C;AACF;AACA;EACE,MAAMC,OAAO,GAAG,MAAAA,CAAOC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IAC9C;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGR,WAAW,CAACM,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,gBAAgB,EAAE;MAC3CF,MAAM;MACNG,YAAY,EAAEZ,iBAAiB,CAACM,OAAO,CAAC;MACxC,IACE,MAAMR,gBAAgB,CAAC,CAACD,oBAAoB,CAACgB,IAAI,CAACC,SAAS,CAACT,MAAM,CAAC,CAAC,CAAC,EAAEE,UAAU,EAAED,OAAO,CAACS,OAAO,CAAC;IAEvG,CAAC,CAAC;IAEF,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;EAClB,CAAC;EAED,OAAOZ,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}