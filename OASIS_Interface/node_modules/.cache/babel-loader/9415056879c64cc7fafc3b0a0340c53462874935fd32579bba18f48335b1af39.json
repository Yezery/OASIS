{"ast":null,"code":"import { multiaddrToUri } from '@multiformats/multiaddr-to-uri';\nimport { logger } from '@libp2p/logger';\nimport shuffle from 'array-shuffle';\nimport { preload } from 'ipfs-core-config/preload';\nimport hashlru from 'hashlru';\nconst log = logger('ipfs:preload');\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader(options = {}) {\n  options.enabled = Boolean(options.enabled);\n  options.addresses = options.addresses || [];\n  options.cache = options.cache || 1000;\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled');\n    const api = () => {};\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    });\n  }\n  let stopped = true;\n  /** @type {AbortController[]} */\n  let requests = [];\n  const apiUris = options.addresses.map(str => multiaddrToUri(str));\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache);\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`);\n      }\n      const path = cid.toString();\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return;\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true);\n      const fallbackApiUris = shuffle(apiUris);\n      let success = false;\n      const now = Date.now();\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`);\n        /** @type {AbortController} */\n        let controller;\n        try {\n          controller = new AbortController();\n          requests = requests.concat(controller);\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, {\n            signal: controller.signal\n          });\n          success = true;\n        } catch ( /** @type {any} */err) {\n          if (err.type !== 'aborted') log.error(err);\n        } finally {\n          requests = requests.filter(r => r !== controller);\n        }\n        if (success) break;\n      }\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`);\n    } catch ( /** @type {any} */err) {\n      log.error(err);\n    }\n  };\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false;\n  };\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true;\n    log(`aborting ${requests.length} pending preload request(s)`);\n    requests.forEach(r => r.abort());\n    requests = [];\n  };\n  return api;\n}","map":{"version":3,"names":["multiaddrToUri","logger","shuffle","preload","hashlru","log","createPreloader","options","enabled","Boolean","addresses","cache","length","api","Object","assign","start","stop","stopped","requests","apiUris","map","str","cid","Error","path","toString","has","set","fallbackApiUris","success","now","Date","uri","controller","AbortController","concat","encodeURIComponent","signal","err","type","error","filter","r","forEach","abort"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/preload.js"],"sourcesContent":["import { multiaddrToUri } from '@multiformats/multiaddr-to-uri'\nimport { logger } from '@libp2p/logger'\nimport shuffle from 'array-shuffle'\nimport { preload } from 'ipfs-core-config/preload'\nimport hashlru from 'hashlru'\n\nconst log = logger('ipfs:preload')\n\n/**\n * @param {import('./types').PreloadOptions} [options]\n */\nexport function createPreloader (options = {}) {\n  options.enabled = Boolean(options.enabled)\n  options.addresses = options.addresses || []\n  options.cache = options.cache || 1000\n\n  if (!options.enabled || !options.addresses.length) {\n    log('preload disabled')\n    const api = () => {}\n    return Object.assign(api, {\n      start: () => {},\n      stop: () => {}\n    })\n  }\n\n  let stopped = true\n  /** @type {AbortController[]} */\n  let requests = []\n  const apiUris = options.addresses.map((str) => multiaddrToUri(str))\n\n  // Avoid preloading the same CID over and over again\n  const cache = hashlru(options.cache)\n\n  /**\n   * @type {import('./types').Preload}\n   */\n  const api = async cid => {\n    try {\n      if (stopped) {\n        throw new Error(`preload ${cid} but preloader is not started`)\n      }\n\n      const path = cid.toString()\n\n      if (cache.has(path)) {\n        // we've preloaded this recently, don't preload it again\n        return\n      }\n\n      // make sure we don't preload this again any time soon\n      cache.set(path, true)\n\n      const fallbackApiUris = shuffle(apiUris)\n      let success = false\n      const now = Date.now()\n\n      for (const uri of fallbackApiUris) {\n        if (stopped) throw new Error(`preload aborted for ${path}`)\n        /** @type {AbortController} */\n        let controller\n\n        try {\n          controller = new AbortController()\n          requests = requests.concat(controller)\n          await preload(`${uri}/api/v0/refs?r=true&arg=${encodeURIComponent(path)}`, { signal: controller.signal })\n          success = true\n        } catch (/** @type {any} */ err) {\n          if (err.type !== 'aborted') log.error(err)\n        } finally {\n          requests = requests.filter(r => r !== controller)\n        }\n\n        if (success) break\n      }\n\n      log(`${success ? '' : 'un'}successfully preloaded ${path} in ${Date.now() - now}ms`)\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n    }\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.start = () => {\n    stopped = false\n  }\n\n  /**\n   * @returns {void}\n   */\n  api.stop = () => {\n    stopped = true\n    log(`aborting ${requests.length} pending preload request(s)`)\n    requests.forEach(r => r.abort())\n    requests = []\n  }\n\n  return api\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}