{"ast":null,"code":"import { isIP } from \"node:net\";\nimport { execa, execaSync } from \"execa\";\nimport { platform, type, release, networkInterfaces } from \"node:os\";\nconst plat = platform();\nconst dests = new Set([\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"]);\nlet promise, sync;\nif (plat === \"linux\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n      const gateway = (results[1] || \"\").substring(5);\n      const iface = (results[2] || \"\").substring(5);\n      if (gateway && isIP(gateway)) {\n        // default via 1.2.3.4 dev en0\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      } else if (iface && !gateway) {\n        // default via dev en0\n        const interfaces = networkInterfaces();\n        const addresses = interfaces[iface];\n        for (const addr of addresses || []) {\n          if (Number(family.substring(3)) === family && isIP(addr.address)) {\n            return {\n              gateway: addr.address,\n              version: family,\n              int: iface ?? null\n            };\n          }\n        }\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"darwin\") {\n  // The IPv4 gateway is in column 3 in Darwin 19 (macOS 10.15 Catalina) and higher,\n  // previously it was in column 5\n  const v4IfaceColumn = parseInt(release()) >= 19 ? 3 : 5;\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[family === 4 ? v4IfaceColumn : 3];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"win32\") {\n  const gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\n  const ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\n  const spawnOpts = {\n    windowsHide: true\n  };\n\n  // Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n  //\n  // DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n  // {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n  // {\"2.3.4.5\"}                  {25}               12     55\n  function parseGwTable(gwTable, family) {\n    // eslint-disable-line no-inner-declarations\n    let [bestGw, bestMetric, bestId] = [null, null, null];\n    for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n      line = line.trim();\n      const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +({.+?}) +([0-9]+) +([0-9]+)/.exec(line) || [];\n      if (!gwArr) continue;\n      const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n      const gatewayCosts = gwCostsArr.match(/[0-9]+/g) || [];\n      for (const [index, gateway] of Object.entries(gateways)) {\n        if (!gateway || isIP(gateway) !== family) continue;\n        const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n        if (!bestGw || metric < bestMetric) {\n          [bestGw, bestMetric, bestId] = [gateway, metric, id];\n        }\n      }\n    }\n    if (bestGw) return [bestGw, bestId];\n  }\n  function parseIfTable(ifTable) {\n    // eslint-disable-line no-inner-declarations\n    const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n    let [mac, name] = line.trim().split(/\\s+/);\n    mac = mac.toLowerCase();\n\n    // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n    // https://github.com/silverwind/default-gateway/issues/14\n    for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n      for (const addr of addrs) {\n        if (addr?.mac?.toLowerCase() === mac) {\n          return osname;\n        }\n      }\n    }\n    return name;\n  }\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"wmic\", gwArgs, spawnOpts);\n    const [gateway, id] = parseGwTable(stdout, family) || [];\n    if (!gateway) throw new Error(\"Unable to determine default gateway\");\n    let name;\n    if (id) {\n      const {\n        stdout\n      } = await execa(\"wmic\", ifArgs(id), spawnOpts);\n      name = parseIfTable(stdout);\n    }\n    return {\n      gateway,\n      version: family,\n      int: name ?? null\n    };\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"wmic\", gwArgs, spawnOpts);\n    const [gateway, id] = parseGwTable(stdout, family) || [];\n    if (!gateway) throw new Error(\"Unable to determine default gateway\");\n    let name;\n    if (id) {\n      const {\n        stdout\n      } = execaSync(\"wmic\", ifArgs(id), spawnOpts);\n      name = parseIfTable(stdout);\n    }\n    return {\n      gateway,\n      version: family,\n      int: name ?? null\n    };\n  };\n} else if (plat === \"android\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const [_, gateway, iface] = /default via (.+?) dev (.+?)( |$)/.exec(line) || [];\n      if (gateway && isIP(gateway)) {\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"freebsd\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const [target, gateway, _, iface] = line.split(/ +/) || [];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"aix\" && type() === \"OS400\") {\n  const db2util = \"/QOpenSys/pkgs/bin/db2util\";\n  const sql = \"select NEXT_HOP, LOCAL_BINDING_INTERFACE from QSYS2.NETSTAT_ROUTE_INFO where ROUTE_TYPE='DFTROUTE' and NEXT_HOP!='*DIRECT' and CONNECTION_TYPE=?\";\n  const parse = (stdout, family) => {\n    try {\n      const resultObj = JSON.parse(stdout);\n      const gateway = resultObj.records[0].NEXT_HOP;\n      const iface = resultObj.records[0].LOCAL_BINDING_INTERFACE;\n      return {\n        gateway,\n        version: family,\n        iface\n      };\n    } catch {}\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(db2util, [sql, \"-p\", `IPV${family}`, \"-o\", \"json\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(db2util, [sql, \"-p\", `IPV${family}`, \"-o\", \"json\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"openbsd\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[7];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"sunos\" || plat === \"aix\" && type() !== \"OS400\") {\n  // AIX `netstat` output is compatible with Solaris\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[5];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {\n          gateway,\n          version: family,\n          int: iface ?? null\n        };\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n  promise = async family => {\n    const {\n      stdout\n    } = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n  sync = family => {\n    const {\n      stdout\n    } = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else {\n  promise = _ => {\n    throw new Error(\"Unsupported Platform\");\n  };\n  sync = _ => {\n    throw new Error(\"Unsupported Platform\");\n  };\n}\nexport const gateway4async = () => promise(4);\nexport const gateway6async = () => promise(6);\nexport const gateway4sync = () => sync(4);\nexport const gateway6sync = () => sync(6);\nexport default {\n  gateway4async,\n  gateway6async,\n  gateway4sync,\n  gateway6sync\n};","map":{"version":3,"names":["isIP","execa","execaSync","platform","type","release","networkInterfaces","plat","dests","Set","promise","sync","parse","stdout","family","line","trim","split","results","exec","gateway","substring","iface","version","int","interfaces","addresses","addr","Number","address","Error","v4IfaceColumn","parseInt","target","has","gwArgs","ifArgs","index","spawnOpts","windowsHide","parseGwTable","gwTable","bestGw","bestMetric","bestId","splice","_","gwArr","gwCostsArr","id","ipMetric","gateways","match","map","length","gatewayCosts","Object","entries","metric","parseIfTable","ifTable","mac","name","toLowerCase","osname","addrs","db2util","sql","resultObj","JSON","records","NEXT_HOP","LOCAL_BINDING_INTERFACE","gateway4async","gateway6async","gateway4sync","gateway6sync"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/default-gateway@7.2.2/node_modules/default-gateway/index.js"],"sourcesContent":["import {isIP} from \"node:net\";\nimport {execa, execaSync} from \"execa\";\nimport {platform, type, release, networkInterfaces} from \"node:os\";\n\nconst plat = platform();\nconst dests = new Set([\"default\", \"0.0.0.0\", \"0.0.0.0/0\", \"::\", \"::/0\"]);\nlet promise, sync;\n\nif (plat === \"linux\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = /default( via .+?)?( dev .+?)( |$)/.exec(line) || [];\n      const gateway = (results[1] || \"\").substring(5);\n      const iface = (results[2] || \"\").substring(5);\n      if (gateway && isIP(gateway)) { // default via 1.2.3.4 dev en0\n        return {gateway, version: family, int: (iface ?? null)};\n      } else if (iface && !gateway) { // default via dev en0\n        const interfaces = networkInterfaces();\n        const addresses = interfaces[iface];\n        for (const addr of addresses || []) {\n          if (Number(family.substring(3)) === family && isIP(addr.address)) {\n            return {gateway: addr.address, version: family, int: (iface ?? null)};\n          }\n        }\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"darwin\") {\n  // The IPv4 gateway is in column 3 in Darwin 19 (macOS 10.15 Catalina) and higher,\n  // previously it was in column 5\n  const v4IfaceColumn = parseInt(release()) >= 19 ? 3 : 5;\n\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[family === 4 ? v4IfaceColumn : 3];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {gateway, version: family, int: (iface ?? null)};\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"win32\") {\n  const gwArgs = \"path Win32_NetworkAdapterConfiguration where IPEnabled=true get DefaultIPGateway,GatewayCostMetric,IPConnectionMetric,Index /format:table\".split(\" \");\n  const ifArgs = index => `path Win32_NetworkAdapter where Index=${index} get NetConnectionID,MACAddress /format:table`.split(\" \");\n\n  const spawnOpts = {\n    windowsHide: true,\n  };\n\n  // Parsing tables like this. The final metric is GatewayCostMetric + IPConnectionMetric\n  //\n  // DefaultIPGateway             GatewayCostMetric  Index  IPConnectionMetric\n  // {\"1.2.3.4\", \"2001:db8::1\"}   {0, 256}           12     25\n  // {\"2.3.4.5\"}                  {25}               12     55\n  function parseGwTable(gwTable, family) { // eslint-disable-line no-inner-declarations\n    let [bestGw, bestMetric, bestId] = [null, null, null];\n\n    for (let line of (gwTable || \"\").trim().split(/\\r?\\n/).splice(1)) {\n      line = line.trim();\n      const [_, gwArr, gwCostsArr, id, ipMetric] = /({.+?}) +({.+?}) +([0-9]+) +([0-9]+)/.exec(line) || [];\n      if (!gwArr) continue;\n\n      const gateways = (gwArr.match(/\"(.+?)\"/g) || []).map(match => match.substring(1, match.length - 1));\n      const gatewayCosts = (gwCostsArr.match(/[0-9]+/g) || []);\n\n      for (const [index, gateway] of Object.entries(gateways)) {\n        if (!gateway || isIP(gateway) !== family) continue;\n\n        const metric = parseInt(gatewayCosts[index]) + parseInt(ipMetric);\n        if (!bestGw || metric < bestMetric) {\n          [bestGw, bestMetric, bestId] = [gateway, metric, id];\n        }\n      }\n    }\n\n    if (bestGw) return [bestGw, bestId];\n  }\n\n  function parseIfTable(ifTable) { // eslint-disable-line no-inner-declarations\n    const line = (ifTable || \"\").trim().split(\"\\n\")[1];\n\n    let [mac, name] = line.trim().split(/\\s+/);\n    mac = mac.toLowerCase();\n\n    // try to get the interface name by matching the mac to os.networkInterfaces to avoid wmic's encoding issues\n    // https://github.com/silverwind/default-gateway/issues/14\n    for (const [osname, addrs] of Object.entries(networkInterfaces())) {\n      for (const addr of addrs) {\n        if (addr?.mac?.toLowerCase() === mac) {\n          return osname;\n        }\n      }\n    }\n    return name;\n  }\n\n  promise = async family => {\n    const {stdout} = await execa(\"wmic\", gwArgs, spawnOpts);\n    const [gateway, id] = parseGwTable(stdout, family) || [];\n    if (!gateway) throw new Error(\"Unable to determine default gateway\");\n\n    let name;\n    if (id) {\n      const {stdout} = await execa(\"wmic\", ifArgs(id), spawnOpts);\n      name = parseIfTable(stdout);\n    }\n\n    return {gateway, version: family, int: name ?? null};\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"wmic\", gwArgs, spawnOpts);\n    const [gateway, id] = parseGwTable(stdout, family) || [];\n    if (!gateway) throw new Error(\"Unable to determine default gateway\");\n\n    let name;\n    if (id) {\n      const {stdout} = execaSync(\"wmic\", ifArgs(id), spawnOpts);\n      name = parseIfTable(stdout);\n    }\n\n    return {gateway, version: family, int: name ?? null};\n  };\n} else if (plat === \"android\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const [_, gateway, iface] = /default via (.+?) dev (.+?)( |$)/.exec(line) || [];\n      if (gateway && isIP(gateway)) {\n        return {gateway, version: family, int: (iface ?? null)};\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"ip\", [`-${family}`, \"r\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"freebsd\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const [target, gateway, _, iface] = line.split(/ +/) || [];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {gateway, version: family, int: (iface ?? null)};\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"aix\" && type() === \"OS400\") {\n  const db2util = \"/QOpenSys/pkgs/bin/db2util\";\n  const sql = \"select NEXT_HOP, LOCAL_BINDING_INTERFACE from QSYS2.NETSTAT_ROUTE_INFO where ROUTE_TYPE='DFTROUTE' and NEXT_HOP!='*DIRECT' and CONNECTION_TYPE=?\";\n\n  const parse = (stdout, family) => {\n    try {\n      const resultObj = JSON.parse(stdout);\n      const gateway = resultObj.records[0].NEXT_HOP;\n      const iface = resultObj.records[0].LOCAL_BINDING_INTERFACE;\n      return {gateway, version: family, iface};\n    } catch {}\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(db2util, [sql, \"-p\", `IPV${family}`, \"-o\", \"json\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(db2util, [sql, \"-p\", `IPV${family}`, \"-o\", \"json\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"openbsd\") {\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[7];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {gateway, version: family, int: (iface ?? null)};\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else if (plat === \"sunos\" || (plat === \"aix\" && type() !== \"OS400\")) { // AIX `netstat` output is compatible with Solaris\n  const parse = (stdout, family) => {\n    for (const line of (stdout || \"\").trim().split(\"\\n\")) {\n      const results = line.split(/ +/) || [];\n      const target = results[0];\n      const gateway = results[1];\n      const iface = results[5];\n      if (dests.has(target) && gateway && isIP(gateway)) {\n        return {gateway, version: family, int: (iface ?? null)};\n      }\n    }\n    throw new Error(\"Unable to determine default gateway\");\n  };\n\n  promise = async family => {\n    const {stdout} = await execa(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n\n  sync = family => {\n    const {stdout} = execaSync(\"netstat\", [\"-rn\", \"-f\", family === 4 ? \"inet\" : \"inet6\"]);\n    return parse(stdout, family);\n  };\n} else {\n  promise = (_) => { throw new Error(\"Unsupported Platform\"); };\n  sync = (_) => { throw new Error(\"Unsupported Platform\"); };\n}\n\nexport const gateway4async = () => promise(4);\nexport const gateway6async = () => promise(6);\nexport const gateway4sync = () => sync(4);\nexport const gateway6sync = () => sync(6);\n\nexport default {\n  gateway4async,\n  gateway6async,\n  gateway4sync,\n  gateway6sync,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}