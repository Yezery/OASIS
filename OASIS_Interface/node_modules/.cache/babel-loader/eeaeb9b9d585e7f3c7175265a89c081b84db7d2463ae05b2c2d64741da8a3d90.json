{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BaseDatastore } from './base.js';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\nexport class KeyTransformDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n  open() {\n    return this.child.open();\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async *putMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, ({\n        key,\n        value\n      }) => ({\n        key: transform.convert(key),\n        value\n      }));\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, ({\n        key,\n        value\n      }) => ({\n        key: transform.invert(key),\n        value\n      }));\n    });\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async *getMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async *deleteMany(source, options = {}) {\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query(q, options) {\n    /** @type {Query} */\n    const query = {\n      ...q\n    };\n    query.filters = (query.filters || []).map(filter => {\n      return ({\n        key,\n        value\n      }) => filter({\n        key: this.transform.convert(key),\n        value\n      });\n    });\n    const {\n      prefix\n    } = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(({\n        key\n      }) => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order({\n          key: this.transform.invert(a.key),\n          value: a.value\n        }, {\n          key: this.transform.invert(b.key),\n          value: b.value\n        });\n      });\n    }\n    return map(this.child.query(query, options), ({\n      key,\n      value\n    }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys(q, options) {\n    const query = {\n      ...q\n    };\n    query.filters = (query.filters || []).map(filter => {\n      return key => filter(this.transform.convert(key));\n    });\n    const {\n      prefix\n    } = q;\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(key => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n      });\n    }\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n  close() {\n    return this.child.close();\n  }\n}","map":{"version":3,"names":["BaseDatastore","map","pipe","KeyTransformDatastore","constructor","child","transform","open","put","key","val","options","convert","get","has","delete","putMany","source","value","invert","getMany","deleteMany","batch","b","commit","query","q","filters","filter","prefix","push","toString","startsWith","orders","order","a","queryKeys","close"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/datastore-core@8.0.4/node_modules/datastore-core/src/keytransform.js"],"sourcesContent":["import { BaseDatastore } from './base.js'\nimport map from 'it-map'\nimport { pipe } from 'it-pipe'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\nexport class KeyTransformDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.convert(key),\n          value\n        }))\n      },\n      async function * (source) {\n        yield * child.putMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.invert(key),\n          value\n        }))\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.getMany(source, options)\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.deleteMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, key => transform.invert(key))\n      }\n    )\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    /** @type {Query} */\n    const query = {\n      ...q\n    }\n\n    query.filters = (query.filters || []).map(filter => {\n      return ({ key, value }) => filter({ key: this.transform.convert(key), value })\n    })\n\n    const { prefix } = q\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix\n      query.filters.push(({ key }) => {\n        return this.transform.invert(key).toString().startsWith(prefix)\n      })\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(\n          { key: this.transform.invert(a.key), value: a.value },\n          { key: this.transform.invert(b.key), value: b.value }\n        )\n      })\n    }\n\n    return map(this.child.query(query, options), ({ key, value }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      }\n    })\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    const query = {\n      ...q\n    }\n\n    query.filters = (query.filters || []).map(filter => {\n      return (key) => filter(this.transform.convert(key))\n    })\n\n    const { prefix } = q\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix\n      query.filters.push((key) => {\n        return this.transform.invert(key).toString().startsWith(prefix)\n      })\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(\n          this.transform.invert(a),\n          this.transform.invert(b)\n        )\n      })\n    }\n\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key)\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}