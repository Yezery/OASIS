{"ast":null,"code":"import { isRepoInitialized } from './init.js';\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js';\nimport { VERSION_KEY } from '../utils.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion(backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!');\n  }\n  const store = backends.root;\n  await store.open();\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)));\n  } finally {\n    await store.close();\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion(version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n  const store = backends.root;\n  await store.open();\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n  await store.close();\n}","map":{"version":3,"names":["isRepoInitialized","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","fromString","uint8ArrayFromString","toString","uint8ArrayToString","getVersion","backends","store","root","open","parseInt","get","close","setVersion","version","put","String"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/repo/version.js"],"sourcesContent":["\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n"],"mappings":"AACA,SAASA,iBAAiB,QAAQ,WAAW;AAC7C,SAASC,uBAAuB,EAAEC,uBAAuB,QAAQ,cAAc;AAC/E,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAEC,QAAQ,EAAE;EAC1C,IAAI,EAAE,MAAMT,iBAAiB,CAACS,QAAQ,CAAC,CAAC,EAAE;IACxC,MAAM,IAAIP,uBAAuB,CAAC,0BAA0B,CAAC;EAC/D;EAEA,MAAMQ,KAAK,GAAGD,QAAQ,CAACE,IAAI;EAC3B,MAAMD,KAAK,CAACE,IAAI,CAAC,CAAC;EAElB,IAAI;IACF,OAAOC,QAAQ,CAACN,kBAAkB,CAAC,MAAMG,KAAK,CAACI,GAAG,CAACX,WAAW,CAAC,CAAC,CAAC;EACnE,CAAC,SAAS;IACR,MAAMO,KAAK,CAACK,KAAK,CAAC,CAAC;EACrB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAEC,OAAO,EAAER,QAAQ,EAAE;EACnD,IAAI,CAACA,QAAQ,EAAE;IACb,MAAM,IAAIR,uBAAuB,CAAC,qDAAqD,CAAC;EAC1F;EAEA,MAAMS,KAAK,GAAGD,QAAQ,CAACE,IAAI;EAC3B,MAAMD,KAAK,CAACE,IAAI,CAAC,CAAC;EAClB,MAAMF,KAAK,CAACQ,GAAG,CAACf,WAAW,EAAEE,oBAAoB,CAACc,MAAM,CAACF,OAAO,CAAC,CAAC,CAAC;EACnE,MAAMP,KAAK,CAACK,KAAK,CAAC,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}