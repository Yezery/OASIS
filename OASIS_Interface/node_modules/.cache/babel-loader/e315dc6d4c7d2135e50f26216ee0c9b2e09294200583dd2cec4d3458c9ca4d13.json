{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape, elementDtype, numElements = -1) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, outputElementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n  }\n  const maxIndex = Math.max(...indices);\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}","map":{"version":3,"names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","inferElementShape","mergeElementShape","TensorList","constructor","tensors","elementShape","elementDtype","maxNumElements","forEach","dtype","Error","shape","idTensor","id","copy","clearAndClose","keepIds","has","dispose","length","size","numElements","outputElementShape","reshapedTensors","map","popBack","pop","pushBack","push","resize","destTensorList","i","Math","min","getItem","elementIndex","setItem","gather","indices","t","fromTensor","tensorElementShape","tensorList","reserve","scatter","maxIndex","max","list","value","index","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","previousLength","sizes"],"sources":["../../../../../../tfjs-converter/src/executor/tensor_list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    const destTensorList: TensorList = new TensorList(\n        [], this.elementShape, this.elementDtype, this.maxNumElements);\n    destTensorList.tensors.length = size;\n    for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n      destTensorList.tensors[i] = this.tensors[i];\n    }\n    return destTensorList;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n"],"mappings":";AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAM,EAAYC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAUC,MAAM,EAAEC,IAAI,EAAEC,OAAO,QAAO,uBAAuB;AAE1H,SAAQC,mCAAmC,EAAEC,iBAAiB,EAAEC,iBAAiB,QAAO,gBAAgB;AAExG;;;;;;;;;;;;;;AAeA,OAAM,MAAOC,UAAU;EAOrB;;;;;;;;;EASAC,YACaC,OAAiB,EAAWC,YAA6B,EACzDC,YAAsB,EAAEC,cAAc,GAAG,CAAC,CAAC;IAD3C,KAAAH,OAAO,GAAPA,OAAO;IAAqB,KAAAC,YAAY,GAAZA,YAAY;IACxC,KAAAC,YAAY,GAAZA,YAAY;IACvB,IAAIF,OAAO,IAAI,IAAI,EAAE;MACnBA,OAAO,CAACI,OAAO,CAACZ,MAAM,IAAG;QACvB,IAAIU,YAAY,KAAKV,MAAM,CAACa,KAAK,EAAE;UACjC,MAAM,IAAIC,KAAK,CAAC,mCACZJ,YAAY,uBAAuBV,MAAM,CAACa,KAAK,EAAE,CAAC;;QAExDV,mCAAmC,CAC/BM,YAAY,EAAET,MAAM,CAACe,KAAK,EAAE,6BAA6B,CAAC;QAE9DpB,IAAI,CAACK,MAAM,CAAC;MACd,CAAC,CAAC;;IAEJ,IAAI,CAACgB,QAAQ,GAAGnB,MAAM,CAAC,CAAC,CAAC;IACzB,IAAI,CAACc,cAAc,GAAGA,cAAc;IACpChB,IAAI,CAAC,IAAI,CAACqB,QAAQ,CAAC;EACrB;EA9BA,IAAIC,EAAEA,CAAA;IACJ,OAAO,IAAI,CAACD,QAAQ,CAACC,EAAE;EACzB;EA8BA;;;EAGAC,IAAIA,CAAA;IACF,OAAO,IAAIZ,UAAU,CACjB,CAAC,GAAG,IAAI,CAACE,OAAO,CAAC,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;EAC9D;EAEA;;;EAGAS,aAAaA,CAACC,OAAqB;IACjC,IAAI,CAACZ,OAAO,CAACI,OAAO,CAACZ,MAAM,IAAG;MAC5B,IAAIoB,OAAO,IAAI,IAAI,IAAI,CAACA,OAAO,CAACC,GAAG,CAACrB,MAAM,CAACiB,EAAE,CAAC,EAAE;QAC9CjB,MAAM,CAACsB,OAAO,EAAE;;IAEpB,CAAC,CAAC;IACF,IAAI,CAACd,OAAO,CAACe,MAAM,GAAG,CAAC;IACvB,IAAI,CAACP,QAAQ,CAACM,OAAO,EAAE;EACzB;EACA;;;EAGAE,IAAIA,CAAA;IACF,OAAO,IAAI,CAAChB,OAAO,CAACe,MAAM;EAC5B;EAEA;;;;;;;EAOAxB,KAAKA,CAACU,YAAsB,EAAEC,YAAsB,EAAEe,WAAW,GAAG,CAAC,CAAC;IAEpE,IAAIf,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZJ,YAAY,uBAAuB,IAAI,CAACA,YAAY,EAAE,CAAC;;IAE7D,IAAIe,WAAW,KAAK,CAAC,CAAC,IAAI,IAAI,CAACjB,OAAO,CAACe,MAAM,KAAKE,WAAW,EAAE;MAC7D,MAAM,IAAIX,KAAK,CAAC,kCACZW,WAAW,iCACX,IAAI,CAACjB,OAAO,CAACe,MAAM,YAAY,CAAC;;IAEtCpB,mCAAmC,CAC/BM,YAAY,EAAE,IAAI,CAACA,YAAY,EAAE,6BAA6B,CAAC;IACnE,MAAMiB,kBAAkB,GACpBtB,iBAAiB,CAAC,IAAI,CAACK,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;IACpE,OAAOR,IAAI,CAAC,MAAK;MACf,MAAM0B,eAAe,GACjB,IAAI,CAACnB,OAAO,CAACoB,GAAG,CAAC5B,MAAM,IAAIJ,OAAO,CAACI,MAAM,EAAE0B,kBAAkB,CAAC,CAAC;MACnE,OAAO3B,KAAK,CAAC4B,eAAe,EAAE,CAAC,CAAC;IAClC,CAAC,CAAC;EACJ;EAEA;;;;;EAKAE,OAAOA,CAACpB,YAAsB,EAAEC,YAAsB;IACpD,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZJ,YAAY,uBAAuB,IAAI,CAACA,YAAY,EAAE,CAAC;;IAG7D,IAAI,IAAI,CAACc,IAAI,EAAE,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIV,KAAK,CAAC,mCAAmC,CAAC;;IAEtD,MAAMY,kBAAkB,GACpBtB,iBAAiB,CAAC,IAAI,CAACK,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;IACpE,MAAMT,MAAM,GAAG,IAAI,CAACQ,OAAO,CAACsB,GAAG,EAAE;IAEjC3B,mCAAmC,CAC/BH,MAAM,CAACe,KAAK,EAAEN,YAAY,EAAE,6BAA6B,CAAC;IAE9D,OAAOb,OAAO,CAACI,MAAM,EAAE0B,kBAAkB,CAAC;EAC5C;EAEA;;;;EAIAK,QAAQA,CAAC/B,MAAc;IACrB,IAAIA,MAAM,CAACa,KAAK,KAAK,IAAI,CAACH,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZd,MAAM,CAACa,KAAK,uBAAuB,IAAI,CAACH,YAAY,EAAE,CAAC;;IAG7DP,mCAAmC,CAC/BH,MAAM,CAACe,KAAK,EAAE,IAAI,CAACN,YAAY,EAAE,6BAA6B,CAAC;IAEnE,IAAI,IAAI,CAACE,cAAc,KAAK,IAAI,CAACa,IAAI,EAAE,EAAE;MACvC,MAAM,IAAIV,KAAK,CAAC,0CAA0C,CAAC;;IAE7DnB,IAAI,CAACK,MAAM,CAAC;IACZ,IAAI,CAACQ,OAAO,CAACwB,IAAI,CAAChC,MAAM,CAAC;EAC3B;EAEA;;;;EAIAiC,MAAMA,CAACT,IAAY;IACjB,IAAIA,IAAI,GAAG,CAAC,EAAE;MACZ,MAAM,IAAIV,KAAK,CACX,0DAA0DU,IAAI,EAAE,CAAC;;IAGvE,IAAI,IAAI,CAACb,cAAc,KAAK,CAAC,CAAC,IAAIa,IAAI,GAAG,IAAI,CAACb,cAAc,EAAE;MAC5D,MAAM,IAAIG,KAAK,CAAC,+BACZU,IAAI,6BAA6B,IAAI,CAACb,cAAc,GAAG,CAAC;;IAG9D,MAAMuB,cAAc,GAAe,IAAI5B,UAAU,CAC7C,EAAE,EAAE,IAAI,CAACG,YAAY,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,CAAC;IAClEuB,cAAc,CAAC1B,OAAO,CAACe,MAAM,GAAGC,IAAI;IACpC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAAC7B,OAAO,CAACe,MAAM,EAAEC,IAAI,CAAC,EAAE,EAAEW,CAAC,EAAE;MAC5DD,cAAc,CAAC1B,OAAO,CAAC2B,CAAC,CAAC,GAAG,IAAI,CAAC3B,OAAO,CAAC2B,CAAC,CAAC;;IAE7C,OAAOD,cAAc;EACvB;EAEA;;;;;;EAMAI,OAAOA,CAACC,YAAoB,EAAE9B,YAAsB,EAAEC,YAAsB;IAE1E,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZJ,YAAY,uBAAuB,IAAI,CAACA,YAAY,EAAE,CAAC;;IAE7D,IAAI6B,YAAY,GAAG,CAAC,IAAIA,YAAY,GAAG,IAAI,CAAC/B,OAAO,CAACe,MAAM,EAAE;MAC1D,MAAM,IAAIT,KAAK,CAAC,4BACZyB,YAAY,mBAAmB,IAAI,CAAC/B,OAAO,CAACe,MAAM,YAAY,CAAC;;IAGrE,IAAI,IAAI,CAACf,OAAO,CAAC+B,YAAY,CAAC,IAAI,IAAI,EAAE;MACtC,MAAM,IAAIzB,KAAK,CAAC,oBAAoByB,YAAY,WAAW,CAAC;;IAG9DpC,mCAAmC,CAC/B,IAAI,CAACK,OAAO,CAAC+B,YAAY,CAAC,CAACxB,KAAK,EAAEN,YAAY,EAC9C,6BAA6B,CAAC;IAClC,MAAMiB,kBAAkB,GACpBtB,iBAAiB,CAAC,IAAI,CAACK,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;IACpE,OAAOb,OAAO,CAAC,IAAI,CAACY,OAAO,CAAC+B,YAAY,CAAC,EAAEb,kBAAkB,CAAC;EAChE;EAEA;;;;;EAKAc,OAAOA,CAACD,YAAoB,EAAEvC,MAAc;IAC1C,IAAIA,MAAM,CAACa,KAAK,KAAK,IAAI,CAACH,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZd,MAAM,CAACa,KAAK,uBAAuB,IAAI,CAACH,YAAY,EAAE,CAAC;;IAG7D,IAAI6B,YAAY,GAAG,CAAC,IAChB,IAAI,CAAC5B,cAAc,KAAK,CAAC,CAAC,IAAI4B,YAAY,IAAI,IAAI,CAAC5B,cAAc,EAAE;MACrE,MAAM,IAAIG,KAAK,CAAC,yBACZyB,YAAY,uBAAuB,IAAI,CAAC5B,cAAc,YAAY,CAAC;;IAGzER,mCAAmC,CAC/B,IAAI,CAACM,YAAY,EAAET,MAAM,CAACe,KAAK,EAAE,6BAA6B,CAAC;IACnEpB,IAAI,CAACK,MAAM,CAAC;IACZ,IAAI,CAACQ,OAAO,CAAC+B,YAAY,CAAC,GAAGvC,MAAM;EACrC;EAEA;;;;;;;EAOAyC,MAAMA,CAACC,OAAiB,EAAEhC,YAAsB,EAAED,YAAsB;IAEtE,IAAIC,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;MACtC,MAAM,IAAII,KAAK,CAAC,mCACZJ,YAAY,uBAAuB,IAAI,CAACA,YAAY,EAAE,CAAC;;IAG7DP,mCAAmC,CAC/B,IAAI,CAACM,YAAY,EAAEA,YAAY,EAAE,6BAA6B,CAAC;IAEnE;IACA;IACAiC,OAAO,GAAGA,OAAO,CAAC5C,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC0B,IAAI,EAAE,CAAC;IACvC,MAAME,kBAAkB,GACpBtB,iBAAiB,CAAC,IAAI,CAACK,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;IACpE,IAAIiC,OAAO,CAACnB,MAAM,KAAK,CAAC,EAAE;MACxB,OAAOvB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAACN,MAAM,CAACgC,kBAAkB,CAAC,CAAC;;IAGnD,OAAOzB,IAAI,CAAC,MAAK;MACf,MAAMO,OAAO,GACTkC,OAAO,CAACd,GAAG,CAACO,CAAC,IAAIvC,OAAO,CAAC,IAAI,CAACY,OAAO,CAAC2B,CAAC,CAAC,EAAET,kBAAkB,CAAC,CAAC;MAClE,OAAO3B,KAAK,CAACS,OAAO,EAAE,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;EAEA;;;;;EAKAd,MAAMA,CAACgB,YAAsB,EAAED,YAAsB;IACnD,IAAI,CAAC,CAACC,YAAY,IAAIA,YAAY,KAAK,IAAI,CAACA,YAAY,EAAE;MACxD,MAAM,IAAII,KAAK,CAAC,uBACZ,IAAI,CAACJ,YAAY,+BAA+BA,YAAY,EAAE,CAAC;;IAGrEP,mCAAmC,CAC/B,IAAI,CAACM,YAAY,EAAEA,YAAY,EAAE,6BAA6B,CAAC;IACnE,MAAMiB,kBAAkB,GACpBtB,iBAAiB,CAAC,IAAI,CAACK,YAAY,EAAE,IAAI,CAACD,OAAO,EAAEC,YAAY,CAAC;IAEpE,IAAI,IAAI,CAACe,IAAI,EAAE,KAAK,CAAC,EAAE;MACrB,OAAOxB,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAACN,MAAM,CAACgC,kBAAkB,CAAC,CAAC;;IAEnD,OAAOzB,IAAI,CAAC,MAAK;MACf,MAAMO,OAAO,GAAG,IAAI,CAACA,OAAO,CAACoB,GAAG,CAACe,CAAC,IAAI/C,OAAO,CAAC+C,CAAC,EAAEjB,kBAAkB,CAAC,CAAC;MACrE,OAAOhC,MAAM,CAACc,OAAO,EAAE,CAAC,CAAC;IAC3B,CAAC,CAAC;EACJ;;AAGF;;;;;AAKA,OAAM,SAAUoC,UAAUA,CACtB5C,MAAc,EAAES,YAAsB,EAAEC,YAAsB;EAChE,MAAMG,KAAK,GAAGb,MAAM,CAACa,KAAK;EAC1B,IAAIb,MAAM,CAACe,KAAK,CAACQ,MAAM,GAAG,CAAC,EAAE;IAC3B,MAAM,IAAIT,KAAK,CACX,oDAAoDd,MAAM,CAACe,KAAK,EAAE,CAAC;;EAEzE,IAAIf,MAAM,CAACa,KAAK,KAAKH,YAAY,EAAE;IACjC,MAAM,IAAII,KAAK,CAAC,mCACZd,MAAM,CAACa,KAAK,uBAAuBH,YAAY,EAAE,CAAC;;EAExD,MAAMmC,kBAAkB,GAAG7C,MAAM,CAACe,KAAK,CAACjB,KAAK,CAAC,CAAC,CAAC;EAChDK,mCAAmC,CAC/B0C,kBAAkB,EAAEpC,YAAY,EAAE,6BAA6B,CAAC;EACpE,MAAMqC,UAAU,GAAa5C,OAAO,CAACF,MAAM,CAAC;EAC5C,OAAO,IAAIM,UAAU,CAACwC,UAAU,EAAErC,YAAY,EAAEI,KAAK,CAAC;AACxD;AAEA;;;;;;AAMA,OAAM,SAAUkC,OAAOA,CACnBtC,YAAsB,EAAEC,YAAsB,EAAEe,WAAmB;EACrE,OAAO,IAAInB,UAAU,CAAC,EAAE,EAAEG,YAAY,EAAEC,YAAY,EAAEe,WAAW,CAAC;AACpE;AAEA;;;;;;;AAOA,OAAM,SAAUuB,OAAOA,CACnBhD,MAAc,EAAE0C,OAAiB,EAAEjC,YAAsB,EACzDgB,WAAoB;EACtB,IAAIiB,OAAO,CAACnB,MAAM,KAAKvB,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC,EAAE;IACtC,MAAM,IAAID,KAAK,CAAC,sDACZ4B,OAAO,CAACnB,MAAM,QAAQvB,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;;EAG9C,MAAMkC,QAAQ,GAAGb,IAAI,CAACc,GAAG,CAAC,GAAGR,OAAO,CAAC;EAErC,IAAIjB,WAAW,IAAI,IAAI,IAAIA,WAAW,KAAK,CAAC,CAAC,IAAIwB,QAAQ,IAAIxB,WAAW,EAAE;IACxE,MAAM,IAAIX,KAAK,CACX,mCAAmCmC,QAAQ,SAASxB,WAAW,GAAG,CAAC;;EAGzE,MAAM0B,IAAI,GAAG,IAAI7C,UAAU,CAAC,EAAE,EAAEG,YAAY,EAAET,MAAM,CAACa,KAAK,EAAEY,WAAW,CAAC;EACxE,MAAMjB,OAAO,GAAGN,OAAO,CAACF,MAAM,EAAE,CAAC,CAAC;EAClC0C,OAAO,CAAC9B,OAAO,CAAC,CAACwC,KAAK,EAAEC,KAAK,KAAI;IAC/BF,IAAI,CAACX,OAAO,CAACY,KAAK,EAAE5C,OAAO,CAAC6C,KAAK,CAAC,CAAC;EACrC,CAAC,CAAC;EACF,OAAOF,IAAI;AACb;AAEA;;;;;;;AAOA,OAAM,SAAUG,KAAKA,CACjBtD,MAAc,EAAEuB,MAAgB,EAAEd,YAAsB;EAC1D,IAAI8C,WAAW,GAAG,CAAC;EACnB,MAAMC,iBAAiB,GAAGjC,MAAM,CAACK,GAAG,CAAC6B,GAAG,IAAG;IACzCF,WAAW,IAAIE,GAAG;IAClB,OAAOF,WAAW;EACpB,CAAC,CAAC;EAEF,IAAIA,WAAW,KAAKvD,MAAM,CAACe,KAAK,CAAC,CAAC,CAAC,EAAE;IACnC,MAAM,IAAID,KAAK,CAAC;;UAEVyC,WAAW,4BAA4BvD,MAAM,CAACe,KAAK,EAAE,CAAC;;EAG9D,MAAM2C,oBAAoB,GAAG1D,MAAM,CAACe,KAAK,CAACjB,KAAK,CAAC,CAAC,CAAC;EAClD,MAAM4B,kBAAkB,GACpBrB,iBAAiB,CAACqD,oBAAoB,EAAEjD,YAAY,CAAC;EACzD,MAAMkD,aAAa,GAAGJ,WAAW,KAAK,CAAC,GAAG,CAAC,GAAGvD,MAAM,CAACwB,IAAI,GAAG+B,WAAW;EACvE,MAAM/C,OAAO,GAAaP,IAAI,CAAC,MAAK;IAClC,MAAMO,OAAO,GAAG,EAAE;IAClBR,MAAM,GAAGJ,OAAO,CAACI,MAAM,EAAE,CAAC,CAAC,EAAEuD,WAAW,EAAEI,aAAa,CAAC,CAAC;IACzD,KAAK,IAAIxB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGZ,MAAM,CAACA,MAAM,EAAE,EAAEY,CAAC,EAAE;MACtC,MAAMyB,cAAc,GAAIzB,CAAC,KAAK,CAAC,GAAI,CAAC,GAAGqB,iBAAiB,CAACrB,CAAC,GAAG,CAAC,CAAC;MAC/D,MAAMO,OAAO,GAAG,CAAC,CAAC,EAAEkB,cAAc,EAAE,CAAC,CAAC;MACtC,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEtC,MAAM,CAACY,CAAC,CAAC,EAAEwB,aAAa,CAAC;MAC3CnD,OAAO,CAAC2B,CAAC,CAAC,GAAGvC,OAAO,CAChBE,KAAK,CAACE,MAAM,EAAE0C,OAAO,EAAEmB,KAAK,CAAC,EAAEnC,kBAA8B,CAAC;;IAEpE1B,MAAM,CAACsB,OAAO,EAAE;IAChB,OAAOd,OAAO;EAChB,CAAC,CAAC;EAEF,MAAM2C,IAAI,GAAG,IAAI7C,UAAU,CAAC,EAAE,EAAEG,YAAY,EAAET,MAAM,CAACa,KAAK,EAAEU,MAAM,CAACA,MAAM,CAAC;EAE1E,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG3B,OAAO,CAACe,MAAM,EAAEY,CAAC,EAAE,EAAE;IACvCgB,IAAI,CAACX,OAAO,CAACL,CAAC,EAAE3B,OAAO,CAAC2B,CAAC,CAAC,CAAC;;EAE7B,OAAOgB,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}