{"ast":null,"code":"import { upnpNat } from '@achingbrain/nat-port-mapper';\nimport { logger } from '@libp2p/logger';\nimport { fromNodeAddress } from '@multiformats/multiaddr';\nimport { isBrowser } from 'wherearewe';\nimport isPrivateIp from 'private-ip';\nimport * as pkg from './version.js';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isLoopback } from '@libp2p/utils/multiaddr/is-loopback';\nconst log = logger('libp2p:nat');\nconst DEFAULT_TTL = 7200;\nfunction highPort(min = 1024, max = 65535) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nexport class NatManager {\n  constructor(components, init) {\n    this.components = components;\n    this.started = false;\n    this.enabled = init.enabled;\n    this.externalAddress = init.externalAddress;\n    this.localAddress = init.localAddress;\n    this.description = init.description ?? `${pkg.name}@${pkg.version} ${this.components.peerId.toString()}`;\n    this.ttl = init.ttl ?? DEFAULT_TTL;\n    this.keepAlive = init.keepAlive ?? true;\n    this.gateway = init.gateway;\n    if (this.ttl < DEFAULT_TTL) {\n      throw errCode(new Error(`NatManager ttl should be at least ${DEFAULT_TTL} seconds`), codes.ERR_INVALID_PARAMETERS);\n    }\n  }\n  isStarted() {\n    return this.started;\n  }\n  start() {}\n  /**\n   * Attempt to use uPnP to configure port mapping using the current gateway.\n   *\n   * Run after start to ensure the transport manager has all addresses configured.\n   */\n  afterStart() {\n    if (isBrowser || !this.enabled || this.started) {\n      return;\n    }\n    this.started = true;\n    // done async to not slow down startup\n    void this._start().catch(err => {\n      // hole punching errors are non-fatal\n      log.error(err);\n    });\n  }\n  async _start() {\n    const addrs = this.components.transportManager.getAddrs();\n    for (const addr of addrs) {\n      // try to open uPnP ports for each thin waist address\n      const {\n        family,\n        host,\n        port,\n        transport\n      } = addr.toOptions();\n      if (!addr.isThinWaistAddress() || transport !== 'tcp') {\n        // only bare tcp addresses\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (isLoopback(addr)) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (family !== 4) {\n        // ignore ipv6\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      const client = await this._getClient();\n      const publicIp = this.externalAddress ?? (await client.externalIp());\n      const isPrivate = isPrivateIp(publicIp);\n      if (isPrivate === true) {\n        throw new Error(`${publicIp} is private - please set config.nat.externalIp to an externally routable IP or ensure you are not behind a double NAT`);\n      }\n      if (isPrivate == null) {\n        throw new Error(`${publicIp} is not an IP address`);\n      }\n      const publicPort = highPort();\n      log(`opening uPnP connection from ${publicIp}:${publicPort} to ${host}:${port}`);\n      await client.map({\n        publicPort,\n        localPort: port,\n        localAddress: this.localAddress,\n        protocol: transport.toUpperCase() === 'TCP' ? 'TCP' : 'UDP'\n      });\n      this.components.addressManager.addObservedAddr(fromNodeAddress({\n        family: 4,\n        address: publicIp,\n        port: publicPort\n      }, transport));\n    }\n  }\n  async _getClient() {\n    if (this.client != null) {\n      return this.client;\n    }\n    this.client = await upnpNat({\n      description: this.description,\n      ttl: this.ttl,\n      keepAlive: this.keepAlive,\n      gateway: this.gateway\n    });\n    return this.client;\n  }\n  /**\n   * Stops the NAT manager\n   */\n  async stop() {\n    if (isBrowser || this.client == null) {\n      return;\n    }\n    try {\n      await this.client.close();\n      this.client = undefined;\n    } catch (err) {\n      log.error(err);\n    }\n  }\n}","map":{"version":3,"names":["upnpNat","logger","fromNodeAddress","isBrowser","isPrivateIp","pkg","errCode","codes","isLoopback","log","DEFAULT_TTL","highPort","min","max","Math","floor","random","NatManager","constructor","components","init","started","enabled","externalAddress","localAddress","description","name","version","peerId","toString","ttl","keepAlive","gateway","Error","ERR_INVALID_PARAMETERS","isStarted","start","afterStart","_start","catch","err","error","addrs","transportManager","getAddrs","addr","family","host","port","transport","toOptions","isThinWaistAddress","client","_getClient","publicIp","externalIp","isPrivate","publicPort","map","localPort","protocol","toUpperCase","addressManager","addObservedAddr","address","stop","close","undefined"],"sources":["../../src/nat-manager.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}