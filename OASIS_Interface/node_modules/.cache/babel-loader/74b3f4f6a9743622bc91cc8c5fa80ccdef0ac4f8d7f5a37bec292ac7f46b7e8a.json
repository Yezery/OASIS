{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks(node, links = []) {\n  for (const key in node) {\n    const val = node[key];\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        });\n        continue;\n      } catch ( /** @type {any} */_) {\n        // not a CID\n      }\n    }\n    const cid = CID.asCID(val);\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      });\n      continue;\n    }\n    if (Array.isArray(val)) {\n      findLinks(val, links);\n    }\n    if (val && typeof val === 'object') {\n      findLinks(val, links);\n    }\n  }\n  return links;\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLinks({\n  repo,\n  codecs\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"links\"]}\n   */\n  async function links(cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n    switch (cid.code) {\n      case raw.code:\n        return [];\n      case dagPB.code:\n        return node.Links;\n      case dagCBOR.code:\n      case dagJSON.code:\n        return findLinks(node);\n      default:\n        throw new Error(`Cannot resolve links from codec ${cid.code}`);\n    }\n  }\n  return withTimeoutOption(links);\n}","map":{"version":3,"names":["dagPB","dagCBOR","dagJSON","raw","CID","withTimeoutOption","findLinks","node","links","key","val","Object","keys","length","push","Name","Tsize","Hash","parse","_","cid","asCID","Array","isArray","createLinks","repo","codecs","options","codec","getCodec","code","block","blocks","get","decode","Links","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/object/links.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('@ipld/dag-pb').PBLink} DAGLink\n */\n\n/**\n * @param {any} node\n * @param {DAGLink[]} [links]\n * @returns {DAGLink[]}\n */\nfunction findLinks (node, links = []) {\n  for (const key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push({\n          Name: '',\n          Tsize: 0,\n          Hash: CID.parse(val)\n        })\n        continue\n      } catch (/** @type {any} */ _) {\n        // not a CID\n      }\n    }\n\n    const cid = CID.asCID(val)\n\n    if (cid) {\n      links.push({\n        Name: '',\n        Tsize: 0,\n        Hash: cid\n      })\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (val && typeof val === 'object') {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLinks ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"links\"]}\n   */\n  async function links (cid, options = {}) {\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    switch (cid.code) {\n      case raw.code:\n        return []\n      case dagPB.code:\n        return node.Links\n      case dagCBOR.code:\n      case dagJSON.code:\n        return findLinks(node)\n      default:\n        throw new Error(`Cannot resolve links from codec ${cid.code}`)\n    }\n  }\n\n  return withTimeoutOption(links)\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;AACzC,OAAO,KAAKC,OAAO,MAAM,gBAAgB;AACzC,OAAO,KAAKC,GAAG,MAAM,yBAAyB;AAC9C,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAAEC,IAAI,EAAEC,KAAK,GAAG,EAAE,EAAE;EACpC,KAAK,MAAMC,GAAG,IAAIF,IAAI,EAAE;IACtB,MAAMG,GAAG,GAAGH,IAAI,CAACE,GAAG,CAAC;IAErB,IAAIA,GAAG,KAAK,GAAG,IAAIE,MAAM,CAACC,IAAI,CAACL,IAAI,CAAC,CAACM,MAAM,KAAK,CAAC,EAAE;MACjD,IAAI;QACFL,KAAK,CAACM,IAAI,CAAC;UACTC,IAAI,EAAE,EAAE;UACRC,KAAK,EAAE,CAAC;UACRC,IAAI,EAAEb,GAAG,CAACc,KAAK,CAACR,GAAG;QACrB,CAAC,CAAC;QACF;MACF,CAAC,CAAC,QAAO,kBAAmBS,CAAC,EAAE;QAC7B;MAAA;IAEJ;IAEA,MAAMC,GAAG,GAAGhB,GAAG,CAACiB,KAAK,CAACX,GAAG,CAAC;IAE1B,IAAIU,GAAG,EAAE;MACPZ,KAAK,CAACM,IAAI,CAAC;QACTC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,CAAC;QACRC,IAAI,EAAEG;MACR,CAAC,CAAC;MACF;IACF;IAEA,IAAIE,KAAK,CAACC,OAAO,CAACb,GAAG,CAAC,EAAE;MACtBJ,SAAS,CAACI,GAAG,EAAEF,KAAK,CAAC;IACvB;IAEA,IAAIE,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MAClCJ,SAAS,CAACI,GAAG,EAAEF,KAAK,CAAC;IACvB;EACF;EAEA,OAAOA,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgB,WAAWA,CAAE;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAC7C;AACF;AACA;EACE,eAAelB,KAAKA,CAAEY,GAAG,EAAEO,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,MAAMC,KAAK,GAAG,MAAMF,MAAM,CAACG,QAAQ,CAACT,GAAG,CAACU,IAAI,CAAC;IAC7C,MAAMC,KAAK,GAAG,MAAMN,IAAI,CAACO,MAAM,CAACC,GAAG,CAACb,GAAG,EAAEO,OAAO,CAAC;IACjD,MAAMpB,IAAI,GAAGqB,KAAK,CAACM,MAAM,CAACH,KAAK,CAAC;IAEhC,QAAQX,GAAG,CAACU,IAAI;MACd,KAAK3B,GAAG,CAAC2B,IAAI;QACX,OAAO,EAAE;MACX,KAAK9B,KAAK,CAAC8B,IAAI;QACb,OAAOvB,IAAI,CAAC4B,KAAK;MACnB,KAAKlC,OAAO,CAAC6B,IAAI;MACjB,KAAK5B,OAAO,CAAC4B,IAAI;QACf,OAAOxB,SAAS,CAACC,IAAI,CAAC;MACxB;QACE,MAAM,IAAI6B,KAAK,CAAE,mCAAkChB,GAAG,CAACU,IAAK,EAAC,CAAC;IAClE;EACF;EAEA,OAAOzB,iBAAiB,CAACG,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}