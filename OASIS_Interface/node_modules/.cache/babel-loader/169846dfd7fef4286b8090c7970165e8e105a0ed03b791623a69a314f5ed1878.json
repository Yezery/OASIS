{"ast":null,"code":"/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\nvar truncate = require(\"truncate-utf8-bytes\");\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input.replace(illegalRe, replacement).replace(controlRe, replacement).replace(reservedRe, replacement).replace(windowsReservedRe, replacement).replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\nmodule.exports = function (input, options) {\n  var replacement = options && options.replacement || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};","map":{"version":3,"names":["truncate","require","illegalRe","controlRe","reservedRe","windowsReservedRe","windowsTrailingRe","sanitize","input","replacement","Error","sanitized","replace","module","exports","options","output"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/sanitize-filename@1.6.3/node_modules/sanitize-filename/index.js"],"sourcesContent":["/*jshint node:true*/\n'use strict';\n\n/**\n * Replaces characters in strings that are illegal/unsafe for filenames.\n * Unsafe characters are either removed or replaced by a substitute set\n * in the optional `options` object.\n *\n * Illegal Characters on Various Operating Systems\n * / ? < > \\ : * | \"\n * https://kb.acronis.com/content/39790\n *\n * Unicode Control codes\n * C0 0x00-0x1f & C1 (0x80-0x9f)\n * http://en.wikipedia.org/wiki/C0_and_C1_control_codes\n *\n * Reserved filenames on Unix-based systems (\".\", \"..\")\n * Reserved filenames in Windows (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\",\n * \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\",\n * \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", and\n * \"LPT9\") case-insesitively and with or without filename extensions.\n *\n * Capped at 255 characters in length.\n * http://unix.stackexchange.com/questions/32795/what-is-the-maximum-allowed-filename-and-folder-size-with-ecryptfs\n *\n * @param  {String} input   Original filename\n * @param  {Object} options {replacement: String | Function }\n * @return {String}         Sanitized filename\n */\n\nvar truncate = require(\"truncate-utf8-bytes\");\n\nvar illegalRe = /[\\/\\?<>\\\\:\\*\\|\"]/g;\nvar controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\nvar reservedRe = /^\\.+$/;\nvar windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\nvar windowsTrailingRe = /[\\. ]+$/;\n\nfunction sanitize(input, replacement) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be string');\n  }\n  var sanitized = input\n    .replace(illegalRe, replacement)\n    .replace(controlRe, replacement)\n    .replace(reservedRe, replacement)\n    .replace(windowsReservedRe, replacement)\n    .replace(windowsTrailingRe, replacement);\n  return truncate(sanitized, 255);\n}\n\nmodule.exports = function (input, options) {\n  var replacement = (options && options.replacement) || '';\n  var output = sanitize(input, replacement);\n  if (replacement === '') {\n    return output;\n  }\n  return sanitize(output, '');\n};\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AAE7C,IAAIC,SAAS,GAAG,mBAAmB;AACnC,IAAIC,SAAS,GAAG,uBAAuB;AACvC,IAAIC,UAAU,GAAG,OAAO;AACxB,IAAIC,iBAAiB,GAAG,+CAA+C;AACvE,IAAIC,iBAAiB,GAAG,SAAS;AAEjC,SAASC,QAAQA,CAACC,KAAK,EAAEC,WAAW,EAAE;EACpC,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAIE,KAAK,CAAC,sBAAsB,CAAC;EACzC;EACA,IAAIC,SAAS,GAAGH,KAAK,CAClBI,OAAO,CAACV,SAAS,EAAEO,WAAW,CAAC,CAC/BG,OAAO,CAACT,SAAS,EAAEM,WAAW,CAAC,CAC/BG,OAAO,CAACR,UAAU,EAAEK,WAAW,CAAC,CAChCG,OAAO,CAACP,iBAAiB,EAAEI,WAAW,CAAC,CACvCG,OAAO,CAACN,iBAAiB,EAAEG,WAAW,CAAC;EAC1C,OAAOT,QAAQ,CAACW,SAAS,EAAE,GAAG,CAAC;AACjC;AAEAE,MAAM,CAACC,OAAO,GAAG,UAAUN,KAAK,EAAEO,OAAO,EAAE;EACzC,IAAIN,WAAW,GAAIM,OAAO,IAAIA,OAAO,CAACN,WAAW,IAAK,EAAE;EACxD,IAAIO,MAAM,GAAGT,QAAQ,CAACC,KAAK,EAAEC,WAAW,CAAC;EACzC,IAAIA,WAAW,KAAK,EAAE,EAAE;IACtB,OAAOO,MAAM;EACf;EACA,OAAOT,QAAQ,CAACS,MAAM,EAAE,EAAE,CAAC;AAC7B,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}