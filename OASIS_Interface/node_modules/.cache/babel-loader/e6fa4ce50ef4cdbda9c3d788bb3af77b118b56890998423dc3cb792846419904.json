{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { RejectReason } from './types.js';\nexport var MessageSource;\n(function (MessageSource) {\n  MessageSource[\"forward\"] = \"forward\";\n  MessageSource[\"publish\"] = \"publish\";\n})(MessageSource || (MessageSource = {}));\nexport var InclusionReason;\n(function (InclusionReason) {\n  /** Peer was a fanaout peer. */\n  InclusionReason[\"Fanout\"] = \"fanout\";\n  /** Included from random selection. */\n  InclusionReason[\"Random\"] = \"random\";\n  /** Peer subscribed. */\n  InclusionReason[\"Subscribed\"] = \"subscribed\";\n  /** On heartbeat, peer was included to fill the outbound quota. */\n  InclusionReason[\"Outbound\"] = \"outbound\";\n  /** On heartbeat, not enough peers in mesh */\n  InclusionReason[\"NotEnough\"] = \"not_enough\";\n  /** On heartbeat opportunistic grafting due to low mesh score */\n  InclusionReason[\"Opportunistic\"] = \"opportunistic\";\n})(InclusionReason || (InclusionReason = {}));\n/// Reasons why a peer was removed from the mesh.\nexport var ChurnReason;\n(function (ChurnReason) {\n  /// Peer disconnected.\n  ChurnReason[\"Dc\"] = \"disconnected\";\n  /// Peer had a bad score.\n  ChurnReason[\"BadScore\"] = \"bad_score\";\n  /// Peer sent a PRUNE.\n  ChurnReason[\"Prune\"] = \"prune\";\n  /// Peer unsubscribed.\n  ChurnReason[\"Unsub\"] = \"unsubscribed\";\n  /// Too many peers.\n  ChurnReason[\"Excess\"] = \"excess\";\n})(ChurnReason || (ChurnReason = {}));\n/// Kinds of reasons a peer's score has been penalized\nexport var ScorePenalty;\n(function (ScorePenalty) {\n  /// A peer grafted before waiting the back-off time.\n  ScorePenalty[\"GraftBackoff\"] = \"graft_backoff\";\n  /// A Peer did not respond to an IWANT request in time.\n  ScorePenalty[\"BrokenPromise\"] = \"broken_promise\";\n  /// A Peer did not send enough messages as expected.\n  ScorePenalty[\"MessageDeficit\"] = \"message_deficit\";\n  /// Too many peers under one IP address.\n  ScorePenalty[\"IPColocation\"] = \"IP_colocation\";\n})(ScorePenalty || (ScorePenalty = {}));\nexport var IHaveIgnoreReason;\n(function (IHaveIgnoreReason) {\n  IHaveIgnoreReason[\"LowScore\"] = \"low_score\";\n  IHaveIgnoreReason[\"MaxIhave\"] = \"max_ihave\";\n  IHaveIgnoreReason[\"MaxIasked\"] = \"max_iasked\";\n})(IHaveIgnoreReason || (IHaveIgnoreReason = {}));\nexport var ScoreThreshold;\n(function (ScoreThreshold) {\n  ScoreThreshold[\"graylist\"] = \"graylist\";\n  ScoreThreshold[\"publish\"] = \"publish\";\n  ScoreThreshold[\"gossip\"] = \"gossip\";\n  ScoreThreshold[\"mesh\"] = \"mesh\";\n})(ScoreThreshold || (ScoreThreshold = {}));\n/**\n * A collection of metrics used throughout the Gossipsub behaviour.\n */\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function getMetrics(register, topicStrToLabel, opts) {\n  // Using function style instead of class to prevent having to re-declare all MetricsPrometheus types.\n  return {\n    /* Metrics for static config */\n    protocolsEnabled: register.gauge({\n      name: 'gossipsub_protocol',\n      help: 'Status of enabled protocols',\n      labelNames: ['protocol']\n    }),\n    /* Metrics per known topic */\n    /** Status of our subscription to this topic. This metric allows analyzing other topic metrics\n     *  filtered by our current subscription status.\n     *  = rust-libp2p `topic_subscription_status` */\n    topicSubscriptionStatus: register.gauge({\n      name: 'gossipsub_topic_subscription_status',\n      help: 'Status of our subscription to this topic',\n      labelNames: ['topicStr']\n    }),\n    /** Number of peers subscribed to each topic. This allows us to analyze a topic's behaviour\n     * regardless of our subscription status. */\n    topicPeersCount: register.gauge({\n      name: 'gossipsub_topic_peer_count',\n      help: 'Number of peers subscribed to each topic',\n      labelNames: ['topicStr']\n    }),\n    /* Metrics regarding mesh state */\n    /** Number of peers in our mesh. This metric should be updated with the count of peers for a\n     *  topic in the mesh regardless of inclusion and churn events.\n     *  = rust-libp2p `mesh_peer_counts` */\n    meshPeerCounts: register.gauge({\n      name: 'gossipsub_mesh_peer_count',\n      help: 'Number of peers in our mesh',\n      labelNames: ['topicStr']\n    }),\n    /** Number of times we include peers in a topic mesh for different reasons.\n     *  = rust-libp2p `mesh_peer_inclusion_events` */\n    meshPeerInclusionEvents: register.gauge({\n      name: 'gossipsub_mesh_peer_inclusion_events_total',\n      help: 'Number of times we include peers in a topic mesh for different reasons',\n      labelNames: ['topic', 'reason']\n    }),\n    /** Number of times we remove peers in a topic mesh for different reasons.\n     *  = rust-libp2p `mesh_peer_churn_events` */\n    meshPeerChurnEvents: register.gauge({\n      name: 'gossipsub_peer_churn_events_total',\n      help: 'Number of times we remove peers in a topic mesh for different reasons',\n      labelNames: ['topic', 'reason']\n    }),\n    /* General Metrics */\n    /** Gossipsub supports floodsub, gossipsub v1.0 and gossipsub v1.1. Peers are classified based\n     *  on which protocol they support. This metric keeps track of the number of peers that are\n     *  connected of each type. */\n    peersPerProtocol: register.gauge({\n      name: 'gossipsub_peers_per_protocol_count',\n      help: 'Peers connected for each topic',\n      labelNames: ['protocol']\n    }),\n    /** The time it takes to complete one iteration of the heartbeat. */\n    heartbeatDuration: register.histogram({\n      name: 'gossipsub_heartbeat_duration_seconds',\n      help: 'The time it takes to complete one iteration of the heartbeat',\n      // Should take <10ms, over 1s it's a huge issue that needs debugging, since a heartbeat will be cancelled\n      buckets: [0.01, 0.1, 1]\n    }),\n    /** Heartbeat run took longer than heartbeat interval so next is skipped */\n    heartbeatSkipped: register.gauge({\n      name: 'gossipsub_heartbeat_skipped',\n      help: 'Heartbeat run took longer than heartbeat interval so next is skipped'\n    }),\n    /** Message validation results for each topic.\n     *  Invalid == Reject?\n     *  = rust-libp2p `invalid_messages`, `accepted_messages`, `ignored_messages`, `rejected_messages` */\n    asyncValidationResult: register.gauge({\n      name: 'gossipsub_async_validation_result_total',\n      help: 'Message validation result for each topic',\n      labelNames: ['topic', 'acceptance']\n    }),\n    /** When the user validates a message, it tries to re propagate it to its mesh peers. If the\n     *  message expires from the memcache before it can be validated, we count this a cache miss\n     *  and it is an indicator that the memcache size should be increased.\n     *  = rust-libp2p `mcache_misses` */\n    asyncValidationMcacheHit: register.gauge({\n      name: 'gossipsub_async_validation_mcache_hit_total',\n      help: 'Async validation result reported by the user layer',\n      labelNames: ['hit']\n    }),\n    // peer stream\n    peerReadStreamError: register.gauge({\n      name: 'gossipsub_peer_read_stream_err_count_total',\n      help: 'Peer read stream error'\n    }),\n    // RPC outgoing. Track byte length + data structure sizes\n    rpcRecvBytes: register.gauge({\n      name: 'gossipsub_rpc_recv_bytes_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvCount: register.gauge({\n      name: 'gossipsub_rpc_recv_count_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvSubscription: register.gauge({\n      name: 'gossipsub_rpc_recv_subscription_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvMessage: register.gauge({\n      name: 'gossipsub_rpc_recv_message_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvControl: register.gauge({\n      name: 'gossipsub_rpc_recv_control_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvIHave: register.gauge({\n      name: 'gossipsub_rpc_recv_ihave_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvIWant: register.gauge({\n      name: 'gossipsub_rpc_recv_iwant_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvGraft: register.gauge({\n      name: 'gossipsub_rpc_recv_graft_total',\n      help: 'RPC recv'\n    }),\n    rpcRecvPrune: register.gauge({\n      name: 'gossipsub_rpc_recv_prune_total',\n      help: 'RPC recv'\n    }),\n    rpcDataError: register.gauge({\n      name: 'gossipsub_rpc_data_err_count_total',\n      help: 'RPC data error'\n    }),\n    rpcRecvError: register.gauge({\n      name: 'gossipsub_rpc_recv_err_count_total',\n      help: 'RPC recv error'\n    }),\n    /** Total count of RPC dropped because acceptFrom() == false */\n    rpcRecvNotAccepted: register.gauge({\n      name: 'gossipsub_rpc_rcv_not_accepted_total',\n      help: 'Total count of RPC dropped because acceptFrom() == false'\n    }),\n    // RPC incoming. Track byte length + data structure sizes\n    rpcSentBytes: register.gauge({\n      name: 'gossipsub_rpc_sent_bytes_total',\n      help: 'RPC sent'\n    }),\n    rpcSentCount: register.gauge({\n      name: 'gossipsub_rpc_sent_count_total',\n      help: 'RPC sent'\n    }),\n    rpcSentSubscription: register.gauge({\n      name: 'gossipsub_rpc_sent_subscription_total',\n      help: 'RPC sent'\n    }),\n    rpcSentMessage: register.gauge({\n      name: 'gossipsub_rpc_sent_message_total',\n      help: 'RPC sent'\n    }),\n    rpcSentControl: register.gauge({\n      name: 'gossipsub_rpc_sent_control_total',\n      help: 'RPC sent'\n    }),\n    rpcSentIHave: register.gauge({\n      name: 'gossipsub_rpc_sent_ihave_total',\n      help: 'RPC sent'\n    }),\n    rpcSentIWant: register.gauge({\n      name: 'gossipsub_rpc_sent_iwant_total',\n      help: 'RPC sent'\n    }),\n    rpcSentGraft: register.gauge({\n      name: 'gossipsub_rpc_sent_graft_total',\n      help: 'RPC sent'\n    }),\n    rpcSentPrune: register.gauge({\n      name: 'gossipsub_rpc_sent_prune_total',\n      help: 'RPC sent'\n    }),\n    // publish message. Track peers sent to and bytes\n    /** Total count of msg published by topic */\n    msgPublishCount: register.gauge({\n      name: 'gossipsub_msg_publish_count_total',\n      help: 'Total count of msg published by topic',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers that we publish a msg to */\n    msgPublishPeers: register.gauge({\n      name: 'gossipsub_msg_publish_peers_total',\n      help: 'Total count of peers that we publish a msg to',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers (by group) that we publish a msg to */\n    // NOTE: Do not use 'group' label since it's a generic already used by Prometheus to group instances\n    msgPublishPeersByGroup: register.gauge({\n      name: 'gossipsub_msg_publish_peers_by_group',\n      help: 'Total count of peers (by group) that we publish a msg to',\n      labelNames: ['topic', 'peerGroup']\n    }),\n    /** Total count of msg publish data.length bytes */\n    msgPublishBytes: register.gauge({\n      name: 'gossipsub_msg_publish_bytes_total',\n      help: 'Total count of msg publish data.length bytes',\n      labelNames: ['topic']\n    }),\n    /** Total count of msg forwarded by topic */\n    msgForwardCount: register.gauge({\n      name: 'gossipsub_msg_forward_count_total',\n      help: 'Total count of msg forwarded by topic',\n      labelNames: ['topic']\n    }),\n    /** Total count of peers that we forward a msg to */\n    msgForwardPeers: register.gauge({\n      name: 'gossipsub_msg_forward_peers_total',\n      help: 'Total count of peers that we forward a msg to',\n      labelNames: ['topic']\n    }),\n    /** Total count of recv msgs before any validation */\n    msgReceivedPreValidation: register.gauge({\n      name: 'gossipsub_msg_received_prevalidation_total',\n      help: 'Total count of recv msgs before any validation',\n      labelNames: ['topic']\n    }),\n    /** Total count of recv msgs error */\n    msgReceivedError: register.gauge({\n      name: 'gossipsub_msg_received_error_total',\n      help: 'Total count of recv msgs error',\n      labelNames: ['topic']\n    }),\n    /** Tracks distribution of recv msgs by duplicate, invalid, valid */\n    msgReceivedStatus: register.gauge({\n      name: 'gossipsub_msg_received_status_total',\n      help: 'Tracks distribution of recv msgs by duplicate, invalid, valid',\n      labelNames: ['topic', 'status']\n    }),\n    /** Tracks specific reason of invalid */\n    msgReceivedInvalid: register.gauge({\n      name: 'gossipsub_msg_received_invalid_total',\n      help: 'Tracks specific reason of invalid',\n      labelNames: ['topic', 'error']\n    }),\n    /** Track duplicate message delivery time */\n    duplicateMsgDeliveryDelay: register.histogram({\n      name: 'gossisub_duplicate_msg_delivery_delay_seconds',\n      help: 'Time since the 1st duplicated message validated',\n      labelNames: ['topic'],\n      buckets: [0.25 * opts.maxMeshMessageDeliveriesWindowSec, 0.5 * opts.maxMeshMessageDeliveriesWindowSec, 1 * opts.maxMeshMessageDeliveriesWindowSec, 2 * opts.maxMeshMessageDeliveriesWindowSec, 4 * opts.maxMeshMessageDeliveriesWindowSec]\n    }),\n    /** Total count of late msg delivery total by topic */\n    duplicateMsgLateDelivery: register.gauge({\n      name: 'gossisub_duplicate_msg_late_delivery_total',\n      help: 'Total count of late duplicate message delivery by topic, which triggers P3 penalty',\n      labelNames: ['topic']\n    }),\n    duplicateMsgIgnored: register.gauge({\n      name: 'gossisub_ignored_published_duplicate_msgs_total',\n      help: 'Total count of published duplicate message ignored by topic',\n      labelNames: ['topic']\n    }),\n    /* Metrics related to scoring */\n    /** Total times score() is called */\n    scoreFnCalls: register.gauge({\n      name: 'gossipsub_score_fn_calls_total',\n      help: 'Total times score() is called'\n    }),\n    /** Total times score() call actually computed computeScore(), no cache */\n    scoreFnRuns: register.gauge({\n      name: 'gossipsub_score_fn_runs_total',\n      help: 'Total times score() call actually computed computeScore(), no cache'\n    }),\n    scoreCachedDelta: register.histogram({\n      name: 'gossipsub_score_cache_delta',\n      help: 'Delta of score between cached values that expired',\n      buckets: [10, 100, 1000]\n    }),\n    /** Current count of peers by score threshold */\n    peersByScoreThreshold: register.gauge({\n      name: 'gossipsub_peers_by_score_threshold_count',\n      help: 'Current count of peers by score threshold',\n      labelNames: ['threshold']\n    }),\n    score: register.avgMinMax({\n      name: 'gossipsub_score',\n      help: 'Avg min max of gossip scores',\n      labelNames: ['topic', 'p']\n    }),\n    /** Separate score weights */\n    scoreWeights: register.avgMinMax({\n      name: 'gossipsub_score_weights',\n      help: 'Separate score weights',\n      labelNames: ['topic', 'p']\n    }),\n    /** Histogram of the scores for each mesh topic. */\n    // TODO: Not implemented\n    scorePerMesh: register.avgMinMax({\n      name: 'gossipsub_score_per_mesh',\n      help: 'Histogram of the scores for each mesh topic',\n      labelNames: ['topic']\n    }),\n    /** A counter of the kind of penalties being applied to peers. */\n    // TODO: Not fully implemented\n    scoringPenalties: register.gauge({\n      name: 'gossipsub_scoring_penalties_total',\n      help: 'A counter of the kind of penalties being applied to peers',\n      labelNames: ['penalty']\n    }),\n    behaviourPenalty: register.histogram({\n      name: 'gossipsub_peer_stat_behaviour_penalty',\n      help: 'Current peer stat behaviour_penalty at each scrape',\n      buckets: [0.25 * opts.behaviourPenaltyThreshold, 0.5 * opts.behaviourPenaltyThreshold, 1 * opts.behaviourPenaltyThreshold, 2 * opts.behaviourPenaltyThreshold, 4 * opts.behaviourPenaltyThreshold]\n    }),\n    // TODO:\n    // - iasked per peer (on heartbeat)\n    // - when promise is resolved, track messages from promises\n    /** Total received IHAVE messages that we ignore for some reason */\n    ihaveRcvIgnored: register.gauge({\n      name: 'gossipsub_ihave_rcv_ignored_total',\n      help: 'Total received IHAVE messages that we ignore for some reason',\n      labelNames: ['reason']\n    }),\n    /** Total received IHAVE messages by topic */\n    ihaveRcvMsgids: register.gauge({\n      name: 'gossipsub_ihave_rcv_msgids_total',\n      help: 'Total received IHAVE messages by topic',\n      labelNames: ['topic']\n    }),\n    /** Total messages per topic we don't have. Not actual requests.\n     *  The number of times we have decided that an IWANT control message is required for this\n     *  topic. A very high metric might indicate an underperforming network.\n     *  = rust-libp2p `topic_iwant_msgs` */\n    ihaveRcvNotSeenMsgids: register.gauge({\n      name: 'gossipsub_ihave_rcv_not_seen_msgids_total',\n      help: 'Total messages per topic we do not have, not actual requests',\n      labelNames: ['topic']\n    }),\n    /** Total received IWANT messages by topic */\n    iwantRcvMsgids: register.gauge({\n      name: 'gossipsub_iwant_rcv_msgids_total',\n      help: 'Total received IWANT messages by topic',\n      labelNames: ['topic']\n    }),\n    /** Total requested messageIDs that we don't have */\n    iwantRcvDonthaveMsgids: register.gauge({\n      name: 'gossipsub_iwant_rcv_dont_have_msgids_total',\n      help: 'Total requested messageIDs that we do not have'\n    }),\n    iwantPromiseStarted: register.gauge({\n      name: 'gossipsub_iwant_promise_sent_total',\n      help: 'Total count of started IWANT promises'\n    }),\n    /** Total count of resolved IWANT promises */\n    iwantPromiseResolved: register.gauge({\n      name: 'gossipsub_iwant_promise_resolved_total',\n      help: 'Total count of resolved IWANT promises'\n    }),\n    /** Total count of resolved IWANT promises from duplicate messages */\n    iwantPromiseResolvedFromDuplicate: register.gauge({\n      name: 'gossipsub_iwant_promise_resolved_from_duplicate_total',\n      help: 'Total count of resolved IWANT promises from duplicate messages'\n    }),\n    /** Total count of peers we have asked IWANT promises that are resolved */\n    iwantPromiseResolvedPeers: register.gauge({\n      name: 'gossipsub_iwant_promise_resolved_peers',\n      help: 'Total count of peers we have asked IWANT promises that are resolved'\n    }),\n    iwantPromiseBroken: register.gauge({\n      name: 'gossipsub_iwant_promise_broken',\n      help: 'Total count of broken IWANT promises'\n    }),\n    iwantMessagePruned: register.gauge({\n      name: 'gossipsub_iwant_message_pruned',\n      help: 'Total count of pruned IWANT messages'\n    }),\n    /** Histogram of delivery time of resolved IWANT promises */\n    iwantPromiseDeliveryTime: register.histogram({\n      name: 'gossipsub_iwant_promise_delivery_seconds',\n      help: 'Histogram of delivery time of resolved IWANT promises',\n      buckets: [0.5 * opts.gossipPromiseExpireSec, 1 * opts.gossipPromiseExpireSec, 2 * opts.gossipPromiseExpireSec, 4 * opts.gossipPromiseExpireSec]\n    }),\n    iwantPromiseUntracked: register.gauge({\n      name: 'gossip_iwant_promise_untracked',\n      help: 'Total count of untracked IWANT promise'\n    }),\n    /* Data structure sizes */\n    /** Unbounded cache sizes */\n    cacheSize: register.gauge({\n      name: 'gossipsub_cache_size',\n      help: 'Unbounded cache sizes',\n      labelNames: ['cache']\n    }),\n    /** Current mcache msg count */\n    mcacheSize: register.gauge({\n      name: 'gossipsub_mcache_size',\n      help: 'Current mcache msg count'\n    }),\n    mcacheNotValidatedCount: register.gauge({\n      name: 'gossipsub_mcache_not_validated_count',\n      help: 'Current mcache msg count not validated'\n    }),\n    fastMsgIdCacheCollision: register.gauge({\n      name: 'gossipsub_fastmsgid_cache_collision_total',\n      help: 'Total count of key collisions on fastmsgid cache put'\n    }),\n    newConnectionCount: register.gauge({\n      name: 'gossipsub_new_connection_total',\n      help: 'Total new connection by status',\n      labelNames: ['status']\n    }),\n    topicStrToLabel: topicStrToLabel,\n    toTopic(topicStr) {\n      return this.topicStrToLabel.get(topicStr) ?? topicStr;\n    },\n    /** We joined a topic */\n    onJoin(topicStr) {\n      this.topicSubscriptionStatus.set({\n        topicStr\n      }, 1);\n      this.meshPeerCounts.set({\n        topicStr\n      }, 0); // Reset count\n    },\n\n    /** We left a topic */\n    onLeave(topicStr) {\n      this.topicSubscriptionStatus.set({\n        topicStr\n      }, 0);\n      this.meshPeerCounts.set({\n        topicStr\n      }, 0); // Reset count\n    },\n\n    /** Register the inclusion of peers in our mesh due to some reason. */\n    onAddToMesh(topicStr, reason, count) {\n      const topic = this.toTopic(topicStr);\n      this.meshPeerInclusionEvents.inc({\n        topic,\n        reason\n      }, count);\n    },\n    /** Register the removal of peers in our mesh due to some reason */\n    // - remove_peer_from_mesh()\n    // - heartbeat() Churn::BadScore\n    // - heartbeat() Churn::Excess\n    // - on_disconnect() Churn::Ds\n    onRemoveFromMesh(topicStr, reason, count) {\n      const topic = this.toTopic(topicStr);\n      this.meshPeerChurnEvents.inc({\n        topic,\n        reason\n      }, count);\n    },\n    onReportValidationMcacheHit(hit) {\n      this.asyncValidationMcacheHit.inc({\n        hit: hit ? 'hit' : 'miss'\n      });\n    },\n    onReportValidation(topicStr, acceptance) {\n      const topic = this.toTopic(topicStr);\n      this.asyncValidationResult.inc({\n        topic: topic,\n        acceptance\n      });\n    },\n    /**\n     * - in handle_graft() Penalty::GraftBackoff\n     * - in apply_iwant_penalties() Penalty::BrokenPromise\n     * - in metric_score() P3 Penalty::MessageDeficit\n     * - in metric_score() P6 Penalty::IPColocation\n     */\n    onScorePenalty(penalty) {\n      // Can this be labeled by topic too?\n      this.scoringPenalties.inc({\n        penalty\n      }, 1);\n    },\n    onIhaveRcv(topicStr, ihave, idonthave) {\n      const topic = this.toTopic(topicStr);\n      this.ihaveRcvMsgids.inc({\n        topic\n      }, ihave);\n      this.ihaveRcvNotSeenMsgids.inc({\n        topic\n      }, idonthave);\n    },\n    onIwantRcv(iwantByTopic, iwantDonthave) {\n      for (const [topicStr, iwant] of iwantByTopic) {\n        const topic = this.toTopic(topicStr);\n        this.iwantRcvMsgids.inc({\n          topic\n        }, iwant);\n      }\n      this.iwantRcvDonthaveMsgids.inc(iwantDonthave);\n    },\n    onForwardMsg(topicStr, tosendCount) {\n      const topic = this.toTopic(topicStr);\n      this.msgForwardCount.inc({\n        topic\n      }, 1);\n      this.msgForwardPeers.inc({\n        topic\n      }, tosendCount);\n    },\n    onPublishMsg(topicStr, tosendGroupCount, tosendCount, dataLen) {\n      const topic = this.toTopic(topicStr);\n      this.msgPublishCount.inc({\n        topic\n      }, 1);\n      this.msgPublishBytes.inc({\n        topic\n      }, tosendCount * dataLen);\n      this.msgPublishPeers.inc({\n        topic\n      }, tosendCount);\n      this.msgPublishPeersByGroup.inc({\n        topic,\n        peerGroup: 'direct'\n      }, tosendGroupCount.direct);\n      this.msgPublishPeersByGroup.inc({\n        topic,\n        peerGroup: 'floodsub'\n      }, tosendGroupCount.floodsub);\n      this.msgPublishPeersByGroup.inc({\n        topic,\n        peerGroup: 'mesh'\n      }, tosendGroupCount.mesh);\n      this.msgPublishPeersByGroup.inc({\n        topic,\n        peerGroup: 'fanout'\n      }, tosendGroupCount.fanout);\n    },\n    onMsgRecvPreValidation(topicStr) {\n      const topic = this.toTopic(topicStr);\n      this.msgReceivedPreValidation.inc({\n        topic\n      }, 1);\n    },\n    onMsgRecvError(topicStr) {\n      const topic = this.toTopic(topicStr);\n      this.msgReceivedError.inc({\n        topic\n      }, 1);\n    },\n    onMsgRecvResult(topicStr, status) {\n      const topic = this.toTopic(topicStr);\n      this.msgReceivedStatus.inc({\n        topic,\n        status\n      });\n    },\n    onMsgRecvInvalid(topicStr, reason) {\n      const topic = this.toTopic(topicStr);\n      const error = reason.reason === RejectReason.Error ? reason.error : reason.reason;\n      this.msgReceivedInvalid.inc({\n        topic,\n        error\n      }, 1);\n    },\n    onDuplicateMsgDelivery(topicStr, deliveryDelayMs, isLateDelivery) {\n      this.duplicateMsgDeliveryDelay.observe(deliveryDelayMs / 1000);\n      if (isLateDelivery) {\n        const topic = this.toTopic(topicStr);\n        this.duplicateMsgLateDelivery.inc({\n          topic\n        }, 1);\n      }\n    },\n    onPublishDuplicateMsg(topicStr) {\n      const topic = this.toTopic(topicStr);\n      this.duplicateMsgIgnored.inc({\n        topic\n      }, 1);\n    },\n    onPeerReadStreamError() {\n      this.peerReadStreamError.inc(1);\n    },\n    onRpcRecvError() {\n      this.rpcRecvError.inc(1);\n    },\n    onRpcDataError() {\n      this.rpcDataError.inc(1);\n    },\n    onRpcRecv(rpc, rpcBytes) {\n      this.rpcRecvBytes.inc(rpcBytes);\n      this.rpcRecvCount.inc(1);\n      if (rpc.subscriptions) this.rpcRecvSubscription.inc(rpc.subscriptions.length);\n      if (rpc.messages) this.rpcRecvMessage.inc(rpc.messages.length);\n      if (rpc.control) {\n        this.rpcRecvControl.inc(1);\n        if (rpc.control.ihave) this.rpcRecvIHave.inc(rpc.control.ihave.length);\n        if (rpc.control.iwant) this.rpcRecvIWant.inc(rpc.control.iwant.length);\n        if (rpc.control.graft) this.rpcRecvGraft.inc(rpc.control.graft.length);\n        if (rpc.control.prune) this.rpcRecvPrune.inc(rpc.control.prune.length);\n      }\n    },\n    onRpcSent(rpc, rpcBytes) {\n      this.rpcSentBytes.inc(rpcBytes);\n      this.rpcSentCount.inc(1);\n      if (rpc.subscriptions) this.rpcSentSubscription.inc(rpc.subscriptions.length);\n      if (rpc.messages) this.rpcSentMessage.inc(rpc.messages.length);\n      if (rpc.control) {\n        const ihave = rpc.control.ihave?.length ?? 0;\n        const iwant = rpc.control.iwant?.length ?? 0;\n        const graft = rpc.control.graft?.length ?? 0;\n        const prune = rpc.control.prune?.length ?? 0;\n        if (ihave > 0) this.rpcSentIHave.inc(ihave);\n        if (iwant > 0) this.rpcSentIWant.inc(iwant);\n        if (graft > 0) this.rpcSentGraft.inc(graft);\n        if (prune > 0) this.rpcSentPrune.inc(prune);\n        if (ihave > 0 || iwant > 0 || graft > 0 || prune > 0) this.rpcSentControl.inc(1);\n      }\n    },\n    registerScores(scores, scoreThresholds) {\n      let graylist = 0;\n      let publish = 0;\n      let gossip = 0;\n      let mesh = 0;\n      for (const score of scores) {\n        if (score >= scoreThresholds.graylistThreshold) graylist++;\n        if (score >= scoreThresholds.publishThreshold) publish++;\n        if (score >= scoreThresholds.gossipThreshold) gossip++;\n        if (score >= 0) mesh++;\n      }\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.graylist\n      }, graylist);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.publish\n      }, publish);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.gossip\n      }, gossip);\n      this.peersByScoreThreshold.set({\n        threshold: ScoreThreshold.mesh\n      }, mesh);\n      // Register full score too\n      this.score.set(scores);\n    },\n    registerScoreWeights(sw) {\n      for (const [topic, wsTopic] of sw.byTopic) {\n        this.scoreWeights.set({\n          topic,\n          p: 'p1'\n        }, wsTopic.p1w);\n        this.scoreWeights.set({\n          topic,\n          p: 'p2'\n        }, wsTopic.p2w);\n        this.scoreWeights.set({\n          topic,\n          p: 'p3'\n        }, wsTopic.p3w);\n        this.scoreWeights.set({\n          topic,\n          p: 'p3b'\n        }, wsTopic.p3bw);\n        this.scoreWeights.set({\n          topic,\n          p: 'p4'\n        }, wsTopic.p4w);\n      }\n      this.scoreWeights.set({\n        p: 'p5'\n      }, sw.p5w);\n      this.scoreWeights.set({\n        p: 'p6'\n      }, sw.p6w);\n      this.scoreWeights.set({\n        p: 'p7'\n      }, sw.p7w);\n    },\n    registerScorePerMesh(mesh, scoreByPeer) {\n      const peersPerTopicLabel = new Map();\n      mesh.forEach((peers, topicStr) => {\n        // Aggregate by known topicLabel or throw to 'unknown'. This prevent too high cardinality\n        const topicLabel = this.topicStrToLabel.get(topicStr) ?? 'unknown';\n        let peersInMesh = peersPerTopicLabel.get(topicLabel);\n        if (!peersInMesh) {\n          peersInMesh = new Set();\n          peersPerTopicLabel.set(topicLabel, peersInMesh);\n        }\n        peers.forEach(p => peersInMesh?.add(p));\n      });\n      for (const [topic, peers] of peersPerTopicLabel) {\n        const meshScores = [];\n        peers.forEach(peer => {\n          meshScores.push(scoreByPeer.get(peer) ?? 0);\n        });\n        this.scorePerMesh.set({\n          topic\n        }, meshScores);\n      }\n    }\n  };\n}","map":{"version":3,"names":["RejectReason","MessageSource","InclusionReason","ChurnReason","ScorePenalty","IHaveIgnoreReason","ScoreThreshold","getMetrics","register","topicStrToLabel","opts","protocolsEnabled","gauge","name","help","labelNames","topicSubscriptionStatus","topicPeersCount","meshPeerCounts","meshPeerInclusionEvents","meshPeerChurnEvents","peersPerProtocol","heartbeatDuration","histogram","buckets","heartbeatSkipped","asyncValidationResult","asyncValidationMcacheHit","peerReadStreamError","rpcRecvBytes","rpcRecvCount","rpcRecvSubscription","rpcRecvMessage","rpcRecvControl","rpcRecvIHave","rpcRecvIWant","rpcRecvGraft","rpcRecvPrune","rpcDataError","rpcRecvError","rpcRecvNotAccepted","rpcSentBytes","rpcSentCount","rpcSentSubscription","rpcSentMessage","rpcSentControl","rpcSentIHave","rpcSentIWant","rpcSentGraft","rpcSentPrune","msgPublishCount","msgPublishPeers","msgPublishPeersByGroup","msgPublishBytes","msgForwardCount","msgForwardPeers","msgReceivedPreValidation","msgReceivedError","msgReceivedStatus","msgReceivedInvalid","duplicateMsgDeliveryDelay","maxMeshMessageDeliveriesWindowSec","duplicateMsgLateDelivery","duplicateMsgIgnored","scoreFnCalls","scoreFnRuns","scoreCachedDelta","peersByScoreThreshold","score","avgMinMax","scoreWeights","scorePerMesh","scoringPenalties","behaviourPenalty","behaviourPenaltyThreshold","ihaveRcvIgnored","ihaveRcvMsgids","ihaveRcvNotSeenMsgids","iwantRcvMsgids","iwantRcvDonthaveMsgids","iwantPromiseStarted","iwantPromiseResolved","iwantPromiseResolvedFromDuplicate","iwantPromiseResolvedPeers","iwantPromiseBroken","iwantMessagePruned","iwantPromiseDeliveryTime","gossipPromiseExpireSec","iwantPromiseUntracked","cacheSize","mcacheSize","mcacheNotValidatedCount","fastMsgIdCacheCollision","newConnectionCount","toTopic","topicStr","get","onJoin","set","onLeave","onAddToMesh","reason","count","topic","inc","onRemoveFromMesh","onReportValidationMcacheHit","hit","onReportValidation","acceptance","onScorePenalty","penalty","onIhaveRcv","ihave","idonthave","onIwantRcv","iwantByTopic","iwantDonthave","iwant","onForwardMsg","tosendCount","onPublishMsg","tosendGroupCount","dataLen","peerGroup","direct","floodsub","mesh","fanout","onMsgRecvPreValidation","onMsgRecvError","onMsgRecvResult","status","onMsgRecvInvalid","error","Error","onDuplicateMsgDelivery","deliveryDelayMs","isLateDelivery","observe","onPublishDuplicateMsg","onPeerReadStreamError","onRpcRecvError","onRpcDataError","onRpcRecv","rpc","rpcBytes","subscriptions","length","messages","control","graft","prune","onRpcSent","registerScores","scores","scoreThresholds","graylist","publish","gossip","graylistThreshold","publishThreshold","gossipThreshold","threshold","registerScoreWeights","sw","wsTopic","byTopic","p","p1w","p2w","p3w","p3bw","p4w","p5w","p6w","p7w","registerScorePerMesh","scoreByPeer","peersPerTopicLabel","Map","forEach","peers","topicLabel","peersInMesh","Set","add","meshScores","peer","push"],"sources":["../../src/metrics.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}