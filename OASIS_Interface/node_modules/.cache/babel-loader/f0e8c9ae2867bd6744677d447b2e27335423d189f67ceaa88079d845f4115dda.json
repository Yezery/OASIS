{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nconst {\n  fromCallback\n} = require('catering');\nconst ModuleError = require('module-error');\nconst {\n  getCallback,\n  getOptions\n} = require('./lib/common');\nconst kPromise = Symbol('promise');\nconst kStatus = Symbol('status');\nconst kOperations = Symbol('operations');\nconst kFinishClose = Symbol('finishClose');\nconst kCloseCallbacks = Symbol('closeCallbacks');\nclass AbstractChainedBatch {\n  constructor(db) {\n    if (typeof db !== 'object' || db === null) {\n      const hint = db === null ? 'null' : typeof db;\n      throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`);\n    }\n    this[kOperations] = [];\n    this[kCloseCallbacks] = [];\n    this[kStatus] = 'open';\n    this[kFinishClose] = this[kFinishClose].bind(this);\n    this.db = db;\n    this.db.attachResource(this);\n    this.nextTick = db.nextTick;\n  }\n  get length() {\n    return this[kOperations].length;\n  }\n  put(key, value, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call put() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      });\n    }\n    const err = this.db._checkKey(key) || this.db._checkValue(value);\n    if (err) throw err;\n    const db = options && options.sublevel != null ? options.sublevel : this.db;\n    const original = options;\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding);\n    const valueEncoding = db.valueEncoding(options && options.valueEncoding);\n    const keyFormat = keyEncoding.format;\n\n    // Forward encoding options\n    options = {\n      ...options,\n      keyEncoding: keyFormat,\n      valueEncoding: valueEncoding.format\n    };\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null;\n    }\n    const mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat);\n    const mappedValue = valueEncoding.encode(value);\n    this._put(mappedKey, mappedValue, options);\n    this[kOperations].push({\n      ...original,\n      type: 'put',\n      key,\n      value\n    });\n    return this;\n  }\n  _put(key, value, options) {}\n  del(key, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call del() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      });\n    }\n    const err = this.db._checkKey(key);\n    if (err) throw err;\n    const db = options && options.sublevel != null ? options.sublevel : this.db;\n    const original = options;\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding);\n    const keyFormat = keyEncoding.format;\n\n    // Forward encoding options\n    options = {\n      ...options,\n      keyEncoding: keyFormat\n    };\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null;\n    }\n    this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options);\n    this[kOperations].push({\n      ...original,\n      type: 'del',\n      key\n    });\n    return this;\n  }\n  _del(key, options) {}\n  clear() {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call clear() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      });\n    }\n    this._clear();\n    this[kOperations] = [];\n    return this;\n  }\n  _clear() {}\n  write(options, callback) {\n    callback = getCallback(options, callback);\n    callback = fromCallback(callback, kPromise);\n    options = getOptions(options);\n    if (this[kStatus] !== 'open') {\n      this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      }));\n    } else if (this.length === 0) {\n      this.close(callback);\n    } else {\n      this[kStatus] = 'writing';\n      this._write(options, err => {\n        this[kStatus] = 'closing';\n        this[kCloseCallbacks].push(() => callback(err));\n\n        // Emit after setting 'closing' status, because event may trigger a\n        // db close which in turn triggers (idempotently) closing this batch.\n        if (!err) this.db.emit('batch', this[kOperations]);\n        this._close(this[kFinishClose]);\n      });\n    }\n    return callback[kPromise];\n  }\n  _write(options, callback) {}\n  close(callback) {\n    callback = fromCallback(callback, kPromise);\n    if (this[kStatus] === 'closing') {\n      this[kCloseCallbacks].push(callback);\n    } else if (this[kStatus] === 'closed') {\n      this.nextTick(callback);\n    } else {\n      this[kCloseCallbacks].push(callback);\n      if (this[kStatus] !== 'writing') {\n        this[kStatus] = 'closing';\n        this._close(this[kFinishClose]);\n      }\n    }\n    return callback[kPromise];\n  }\n  _close(callback) {\n    this.nextTick(callback);\n  }\n  [kFinishClose]() {\n    this[kStatus] = 'closed';\n    this.db.detachResource(this);\n    const callbacks = this[kCloseCallbacks];\n    this[kCloseCallbacks] = [];\n    for (const cb of callbacks) {\n      cb();\n    }\n  }\n}\nexports.AbstractChainedBatch = AbstractChainedBatch;","map":{"version":3,"names":["require","fromCallback","ModuleError","getCallback","getOptions","kPromise","Symbol","kStatus","kOperations","kFinishClose","kCloseCallbacks","AbstractChainedBatch","constructor","db","hint","TypeError","bind","attachResource","nextTick","length","put","key","value","options","code","err","_checkKey","_checkValue","sublevel","original","keyEncoding","valueEncoding","keyFormat","format","mappedKey","prefixKey","encode","mappedValue","_put","push","type","del","_del","clear","_clear","write","callback","close","_write","emit","_close","detachResource","callbacks","cb","exports"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/abstract-level@1.0.3/node_modules/abstract-level/abstract-chained-batch.js"],"sourcesContent":["'use strict'\n\nconst { fromCallback } = require('catering')\nconst ModuleError = require('module-error')\nconst { getCallback, getOptions } = require('./lib/common')\n\nconst kPromise = Symbol('promise')\nconst kStatus = Symbol('status')\nconst kOperations = Symbol('operations')\nconst kFinishClose = Symbol('finishClose')\nconst kCloseCallbacks = Symbol('closeCallbacks')\n\nclass AbstractChainedBatch {\n  constructor (db) {\n    if (typeof db !== 'object' || db === null) {\n      const hint = db === null ? 'null' : typeof db\n      throw new TypeError(`The first argument must be an abstract-level database, received ${hint}`)\n    }\n\n    this[kOperations] = []\n    this[kCloseCallbacks] = []\n    this[kStatus] = 'open'\n    this[kFinishClose] = this[kFinishClose].bind(this)\n\n    this.db = db\n    this.db.attachResource(this)\n    this.nextTick = db.nextTick\n  }\n\n  get length () {\n    return this[kOperations].length\n  }\n\n  put (key, value, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call put() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    const err = this.db._checkKey(key) || this.db._checkValue(value)\n    if (err) throw err\n\n    const db = options && options.sublevel != null ? options.sublevel : this.db\n    const original = options\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding)\n    const valueEncoding = db.valueEncoding(options && options.valueEncoding)\n    const keyFormat = keyEncoding.format\n\n    // Forward encoding options\n    options = { ...options, keyEncoding: keyFormat, valueEncoding: valueEncoding.format }\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null\n    }\n\n    const mappedKey = db.prefixKey(keyEncoding.encode(key), keyFormat)\n    const mappedValue = valueEncoding.encode(value)\n\n    this._put(mappedKey, mappedValue, options)\n    this[kOperations].push({ ...original, type: 'put', key, value })\n\n    return this\n  }\n\n  _put (key, value, options) {}\n\n  del (key, options) {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call del() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    const err = this.db._checkKey(key)\n    if (err) throw err\n\n    const db = options && options.sublevel != null ? options.sublevel : this.db\n    const original = options\n    const keyEncoding = db.keyEncoding(options && options.keyEncoding)\n    const keyFormat = keyEncoding.format\n\n    // Forward encoding options\n    options = { ...options, keyEncoding: keyFormat }\n\n    // Prevent double prefixing\n    if (db !== this.db) {\n      options.sublevel = null\n    }\n\n    this._del(db.prefixKey(keyEncoding.encode(key), keyFormat), options)\n    this[kOperations].push({ ...original, type: 'del', key })\n\n    return this\n  }\n\n  _del (key, options) {}\n\n  clear () {\n    if (this[kStatus] !== 'open') {\n      throw new ModuleError('Batch is not open: cannot call clear() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      })\n    }\n\n    this._clear()\n    this[kOperations] = []\n\n    return this\n  }\n\n  _clear () {}\n\n  write (options, callback) {\n    callback = getCallback(options, callback)\n    callback = fromCallback(callback, kPromise)\n    options = getOptions(options)\n\n    if (this[kStatus] !== 'open') {\n      this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      }))\n    } else if (this.length === 0) {\n      this.close(callback)\n    } else {\n      this[kStatus] = 'writing'\n      this._write(options, (err) => {\n        this[kStatus] = 'closing'\n        this[kCloseCallbacks].push(() => callback(err))\n\n        // Emit after setting 'closing' status, because event may trigger a\n        // db close which in turn triggers (idempotently) closing this batch.\n        if (!err) this.db.emit('batch', this[kOperations])\n\n        this._close(this[kFinishClose])\n      })\n    }\n\n    return callback[kPromise]\n  }\n\n  _write (options, callback) {}\n\n  close (callback) {\n    callback = fromCallback(callback, kPromise)\n\n    if (this[kStatus] === 'closing') {\n      this[kCloseCallbacks].push(callback)\n    } else if (this[kStatus] === 'closed') {\n      this.nextTick(callback)\n    } else {\n      this[kCloseCallbacks].push(callback)\n\n      if (this[kStatus] !== 'writing') {\n        this[kStatus] = 'closing'\n        this._close(this[kFinishClose])\n      }\n    }\n\n    return callback[kPromise]\n  }\n\n  _close (callback) {\n    this.nextTick(callback)\n  }\n\n  [kFinishClose] () {\n    this[kStatus] = 'closed'\n    this.db.detachResource(this)\n\n    const callbacks = this[kCloseCallbacks]\n    this[kCloseCallbacks] = []\n\n    for (const cb of callbacks) {\n      cb()\n    }\n  }\n}\n\nexports.AbstractChainedBatch = AbstractChainedBatch\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}