{"ast":null,"code":"import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nexport default {\n  props: {\n    walletConnect: {\n      type: Function,\n      default: null\n    }\n  },\n  data() {\n    return {\n      //****钱包连接弹出框******//\n      MetaMaskTipsIsShow: false,\n      Tips2: \"MetaMask无法连接 \",\n      isDisable: false,\n      //*********************//\n      //********Web3********//\n      web3: null,\n      account: \"MetaMask is not connected\",\n      contract: null,\n      toAddress: \"\",\n      value: \"\",\n      re: \"\",\n      avatar: \"\",\n      //*********************//\n      CopyTips: \"点击复制\",\n      CopySuccess: \"复制成功！\",\n      isCopy: false\n    };\n  },\n  mounted() {\n    if (window.ethereum != undefined) {\n      window.ethereum.on(\"accountsChanged\", this.handleAccountsChanged);\n    }\n  },\n  methods: {\n    async handleAccountsChanged(accounts) {\n      this.accounts = accounts;\n      this.$notify.info({\n        title: \"消息\",\n        message: \"正在更换用户\"\n      });\n      await this.connectWallet();\n    },\n    Copy() {\n      navigator.clipboard.writeText(this.accounts).then(() => {\n        this.isCopy = true;\n        setTimeout(() => {\n          this.isCopy = false;\n        }, 3000);\n      });\n    },\n    GETHashAvatar() {\n      if (this.$store.state.isconnect) {\n        this.avatar = \"data:image/png;base64,\" + new this.Identicon(this.accounts[0], 120).toString();\n        this.$refs.avatar.width = 60;\n        this.$refs.avatar.height = 60;\n      } else {\n        this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n        this.$refs.avatar.width = 40;\n        this.$refs.avatar.height = 40;\n      }\n    },\n    MMCTDis() {\n      this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n      this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n      setTimeout(() => {\n        this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n      }, 750);\n    },\n    async connectWallet() {\n      if (!this.$store.state.isconnect) {\n        try {\n          // 请求用户授权\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          }).then(handleAccountsChanged => {\n            this.accounts = handleAccountsChanged;\n            this.$store.commit(\"connection\", true);\n            this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n          }).catch(error => {\n            this.$store.commit(\"connection\", false);\n            if (error.code === 4001) {\n              // EIP-1193 userRejectedRequest error\n              console.log(\"Please connect to MetaMask.\");\n            } else {\n              console.error(error);\n            }\n          });\n          if (this.$store.state.isconnect) {\n            this.$store.commit(\"setcurrentAddress\", this.accounts[0]);\n            this.account = `${this.accounts[0].slice(0, 5)}...${this.accounts[0].slice(-5)}`;\n            let currentAddress = {\n              ownerAddress: this.$store.state.currentAddress\n            };\n            // ====================\n            postOwnerContractList(currentAddress).then(re => {\n              this.$store.commit(\"setOwnerNFTList\", re.data.data);\n              this.accountNFTList = this.$store.state.ownerNFTList;\n            });\n            this.walletConnect();\n          }\n          this.$notify({\n            title: \"成功\",\n            message: \"连接成功\",\n            type: \"success\"\n          });\n        } catch (error) {\n          console.error(error);\n          this.$notify.error({\n            title: \"错误\",\n            message: \"\"\n          });\n        }\n      }\n\n      // }\n      // else {\n      //   this.$refs.MMCT.classList.remove(\"animate__fadeOut\");\n      //   this.$refs.MMCT.classList.add(\"animate__fadeIn\");\n      //   this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n      //   setTimeout(() => {\n      //     this.MMCTDis();\n      //   }, 1800);\n      // }\n    }\n    // async initConnect() {\n    //   if (window.ethereum) {\n    //     this.web3 = new this.Web3(window.ethereum);\n    //     try {\n    //       await window.ethereum.enable();\n    //       this.account = (await this.web3.eth.getAccounts())[0];\n    //     } catch (error) {\n    //       console.error(error);\n    //     }\n    //   } else if (window.web3) {\n    //     this.web3 = new this.Web3(window.web3.currentProvider);\n    //     this.account = (await this.web3.eth.getAccounts())[0];\n    //   } else {\n    //     this.$refs.MMCT.classList.remove(\"animate__fadeOut\");\n    //     this.$refs.MMCT.classList.add(\"animate__fadeIn\");\n    //     this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n    //   }\n    // },\n\n    // async transfer() {\n    //   let value = this.web3.utils.toWei(this.value, \"ether\");\n    //   this.contract.methods\n    //     .transfer(this.toAddress)\n    //     .send({ from: this.account, value: value.toString() })\n    //     .then((result) => {\n    //       console.log(\"Transaction hash:\", result.transactionHash);\n    //     })\n    //     .catch((error) => {\n    //       console.error(error);\n    //     });\n\n    // console.log(this.contract);\n\n    // await this.contract.methods.changeText(\"log\").call().then(result => this.accounts = result)\n    // console.log(this.accounts );\n    // },\n  }\n};","map":{"version":3,"names":["postOwnerContractList","props","walletConnect","type","Function","default","data","MetaMaskTipsIsShow","Tips2","isDisable","web3","account","contract","toAddress","value","re","avatar","CopyTips","CopySuccess","isCopy","mounted","window","ethereum","undefined","on","handleAccountsChanged","methods","accounts","$notify","info","title","message","connectWallet","Copy","navigator","clipboard","writeText","then","setTimeout","GETHashAvatar","$store","state","isconnect","Identicon","toString","$refs","width","height","require","MMCTDis","MMCT","classList","remove","add","request","method","commit","catch","error","code","console","log","slice","currentAddress","ownerAddress","accountNFTList","ownerNFTList"],"sources":["src/views/user/WalletConnect.vue"],"sourcesContent":["<template>\n  <div class=\"Walletbox\">\n    <div class=\"WalletInnerBox\">\n      <span class=\"avatarBox\">\n        <img class=\"avatar\" :src=\"$store.state.avatar\" alt=\"\" ref=\"avatar\" slot=\"reference\" @click.stop=\"connectWallet\">\n      </span>\n      <span class=\"address\" @click.stop=\"Copy\">{{ account }}\n        <el-tooltip class=\"item\" effect=\"dark\" :content=\"isCopy ? CopySuccess : CopyTips\" placement=\"bottom\"><span><i v-if=\"$store.state.isconnect\" style=\"margin-left: 5px; cursor: pointer\" class=\"el-icon-document-copy\" /></span></el-tooltip></span>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\n  export default {\n    props: {\n      walletConnect: {\n        type: Function,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        //****钱包连接弹出框******//\n        MetaMaskTipsIsShow: false,\n        Tips2: \"MetaMask无法连接 \",\n        isDisable: false,\n        //*********************//\n        //********Web3********//\n        web3: null,\n        account: \"MetaMask is not connected\",\n        contract: null,\n        toAddress: \"\",\n        value: \"\",\n        re: \"\",\n        avatar: \"\",\n        //*********************//\n        CopyTips: \"点击复制\",\n        CopySuccess: \"复制成功！\",\n        isCopy: false,\n      };\n    },\n    mounted() {\n      if (window.ethereum != undefined) {\n        window.ethereum.on(\"accountsChanged\", this.handleAccountsChanged);\n      }\n    },\n    methods: {\n      async handleAccountsChanged(accounts) {\n        this.accounts = accounts;\n        this.$notify.info({\n          title: \"消息\",\n          message: \"正在更换用户\",\n        });\n        await this.connectWallet();\n      },\n      Copy() {\n        navigator.clipboard.writeText(this.accounts).then(() => {\n          this.isCopy = true;\n          setTimeout(() => {\n            this.isCopy = false;\n          }, 3000);\n        });\n      },\n      GETHashAvatar() {\n        if (this.$store.state.isconnect) {\n          this.avatar =\n            \"data:image/png;base64,\" +\n            new this.Identicon(this.accounts[0], 120).toString();\n          this.$refs.avatar.width = 60;\n          this.$refs.avatar.height = 60;\n        } else {\n          this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n          this.$refs.avatar.width = 40;\n          this.$refs.avatar.height = 40;\n        }\n      },\n      MMCTDis() {\n        this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n        this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n        setTimeout(() => {\n          this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n        }, 750);\n      },\n      async connectWallet() {\n        if (!this.$store.state.isconnect) {\n          try {\n            // 请求用户授权\n            await window.ethereum\n              .request({ method: \"eth_requestAccounts\" })\n              .then((handleAccountsChanged) => {\n                this.accounts = handleAccountsChanged;\n                this.$store.commit(\"connection\", true);\n                this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n              })\n              .catch((error) => {\n                this.$store.commit(\"connection\", false);\n                if (error.code === 4001) {\n                  // EIP-1193 userRejectedRequest error\n                  console.log(\"Please connect to MetaMask.\");\n                } else {\n                  console.error(error);\n                }\n              });\n            if (this.$store.state.isconnect) {\n              this.$store.commit(\"setcurrentAddress\", this.accounts[0]);\n              this.account = `${this.accounts[0].slice(\n                0,\n                5\n              )}...${this.accounts[0].slice(-5)}`;\n              let currentAddress = {\n                ownerAddress: this.$store.state.currentAddress,\n              };\n              // ====================\n              postOwnerContractList(currentAddress).then((re) => {\n                this.$store.commit(\"setOwnerNFTList\", re.data.data);\n                this.accountNFTList = this.$store.state.ownerNFTList;\n              });\n              this.walletConnect();\n            }\n            this.$notify({\n              title: \"成功\",\n              message: \"连接成功\",\n              type: \"success\",\n            });\n          } catch (error) {\n            console.error(error);\n            this.$notify.error({\n              title: \"错误\",\n              message: \"\",\n            });\n          }\n        }\n\n        // }\n        // else {\n        //   this.$refs.MMCT.classList.remove(\"animate__fadeOut\");\n        //   this.$refs.MMCT.classList.add(\"animate__fadeIn\");\n        //   this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n        //   setTimeout(() => {\n        //     this.MMCTDis();\n        //   }, 1800);\n        // }\n      },\n      // async initConnect() {\n      //   if (window.ethereum) {\n      //     this.web3 = new this.Web3(window.ethereum);\n      //     try {\n      //       await window.ethereum.enable();\n      //       this.account = (await this.web3.eth.getAccounts())[0];\n      //     } catch (error) {\n      //       console.error(error);\n      //     }\n      //   } else if (window.web3) {\n      //     this.web3 = new this.Web3(window.web3.currentProvider);\n      //     this.account = (await this.web3.eth.getAccounts())[0];\n      //   } else {\n      //     this.$refs.MMCT.classList.remove(\"animate__fadeOut\");\n      //     this.$refs.MMCT.classList.add(\"animate__fadeIn\");\n      //     this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n      //   }\n      // },\n\n      // async transfer() {\n      //   let value = this.web3.utils.toWei(this.value, \"ether\");\n      //   this.contract.methods\n      //     .transfer(this.toAddress)\n      //     .send({ from: this.account, value: value.toString() })\n      //     .then((result) => {\n      //       console.log(\"Transaction hash:\", result.transactionHash);\n      //     })\n      //     .catch((error) => {\n      //       console.error(error);\n      //     });\n\n      // console.log(this.contract);\n\n      // await this.contract.methods.changeText(\"log\").call().then(result => this.accounts = result)\n      // console.log(this.accounts );\n      // },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.Walletbox {\n  width: 100%;\n  height: 100%;\n}\n.avatar {\n  object-fit: fill;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n  float: right;\n}\n.avatarBox {\n  overflow: hidden;\n  border-radius: 50%;\n  width: 38px;\n  height: 38px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 10%;\n  border: 2px solid var(--border-green--);\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    border: 2px solid var(--border-green--);\n    box-shadow: 0 0 20px var(--border-green--);\n    transition: all 0.3s ease-in-out;\n  }\n}\n.MetaMaskAvatar {\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  /* border: 2px solid var(--avatar-border-style--); */\n}\n.BOX {\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.WalletInnerBox {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n}\n.address {\n  margin-left: 5%;\n  color: var(--Dark--);\n  font-weight: 800;\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  border-radius: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(238, 238, 238, 0.1);\n    transition: all 0.3s ease-in-out;\n  }\n}\n/* MetaMask弹出框 */\n.MetaMaskConnectionTip {\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n  position: absolute;\n  width: 350px;\n  height: 300px;\n  background-color: var(--White--);\n  color: var(--Dark--);\n  top: 50%;\n  left: 50%;\n  z-index: 100;\n  transform: translate(-50%, -50%);\n  border-radius: 20px;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.MetaMaskTipsBtn {\n  border: 0px solid;\n  background-color: white;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  border-radius: 7px;\n  padding-top: 5%;\n  padding-bottom: 5%;\n  padding-left: 22%;\n  padding-right: 22%;\n  font-size: 13px;\n  font-weight: 500;\n}\n.MetaMaskTipsBtn:hover {\n  background-color: rgb(252, 251, 251);\n}\n.MetaMaskTips {\n  font-size: 17px;\n  font-weight: 500;\n  margin-top: 25%;\n}\n/* 遮罩层 */\n.Mask {\n  z-index: 100;\n  position: fixed !important;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  // background: rgba(0, 0, 0, 0.05);\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}