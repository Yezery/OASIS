{"ast":null,"code":"/**\n * This is similar to https://github.com/daviddias/time-cache/blob/master/src/index.js\n * for our own need, we don't use lodash throttle to improve performance.\n * This gives 4x - 5x performance gain compared to npm TimeCache\n */\nexport class SimpleTimeCache {\n  constructor(opts) {\n    this.entries = new Map();\n    this.validityMs = opts.validityMs;\n    // allow negative validityMs so that this does not cache anything, spec test compliance.spec.js\n    // sends duplicate messages and expect peer to receive all. Application likely uses positive validityMs\n  }\n\n  get size() {\n    return this.entries.size;\n  }\n  /** Returns true if there was a key collision and the entry is dropped */\n  put(key, value) {\n    if (this.entries.has(key)) {\n      // Key collisions break insertion order in the entries cache, which break prune logic.\n      // prune relies on each iterated entry to have strictly ascending validUntilMs, else it\n      // won't prune expired entries and SimpleTimeCache will grow unexpectedly.\n      // As of Oct 2022 NodeJS v16, inserting the same key twice with different value does not\n      // change the key position in the iterator stream. A unit test asserts this behaviour.\n      return true;\n    }\n    this.entries.set(key, {\n      value,\n      validUntilMs: Date.now() + this.validityMs\n    });\n    return false;\n  }\n  prune() {\n    const now = Date.now();\n    for (const [k, v] of this.entries.entries()) {\n      if (v.validUntilMs < now) {\n        this.entries.delete(k);\n      } else {\n        // Entries are inserted with strictly ascending validUntilMs.\n        // Stop early to save iterations\n        break;\n      }\n    }\n  }\n  has(key) {\n    return this.entries.has(key);\n  }\n  get(key) {\n    const value = this.entries.get(key);\n    return value && value.validUntilMs >= Date.now() ? value.value : undefined;\n  }\n  clear() {\n    this.entries.clear();\n  }\n}","map":{"version":3,"names":["SimpleTimeCache","constructor","opts","entries","Map","validityMs","size","put","key","value","has","set","validUntilMs","Date","now","prune","k","v","delete","get","undefined","clear"],"sources":["../../../src/utils/time-cache.ts"],"sourcesContent":[null],"mappings":"AASA;;;;;AAKA,OAAM,MAAOA,eAAe;EAI1BC,YAAYC,IAAyB;IAHpB,KAAAC,OAAO,GAAG,IAAIC,GAAG,EAAkC;IAIlE,IAAI,CAACC,UAAU,GAAGH,IAAI,CAACG,UAAU;IAEjC;IACA;EACF;;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACH,OAAO,CAACG,IAAI;EAC1B;EAEA;EACAC,GAAGA,CAACC,GAAoB,EAAEC,KAAQ;IAChC,IAAI,IAAI,CAACN,OAAO,CAACO,GAAG,CAACF,GAAG,CAAC,EAAE;MACzB;MACA;MACA;MACA;MACA;MACA,OAAO,IAAI;;IAGb,IAAI,CAACL,OAAO,CAACQ,GAAG,CAACH,GAAG,EAAE;MAAEC,KAAK;MAAEG,YAAY,EAAEC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,CAACT;IAAU,CAAE,CAAC;IAC5E,OAAO,KAAK;EACd;EAEAU,KAAKA,CAAA;IACH,MAAMD,GAAG,GAAGD,IAAI,CAACC,GAAG,EAAE;IAEtB,KAAK,MAAM,CAACE,CAAC,EAAEC,CAAC,CAAC,IAAI,IAAI,CAACd,OAAO,CAACA,OAAO,EAAE,EAAE;MAC3C,IAAIc,CAAC,CAACL,YAAY,GAAGE,GAAG,EAAE;QACxB,IAAI,CAACX,OAAO,CAACe,MAAM,CAACF,CAAC,CAAC;OACvB,MAAM;QACL;QACA;QACA;;;EAGN;EAEAN,GAAGA,CAACF,GAAW;IACb,OAAO,IAAI,CAACL,OAAO,CAACO,GAAG,CAACF,GAAG,CAAC;EAC9B;EAEAW,GAAGA,CAACX,GAAoB;IACtB,MAAMC,KAAK,GAAG,IAAI,CAACN,OAAO,CAACgB,GAAG,CAACX,GAAG,CAAC;IACnC,OAAOC,KAAK,IAAIA,KAAK,CAACG,YAAY,IAAIC,IAAI,CAACC,GAAG,EAAE,GAAGL,KAAK,CAACA,KAAK,GAAGW,SAAS;EAC5E;EAEAC,KAAKA,CAAA;IACH,IAAI,CAAClB,OAAO,CAACkB,KAAK,EAAE;EACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}