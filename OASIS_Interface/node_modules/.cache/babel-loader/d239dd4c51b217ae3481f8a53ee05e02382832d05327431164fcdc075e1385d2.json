{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n  isFull() {\n    return false;\n  }\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length();\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"names":["RingBuffer","GrowingRingBuffer","constructor","INITIAL_CAPACITY","isFull","push","value","expand","unshift","newCapacity","capacity","newData","Array","len","length","i","get","wrap","begin","data","doubledCapacity","end"],"sources":["../../../../../../tfjs-data/src/util/growing_ring_buffer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {RingBuffer} from './ring_buffer';\n\nexport class GrowingRingBuffer<T> extends RingBuffer<T> {\n  private static INITIAL_CAPACITY = 32;\n\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n\n  unshift(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  private expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array<T>(newCapacity);\n    const len = this.length();\n\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,UAAU,QAAO,eAAe;AAExC,OAAM,MAAOC,iBAAqB,SAAQD,UAAa;EAGrD;;;EAGAE,YAAA;IACE,KAAK,CAACD,iBAAiB,CAACE,gBAAgB,CAAC;EAC3C;EAEAC,MAAMA,CAAA;IACJ,OAAO,KAAK;EACd;EAEAC,IAAIA,CAACC,KAAQ;IACX,IAAI,KAAK,CAACF,MAAM,EAAE,EAAE;MAClB,IAAI,CAACG,MAAM,EAAE;;IAEf,KAAK,CAACF,IAAI,CAACC,KAAK,CAAC;EACnB;EAEAE,OAAOA,CAACF,KAAQ;IACd,IAAI,KAAK,CAACF,MAAM,EAAE,EAAE;MAClB,IAAI,CAACG,MAAM,EAAE;;IAEf,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC;EACtB;EAEA;;;EAGQC,MAAMA,CAAA;IACZ,MAAME,WAAW,GAAG,IAAI,CAACC,QAAQ,GAAG,CAAC;IACrC,MAAMC,OAAO,GAAG,IAAIC,KAAK,CAAIH,WAAW,CAAC;IACzC,MAAMI,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IAEzB;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,GAAG,EAAEE,CAAC,EAAE,EAAE;MAC5BJ,OAAO,CAACI,CAAC,CAAC,GAAG,IAAI,CAACC,GAAG,CAAC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACC,KAAK,GAAGH,CAAC,CAAC,CAAC;;IAGlD,IAAI,CAACI,IAAI,GAAGR,OAAO;IACnB,IAAI,CAACD,QAAQ,GAAGD,WAAW;IAC3B,IAAI,CAACW,eAAe,GAAG,CAAC,GAAG,IAAI,CAACV,QAAQ;IACxC,IAAI,CAACQ,KAAK,GAAG,CAAC;IACd,IAAI,CAACG,GAAG,GAAGR,GAAG;EAChB;;AA9CeZ,iBAAA,CAAAE,gBAAgB,GAAG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}