{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n      case 'basic_math':\n        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n      case 'convolution':\n        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n      case 'creation':\n        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n      case 'evaluation':\n        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n      case 'image':\n        return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n      case 'graph':\n        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n      case 'logical':\n        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n      case 'matrices':\n        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n      case 'normalization':\n        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n      case 'reduction':\n        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n      case 'slice_join':\n        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n      case 'sparse':\n        return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n      case 'spectral':\n        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n      case 'string':\n        return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n      case 'transformation':\n        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n  return [].concat(value);\n}","map":{"version":3,"names":["tfc","NodeValueImpl","getRegisteredOp","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","executeOp","node","tensorMap","context","resourceManager","value","category","tidy","opMapper","op","customExecutor","TypeError","util","isPromise","then","data","concat"],"sources":["../../../../../../tfjs-converter/src/operations/operation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}