{"ast":null,"code":"/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = codeOrName => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`));\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor(options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {};\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {};\n    this._loadHasher = options.loadHasher || LOAD_HASHER;\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher);\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher(hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`);\n    }\n    this._hashersByName[hasher.name] = hasher;\n    this._hashersByCode[hasher.code] = hasher;\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher(hasher) {\n    delete this._hashersByName[hasher.name];\n    delete this._hashersByCode[hasher.code];\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher(code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode;\n    if (table[code]) {\n      return table[code];\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code);\n    if (table[code] == null) {\n      this.addHasher(hasher);\n    }\n    return hasher;\n  }\n  listHashers() {\n    return Object.values(this._hashersByName);\n  }\n}","map":{"version":3,"names":["LOAD_HASHER","codeOrName","Promise","reject","Error","Multihashes","constructor","options","_hashersByName","_hashersByCode","_loadHasher","loadHasher","hasher","hashers","addHasher","name","code","removeHasher","getHasher","table","listHashers","Object","values"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/multihashes.js"],"sourcesContent":["/**\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('./types').LoadHasherFn} LoadHasherFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadHasherFn}\n */\nconst LOAD_HASHER = (codeOrName) => Promise.reject(new Error(`No hasher found for \"${codeOrName}\"`))\n\nexport class Multihashes {\n  /**\n   * @param {object} options\n   * @param {LoadHasherFn} [options.loadHasher]\n   * @param {MultihashHasher[]} options.hashers\n   */\n  constructor (options) {\n    // Object with current list of active hashers\n    /** @type {Record<string, MultihashHasher>}} */\n    this._hashersByName = {}\n\n    // Object with current list of active hashers\n    /** @type {Record<number, MultihashHasher>}} */\n    this._hashersByCode = {}\n\n    this._loadHasher = options.loadHasher || LOAD_HASHER\n\n    // Enable all supplied hashers\n    for (const hasher of options.hashers) {\n      this.addHasher(hasher)\n    }\n  }\n\n  /**\n   * Add support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  addHasher (hasher) {\n    if (this._hashersByName[hasher.name] || this._hashersByCode[hasher.code]) {\n      throw new Error(`Resolver already exists for codec \"${hasher.name}\"`)\n    }\n\n    this._hashersByName[hasher.name] = hasher\n    this._hashersByCode[hasher.code] = hasher\n  }\n\n  /**\n   * Remove support for a multibase hasher\n   *\n   * @param {MultihashHasher} hasher\n   */\n  removeHasher (hasher) {\n    delete this._hashersByName[hasher.name]\n    delete this._hashersByCode[hasher.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getHasher (code) {\n    const table = typeof code === 'string' ? this._hashersByName : this._hashersByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this hasher\n    const hasher = await this._loadHasher(code)\n\n    if (table[code] == null) {\n      this.addHasher(hasher)\n    }\n\n    return hasher\n  }\n\n  listHashers () {\n    return Object.values(this._hashersByName)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,WAAW,GAAIC,UAAU,IAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,wBAAuBH,UAAW,GAAE,CAAC,CAAC;AAEpG,OAAO,MAAMI,WAAW,CAAC;EACvB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,OAAO,EAAE;IACpB;IACA;IACA,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;;IAExB;IACA;IACA,IAAI,CAACC,cAAc,GAAG,CAAC,CAAC;IAExB,IAAI,CAACC,WAAW,GAAGH,OAAO,CAACI,UAAU,IAAIX,WAAW;;IAEpD;IACA,KAAK,MAAMY,MAAM,IAAIL,OAAO,CAACM,OAAO,EAAE;MACpC,IAAI,CAACC,SAAS,CAACF,MAAM,CAAC;IACxB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,SAASA,CAAEF,MAAM,EAAE;IACjB,IAAI,IAAI,CAACJ,cAAc,CAACI,MAAM,CAACG,IAAI,CAAC,IAAI,IAAI,CAACN,cAAc,CAACG,MAAM,CAACI,IAAI,CAAC,EAAE;MACxE,MAAM,IAAIZ,KAAK,CAAE,sCAAqCQ,MAAM,CAACG,IAAK,GAAE,CAAC;IACvE;IAEA,IAAI,CAACP,cAAc,CAACI,MAAM,CAACG,IAAI,CAAC,GAAGH,MAAM;IACzC,IAAI,CAACH,cAAc,CAACG,MAAM,CAACI,IAAI,CAAC,GAAGJ,MAAM;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACEK,YAAYA,CAAEL,MAAM,EAAE;IACpB,OAAO,IAAI,CAACJ,cAAc,CAACI,MAAM,CAACG,IAAI,CAAC;IACvC,OAAO,IAAI,CAACN,cAAc,CAACG,MAAM,CAACI,IAAI,CAAC;EACzC;;EAEA;AACF;AACA;EACE,MAAME,SAASA,CAAEF,IAAI,EAAE;IACrB,MAAMG,KAAK,GAAG,OAAOH,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACR,cAAc,GAAG,IAAI,CAACC,cAAc;IAElF,IAAIU,KAAK,CAACH,IAAI,CAAC,EAAE;MACf,OAAOG,KAAK,CAACH,IAAI,CAAC;IACpB;;IAEA;IACA,MAAMJ,MAAM,GAAG,MAAM,IAAI,CAACF,WAAW,CAACM,IAAI,CAAC;IAE3C,IAAIG,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB,IAAI,CAACF,SAAS,CAACF,MAAM,CAAC;IACxB;IAEA,OAAOA,MAAM;EACf;EAEAQ,WAAWA,CAAA,EAAI;IACb,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACd,cAAc,CAAC;EAC3C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}