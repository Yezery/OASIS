{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { MFS_ROOT_KEY } from '../../../utils.js';\nconst log = logger('ipfs:mfs:utils:with-mfs-root');\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot(context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open();\n\n  // Load the MFS root CID\n  let cid;\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = CID.decode(buf);\n  } catch ( /** @type {any} */err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n    log('Creating new MFS root');\n    const buf = dagPB.encode({\n      Data: new UnixFS({\n        type: 'directory'\n      }).marshal(),\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    cid = CID.createV0(hash);\n    await context.repo.blocks.put(cid, buf);\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n  }\n  log(`Loaded MFS root /ipfs/${cid}`);\n  return cid;\n}","map":{"version":3,"names":["CID","UnixFS","dagPB","sha256","logger","errCode","MFS_ROOT_KEY","log","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","cid","buf","get","decode","err","code","encode","Data","type","marshal","Links","hash","digest","createV0","blocks","put","bytes"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,MAAM,QAAQ,aAAa;AACpC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,MAAMC,GAAG,GAAGH,MAAM,CAAC,8BAA8B,CAAC;;AAElD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,eAAeI,WAAWA,CAAEC,OAAO,EAAEC,OAAO,EAAE;EACnD,IAAIA,OAAO,IAAIA,OAAO,CAACC,MAAM,IAAID,OAAO,CAACC,MAAM,CAACC,OAAO,EAAE;IACvD,MAAMP,OAAO,CAAC,IAAIQ,KAAK,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC;EACjF;;EAEA;EACA,MAAML,OAAO,CAACM,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;;EAEnC;EACA,IAAIC,GAAG;EAEP,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMV,OAAO,CAACM,IAAI,CAACC,SAAS,CAACI,GAAG,CAACd,YAAY,CAAC;IAE1DY,GAAG,GAAGlB,GAAG,CAACqB,MAAM,CAACF,GAAG,CAAC;EACvB,CAAC,CAAC,QAAO,kBAAmBG,GAAG,EAAE;IAC/B,IAAIA,GAAG,CAACC,IAAI,KAAK,eAAe,EAAE;MAChC,MAAMD,GAAG;IACX;IAEAf,GAAG,CAAC,uBAAuB,CAAC;IAC5B,MAAMY,GAAG,GAAGjB,KAAK,CAACsB,MAAM,CAAC;MACvBC,IAAI,EAAE,IAAIxB,MAAM,CAAC;QAAEyB,IAAI,EAAE;MAAY,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;MACjDC,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAM1B,MAAM,CAAC2B,MAAM,CAACX,GAAG,CAAC;IACrCD,GAAG,GAAGlB,GAAG,CAAC+B,QAAQ,CAACF,IAAI,CAAC;IACxB,MAAMpB,OAAO,CAACM,IAAI,CAACiB,MAAM,CAACC,GAAG,CAACf,GAAG,EAAEC,GAAG,CAAC;IAEvC,IAAIT,OAAO,IAAIA,OAAO,CAACC,MAAM,IAAID,OAAO,CAACC,MAAM,CAACC,OAAO,EAAE;MACvD,MAAMP,OAAO,CAAC,IAAIQ,KAAK,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC;IACjF;IAEA,MAAML,OAAO,CAACM,IAAI,CAACC,SAAS,CAACiB,GAAG,CAAC3B,YAAY,EAAEY,GAAG,CAACgB,KAAK,CAAC;EAC3D;EAEA3B,GAAG,CAAE,yBAAwBW,GAAI,EAAC,CAAC;EAEnC,OAAOA,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}