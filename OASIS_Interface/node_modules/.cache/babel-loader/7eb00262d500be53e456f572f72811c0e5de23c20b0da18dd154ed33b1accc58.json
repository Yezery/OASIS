{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { concat } from 'uint8arrays/concat';\nimport { equals } from 'uint8arrays/equals';\nimport { allocUnsafe, alloc } from 'uint8arrays/alloc';\nconst symbol = Symbol.for('@achingbrain/uint8arraylist');\nfunction findBufAndOffset(bufs, index) {\n  if (index == null || index < 0) {\n    throw new RangeError('index is out of bounds');\n  }\n  let offset = 0;\n  for (const buf of bufs) {\n    const bufEnd = offset + buf.byteLength;\n    if (index < bufEnd) {\n      return {\n        buf,\n        index: index - offset\n      };\n    }\n    offset = bufEnd;\n  }\n  throw new RangeError('index is out of bounds');\n}\n/**\n * Check if object is a CID instance\n *\n * @example\n *\n * ```js\n * import { isUint8ArrayList, Uint8ArrayList } from 'uint8arraylist'\n *\n * isUint8ArrayList(true) // false\n * isUint8ArrayList([]) // false\n * isUint8ArrayList(new Uint8ArrayList()) // true\n * ```\n */\nexport function isUint8ArrayList(value) {\n  return Boolean(value?.[symbol]);\n}\nexport class Uint8ArrayList {\n  constructor(...data) {\n    // Define symbol\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n    this.bufs = [];\n    this.length = 0;\n    if (data.length > 0) {\n      this.appendAll(data);\n    }\n  }\n  *[Symbol.iterator]() {\n    yield* this.bufs;\n  }\n  get byteLength() {\n    return this.length;\n  }\n  /**\n   * Add one or more `bufs` to the end of this Uint8ArrayList\n   */\n  append(...bufs) {\n    this.appendAll(bufs);\n  }\n  /**\n   * Add all `bufs` to the end of this Uint8ArrayList\n   */\n  appendAll(bufs) {\n    let length = 0;\n    for (const buf of bufs) {\n      if (buf instanceof Uint8Array) {\n        length += buf.byteLength;\n        this.bufs.push(buf);\n      } else if (isUint8ArrayList(buf)) {\n        length += buf.byteLength;\n        this.bufs.push(...buf.bufs);\n      } else {\n        throw new Error('Could not append value, must be an Uint8Array or a Uint8ArrayList');\n      }\n    }\n    this.length += length;\n  }\n  /**\n   * Add one or more `bufs` to the start of this Uint8ArrayList\n   */\n  prepend(...bufs) {\n    this.prependAll(bufs);\n  }\n  /**\n   * Add all `bufs` to the start of this Uint8ArrayList\n   */\n  prependAll(bufs) {\n    let length = 0;\n    for (const buf of bufs.reverse()) {\n      if (buf instanceof Uint8Array) {\n        length += buf.byteLength;\n        this.bufs.unshift(buf);\n      } else if (isUint8ArrayList(buf)) {\n        length += buf.byteLength;\n        this.bufs.unshift(...buf.bufs);\n      } else {\n        throw new Error('Could not prepend value, must be an Uint8Array or a Uint8ArrayList');\n      }\n    }\n    this.length += length;\n  }\n  /**\n   * Read the value at `index`\n   */\n  get(index) {\n    const res = findBufAndOffset(this.bufs, index);\n    return res.buf[res.index];\n  }\n  /**\n   * Set the value at `index` to `value`\n   */\n  set(index, value) {\n    const res = findBufAndOffset(this.bufs, index);\n    res.buf[res.index] = value;\n  }\n  /**\n   * Copy bytes from `buf` to the index specified by `offset`\n   */\n  write(buf, offset = 0) {\n    if (buf instanceof Uint8Array) {\n      for (let i = 0; i < buf.length; i++) {\n        this.set(offset + i, buf[i]);\n      }\n    } else if (isUint8ArrayList(buf)) {\n      for (let i = 0; i < buf.length; i++) {\n        this.set(offset + i, buf.get(i));\n      }\n    } else {\n      throw new Error('Could not write value, must be an Uint8Array or a Uint8ArrayList');\n    }\n  }\n  /**\n   * Remove bytes from the front of the pool\n   */\n  consume(bytes) {\n    // first, normalize the argument, in accordance with how Buffer does it\n    bytes = Math.trunc(bytes);\n    // do nothing if not a positive number\n    if (Number.isNaN(bytes) || bytes <= 0) {\n      return;\n    }\n    // if consuming all bytes, skip iterating\n    if (bytes === this.byteLength) {\n      this.bufs = [];\n      this.length = 0;\n      return;\n    }\n    while (this.bufs.length > 0) {\n      if (bytes >= this.bufs[0].byteLength) {\n        bytes -= this.bufs[0].byteLength;\n        this.length -= this.bufs[0].byteLength;\n        this.bufs.shift();\n      } else {\n        this.bufs[0] = this.bufs[0].subarray(bytes);\n        this.length -= bytes;\n        break;\n      }\n    }\n  }\n  /**\n   * Extracts a section of an array and returns a new array.\n   *\n   * This is a copy operation as it is with Uint8Arrays and Arrays\n   * - note this is different to the behaviour of Node Buffers.\n   */\n  slice(beginInclusive, endExclusive) {\n    const {\n      bufs,\n      length\n    } = this._subList(beginInclusive, endExclusive);\n    return concat(bufs, length);\n  }\n  /**\n   * Returns a alloc from the given start and end element index.\n   *\n   * In the best case where the data extracted comes from a single Uint8Array\n   * internally this is a no-copy operation otherwise it is a copy operation.\n   */\n  subarray(beginInclusive, endExclusive) {\n    const {\n      bufs,\n      length\n    } = this._subList(beginInclusive, endExclusive);\n    if (bufs.length === 1) {\n      return bufs[0];\n    }\n    return concat(bufs, length);\n  }\n  /**\n   * Returns a allocList from the given start and end element index.\n   *\n   * This is a no-copy operation.\n   */\n  sublist(beginInclusive, endExclusive) {\n    const {\n      bufs,\n      length\n    } = this._subList(beginInclusive, endExclusive);\n    const list = new Uint8ArrayList();\n    list.length = length;\n    // don't loop, just set the bufs\n    list.bufs = bufs;\n    return list;\n  }\n  _subList(beginInclusive, endExclusive) {\n    beginInclusive = beginInclusive ?? 0;\n    endExclusive = endExclusive ?? this.length;\n    if (beginInclusive < 0) {\n      beginInclusive = this.length + beginInclusive;\n    }\n    if (endExclusive < 0) {\n      endExclusive = this.length + endExclusive;\n    }\n    if (beginInclusive < 0 || endExclusive > this.length) {\n      throw new RangeError('index is out of bounds');\n    }\n    if (beginInclusive === endExclusive) {\n      return {\n        bufs: [],\n        length: 0\n      };\n    }\n    if (beginInclusive === 0 && endExclusive === this.length) {\n      return {\n        bufs: [...this.bufs],\n        length: this.length\n      };\n    }\n    const bufs = [];\n    let offset = 0;\n    for (let i = 0; i < this.bufs.length; i++) {\n      const buf = this.bufs[i];\n      const bufStart = offset;\n      const bufEnd = bufStart + buf.byteLength;\n      // for next loop\n      offset = bufEnd;\n      if (beginInclusive >= bufEnd) {\n        // start after this buf\n        continue;\n      }\n      const sliceStartInBuf = beginInclusive >= bufStart && beginInclusive < bufEnd;\n      const sliceEndsInBuf = endExclusive > bufStart && endExclusive <= bufEnd;\n      if (sliceStartInBuf && sliceEndsInBuf) {\n        // slice is wholly contained within this buffer\n        if (beginInclusive === bufStart && endExclusive === bufEnd) {\n          // requested whole buffer\n          bufs.push(buf);\n          break;\n        }\n        // requested part of buffer\n        const start = beginInclusive - bufStart;\n        bufs.push(buf.subarray(start, start + (endExclusive - beginInclusive)));\n        break;\n      }\n      if (sliceStartInBuf) {\n        // slice starts in this buffer\n        if (beginInclusive === 0) {\n          // requested whole buffer\n          bufs.push(buf);\n          continue;\n        }\n        // requested part of buffer\n        bufs.push(buf.subarray(beginInclusive - bufStart));\n        continue;\n      }\n      if (sliceEndsInBuf) {\n        if (endExclusive === bufEnd) {\n          // requested whole buffer\n          bufs.push(buf);\n          break;\n        }\n        // requested part of buffer\n        bufs.push(buf.subarray(0, endExclusive - bufStart));\n        break;\n      }\n      // slice started before this buffer and ends after it\n      bufs.push(buf);\n    }\n    return {\n      bufs,\n      length: endExclusive - beginInclusive\n    };\n  }\n  indexOf(search, offset = 0) {\n    if (!isUint8ArrayList(search) && !(search instanceof Uint8Array)) {\n      throw new TypeError('The \"value\" argument must be a Uint8ArrayList or Uint8Array');\n    }\n    const needle = search instanceof Uint8Array ? search : search.subarray();\n    offset = Number(offset ?? 0);\n    if (isNaN(offset)) {\n      offset = 0;\n    }\n    if (offset < 0) {\n      offset = this.length + offset;\n    }\n    if (offset < 0) {\n      offset = 0;\n    }\n    if (search.length === 0) {\n      return offset > this.length ? this.length : offset;\n    }\n    // https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string-search_algorithm\n    const M = needle.byteLength;\n    if (M === 0) {\n      throw new TypeError('search must be at least 1 byte long');\n    }\n    // radix\n    const radix = 256;\n    const rightmostPositions = new Int32Array(radix);\n    // position of the rightmost occurrence of the byte c in the pattern\n    for (let c = 0; c < radix; c++) {\n      // -1 for bytes not in pattern\n      rightmostPositions[c] = -1;\n    }\n    for (let j = 0; j < M; j++) {\n      // rightmost position for bytes in pattern\n      rightmostPositions[needle[j]] = j;\n    }\n    // Return offset of first match, -1 if no match\n    const right = rightmostPositions;\n    const lastIndex = this.byteLength - needle.byteLength;\n    const lastPatIndex = needle.byteLength - 1;\n    let skip;\n    for (let i = offset; i <= lastIndex; i += skip) {\n      skip = 0;\n      for (let j = lastPatIndex; j >= 0; j--) {\n        const char = this.get(i + j);\n        if (needle[j] !== char) {\n          skip = Math.max(1, j - right[char]);\n          break;\n        }\n      }\n      if (skip === 0) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  getInt8(byteOffset) {\n    const buf = this.subarray(byteOffset, byteOffset + 1);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getInt8(0);\n  }\n  setInt8(byteOffset, value) {\n    const buf = allocUnsafe(1);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setInt8(0, value);\n    this.write(buf, byteOffset);\n  }\n  getInt16(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 2);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getInt16(0, littleEndian);\n  }\n  setInt16(byteOffset, value, littleEndian) {\n    const buf = alloc(2);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setInt16(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getInt32(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getInt32(0, littleEndian);\n  }\n  setInt32(byteOffset, value, littleEndian) {\n    const buf = alloc(4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setInt32(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getBigInt64(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getBigInt64(0, littleEndian);\n  }\n  setBigInt64(byteOffset, value, littleEndian) {\n    const buf = alloc(8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setBigInt64(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getUint8(byteOffset) {\n    const buf = this.subarray(byteOffset, byteOffset + 1);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getUint8(0);\n  }\n  setUint8(byteOffset, value) {\n    const buf = allocUnsafe(1);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setUint8(0, value);\n    this.write(buf, byteOffset);\n  }\n  getUint16(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 2);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getUint16(0, littleEndian);\n  }\n  setUint16(byteOffset, value, littleEndian) {\n    const buf = alloc(2);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setUint16(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getUint32(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getUint32(0, littleEndian);\n  }\n  setUint32(byteOffset, value, littleEndian) {\n    const buf = alloc(4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setUint32(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getBigUint64(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getBigUint64(0, littleEndian);\n  }\n  setBigUint64(byteOffset, value, littleEndian) {\n    const buf = alloc(8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setBigUint64(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getFloat32(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getFloat32(0, littleEndian);\n  }\n  setFloat32(byteOffset, value, littleEndian) {\n    const buf = alloc(4);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setFloat32(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  getFloat64(byteOffset, littleEndian) {\n    const buf = this.subarray(byteOffset, byteOffset + 8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    return view.getFloat64(0, littleEndian);\n  }\n  setFloat64(byteOffset, value, littleEndian) {\n    const buf = alloc(8);\n    const view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n    view.setFloat64(0, value, littleEndian);\n    this.write(buf, byteOffset);\n  }\n  equals(other) {\n    if (other == null) {\n      return false;\n    }\n    if (!(other instanceof Uint8ArrayList)) {\n      return false;\n    }\n    if (other.bufs.length !== this.bufs.length) {\n      return false;\n    }\n    for (let i = 0; i < this.bufs.length; i++) {\n      if (!equals(this.bufs[i], other.bufs[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * Create a Uint8ArrayList from a pre-existing list of Uint8Arrays.  Use this\n   * method if you know the total size of all the Uint8Arrays ahead of time.\n   */\n  static fromUint8Arrays(bufs, length) {\n    const list = new Uint8ArrayList();\n    list.bufs = bufs;\n    if (length == null) {\n      length = bufs.reduce((acc, curr) => acc + curr.byteLength, 0);\n    }\n    list.length = length;\n    return list;\n  }\n}\n/*\nfunction indexOf (needle: Uint8Array, haystack: Uint8Array, offset = 0) {\n  for (let i = offset; i < haystack.byteLength; i++) {\n    for (let j = 0; j < needle.length; j++) {\n      if (haystack[i + j] !== needle[j]) {\n        break\n      }\n\n      if (j === needle.byteLength -1) {\n        return i\n      }\n    }\n\n    if (haystack.byteLength - i < needle.byteLength) {\n      break\n    }\n  }\n\n  return -1\n}\n*/","map":{"version":3,"names":["concat","equals","allocUnsafe","alloc","symbol","Symbol","for","findBufAndOffset","bufs","index","RangeError","offset","buf","bufEnd","byteLength","isUint8ArrayList","value","Boolean","Uint8ArrayList","constructor","data","Object","defineProperty","length","appendAll","iterator","append","Uint8Array","push","Error","prepend","prependAll","reverse","unshift","get","res","set","write","i","consume","bytes","Math","trunc","Number","isNaN","shift","subarray","slice","beginInclusive","endExclusive","_subList","sublist","list","bufStart","sliceStartInBuf","sliceEndsInBuf","start","indexOf","search","TypeError","needle","M","radix","rightmostPositions","Int32Array","c","j","right","lastIndex","lastPatIndex","skip","char","max","getInt8","byteOffset","view","DataView","buffer","setInt8","getInt16","littleEndian","setInt16","getInt32","setInt32","getBigInt64","setBigInt64","getUint8","setUint8","getUint16","setUint16","getUint32","setUint32","getBigUint64","setBigUint64","getFloat32","setFloat32","getFloat64","setFloat64","other","fromUint8Arrays","reduce","acc","curr"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}