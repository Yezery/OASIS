{"ast":null,"code":"/**\n * @typedef {object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nexport const parseChunkerString = chunker => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    };\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1];\n    const size = parseInt(sizeStr);\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer');\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    };\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    };\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`);\n  }\n};\n\n/**\n * @typedef {object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nexport const parseRabinString = chunker => {\n  const options = {};\n  const parts = chunker.split('-');\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144;\n      break;\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg');\n      break;\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min');\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg');\n      options.maxChunkSize = parseChunkSize(parts[3], 'max');\n      break;\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"');\n  }\n  return options;\n};\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nexport const parseChunkSize = (str, name) => {\n  const size = parseInt(str);\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`);\n  }\n  return size;\n};","map":{"version":3,"names":["parseChunkerString","chunker","startsWith","sizeStr","split","size","parseInt","isNaN","Error","maxChunkSize","parseRabinString","options","parts","length","avgChunkSize","parseChunkSize","minChunkSize","str","name"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/add-all/utils.js"],"sourcesContent":["/**\n * @typedef {object} FixedChunkerOptions\n * @property {'fixed'} chunker\n * @property {number} [maxChunkSize]\n *\n * @typedef {object} RabinChunkerOptions\n * @property {'rabin'} chunker\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * @typedef {FixedChunkerOptions|RabinChunkerOptions} ChunkerOptions\n *\n * Parses chunker string into options used by DAGBuilder in ipfs-unixfs-engine\n *\n *\n * @param  {string} [chunker] - Chunker algorithm supported formats:\n * \"size-{size}\"\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {ChunkerOptions}   Chunker options for DAGBuilder\n */\nexport const parseChunkerString = (chunker) => {\n  if (!chunker) {\n    return {\n      chunker: 'fixed'\n    }\n  } else if (chunker.startsWith('size-')) {\n    const sizeStr = chunker.split('-')[1]\n    const size = parseInt(sizeStr)\n    if (isNaN(size)) {\n      throw new Error('Chunker parameter size must be an integer')\n    }\n    return {\n      chunker: 'fixed',\n      maxChunkSize: size\n    }\n  } else if (chunker.startsWith('rabin')) {\n    return {\n      chunker: 'rabin',\n      ...parseRabinString(chunker)\n    }\n  } else {\n    throw new Error(`Unrecognized chunker option: ${chunker}`)\n  }\n}\n\n/**\n * @typedef {object} RabinChunkerSettings\n * @property {number} avgChunkSize\n * @property {number} [minChunkSize]\n * @property {number} [maxChunkSize]\n *\n * Parses rabin chunker string\n *\n * @param  {string}   chunker - Chunker algorithm supported formats:\n * \"rabin\"\n * \"rabin-{avg}\"\n * \"rabin-{min}-{avg}-{max}\"\n *\n * @returns {RabinChunkerSettings}   rabin chunker options\n */\nexport const parseRabinString = (chunker) => {\n  const options = {}\n  const parts = chunker.split('-')\n  switch (parts.length) {\n    case 1:\n      options.avgChunkSize = 262144\n      break\n    case 2:\n      options.avgChunkSize = parseChunkSize(parts[1], 'avg')\n      break\n    case 4:\n      options.minChunkSize = parseChunkSize(parts[1], 'min')\n      options.avgChunkSize = parseChunkSize(parts[2], 'avg')\n      options.maxChunkSize = parseChunkSize(parts[3], 'max')\n      break\n    default:\n      throw new Error('Incorrect chunker format (expected \"rabin\" \"rabin-[avg]\" or \"rabin-[min]-[avg]-[max]\"')\n  }\n\n  return options\n}\n\n/**\n *\n * @param {string} str\n * @param {string} name\n * @returns {number}\n */\nexport const parseChunkSize = (str, name) => {\n  const size = parseInt(str)\n  if (isNaN(size)) {\n    throw new Error(`Chunker parameter ${name} must be an integer`)\n  }\n\n  return size\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,kBAAkB,GAAIC,OAAO,IAAK;EAC7C,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO;MACLA,OAAO,EAAE;IACX,CAAC;EACH,CAAC,MAAM,IAAIA,OAAO,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;IACtC,MAAMC,OAAO,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrC,MAAMC,IAAI,GAAGC,QAAQ,CAACH,OAAO,CAAC;IAC9B,IAAII,KAAK,CAACF,IAAI,CAAC,EAAE;MACf,MAAM,IAAIG,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IACA,OAAO;MACLP,OAAO,EAAE,OAAO;MAChBQ,YAAY,EAAEJ;IAChB,CAAC;EACH,CAAC,MAAM,IAAIJ,OAAO,CAACC,UAAU,CAAC,OAAO,CAAC,EAAE;IACtC,OAAO;MACLD,OAAO,EAAE,OAAO;MAChB,GAAGS,gBAAgB,CAACT,OAAO;IAC7B,CAAC;EACH,CAAC,MAAM;IACL,MAAM,IAAIO,KAAK,CAAE,gCAA+BP,OAAQ,EAAC,CAAC;EAC5D;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,gBAAgB,GAAIT,OAAO,IAAK;EAC3C,MAAMU,OAAO,GAAG,CAAC,CAAC;EAClB,MAAMC,KAAK,GAAGX,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC;EAChC,QAAQQ,KAAK,CAACC,MAAM;IAClB,KAAK,CAAC;MACJF,OAAO,CAACG,YAAY,GAAG,MAAM;MAC7B;IACF,KAAK,CAAC;MACJH,OAAO,CAACG,YAAY,GAAGC,cAAc,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACtD;IACF,KAAK,CAAC;MACJD,OAAO,CAACK,YAAY,GAAGD,cAAc,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACtDD,OAAO,CAACG,YAAY,GAAGC,cAAc,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACtDD,OAAO,CAACF,YAAY,GAAGM,cAAc,CAACH,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;MACtD;IACF;MACE,MAAM,IAAIJ,KAAK,CAAC,uFAAuF,CAAC;EAC5G;EAEA,OAAOG,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAGA,CAACE,GAAG,EAAEC,IAAI,KAAK;EAC3C,MAAMb,IAAI,GAAGC,QAAQ,CAACW,GAAG,CAAC;EAC1B,IAAIV,KAAK,CAACF,IAAI,CAAC,EAAE;IACf,MAAM,IAAIG,KAAK,CAAE,qBAAoBU,IAAK,qBAAoB,CAAC;EACjE;EAEA,OAAOb,IAAI;AACb,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}