{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/* eslint-disable jsdoc/check-indentation */\n\n/** Auto-generated with ipld-schema-validator@0.0.0-dev at Thu Jun 17 2021 from IPLD Schema:\n *\n * type CarHeader struct {\n *   version Int\n *   roots optional [&Any]\n *   # roots is _not_ optional for CarV1 but we defer that check within code to\n *   # gracefully handle the >V1 case where it's just {version:X}\n * }\n *\n */\n\nconst Kinds = {\n  Null:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => obj === null,\n  Int:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => Number.isInteger(obj),\n  Float:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => typeof obj === 'number' && Number.isFinite(obj),\n  String:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => typeof obj === 'string',\n  Bool:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => typeof obj === 'boolean',\n  Bytes:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => obj instanceof Uint8Array,\n  Link:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID === obj,\n  List:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => Array.isArray(obj),\n  Map:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)\n};\n/** @type {{ [k in string]: (obj:any)=>boolean}} */\nconst Types = {\n  Int: Kinds.Int,\n  'CarHeader > version':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => Types.Int(obj),\n  'CarHeader > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarHeader > roots (anon)':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types['CarHeader > roots (anon) > valueType (anon)']),\n  'CarHeader > roots':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => Types['CarHeader > roots (anon)'](obj),\n  CarHeader:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  ( /** @type {any} */obj) => {\n    const keys = obj && Object.keys(obj);\n    return Kinds.Map(obj) && ['version'].every(k => keys.includes(k)) && Object.entries(obj).every(([name, value]) => Types['CarHeader > ' + name] && Types['CarHeader > ' + name](value));\n  }\n};\nexport const CarHeader = Types.CarHeader;","map":{"version":3,"names":["Kinds","Null","obj","Int","Number","isInteger","Float","isFinite","String","Bool","Bytes","Uint8Array","Link","asCID","List","Array","isArray","Map","Types","CarHeader > version","CarHeader > roots (anon)","prototype","every","call","CarHeader > roots","CarHeader","keys","Object","k","includes","entries","name","value"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/@ipld+car@5.2.3/node_modules/@ipld/car/src/header-validator.js"],"sourcesContent":["/* eslint-disable jsdoc/check-indentation */\n\n/** Auto-generated with ipld-schema-validator@0.0.0-dev at Thu Jun 17 2021 from IPLD Schema:\n *\n * type CarHeader struct {\n *   version Int\n *   roots optional [&Any]\n *   # roots is _not_ optional for CarV1 but we defer that check within code to\n *   # gracefully handle the >V1 case where it's just {version:X}\n * }\n *\n */\n\nconst Kinds = {\n  Null: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => obj === null,\n  Int: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => Number.isInteger(obj),\n  Float: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => typeof obj === 'number' && Number.isFinite(obj),\n  String: /**\n           * @param {any} obj\n           * @returns {boolean}\n           */ (/** @type {any} */ obj) => typeof obj === 'string',\n  Bool: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => typeof obj === 'boolean',\n  Bytes: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => obj instanceof Uint8Array,\n  Link: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID === obj,\n  List: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => Array.isArray(obj),\n  Map: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)\n}\n/** @type {{ [k in string]: (obj:any)=>boolean}} */\nconst Types = {\n  Int: Kinds.Int,\n  'CarHeader > version': /**\n                          * @param {any} obj\n                          * @returns {boolean}\n                          */ (/** @type {any} */ obj) => Types.Int(obj),\n  'CarHeader > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarHeader > roots (anon)': /**\n                               * @param {any} obj\n                               * @returns {boolean}\n                               */ (/** @type {any} */ obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types['CarHeader > roots (anon) > valueType (anon)']),\n  'CarHeader > roots': /**\n                        * @param {any} obj\n                        * @returns {boolean}\n                        */ (/** @type {any} */ obj) => Types['CarHeader > roots (anon)'](obj),\n  CarHeader: /**\n              * @param {any} obj\n              * @returns {boolean}\n              */ (/** @type {any} */ obj) => { const keys = obj && Object.keys(obj); return Kinds.Map(obj) && ['version'].every((k) => keys.includes(k)) && Object.entries(obj).every(([name, value]) => Types['CarHeader > ' + name] && Types['CarHeader > ' + name](value)) }\n}\n\nexport const CarHeader = Types.CarHeader\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}