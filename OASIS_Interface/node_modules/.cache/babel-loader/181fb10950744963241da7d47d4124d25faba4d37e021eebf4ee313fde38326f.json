{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as CONSTANTS from './constants.js';\nimport { logger } from './utils/index.js';\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = cid => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = cid => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(CONSTANTS.maxListeners);\n    this._log = logger(peerId, 'notif');\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock(cid, block) {\n    const event = blockEvent(cid);\n    this._log(event);\n    this.emit(event, block);\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock(cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n    this._log(`wantBlock:${cid}`);\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${cid} unwanted`));\n      };\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = data => {\n        this.removeListener(unwantEvt, onUnwant);\n        resolve(data);\n      };\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${cid} aborted`));\n        });\n      }\n    });\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n    this._log(event);\n    this.emit(event);\n  }\n}","map":{"version":3,"names":["EventEmitter","toString","uint8ArrayToString","CONSTANTS","logger","unwantEvent","cid","multihash","bytes","blockEvent","Notifications","constructor","peerId","setMaxListeners","maxListeners","_log","hasBlock","block","event","emit","wantBlock","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","unwantBlock"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/notifications.js"],"sourcesContent":["import { EventEmitter } from 'events'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}