{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { logger } from '@libp2p/logger';\nimport { profiles } from './profiles.js';\nconst log = logger('ipfs:core:config');\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig({\n  repo\n}) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll(options = {}) {\n    // eslint-disable-line require-await\n    return repo.config.getAll(options);\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get(key, options) {\n    // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'));\n    }\n    return repo.config.get(key, options);\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set(key, value, options) {\n    // eslint-disable-line require-await\n    return repo.config.set(key, value, options);\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace(value, options) {\n    // eslint-disable-line require-await\n    return repo.config.replace(value, options);\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile(profileName, options = {\n    dryRun: false\n  }) {\n    const {\n      dryRun\n    } = options;\n    const profile = profiles[profileName];\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`);\n    }\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n      newCfg = profile.transform(newCfg);\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey;\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch ( /** @type {any} */err) {\n      log(err);\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`);\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles(_options) {\n  // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }));\n}","map":{"version":3,"names":["withTimeoutOption","logger","profiles","log","createConfig","repo","getAll","get","set","replace","apply","applyProfile","list","listProfiles","options","config","key","Promise","reject","Error","value","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","err","message","_options","Object","keys","map","name","description"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/config/index.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}