{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { unmarshalPublicKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { NoiseHandshakePayload } from './proto/payload.js';\nexport async function getPayload(localPeer, staticPublicKey, extensions) {\n  const signedPayload = await signPayload(localPeer, getHandshakePayload(staticPublicKey));\n  if (localPeer.publicKey == null) {\n    throw new Error('PublicKey was missing from local PeerId');\n  }\n  return createHandshakePayload(localPeer.publicKey, signedPayload, extensions);\n}\nexport function createHandshakePayload(libp2pPublicKey, signedPayload, extensions) {\n  return NoiseHandshakePayload.encode({\n    identityKey: libp2pPublicKey,\n    identitySig: signedPayload,\n    extensions: extensions ?? {\n      webtransportCerthashes: []\n    }\n  }).subarray();\n}\nexport async function signPayload(peerId, payload) {\n  if (peerId.privateKey == null) {\n    throw new Error('PrivateKey was missing from PeerId');\n  }\n  const privateKey = await unmarshalPrivateKey(peerId.privateKey);\n  return await privateKey.sign(payload);\n}\nexport async function getPeerIdFromPayload(payload) {\n  return await peerIdFromKeys(payload.identityKey);\n}\nexport function decodePayload(payload) {\n  return NoiseHandshakePayload.decode(payload);\n}\nexport function getHandshakePayload(publicKey) {\n  const prefix = uint8ArrayFromString('noise-libp2p-static-key:');\n  return uint8ArrayConcat([prefix, publicKey], prefix.length + publicKey.length);\n}\n/**\n * Verifies signed payload, throws on any irregularities.\n *\n * @param {bytes} noiseStaticKey - owner's noise static key\n * @param {bytes} payload - decoded payload\n * @param {PeerId} remotePeer - owner's libp2p peer ID\n * @returns {Promise<PeerId>} - peer ID of payload owner\n */\nexport async function verifySignedPayload(noiseStaticKey, payload, remotePeer) {\n  // Unmarshaling from PublicKey protobuf\n  const payloadPeerId = await peerIdFromKeys(payload.identityKey);\n  if (!payloadPeerId.equals(remotePeer)) {\n    throw new Error(`Payload identity key ${payloadPeerId.toString()} does not match expected remote peer ${remotePeer.toString()}`);\n  }\n  const generatedPayload = getHandshakePayload(noiseStaticKey);\n  if (payloadPeerId.publicKey == null) {\n    throw new Error('PublicKey was missing from PeerId');\n  }\n  if (payload.identitySig == null) {\n    throw new Error('Signature was missing from message');\n  }\n  const publicKey = unmarshalPublicKey(payloadPeerId.publicKey);\n  const valid = await publicKey.verify(generatedPayload, payload.identitySig);\n  if (!valid) {\n    throw new Error(\"Static key doesn't match to peer that signed payload!\");\n  }\n  return payloadPeerId;\n}\nexport function isValidPublicKey(pk) {\n  if (!(pk instanceof Uint8Array)) {\n    return false;\n  }\n  if (pk.length !== 32) {\n    return false;\n  }\n  return true;\n}","map":{"version":3,"names":["unmarshalPublicKey","unmarshalPrivateKey","peerIdFromKeys","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","NoiseHandshakePayload","getPayload","localPeer","staticPublicKey","extensions","signedPayload","signPayload","getHandshakePayload","publicKey","Error","createHandshakePayload","libp2pPublicKey","encode","identityKey","identitySig","webtransportCerthashes","subarray","peerId","payload","privateKey","sign","getPeerIdFromPayload","decodePayload","decode","prefix","length","verifySignedPayload","noiseStaticKey","remotePeer","payloadPeerId","equals","toString","generatedPayload","valid","verify","isValidPublicKey","pk","Uint8Array"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}