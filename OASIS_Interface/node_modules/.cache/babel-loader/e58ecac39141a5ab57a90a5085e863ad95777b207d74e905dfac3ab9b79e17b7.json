{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRename({\n  keychain\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName);\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    };\n  };\n  return withTimeoutOption(rename);\n}","map":{"version":3,"names":["withTimeoutOption","createRename","keychain","rename","oldName","newName","key","renameKey","was","now","name","id","overwrite"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/key/rename.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n */\nexport function createRename ({ keychain }) {\n  /**\n   * @type {import('ipfs-core-types/src/key').API<{}>[\"rename\"]}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName)\n\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    }\n  }\n\n  return withTimeoutOption(rename)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAE;EAAEC;AAAS,CAAC,EAAE;EAC1C;AACF;AACA;EACE,MAAMC,MAAM,GAAG,MAAAA,CAAOC,OAAO,EAAEC,OAAO,KAAK;IACzC,MAAMC,GAAG,GAAG,MAAMJ,QAAQ,CAACK,SAAS,CAACH,OAAO,EAAEC,OAAO,CAAC;IAEtD,OAAO;MACLG,GAAG,EAAEJ,OAAO;MACZK,GAAG,EAAEH,GAAG,CAACI,IAAI;MACbC,EAAE,EAAEL,GAAG,CAACK,EAAE;MACVC,SAAS,EAAE;IACb,CAAC;EACH,CAAC;EAED,OAAOZ,iBAAiB,CAACG,MAAM,CAAC;AAClC"},"metadata":{},"sourceType":"module","externalDependencies":[]}