{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport * as varint from 'varint';\n\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\nfunction varintEncoder(buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr);\n  }, 0));\n  let offset = 0;\n  for (const num of buf) {\n    out = varint.encode(num, out, offset);\n\n    // @ts-expect-error types are wrong\n    offset += varint.default.encodingLength(num);\n  }\n  return out;\n}\nexport default varintEncoder;","map":{"version":3,"names":["varint","varintEncoder","buf","out","Uint8Array","reduce","acc","curr","default","encodingLength","offset","num","encode"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/utils/varint-encoder.js"],"sourcesContent":["import * as varint from 'varint'\n\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\nfunction varintEncoder (buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr)\n  }, 0))\n  let offset = 0\n\n  for (const num of buf) {\n    out = varint.encode(num, out, offset)\n\n    // @ts-expect-error types are wrong\n    offset += varint.default.encodingLength(num)\n  }\n\n  return out\n}\n\nexport default varintEncoder\n"],"mappings":";;;AAAA,OAAO,KAAKA,MAAM,MAAM,QAAQ;;AAEhC;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAEC,GAAG,EAAE;EAC3B,IAAIC,GAAG,GAAG,IAAIC,UAAU,CAACF,GAAG,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;IACjD;IACA,OAAOD,GAAG,GAAGN,MAAM,CAACQ,OAAO,CAACC,cAAc,CAACF,IAAI,CAAC;EAClD,CAAC,EAAE,CAAC,CAAC,CAAC;EACN,IAAIG,MAAM,GAAG,CAAC;EAEd,KAAK,MAAMC,GAAG,IAAIT,GAAG,EAAE;IACrBC,GAAG,GAAGH,MAAM,CAACY,MAAM,CAACD,GAAG,EAAER,GAAG,EAAEO,MAAM,CAAC;;IAErC;IACAA,MAAM,IAAIV,MAAM,CAACQ,OAAO,CAACC,cAAc,CAACE,GAAG,CAAC;EAC9C;EAEA,OAAOR,GAAG;AACZ;AAEA,eAAeF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}