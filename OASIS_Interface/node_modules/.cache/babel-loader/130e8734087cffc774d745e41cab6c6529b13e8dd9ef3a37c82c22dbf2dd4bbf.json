{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport errCode from 'err-code';\nimport * as ERRORS from './errors.js';\nimport { unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { peerIdFromBytes, peerIdFromKeys } from '@libp2p/peer-id';\nimport { logger } from '@libp2p/logger';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport * as cborg from 'cborg';\nconst log = logger('ipns:utils');\nconst IPNS_PREFIX = uint8ArrayFromString('/ipns/');\n/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n  const year = time.getUTCFullYear();\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(time.getUTCDate()).padStart(2, '0');\n  const hour = String(time.getUTCHours()).padStart(2, '0');\n  const minute = String(time.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  const milliseconds = time.getUTCMilliseconds();\n  const nanoseconds = milliseconds * 1000 * 1000;\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339(time) {\n  const rfc3339Matcher = new RegExp(\n  // 2006-01-02T\n  '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n  // 15:04:05\n  '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n  // .999999999Z\n  '\\\\.(\\\\d+)Z');\n  const m = String(time).trim().match(rfc3339Matcher);\n  if (m == null) {\n    throw new Error('Invalid format');\n  }\n  const year = parseInt(m[1], 10);\n  const month = parseInt(m[2], 10) - 1;\n  const date = parseInt(m[3], 10);\n  const hour = parseInt(m[4], 10);\n  const minute = parseInt(m[5], 10);\n  const second = parseInt(m[6], 10);\n  const millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}\n/**\n * Extracts a public key from the passed PeerId, falling\n * back to the pubKey embedded in the ipns record\n */\nexport const extractPublicKey = async (peerId, entry) => {\n  if (entry == null || peerId == null) {\n    const error = new Error('one or more of the provided parameters are not defined');\n    log.error(error);\n    throw errCode(error, ERRORS.ERR_UNDEFINED_PARAMETER);\n  }\n  let pubKey;\n  if (entry.pubKey != null) {\n    try {\n      pubKey = unmarshalPublicKey(entry.pubKey);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n    const otherId = await peerIdFromKeys(entry.pubKey);\n    if (!otherId.equals(peerId)) {\n      throw errCode(new Error('Embedded public key did not match PeerID'), ERRORS.ERR_INVALID_EMBEDDED_KEY);\n    }\n  } else if (peerId.publicKey != null) {\n    pubKey = unmarshalPublicKey(peerId.publicKey);\n  }\n  if (pubKey != null) {\n    return pubKey;\n  }\n  throw errCode(new Error('no public key is available'), ERRORS.ERR_UNDEFINED_PARAMETER);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV1Sig = (value, validityType, validity) => {\n  const validityTypeBuffer = uint8ArrayFromString(validityType);\n  return uint8ArrayConcat([value, validity, validityTypeBuffer]);\n};\n/**\n * Utility for creating the record data for being signed\n */\nexport const ipnsEntryDataForV2Sig = data => {\n  const entryData = uint8ArrayFromString('ipns-signature:');\n  return uint8ArrayConcat([entryData, data]);\n};\nexport const marshal = obj => {\n  return IpnsEntry.encode(obj);\n};\nexport const unmarshal = buf => {\n  const message = IpnsEntry.decode(buf);\n  // protobufjs returns bigints as numbers\n  if (message.sequence != null) {\n    message.sequence = BigInt(message.sequence);\n  }\n  // protobufjs returns bigints as numbers\n  if (message.ttl != null) {\n    message.ttl = BigInt(message.ttl);\n  }\n  return {\n    value: message.value ?? new Uint8Array(0),\n    signature: message.signature ?? new Uint8Array(0),\n    validityType: message.validityType ?? IpnsEntry.ValidityType.EOL,\n    validity: message.validity ?? new Uint8Array(0),\n    sequence: message.sequence ?? 0n,\n    pubKey: message.pubKey,\n    ttl: message.ttl ?? undefined,\n    signatureV2: message.signatureV2,\n    data: message.data\n  };\n};\nexport const peerIdToRoutingKey = peerId => {\n  return uint8ArrayConcat([IPNS_PREFIX, peerId.toBytes()]);\n};\nexport const peerIdFromRoutingKey = key => {\n  return peerIdFromBytes(key.slice(IPNS_PREFIX.length));\n};\nexport const createCborData = (value, validity, validityType, sequence, ttl) => {\n  let ValidityType;\n  if (validityType === IpnsEntry.ValidityType.EOL) {\n    ValidityType = 0;\n  } else {\n    throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n  }\n  const data = {\n    Value: value,\n    Validity: validity,\n    ValidityType,\n    Sequence: sequence,\n    TTL: ttl\n  };\n  return cborg.encode(data);\n};\nexport const parseCborData = buf => {\n  const data = cborg.decode(buf);\n  if (data.ValidityType === 0) {\n    data.ValidityType = IpnsEntry.ValidityType.EOL;\n  } else {\n    throw errCode(new Error('Unknown validity type'), ERRORS.ERR_UNRECOGNIZED_VALIDITY);\n  }\n  if (Number.isInteger(data.Sequence)) {\n    // sequence must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n    data.Sequence = BigInt(data.Sequence);\n  }\n  if (Number.isInteger(data.TTL)) {\n    // ttl must be a BigInt, but DAG-CBOR doesn't preserve this for Numbers within the safe-integer range\n    data.TTL = BigInt(data.TTL);\n  }\n  return data;\n};","map":{"version":3,"names":["errCode","ERRORS","unmarshalPublicKey","peerIdFromBytes","peerIdFromKeys","logger","IpnsEntry","fromString","uint8ArrayFromString","concat","uint8ArrayConcat","cborg","log","IPNS_PREFIX","toRFC3339","time","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","nanoseconds","parseRFC3339","rfc3339Matcher","RegExp","m","trim","match","Error","parseInt","date","second","millisecond","slice","Date","UTC","extractPublicKey","peerId","entry","error","ERR_UNDEFINED_PARAMETER","pubKey","err","otherId","equals","ERR_INVALID_EMBEDDED_KEY","publicKey","ipnsEntryDataForV1Sig","value","validityType","validity","validityTypeBuffer","ipnsEntryDataForV2Sig","data","entryData","marshal","obj","encode","unmarshal","buf","message","decode","sequence","BigInt","ttl","Uint8Array","signature","ValidityType","EOL","undefined","signatureV2","peerIdToRoutingKey","toBytes","peerIdFromRoutingKey","key","length","createCborData","ERR_UNRECOGNIZED_VALIDITY","Value","Validity","Sequence","TTL","parseCborData","Number","isInteger"],"sources":["../../src/utils.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}