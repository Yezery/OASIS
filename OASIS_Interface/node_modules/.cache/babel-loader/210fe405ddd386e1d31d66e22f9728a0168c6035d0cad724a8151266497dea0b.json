{"ast":null,"code":"'use strict';\n\nconst ModuleError = require('module-error');\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst rangeOptions = new Set(['lt', 'lte', 'gt', 'gte']);\nmodule.exports = function (options, keyEncoding) {\n  const result = {};\n  for (const k in options) {\n    if (!hasOwnProperty.call(options, k)) continue;\n    if (k === 'keyEncoding' || k === 'valueEncoding') continue;\n    if (k === 'start' || k === 'end') {\n      throw new ModuleError(`The legacy range option '${k}' has been removed`, {\n        code: 'LEVEL_LEGACY'\n      });\n    } else if (k === 'encoding') {\n      // To help migrating to abstract-level\n      throw new ModuleError(\"The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead\", {\n        code: 'LEVEL_LEGACY'\n      });\n    }\n    if (rangeOptions.has(k)) {\n      // Note that we don't reject nullish and empty options here. While\n      // those types are invalid as keys, they are valid as range options.\n      result[k] = keyEncoding.encode(options[k]);\n    } else {\n      result[k] = options[k];\n    }\n  }\n  result.reverse = !!result.reverse;\n  result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1;\n  return result;\n};","map":{"version":3,"names":["ModuleError","require","hasOwnProperty","Object","prototype","rangeOptions","Set","module","exports","options","keyEncoding","result","k","call","code","has","encode","reverse","limit","Number","isInteger"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/abstract-level@1.0.3/node_modules/abstract-level/lib/range-options.js"],"sourcesContent":["'use strict'\n\nconst ModuleError = require('module-error')\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nconst rangeOptions = new Set(['lt', 'lte', 'gt', 'gte'])\n\nmodule.exports = function (options, keyEncoding) {\n  const result = {}\n\n  for (const k in options) {\n    if (!hasOwnProperty.call(options, k)) continue\n    if (k === 'keyEncoding' || k === 'valueEncoding') continue\n\n    if (k === 'start' || k === 'end') {\n      throw new ModuleError(`The legacy range option '${k}' has been removed`, {\n        code: 'LEVEL_LEGACY'\n      })\n    } else if (k === 'encoding') {\n      // To help migrating to abstract-level\n      throw new ModuleError(\"The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead\", {\n        code: 'LEVEL_LEGACY'\n      })\n    }\n\n    if (rangeOptions.has(k)) {\n      // Note that we don't reject nullish and empty options here. While\n      // those types are invalid as keys, they are valid as range options.\n      result[k] = keyEncoding.encode(options[k])\n    } else {\n      result[k] = options[k]\n    }\n  }\n\n  result.reverse = !!result.reverse\n  result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1\n\n  return result\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAc,CAAC;AAC3C,MAAMC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;AACtD,MAAMG,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAExDC,MAAM,CAACC,OAAO,GAAG,UAAUC,OAAO,EAAEC,WAAW,EAAE;EAC/C,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,KAAK,MAAMC,CAAC,IAAIH,OAAO,EAAE;IACvB,IAAI,CAACP,cAAc,CAACW,IAAI,CAACJ,OAAO,EAAEG,CAAC,CAAC,EAAE;IACtC,IAAIA,CAAC,KAAK,aAAa,IAAIA,CAAC,KAAK,eAAe,EAAE;IAElD,IAAIA,CAAC,KAAK,OAAO,IAAIA,CAAC,KAAK,KAAK,EAAE;MAChC,MAAM,IAAIZ,WAAW,CAAE,4BAA2BY,CAAE,oBAAmB,EAAE;QACvEE,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIF,CAAC,KAAK,UAAU,EAAE;MAC3B;MACA,MAAM,IAAIZ,WAAW,CAAC,kFAAkF,EAAE;QACxGc,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IAEA,IAAIT,YAAY,CAACU,GAAG,CAACH,CAAC,CAAC,EAAE;MACvB;MACA;MACAD,MAAM,CAACC,CAAC,CAAC,GAAGF,WAAW,CAACM,MAAM,CAACP,OAAO,CAACG,CAAC,CAAC,CAAC;IAC5C,CAAC,MAAM;MACLD,MAAM,CAACC,CAAC,CAAC,GAAGH,OAAO,CAACG,CAAC,CAAC;IACxB;EACF;EAEAD,MAAM,CAACM,OAAO,GAAG,CAAC,CAACN,MAAM,CAACM,OAAO;EACjCN,MAAM,CAACO,KAAK,GAAGC,MAAM,CAACC,SAAS,CAACT,MAAM,CAACO,KAAK,CAAC,IAAIP,MAAM,CAACO,KAAK,IAAI,CAAC,GAAGP,MAAM,CAACO,KAAK,GAAG,CAAC,CAAC;EAEtF,OAAOP,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}