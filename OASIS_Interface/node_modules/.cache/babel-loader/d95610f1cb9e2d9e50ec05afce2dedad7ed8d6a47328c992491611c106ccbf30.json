{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { search } from \"@/api/axios/ownerContractLIst\";\nexport default {\n  data() {\n    return {\n      SearchVo: {\n        key: \"\"\n      },\n      results: [],\n      timeout: null\n    };\n  },\n  mounted() {},\n  methods: {\n    to3DInfPage(row) {\n      let NFTInf = {\n        saleId: row.saleId,\n        modelPath: row.ipfspath,\n        nftName: row.nftName,\n        description: row.description,\n        nftAddress: row.nftAddress,\n        tokenId: row.tokenId,\n        isActive: row.isActive,\n        seller: row.currentowner,\n        price: row.price\n      };\n      this.$store.commit(\"setNFTInf\", NFTInf);\n      this.$router.push({\n        path: \"/home/NFTInf3D\"\n      });\n    },\n    toInfPage(row) {\n      let NFTInf = {\n        saleId: row.saleId,\n        image: row.ipfspath,\n        nftName: row.nftName,\n        description: row.description,\n        nftAddress: row.nftAddress,\n        tokenId: row.tokenId,\n        isActive: row.isActive,\n        seller: row.currentowner,\n        price: row.price\n      };\n      this.$store.commit(\"setNFTInf\", NFTInf);\n      this.$router.push({\n        path: \"/home/NFTInf\"\n      });\n    },\n    toSearchPage() {\n      console.log(this.results);\n      if (this.results == null) {\n        this.results = [];\n      }\n      this.$router.push({\n        name: \"searchPage\",\n        params: {\n          searchVo: this.SearchVo,\n          results: this.results\n        }\n      });\n    },\n    handleSelect(item) {\n      if (item.NFT.description == \"3D\") {\n        this.to3DInfPage(item.NFT);\n      } else {\n        this.toInfPage(item.NFT);\n      }\n    },\n    querySearchAsync(queryString, cb) {\n      this.results = [];\n      search(this.SearchVo).then(re => {\n        this.results = re.data.data;\n      });\n      let results = this.results;\n      if (this.results instanceof Array) {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n          cb(results);\n        }, 3000 * Math.random());\n      } else {\n        cb([]);\n      }\n    }\n  }\n};","map":{"version":3,"names":["search","data","SearchVo","key","results","timeout","mounted","methods","to3DInfPage","row","NFTInf","saleId","modelPath","ipfspath","nftName","description","nftAddress","tokenId","isActive","seller","currentowner","price","$store","commit","$router","push","path","toInfPage","image","toSearchPage","console","log","name","params","searchVo","handleSelect","item","NFT","querySearchAsync","queryString","cb","then","re","Array","clearTimeout","setTimeout","Math","random"],"sources":["src/views/topMenu/oasisSearch.vue"],"sourcesContent":["<template>\n  <div class=\"searchBox \">\n    <el-autocomplete class=\"search\"   @keydown.enter.prevent.native=\"toSearchPage\" v-model=\"SearchVo.key\" :fetch-suggestions=\"querySearchAsync\" placeholder=\"Search any collection\" @select=\"handleSelect\" :trigger-on-focus=\"false\" :clearable=\"true\" />\n  \n  </div>\n</template>\n\n<script>\n  import { search } from \"@/api/axios/ownerContractLIst\";\n  export default {\n    data() {\n      return {\n        SearchVo: {\n          key: \"\",\n        },\n        results: [\n          \n        ],\n        timeout: null,\n      };\n    },\n    mounted() {},\n    methods: {\n      to3DInfPage(row) {\n        let NFTInf = {\n          saleId: row.saleId,\n          modelPath: row.ipfspath,\n          nftName: row.nftName,\n          description: row.description,\n          nftAddress: row.nftAddress,\n          tokenId: row.tokenId,\n          isActive: row.isActive,\n          seller: row.currentowner,\n          price: row.price,\n        };\n        this.$store.commit(\"setNFTInf\", NFTInf);\n        this.$router.push({\n          path: \"/home/NFTInf3D\",\n        });\n      },\n      toInfPage(row) {\n        let NFTInf = {\n          saleId: row.saleId,\n          image: row.ipfspath,\n          nftName: row.nftName,\n          description: row.description,\n          nftAddress: row.nftAddress,\n          tokenId: row.tokenId,\n          isActive: row.isActive,\n          seller: row.currentowner,\n          price: row.price,\n        };\n        this.$store.commit(\"setNFTInf\", NFTInf);\n        this.$router.push({\n          path: \"/home/NFTInf\",\n        });\n      },\n       toSearchPage() {\n         console.log(this.results);\n        if (this.results==null) {\n          this.results=[]\n        }\n        this.$router.push({\n          name: \"searchPage\",\n          params: {\n            searchVo: this.SearchVo,\n            results: this.results,\n          },\n        });\n\n      },\n      handleSelect(item) {\n        if (item.NFT.description == \"3D\") {\n          this.to3DInfPage(item.NFT);\n        } else {\n          this.toInfPage(item.NFT);\n        }\n      },\n      querySearchAsync(queryString, cb) {\n        this.results =[] \n         search(this.SearchVo).then((re) => {\n          this.results = re.data.data;\n        });\n        let results = this.results;\n        if (this.results instanceof Array) {\n          clearTimeout(this.timeout);\n          this.timeout = setTimeout(() => {\n            cb(results);\n          }, 3000 * Math.random());\n        } else {\n          cb([]);\n        }\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/topMenu/search.scss\";\n</style>\n"],"mappings":";AAQA,SAAAA,MAAA;AACA;EACAC,KAAA;IACA;MACAC,QAAA;QACAC,GAAA;MACA;MACAC,OAAA,IAEA;MACAC,OAAA;IACA;EACA;EACAC,QAAA;EACAC,OAAA;IACAC,YAAAC,GAAA;MACA,IAAAC,MAAA;QACAC,MAAA,EAAAF,GAAA,CAAAE,MAAA;QACAC,SAAA,EAAAH,GAAA,CAAAI,QAAA;QACAC,OAAA,EAAAL,GAAA,CAAAK,OAAA;QACAC,WAAA,EAAAN,GAAA,CAAAM,WAAA;QACAC,UAAA,EAAAP,GAAA,CAAAO,UAAA;QACAC,OAAA,EAAAR,GAAA,CAAAQ,OAAA;QACAC,QAAA,EAAAT,GAAA,CAAAS,QAAA;QACAC,MAAA,EAAAV,GAAA,CAAAW,YAAA;QACAC,KAAA,EAAAZ,GAAA,CAAAY;MACA;MACA,KAAAC,MAAA,CAAAC,MAAA,cAAAb,MAAA;MACA,KAAAc,OAAA,CAAAC,IAAA;QACAC,IAAA;MACA;IACA;IACAC,UAAAlB,GAAA;MACA,IAAAC,MAAA;QACAC,MAAA,EAAAF,GAAA,CAAAE,MAAA;QACAiB,KAAA,EAAAnB,GAAA,CAAAI,QAAA;QACAC,OAAA,EAAAL,GAAA,CAAAK,OAAA;QACAC,WAAA,EAAAN,GAAA,CAAAM,WAAA;QACAC,UAAA,EAAAP,GAAA,CAAAO,UAAA;QACAC,OAAA,EAAAR,GAAA,CAAAQ,OAAA;QACAC,QAAA,EAAAT,GAAA,CAAAS,QAAA;QACAC,MAAA,EAAAV,GAAA,CAAAW,YAAA;QACAC,KAAA,EAAAZ,GAAA,CAAAY;MACA;MACA,KAAAC,MAAA,CAAAC,MAAA,cAAAb,MAAA;MACA,KAAAc,OAAA,CAAAC,IAAA;QACAC,IAAA;MACA;IACA;IACAG,aAAA;MACAC,OAAA,CAAAC,GAAA,MAAA3B,OAAA;MACA,SAAAA,OAAA;QACA,KAAAA,OAAA;MACA;MACA,KAAAoB,OAAA,CAAAC,IAAA;QACAO,IAAA;QACAC,MAAA;UACAC,QAAA,OAAAhC,QAAA;UACAE,OAAA,OAAAA;QACA;MACA;IAEA;IACA+B,aAAAC,IAAA;MACA,IAAAA,IAAA,CAAAC,GAAA,CAAAtB,WAAA;QACA,KAAAP,WAAA,CAAA4B,IAAA,CAAAC,GAAA;MACA;QACA,KAAAV,SAAA,CAAAS,IAAA,CAAAC,GAAA;MACA;IACA;IACAC,iBAAAC,WAAA,EAAAC,EAAA;MACA,KAAApC,OAAA;MACAJ,MAAA,MAAAE,QAAA,EAAAuC,IAAA,CAAAC,EAAA;QACA,KAAAtC,OAAA,GAAAsC,EAAA,CAAAzC,IAAA,CAAAA,IAAA;MACA;MACA,IAAAG,OAAA,QAAAA,OAAA;MACA,SAAAA,OAAA,YAAAuC,KAAA;QACAC,YAAA,MAAAvC,OAAA;QACA,KAAAA,OAAA,GAAAwC,UAAA;UACAL,EAAA,CAAApC,OAAA;QACA,UAAA0C,IAAA,CAAAC,MAAA;MACA;QACAP,EAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}