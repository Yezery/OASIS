{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport os from 'os';\nimport { logger } from '@libp2p/logger';\nimport { gateway4async } from 'default-gateway';\nimport { discoverGateway } from './discovery/index.js';\nimport { PMPClient } from './pmp/index.js';\nimport { UPNPClient } from './upnp/index.js';\nconst log = logger('nat-port-mapper');\nexport class NatAPI {\n  constructor(opts = {}, client) {\n    _defineProperty(this, \"openPorts\", void 0);\n    _defineProperty(this, \"ttl\", void 0);\n    _defineProperty(this, \"description\", void 0);\n    _defineProperty(this, \"gateway\", void 0);\n    _defineProperty(this, \"keepAlive\", void 0);\n    _defineProperty(this, \"keepAliveInterval\", void 0);\n    _defineProperty(this, \"destroyed\", void 0);\n    _defineProperty(this, \"client\", void 0);\n    _defineProperty(this, \"updateIntervals\", void 0);\n    // TTL is 2 hours (min 20 min)\n    this.ttl = opts.ttl != null ? Math.max(opts.ttl, 1200) : 7200;\n    this.description = opts.description ?? 'NatAPI';\n    this.gateway = opts.gateway;\n    this.keepAlive = opts.keepAlive ?? true;\n    this.client = client;\n    this.updateIntervals = new Map();\n    // Refresh the mapping 10 minutes before the end of its lifetime\n    this.keepAliveInterval = (this.ttl - 600) * 1000;\n    this.destroyed = false;\n    this.openPorts = [];\n  }\n  async map(options) {\n    if (this.destroyed) {\n      throw new Error('client is destroyed');\n    }\n    // Validate input\n    const opts = this.validateInput(options);\n    // UDP or TCP\n    await this.client.map(opts);\n    this.openPorts.push(opts);\n    if (this.keepAlive) {\n      this.updateIntervals.set(`${opts.publicPort}:${opts.localPort}-${opts.protocol}`, setInterval(() => {\n        void this.client.map(opts).catch(err => {\n          log('Error refreshing port mapping %d:%d for protocol %s mapped on router', opts.publicPort, opts.localPort, opts.protocol, err);\n        });\n      }, this.keepAliveInterval));\n    }\n    log('Port %d:%d for protocol %s mapped on router', opts.publicPort, opts.localPort, opts.protocol);\n  }\n  async unmap(options) {\n    if (this.destroyed) {\n      throw new Error('client is destroyed');\n    }\n    // Validate input\n    const opts = this.validateInput(options);\n    // UDP or TCP\n    await this.client.unmap(opts);\n    this.openPorts = this.openPorts.filter(openPort => {\n      return openPort.publicPort !== opts.publicPort && openPort.protocol !== opts.protocol;\n    });\n    const key = `${opts.publicPort}:${opts.localPort}-${opts.protocol}`;\n    clearInterval(this.updateIntervals.get(key));\n    this.updateIntervals.delete(key);\n    log('Port %d:%d for protocol %s unmapped on router', opts.publicPort, opts.localPort, opts.protocol);\n  }\n  async close() {\n    if (this.destroyed) {\n      throw new Error('client already closed');\n    }\n    if (this.client != null) {\n      log('Close UPnP client');\n      await this.client.close();\n    }\n    // stop all updates\n    for (const interval of this.updateIntervals.values()) {\n      clearInterval(interval);\n    }\n    this.updateIntervals.clear();\n    // Unmap all ports\n    await Promise.all(this.openPorts.map(async opts => this.unmap(opts)));\n  }\n  validateInput(options = {}) {\n    if (options.localPort == null) {\n      throw new Error('invalid parameters');\n    }\n    const output = {\n      localPort: options.localPort,\n      localAddress: options.localAddress ?? findLocalAddress(),\n      publicPort: options.publicPort ?? options.localPort,\n      protocol: options.protocol ?? 'TCP',\n      description: options.description ?? this.description,\n      ttl: options.ttl ?? this.ttl,\n      gateway: options.gateway ?? this.gateway\n    };\n    return output;\n  }\n  async externalIp() {\n    return this.client.externalIp();\n  }\n}\nfunction findLocalAddress() {\n  const interfaces = os.networkInterfaces();\n  for (const infos of Object.values(interfaces)) {\n    if (infos == null) {\n      continue;\n    }\n    for (const info of infos) {\n      if (info.internal) {\n        continue;\n      }\n      if (info.family === 'IPv6') {\n        continue;\n      }\n      log('Found local address', info.address);\n      return info.address;\n    }\n  }\n  throw new Error('Please pass a `localAddress` to the map function');\n}\nexport function upnpNat(options = {}) {\n  const client = UPNPClient.createClient(discoverGateway(options));\n  return new NatAPI(options, client);\n}\nexport async function pmpNat(options = {}) {\n  const client = PMPClient.createClient(discoverGateway({\n    ...options,\n    gateway: (await gateway4async()).gateway\n  }));\n  return new NatAPI(options, client);\n}","map":{"version":3,"names":["os","logger","gateway4async","discoverGateway","PMPClient","UPNPClient","log","NatAPI","constructor","opts","client","_defineProperty","ttl","Math","max","description","gateway","keepAlive","updateIntervals","Map","keepAliveInterval","destroyed","openPorts","map","options","Error","validateInput","push","set","publicPort","localPort","protocol","setInterval","catch","err","unmap","filter","openPort","key","clearInterval","get","delete","close","interval","values","clear","Promise","all","output","localAddress","findLocalAddress","externalIp","interfaces","networkInterfaces","infos","Object","info","internal","family","address","upnpNat","createClient","pmpNat"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}