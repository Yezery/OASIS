{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport 'node-forge/lib/sha512.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nimport * as crypto from './rsa.js';\nexport class RsaPublicKey {\n  constructor(key) {\n    _defineProperty(this, \"_key\", void 0);\n    this._key = key;\n  }\n  async verify(data, sig) {\n    return crypto.hashAndVerify(this._key, sig, data);\n  }\n  marshal() {\n    return crypto.utils.jwkToPkix(this._key);\n  }\n  get bytes() {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    }).subarray();\n  }\n  encrypt(bytes) {\n    return crypto.encrypt(this._key, bytes);\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n}\nexport class RsaPrivateKey {\n  constructor(key, publicKey) {\n    _defineProperty(this, \"_key\", void 0);\n    _defineProperty(this, \"_publicKey\", void 0);\n    this._key = key;\n    this._publicKey = publicKey;\n  }\n  genSecret() {\n    return crypto.getRandomValues(16);\n  }\n  async sign(message) {\n    return crypto.hashAndSign(this._key, message);\n  }\n  get public() {\n    if (this._publicKey == null) {\n      throw new CodeError('public key not provided', 'ERR_PUBKEY_NOT_PROVIDED');\n    }\n    return new RsaPublicKey(this._publicKey);\n  }\n  decrypt(bytes) {\n    return crypto.decrypt(this._key, bytes);\n  }\n  marshal() {\n    return crypto.utils.jwkToPkcs1(this._key);\n  }\n  get bytes() {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    }).subarray();\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  async id() {\n    const hash = await this.public.hash();\n    return uint8ArrayToString(hash, 'base58btc');\n  }\n  /**\n   * Exports the key into a password protected PEM format\n   */\n  async export(password, format = 'pkcs-8') {\n    if (format === 'pkcs-8') {\n      const buffer = new forge.util.ByteBuffer(this.marshal());\n      const asn1 = forge.asn1.fromDer(buffer);\n      const privateKey = forge.pki.privateKeyFromAsn1(asn1);\n      const options = {\n        algorithm: 'aes256',\n        count: 10000,\n        saltSize: 128 / 8,\n        prfAlgorithm: 'sha512'\n      };\n      return forge.pki.encryptRsaPrivateKey(privateKey, password, options);\n    } else if (format === 'libp2p-key') {\n      return exporter(this.bytes, password);\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n    }\n  }\n}\nexport async function unmarshalRsaPrivateKey(bytes) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes);\n  const keys = await crypto.unmarshalPrivateKey(jwk);\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport function unmarshalRsaPublicKey(bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes);\n  return new RsaPublicKey(jwk);\n}\nexport async function fromJwk(jwk) {\n  const keys = await crypto.unmarshalPrivateKey(jwk);\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}\nexport async function generateKeyPair(bits) {\n  const keys = await crypto.generateKey(bits);\n  return new RsaPrivateKey(keys.privateKey, keys.publicKey);\n}","map":{"version":3,"names":["CodeError","sha256","forge","equals","uint8ArrayEquals","toString","uint8ArrayToString","exporter","pbm","crypto","RsaPublicKey","constructor","key","_defineProperty","_key","verify","data","sig","hashAndVerify","marshal","utils","jwkToPkix","bytes","PublicKey","encode","Type","KeyType","RSA","Data","subarray","encrypt","hash","digest","RsaPrivateKey","publicKey","_publicKey","genSecret","getRandomValues","sign","message","hashAndSign","public","decrypt","jwkToPkcs1","PrivateKey","id","export","password","format","buffer","util","ByteBuffer","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","options","algorithm","count","saltSize","prfAlgorithm","encryptRsaPrivateKey","unmarshalRsaPrivateKey","jwk","pkcs1ToJwk","keys","unmarshalPrivateKey","unmarshalRsaPublicKey","pkixToJwk","fromJwk","generateKeyPair","bits","generateKey"],"sources":["../../../src/keys/rsa-class.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}