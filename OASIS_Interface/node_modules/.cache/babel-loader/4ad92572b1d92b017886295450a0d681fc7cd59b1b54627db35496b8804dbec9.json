{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @packageDocumentation\n *\n * Provides methods for converting\n */\nimport * as ip from './ip.js';\nimport { getProtocol } from './protocols-table.js';\nimport { CID } from 'multiformats/cid';\nimport { base32 } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport * as Digest from 'multiformats/hashes/digest';\nimport varint from 'varint';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nexport function convert(proto, a) {\n  if (a instanceof Uint8Array) {\n    return convertToString(proto, a);\n  } else {\n    return convertToBytes(proto, a);\n  }\n}\n/**\n * Convert [code,Uint8Array] to string\n */\nexport function convertToString(proto, buf) {\n  const protocol = getProtocol(proto);\n  switch (protocol.code) {\n    case 4: // ipv4\n    case 41:\n      // ipv6\n      return bytes2ip(buf);\n    case 42:\n      // ipv6zone\n      return bytes2str(buf);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return bytes2port(buf).toString();\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777:\n      // memory\n      return bytes2str(buf);\n    case 421:\n      // ipfs\n      return bytes2mh(buf);\n    case 444:\n      // onion\n      return bytes2onion(buf);\n    case 445:\n      // onion3\n      return bytes2onion(buf);\n    case 466:\n      // certhash\n      return bytes2mb(buf);\n    default:\n      return uint8ArrayToString(buf, 'base16');\n    // no clue. convert to hex\n  }\n}\n\nexport function convertToBytes(proto, str) {\n  const protocol = getProtocol(proto);\n  switch (protocol.code) {\n    case 4:\n      // ipv4\n      return ip2bytes(str);\n    case 41:\n      // ipv6\n      return ip2bytes(str);\n    case 42:\n      // ipv6zone\n      return str2bytes(str);\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132:\n      // sctp\n      return port2bytes(parseInt(str, 10));\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n    case 449: // sni\n    case 777:\n      // memory\n      return str2bytes(str);\n    case 421:\n      // ipfs\n      return mh2bytes(str);\n    case 444:\n      // onion\n      return onion2bytes(str);\n    case 445:\n      // onion3\n      return onion32bytes(str);\n    case 466:\n      // certhash\n      return mb2bytes(str);\n    default:\n      return uint8ArrayFromString(str, 'base16');\n    // no clue. convert from hex\n  }\n}\n\nconst decoders = Object.values(bases).map(c => c.decoder);\nconst anybaseDecoder = function () {\n  let acc = decoders[0].or(decoders[1]);\n  decoders.slice(2).forEach(d => acc = acc.or(d));\n  return acc;\n}();\nfunction ip2bytes(ipString) {\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ip.toBytes(ipString);\n}\nfunction bytes2ip(ipBuff) {\n  const ipString = ip.toString(ipBuff, 0, ipBuff.length);\n  if (ipString == null) {\n    throw new Error('ipBuff is required');\n  }\n  if (!ip.isIP(ipString)) {\n    throw new Error('invalid ip address');\n  }\n  return ipString;\n}\nfunction port2bytes(port) {\n  const buf = new ArrayBuffer(2);\n  const view = new DataView(buf);\n  view.setUint16(0, port);\n  return new Uint8Array(buf);\n}\nfunction bytes2port(buf) {\n  const view = new DataView(buf.buffer);\n  return view.getUint16(buf.byteOffset);\n}\nfunction str2bytes(str) {\n  const buf = uint8ArrayFromString(str);\n  const size = Uint8Array.from(varint.encode(buf.length));\n  return uint8ArrayConcat([size, buf], size.length + buf.length);\n}\nfunction bytes2str(buf) {\n  const size = varint.decode(buf);\n  buf = buf.slice(varint.decode.bytes);\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return uint8ArrayToString(buf);\n}\nfunction mh2bytes(hash) {\n  let mh;\n  if (hash[0] === 'Q' || hash[0] === '1') {\n    mh = Digest.decode(base58btc.decode(`z${hash}`)).bytes;\n  } else {\n    mh = CID.parse(hash).multihash.bytes;\n  }\n  // the address is a varint prefixed multihash string representation\n  const size = Uint8Array.from(varint.encode(mh.length));\n  return uint8ArrayConcat([size, mh], size.length + mh.length);\n}\nfunction mb2bytes(mbstr) {\n  const mb = anybaseDecoder.decode(mbstr);\n  const size = Uint8Array.from(varint.encode(mb.length));\n  return uint8ArrayConcat([size, mb], size.length + mb.length);\n}\nfunction bytes2mb(buf) {\n  const size = varint.decode(buf);\n  const hash = buf.slice(varint.decode.bytes);\n  if (hash.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return 'u' + uint8ArrayToString(hash, 'base64url');\n}\n/**\n * Converts bytes to bas58btc string\n */\nfunction bytes2mh(buf) {\n  const size = varint.decode(buf);\n  const address = buf.slice(varint.decode.bytes);\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths');\n  }\n  return uint8ArrayToString(address, 'base58btc');\n}\nfunction onion2bytes(str) {\n  const addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n  }\n  if (addr[0].length !== 16) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion address.`);\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode('b' + addr[0]);\n  // onion port number\n  const port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  const portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction onion32bytes(str) {\n  const addr = str.split(':');\n  if (addr.length !== 2) {\n    throw new Error(`failed to parse onion addr: [\"'${addr.join('\", \"')}'\"]' does not contain a port number`);\n  }\n  if (addr[0].length !== 56) {\n    throw new Error(`failed to parse onion addr: ${addr[0]} not a Tor onion3 address.`);\n  }\n  // onion addresses do not include the multibase prefix, add it before decoding\n  const buf = base32.decode(`b${addr[0]}`);\n  // onion port number\n  const port = parseInt(addr[1], 10);\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)');\n  }\n  const portBuf = port2bytes(port);\n  return uint8ArrayConcat([buf, portBuf], buf.length + portBuf.length);\n}\nfunction bytes2onion(buf) {\n  const addrBytes = buf.slice(0, buf.length - 2);\n  const portBytes = buf.slice(buf.length - 2);\n  const addr = uint8ArrayToString(addrBytes, 'base32');\n  const port = bytes2port(portBytes);\n  return `${addr}:${port}`;\n}","map":{"version":3,"names":["ip","getProtocol","CID","base32","base58btc","bases","Digest","varint","toString","uint8ArrayToString","fromString","uint8ArrayFromString","concat","uint8ArrayConcat","convert","proto","a","Uint8Array","convertToString","convertToBytes","buf","protocol","code","bytes2ip","bytes2str","bytes2port","bytes2mh","bytes2onion","bytes2mb","str","ip2bytes","str2bytes","port2bytes","parseInt","mh2bytes","onion2bytes","onion32bytes","mb2bytes","decoders","Object","values","map","c","decoder","anybaseDecoder","acc","or","slice","forEach","d","ipString","isIP","Error","toBytes","ipBuff","length","port","ArrayBuffer","view","DataView","setUint16","buffer","getUint16","byteOffset","size","from","encode","decode","bytes","hash","mh","parse","multihash","mbstr","mb","address","addr","split","join","portBuf","addrBytes","portBytes"],"sources":["../../src/convert.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}