{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { UpSale, DownSale, getNFTStruct } from \"@/api/axios/contract.js\";\nimport ChatMemu from \"@/views/chat/ChatMemu.vue\";\nimport { getOwnerNFTsByAddress, search } from \"@/api/axios/ownerContractLIst\";\nexport default {\n  components: {\n    ChatMemu\n  },\n  data() {\n    return {\n      userBalance: 0,\n      userName: \"\",\n      userAvatar: require(\"@/assets/webAssets/MetaMask.png\"),\n      UserNFTListInf: [],\n      NFTArray: [],\n      nftContractAddressList: [],\n      NFTSeriesnameList: [],\n      isOwnerCheckArray: [],\n      SearchVo: {\n        key: \"\",\n        isActive: false,\n        minPrice: \"\",\n        maxPrice: \"\",\n        minMaxmums: \"\",\n        maxMaxmums: \"\"\n      }\n    };\n  },\n  async mounted() {\n    await this.init();\n    await this.getNFTSeriesnameList();\n    console.log(this.nftContractAddressList);\n    await this.GetNFTContractNFT();\n  },\n  methods: {\n    async init() {\n      let user = this.$store.state.currentAddress;\n      try {\n        this.userBalance = this.$store.state.Web3.utils.fromWei(await this.$store.state.Web3.eth.getBalance(user), \"ether\").slice(0, 4);\n        this.userName = `${user.slice(0, 5)}...${user.slice(37)}`;\n        this.userAvatar = \"data:image/png;base64,\" + new this.Identicon(user, 120).toString();\n      } catch (error) {\n        return;\n      }\n    },\n    async upSale(NFT) {\n      this.$prompt(\"ËØ∑ËæìÂÖ•‰ª∑Ê†º(ETH)\", \"‰∏äÊû∂\", {\n        confirmButtonText: \"Á°ÆÂÆö\",\n        cancelButtonText: \"ÂèñÊ∂à\",\n        inputPattern: /^(?=.*[1-9])\\d*(?:\\.\\d+)?$/,\n        inputErrorMessage: \"Âè™ËÉΩÊòØÊï∞Â≠ó\"\n      }).then(async ({\n        value\n      }) => {\n        NFT.price = value;\n        try {\n          await UpSale(NFT);\n          this.$notify({\n            title: \"‰∏äÊû∂ÊàêÂäü üéâ\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n        } catch (error) {\n          this.$notify.error({\n            title: \"‰∏äÊû∂ÂºÇÂ∏∏\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      }).catch(() => {\n        this.$notify({\n          title: \"Áî®Êà∑ÂèñÊ∂à‰∏äÊû∂\",\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      });\n      this.UserNFTListInf = await this.$store.state.ownerNFTList;\n    },\n    async downSale(NFT) {\n      try {\n        await DownSale(NFT);\n        this.$notify({\n          title: \"‰∏ãÊû∂ÊàêÂäü\",\n          type: \"success\",\n          position: \"top-left\",\n          offset: 200\n        });\n        this.UserNFTListInf = this.$store.state.ownerNFTList;\n      } catch (error) {\n        this.$notify.error({\n          title: \"‰∏ãÊû∂Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    async GetNFTContractNFT() {\n      let NFTInfList = [];\n      for (const nftaddress of this.nftContractAddressList) {\n        let nft = {\n          currentowner: this.$store.state.currentAddress,\n          nftAddress: nftaddress\n        };\n        await getOwnerNFTsByAddress(nft).then(re => {\n          NFTInfList.push(re.data.data);\n          console.log(re);\n        });\n      }\n      this.NFTArray = NFTInfList;\n    },\n    async getSetAddressArray(ContractAddressArray) {\n      for (const nft of ContractAddressArray) {\n        this.nftContractAddressList.push(nft.nftAddress);\n      }\n      this.nftContractAddressList = new Set(this.nftContractAddressList);\n    },\n    async getNFTSeriesnameList() {\n      await this.getSetAddressArray(this.$store.state.ownerNFTList);\n      for (const key of this.nftContractAddressList) {\n        let SeriesName;\n        let contract = await getNFTStruct(key);\n        await contract.methods.name().call().then(re => {\n          SeriesName = re;\n        });\n        this.NFTSeriesnameList.push(SeriesName);\n        let owner;\n        await contract.methods.owner().call().then(re => {\n          console.log(re);\n          owner = re;\n        });\n        if (this.$store.state.currentAddress.toUpperCase() == owner.toUpperCase()) {\n          this.isOwnerCheckArray.push(true);\n        } else {\n          this.isOwnerCheckArray.push(false);\n        }\n      }\n    },\n    toMint() {\n      this.$router.push(\"/home/ImitNFT\");\n    },\n    SearchNFT() {\n      search(this.SearchVo).then(re => {\n        console.log(re);\n        // this.getSetAddressArray(re.data.data);\n      });\n    },\n\n    Cancel() {}\n  }\n};","map":{"version":3,"names":["UpSale","DownSale","getNFTStruct","ChatMemu","getOwnerNFTsByAddress","search","components","data","userBalance","userName","userAvatar","require","UserNFTListInf","NFTArray","nftContractAddressList","NFTSeriesnameList","isOwnerCheckArray","SearchVo","key","isActive","minPrice","maxPrice","minMaxmums","maxMaxmums","mounted","init","getNFTSeriesnameList","console","log","GetNFTContractNFT","methods","user","$store","state","currentAddress","Web3","utils","fromWei","eth","getBalance","slice","Identicon","toString","error","upSale","NFT","$prompt","confirmButtonText","cancelButtonText","inputPattern","inputErrorMessage","then","value","price","$notify","title","type","position","offset","catch","ownerNFTList","downSale","NFTInfList","nftaddress","nft","currentowner","nftAddress","re","push","getSetAddressArray","ContractAddressArray","Set","SeriesName","contract","name","call","owner","toUpperCase","toMint","$router","SearchNFT","Cancel"],"sources":["src/views/user/UserHome.vue"],"sourcesContent":["<template>\n  <div class=\"userHomeMain\">\n    <el-container class=\"userHomeMainBox\">\n      <el-aside style=\"width: auto;\" class=\"animate__animated animate__fadeInLeft\">\n        <ChatMemu ref=\"ChatMemu\" />\n      </el-aside>\n      <div class=\"inf\">\n        <div class=\"infBox\">\n          <div class=\"content \">\n            <div class=\"contentTop animate__animated animate__fadeInDown\">\n              <div class=\"userInf \">\n                <div class=\"userInfTop\">\n                  <div class=\"userAvatarBox\">\n                    <img :src=\"userAvatar\" alt=\"\">\n                  </div>\n                  <div class=\"userName\">\n                    {{ userName }}\n                  </div>\n                </div>\n                <div class=\"userInfBottom\">\n                  <div class=\"UserBalance\">\n                    <span style=\"font-size: 4vw;font-weight: 800;\"> {{ userBalance }}</span> ETH\n                  </div>\n                </div>\n              </div>\n              <!-- <div class=\"userPet\" /> -->\n            </div>\n            <div class=\"contentBottom animate__animated animate__fadeInUp\">\n              <div class=\"NFTListBox\">\n                <div class=\"NFTMenu\" v-if=\"NFTSeriesnameList.length !== 0\">\n                  <el-input placeholder=\"ËØ∑ËæìÂÖ•ÂÜÖÂÆπ\" v-model=\"SearchVo.key\">\n                    <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"SearchNFT\" />\n                  </el-input>\n                </div>\n                <div class=\"NFTList\">\n                  <el-collapse v-if=\"NFTSeriesnameList.length !== 0\">\n                    <el-collapse-item v-for=\"address,i in nftContractAddressList\" :key=\"i\" :name=\"NFTSeriesnameList[i]\">\n                      <template slot=\"title\">\n                        <el-popover title=\"ÂêàÁ∫¶Âú∞ÂùÄ\" placement=\"top-start\" width=\"350\" trigger=\"hover\" :content=\"address\">\n                          <i class=\"header-icon el-icon-info\" slot=\"reference\" />\n                        </el-popover>\n                        <span style=\"margin-left: 1%;font-weight: 800;font-size: 1vw;\">\n                          {{ NFTSeriesnameList[i] }}\n                        </span>\n                        <span class=\"ADDNFT\" v-if=\"isOwnerCheckArray[i]\">\n                          <el-popover title=\"‰∏∫ËØ•ÂêàÁ∫¶Ê∑ªÂä†Êñ∞ÁöÑNFT üéâ\" placement=\"top-start\" width=\"200\" trigger=\"hover\" content=\"\">\n                            <router-link class=\"addImit\" :to=\"{ name: 'addImit',query:{nftContract:address} }\"><el-button type=\"success\" plain>ÂâçÂæÄ</el-button>\n                            </router-link>\n                            <i class=\"el-icon-plus\" slot=\"reference\" />\n                          </el-popover>\n                        </span>\n                      </template>\n                      <div class=\"collapseInnerBox\">\n                        <template v-for=\"inf in NFTArray\">\n                          <template v-for=\"nft,k in inf\">\n                            <template v-if=\"nft.nftAddress == address\">\n                              <div class=\"NFTInf\" :key=\"k\">\n                                <div style=\"height:65%;width: 100%;overflow: hidden;\">\n                                  <img class=\"NFTImage\" :src=\"nft.ipfsPath\" alt=\"\">\n                                </div>\n                                <div class=\"Inf\">\n                                  <div class=\"InfTop\">\n                                    <div class=\"NFTName\">\n                                      {{ nft.nftName }}\n                                    </div>\n                                    <div class=\"Active\" v-if=\"nft.isActive\">\n                                      <i class=\"el-icon-sort\" />\n                                      <span style=\"font-weight: 800; font-size: 12px;\">Âú®ÂîÆ</span>\n                                    </div>\n                                    <div class=\"NoActive\" v-else>\n                                      <i class=\"el-icon-sort\" />\n                                      <span style=\"font-weight: 800; font-size: 12px;\"> Êú™‰∏äÊû∂ </span>\n                                    </div>\n                                  </div>\n                                  <div v-if=\"nft.isActive\" class=\"priceBox\">\n                                    <span class=\"price\">{{ $store.state.Web3.utils.fromWei(nft.price, 'ether') }}</span> ETH\n                                  </div>\n                                  <div v-else class=\"priceBox\">\n                                    <span class=\"price\" />\n                                  </div>\n                                  <div class=\"InfBottom \" style=\"background-color: #d63131e6;\" @click=\"downSale(nft)\" v-if=\"nft.isActive\">\n                                    <i class=\"el-icon-sold-out\" />\n                                  </div>\n                                  <div class=\"InfBottom\" v-else @click=\"upSale(nft)\">\n                                    <i class=\"el-icon-sell\" />\n                                  </div>\n                                </div>\n                              </div>\n                            </template>\n                          </template>\n                        </template>\n                      </div>\n                    </el-collapse-item>\n                  </el-collapse>\n                  <div v-else>\n                    <el-empty>\n                      <template slot=\"description\">\n                        <div>\n                          <span style=\"font-weight: 800;\n                          margin-bottom: 10%;margin-top: 5%;\">Êú™Êü•Âà∞Áõ∏ÂÖ≥ËóèÂìÅ </span>\n                          <el-button type=\"success\" round plain @click=\"toMint\">\n                            ÂâçÂæÄÂàõÈÄ†\n                          </el-button>\n                        </div>\n                      </template>\n                    </el-empty>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </el-container>\n    <div class=\"upSaleBox\" v-if=\"false\">\n      <div class=\"upSaleBoxLeft\">\n        <div class=\"imageBox\">\n          <img src=\"../../assets//AD1Assets/image 1.png\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"upSaleBoxRight\">\n        <div class=\"select\">\n          <div class=\"tipsBox\">\n            <div class=\"tipsTitle\">\n              Á≥ªÂàóÂêç <span class=\"tipshelp\">Series Name</span>\n            </div>\n            <div class=\"tipsTitle2\">\n              \n            </div>\n          </div>\n          <!-- <el-input\n                v-model=\"Name\"\n                placeholder=\"Please enter a series name\"\n              /> -->\n        </div>\n        <div class=\"select\">\n          <div class=\"tipsBox\">\n            <div class=\"tipsTitle\">\n              ‰ª£Â∏ÅÁ¨¶Âè∑ <span class=\"tipshelp\">Symbol</span>\n            </div>\n            <div class=\"tipsTitle2\">\n              \n            </div>\n          </div>\n          <!-- <el-input\n                v-model=\"Symbol\"\n                placeholder=\"Please enter the token symbol\"\n                maxlength=\"11\"\n              /> -->\n        </div>\n        <div class=\"select\">\n          <div class=\"tipsBox\">\n            <div class=\"tipsTitle\">\n              ÂêçÁß∞ <span class=\"tipshelp\">NFT Name</span>\n            </div>\n            <div class=\"tipsTitle2\">\n               \n            </div>\n          </div>\n          <!-- <el-input\n                v-model=\"FirstNFTName\"\n                placeholder=\"Please enter the name of Genesis NFT\"\n              /> -->\n        </div>\n        <div class=\"select\">\n          <div class=\"tipsBox\">\n            <div class=\"tipsTitle\">\n              ÊèèËø∞Â∞ÜÂåÖÂê´Âú®ÂïÜÂìÅËØ¶ÊÉÖÈ°µÈù¢‰∏äÂõæÁâá‰∏ãÊñπ„ÄÇ\n            </div>\n            <div class=\"tipsTitle2\">\n              Description\n            </div>\n          </div>\n          <!-- <el-input\n                type=\"textarea\"\n                v-model=\"Description\"\n                placeholder=\"Please add a description\"\n              /> -->\n        </div>\n        <div class=\"select\">\n          <div class=\"tipsBox\">\n            <div class=\"tipsTitle\">\n              ÂèØ‰ª•Èì∏ÈÄ†ÁöÑÁâ©ÂìÅÊï∞Èáè„ÄÇ\n            </div>\n            <div class=\"tipsTitle2\">\n              Supply\n            </div>\n          </div>\n          <div class=\"input_number\">\n            <!-- <el-input-number\n                  v-model=\"Maxmums\"\n                  :min=\"1\"\n                /> -->\n          </div>\n        </div>\n        <div class=\"select\">\n          <div class=\"sumbitBox\">\n            <!-- <el-button\n                  @click=\"createNFT\"\n                  :disabled=\"!canSubmit\"\n                  class=\"createButton\"\n                >\n                  ÂàõÈÄ†\n                </el-button> -->\n          </div>\n        </div>\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { UpSale, DownSale, getNFTStruct } from \"@/api/axios/contract.js\";\n  import ChatMemu from \"@/views/chat/ChatMemu.vue\";\n  import { getOwnerNFTsByAddress, search } from \"@/api/axios/ownerContractLIst\";\n  export default {\n    components: { ChatMemu },\n    data() {\n      return {\n        userBalance: 0,\n        userName: \"\",\n        userAvatar: require(\"@/assets/webAssets/MetaMask.png\"),\n        UserNFTListInf: [],\n        NFTArray: [],\n        nftContractAddressList: [],\n        NFTSeriesnameList: [],\n        isOwnerCheckArray: [],\n        SearchVo: {\n          key: \"\",\n          isActive: false,\n          minPrice: \"\",\n          maxPrice: \"\",\n          minMaxmums: \"\",\n          maxMaxmums: \"\",\n        },\n      };\n    },\n    async mounted() {\n      await this.init();\n      await this.getNFTSeriesnameList();\n      console.log(this.nftContractAddressList);\n      await this.GetNFTContractNFT();\n    },\n    methods: {\n      async init() {\n        let user = this.$store.state.currentAddress;\n        try {\n          this.userBalance = this.$store.state.Web3.utils\n            .fromWei(await this.$store.state.Web3.eth.getBalance(user), \"ether\")\n            .slice(0, 4);\n          this.userName = `${user.slice(0, 5)}...${user.slice(37)}`;\n          this.userAvatar =\n            \"data:image/png;base64,\" + new this.Identicon(user, 120).toString();\n        } catch (error) {\n          return;\n        }\n      },\n      async upSale(NFT) {\n        this.$prompt(\"ËØ∑ËæìÂÖ•‰ª∑Ê†º(ETH)\", \"‰∏äÊû∂\", {\n          confirmButtonText: \"Á°ÆÂÆö\",\n          cancelButtonText: \"ÂèñÊ∂à\",\n          inputPattern: /^(?=.*[1-9])\\d*(?:\\.\\d+)?$/,\n          inputErrorMessage: \"Âè™ËÉΩÊòØÊï∞Â≠ó\",\n        })\n          .then(async ({ value }) => {\n            NFT.price = value;\n            try {\n              await UpSale(NFT);\n              this.$notify({\n                title: \"‰∏äÊû∂ÊàêÂäü üéâ\",\n                type: \"success\",\n                position: \"top-left\",\n                offset: 200,\n              });\n            } catch (error) {\n              this.$notify.error({\n                title: \"‰∏äÊû∂ÂºÇÂ∏∏\",\n                position: \"top-left\",\n                offset: 200,\n              });\n            }\n          })\n          .catch(() => {\n            this.$notify({\n              title: \"Áî®Êà∑ÂèñÊ∂à‰∏äÊû∂\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          });\n\n        this.UserNFTListInf = await this.$store.state.ownerNFTList;\n      },\n      async downSale(NFT) {\n        try {\n          await DownSale(NFT);\n          this.$notify({\n            title: \"‰∏ãÊû∂ÊàêÂäü\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200,\n          });\n          this.UserNFTListInf = this.$store.state.ownerNFTList;\n        } catch (error) {\n          this.$notify.error({\n            title: \"‰∏ãÊû∂Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      async GetNFTContractNFT() {\n        let NFTInfList = [];\n        for (const nftaddress of this.nftContractAddressList) {\n          let nft = {\n            currentowner: this.$store.state.currentAddress,\n            nftAddress: nftaddress,\n          };\n          await getOwnerNFTsByAddress(nft).then((re) => {\n            NFTInfList.push(re.data.data);\n            console.log(re);\n          });\n        }\n        this.NFTArray = NFTInfList;\n      },\n      async getSetAddressArray(ContractAddressArray) {\n        for (const nft of ContractAddressArray) {\n          this.nftContractAddressList.push(nft.nftAddress);\n        }\n        this.nftContractAddressList = new Set(this.nftContractAddressList);\n      },\n      async getNFTSeriesnameList() {\n        await this.getSetAddressArray(this.$store.state.ownerNFTList);\n        for (const key of this.nftContractAddressList) {\n          let SeriesName;\n          let contract = await getNFTStruct(key);\n          await contract.methods\n            .name()\n            .call()\n            .then((re) => {\n              SeriesName = re;\n            });\n          this.NFTSeriesnameList.push(SeriesName);\n          let owner;\n          await contract.methods\n            .owner()\n            .call()\n            .then((re) => {\n              console.log(re);\n              owner = re;\n            });\n          if (\n            this.$store.state.currentAddress.toUpperCase() == owner.toUpperCase()\n          ) {\n            this.isOwnerCheckArray.push(true);\n          } else {\n            this.isOwnerCheckArray.push(false);\n          }\n        }\n      },\n      toMint() {\n        this.$router.push(\"/home/ImitNFT\");\n      },\n      SearchNFT() {\n        search(this.SearchVo).then((re) => {\n          console.log(re);\n          // this.getSetAddressArray(re.data.data);\n        });\n      },\n      Cancel() {},\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.userHomeMain {\n  width: 100%;\n  background-color: var(--White-eee--);\n  .upSaleBox {\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    width: 70%;\n    height: 70%;\n    border-radius: 30px;\n    background-color: white;\n    transform: translate(-50%, -50%);\n    display: flex;\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px,\n      rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n    .upSaleBoxLeft {\n      flex: 1;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      .imageBox {\n        width: 70%;\n        height: 70%;\n        border: 1px solid gray;\n        border-radius: 30px;\n        overflow: hidden;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: red;\n        img {\n          object-fit: contain;\n        }\n      }\n    }\n    .upSaleBoxRight {\n      flex: 1;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n      /deep/ .select {\n        width: 100%;\n        text-align: left;\n        margin-bottom: 30px;\n        .tipsBox {\n          width: 100%;\n          color: rgb(105, 105, 105);\n          text-align: left;\n          transition: all 0.3s ease-in-out;\n          .tipsTitle2 {\n            margin-bottom: 1%;\n            width: 76%;\n            font-size: 25px;\n            font-weight: 800;\n            color: var(--Dark--);\n            transition: all 0.3s ease-in-out;\n          }\n          .tipsTitle {\n            font-size: 25px;\n            margin-bottom: 3px;\n            .tipshelp{\n              color: rgb(105, 105, 105);\n              font-size: 20px;\n            }\n          }\n        }\n      }\n    }\n  }\n  .userHomeMainBox {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n  .inf {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    .infBox {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      border-radius: 30px;\n      margin-top: 3%;\n      width: 100%;\n      .content {\n        width: 100%;\n        height: 100%;\n        color: var(--Dark--);\n        margin-left: 3%;\n        background-color: var(--White-eee--);\n\n        .contentTop {\n          width: 100%;\n          display: flex;\n          justify-content: flex-start;\n          align-items: center;\n\n          .userInf {\n            background-color: var(--White--);\n            border-radius: 50px;\n            width: 600px;\n            height: 280px;\n            display: flex;\n            justify-content: center;\n            flex-direction: column;\n            align-content: flex-start;\n            margin-right: 5%;\n            overflow: hidden;\n            padding: 0;\n            transition: all 0.3s ease-in-out;\n            &:hover {\n              box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,\n                rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;\n              transition: all 0.3s ease-in-out;\n            }\n            .userInfTop {\n              width: 100%;\n              height: 100%;\n              display: flex;\n              justify-content: flex-start;\n              align-items: center;\n              margin-top: 20px;\n              .userAvatarBox {\n                margin-left: 25px;\n                margin-right: 25px;\n                min-width: 95px;\n                min-height: 95px;\n                overflow: hidden;\n                border-radius: 50%;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                background-color: rgba(230, 230, 230, 1);\n                img {\n                  object-fit: cover;\n                  width: 85px;\n                  height: 85px;\n                }\n              }\n              .userName {\n                font-weight: 800;\n                font-size: 25px;\n              }\n            }\n            .userInfBottom {\n              width: 100%;\n              height: 100%;\n              display: flex;\n              justify-content: flex-end;\n              align-items: center;\n              .UserBalance {\n                margin-right: 35px;\n                font-size: 1vw;\n              }\n            }\n          }\n          .userPet {\n            @extend .userInf;\n            width: 1000px;\n          }\n          .TopBackground {\n            position: relative;\n            width: 100%;\n            height: 30%;\n            .userName {\n              position: absolute;\n              width: 726px;\n              height: 180px;\n              left: 113px;\n              top: 185px;\n              color: rgb(255, 255, 255);\n              font-family: Inter;\n              font-size: 5vw;\n              font-weight: 800;\n              line-height: 90px;\n              letter-spacing: -2px;\n              text-align: left;\n            }\n          }\n        }\n        .contentBottom {\n          width: 95%;\n          height: 90%;\n          margin-top: 5%;\n          display: flex;\n          justify-content: center;\n          .NFTListBox {\n            width: 100%;\n            background-color: var(--White--);\n            border-radius: 50px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 3%;\n            .NFTList {\n              flex: 2;\n              width: 95%;\n              height: 100%;\n              /deep/ .el-collapse {\n                border: none;\n                .el-collapse-item__header {\n                  background-color: var(--White--) !important;\n                  color: var(--Dark--);\n                }\n                .el-collapse-item__content {\n                  background-color: var(--White--);\n                }\n              }\n\n              // .NFTListArray {\n              //   width: 100%;\n              //   display: flex;\n\n              // }\n              .collapseInnerBox {\n                .NFTInf {\n                  margin: 2%;\n                  background-color: var(--White--);\n                  border-radius: 50px;\n                  width: 320px;\n                  height: 420px;\n                  display: inline-block;\n                  overflow: hidden;\n                  transition: all 0.7s ease-in-out;\n                  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n                    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n                  .NFTImage {\n                    width: 100%;\n                    height: 100%;\n                    object-fit: cover;\n                    transition: all 0.6s;\n                    cursor: pointer;\n\n                    &:hover {\n                      transition: all 0.6s;\n                    }\n                  }\n                }\n\n                .NFTInf:hover {\n                  transition: all 0.6s ease-in-out;\n                  transform: translateY(-5px) perspective(1000px);\n                }\n                .NFTInf:hover > * {\n                  transform: none;\n                }\n\n                .Inf {\n                  width: 100%;\n                  height: 60%;\n                  background-color: var(--Dark--);\n\n                  .priceBox {\n                    padding-top: 2%;\n                    text-align: left;\n                    width: 100%;\n                    font-size: 0.5vw;\n                    color: var(--White--);\n                    .price {\n                      margin-left: 15%;\n                      font-size: 1.5vw;\n                    }\n                  }\n                  .InfTop {\n                    width: 100%;\n                    height: 40px;\n                    position: relative;\n                    .NoActive {\n                      position: absolute;\n                      right: 10%;\n                      top: 15px;\n                      width: 100px;\n                      padding: 4px 0px 4px 0px;\n                      color: white;\n                      background-color: #d63131b3;\n                      border-radius: 10px;\n                      transition: all 0.3s ease-in-out;\n                    }\n                    .Active {\n                      @extend .NoActive;\n                      background-color: rgba(85, 201, 96, 0.12);\n                      color: #55c960;\n                    }\n                    .NFTName {\n                      position: absolute;\n                      left: 0%;\n                      top: 19px;\n                      color: var(--White--);\n                      font-weight: 800;\n                      text-align: left;\n                      font-size: 14px;\n                      margin-left: 20%;\n                    }\n                  }\n                  .InfBottom {\n                    font-size: 30px;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    height: 20%;\n                    padding-bottom: 100px;\n                    color: white;\n                    background-color: rgba(0, 149, 255, 0.958);\n                    cursor: pointer;\n                  }\n                }\n              }\n\n              .ADDNFT {\n                margin-left: 1%;\n                // background-color: var(--White--);\n                // border-radius: 50px;\n                // margin-left: 4%;\n                // width: 320px;\n                // height: 400px;\n                // display: inline-block;\n                // transition: all 0.7s ease-in-out;\n                // box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n                //   rgba(17, 17, 26, 0.1) 0px 0px 8px;\n                cursor: pointer;\n                div {\n                  display: flex;\n                  justify-content: center;\n                  align-items: center;\n                  width: 40px;\n                  padding: 2% 10% 2% 10%;\n                }\n                // display: flex;\n                // justify-content: center;\n                // align-items: center;\n                i {\n                  font-weight: 800;\n                  color: var(--Dark--);\n                }\n              }\n            }\n            .NFTMenu {\n              margin-right: 3%;\n              height: 100%;\n              display: flex;\n              flex-direction: column;\n              flex: 1;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n<style lang=\"scss\" scoped>\n@import \"@/style/index.css\";\n</style>\n<style lang=\"scss\" scoped>\n@import \"@/style/MarketShop/index.scss\";\n</style> \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}