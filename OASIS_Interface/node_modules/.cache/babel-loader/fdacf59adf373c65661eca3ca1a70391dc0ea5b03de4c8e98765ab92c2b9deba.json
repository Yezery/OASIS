{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _class;\nimport { unmarshalPrivateKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nimport { unsigned } from 'uint8-varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { fromString as uint8arraysFromString } from 'uint8arrays/from-string';\nimport { codes } from '../errors.js';\nimport { Envelope as Protobuf } from './envelope.js';\nexport class RecordEnvelope {\n  /**\n   * The Envelope is responsible for keeping an arbitrary signed record\n   * by a libp2p peer.\n   */\n  constructor(init) {\n    _defineProperty(this, \"peerId\", void 0);\n    _defineProperty(this, \"payloadType\", void 0);\n    _defineProperty(this, \"payload\", void 0);\n    _defineProperty(this, \"signature\", void 0);\n    _defineProperty(this, \"marshaled\", void 0);\n    const {\n      peerId,\n      payloadType,\n      payload,\n      signature\n    } = init;\n    this.peerId = peerId;\n    this.payloadType = payloadType;\n    this.payload = payload;\n    this.signature = signature;\n  }\n  /**\n   * Marshal the envelope content\n   */\n  marshal() {\n    if (this.peerId.publicKey == null) {\n      throw new Error('Missing public key');\n    }\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        publicKey: this.peerId.publicKey,\n        payloadType: this.payloadType,\n        payload: this.payload.subarray(),\n        signature: this.signature\n      });\n    }\n    return this.marshaled;\n  }\n  /**\n   * Verifies if the other Envelope is identical to this one\n   */\n  equals(other) {\n    return uint8ArrayEquals(this.marshal(), other.marshal());\n  }\n  /**\n   * Validate envelope data signature for the given domain\n   */\n  async validate(domain) {\n    const signData = formatSignaturePayload(domain, this.payloadType, this.payload);\n    if (this.peerId.publicKey == null) {\n      throw new Error('Missing public key');\n    }\n    const key = unmarshalPublicKey(this.peerId.publicKey);\n    return key.verify(signData.subarray(), this.signature);\n  }\n}\n/**\n * Helper function that prepares a Uint8Array to sign or verify a signature\n */\n_class = RecordEnvelope;\n/**\n * Unmarshal a serialized Envelope protobuf message\n */\n_defineProperty(RecordEnvelope, \"createFromProtobuf\", async data => {\n  const envelopeData = Protobuf.decode(data);\n  const peerId = await peerIdFromKeys(envelopeData.publicKey);\n  return new _class({\n    peerId,\n    payloadType: envelopeData.payloadType,\n    payload: envelopeData.payload,\n    signature: envelopeData.signature\n  });\n});\n/**\n * Seal marshals the given Record, places the marshaled bytes inside an Envelope\n * and signs it with the given peerId's private key\n */\n_defineProperty(RecordEnvelope, \"seal\", async (record, peerId) => {\n  if (peerId.privateKey == null) {\n    throw new Error('Missing private key');\n  }\n  const domain = record.domain;\n  const payloadType = record.codec;\n  const payload = record.marshal();\n  const signData = formatSignaturePayload(domain, payloadType, payload);\n  const key = await unmarshalPrivateKey(peerId.privateKey);\n  const signature = await key.sign(signData.subarray());\n  return new _class({\n    peerId,\n    payloadType,\n    payload,\n    signature\n  });\n});\n/**\n * Open and certify a given marshalled envelope.\n * Data is unmarshalled and the signature validated for the given domain.\n */\n_defineProperty(RecordEnvelope, \"openAndCertify\", async (data, domain) => {\n  const envelope = await _class.createFromProtobuf(data);\n  const valid = await envelope.validate(domain);\n  if (!valid) {\n    throw new CodeError('envelope signature is not valid for the given domain', codes.ERR_SIGNATURE_NOT_VALID);\n  }\n  return envelope;\n});\nconst formatSignaturePayload = (domain, payloadType, payload) => {\n  // When signing, a peer will prepare a Uint8Array by concatenating the following:\n  // - The length of the domain separation string string in bytes\n  // - The domain separation string, encoded as UTF-8\n  // - The length of the payload_type field in bytes\n  // - The value of the payload_type field\n  // - The length of the payload field in bytes\n  // - The value of the payload field\n  const domainUint8Array = uint8arraysFromString(domain);\n  const domainLength = unsigned.encode(domainUint8Array.byteLength);\n  const payloadTypeLength = unsigned.encode(payloadType.length);\n  const payloadLength = unsigned.encode(payload.length);\n  return new Uint8ArrayList(domainLength, domainUint8Array, payloadTypeLength, payloadType, payloadLength, payload);\n};","map":{"version":3,"names":["unmarshalPrivateKey","unmarshalPublicKey","CodeError","peerIdFromKeys","unsigned","Uint8ArrayList","equals","uint8ArrayEquals","fromString","uint8arraysFromString","codes","Envelope","Protobuf","RecordEnvelope","constructor","init","_defineProperty","peerId","payloadType","payload","signature","marshal","publicKey","Error","marshaled","encode","subarray","other","validate","domain","signData","formatSignaturePayload","key","verify","_class","data","envelopeData","decode","record","privateKey","codec","sign","envelope","createFromProtobuf","valid","ERR_SIGNATURE_NOT_VALID","domainUint8Array","domainLength","byteLength","payloadTypeLength","length","payloadLength"],"sources":["../../../src/envelope/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}