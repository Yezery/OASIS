{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { Libp2pRecord } from '@libp2p/record';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { bestRecord } from '@libp2p/record/selectors';\nimport parallel from 'it-parallel';\nimport map from 'it-map';\nimport { valueEvent, queryErrorEvent } from '../query/events.js';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { pipe } from 'it-pipe';\nimport { ALPHA } from '../constants.js';\nimport { createPutRecord, convertBuffer, bufferToRecordKey } from '../utils.js';\nimport { logger } from '@libp2p/logger';\nexport class ContentFetching {\n  constructor(components, init) {\n    const {\n      validators,\n      selectors,\n      peerRouting,\n      queryManager,\n      routingTable,\n      network,\n      lan\n    } = init;\n    this.components = components;\n    this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:content-fetching`);\n    this.validators = validators;\n    this.selectors = selectors;\n    this.peerRouting = peerRouting;\n    this.queryManager = queryManager;\n    this.routingTable = routingTable;\n    this.network = network;\n  }\n  async putLocal(key, rec) {\n    const dsKey = bufferToRecordKey(key);\n    await this.components.datastore.put(dsKey, rec);\n  }\n  /**\n   * Attempt to retrieve the value for the given key from\n   * the local datastore\n   */\n  async getLocal(key) {\n    this.log('getLocal %b', key);\n    const dsKey = bufferToRecordKey(key);\n    this.log('fetching record for key %k', dsKey);\n    const raw = await this.components.datastore.get(dsKey);\n    this.log('found %k in local datastore', dsKey);\n    const rec = Libp2pRecord.deserialize(raw);\n    await verifyRecord(this.validators, rec);\n    return rec;\n  }\n  /**\n   * Send the best record found to any peers that have an out of date record\n   */\n  async *sendCorrectionRecord(key, vals, best, options = {}) {\n    this.log('sendCorrection for %b', key);\n    const fixupRec = createPutRecord(key, best);\n    for (const {\n      value,\n      from\n    } of vals) {\n      // no need to do anything\n      if (uint8ArrayEquals(value, best)) {\n        this.log('record was ok');\n        continue;\n      }\n      // correct ourself\n      if (this.components.peerId.equals(from)) {\n        try {\n          const dsKey = bufferToRecordKey(key);\n          this.log(`Storing corrected record for key ${dsKey.toString()}`);\n          await this.components.datastore.put(dsKey, fixupRec.subarray());\n        } catch (err) {\n          this.log.error('Failed error correcting self', err);\n        }\n        continue;\n      }\n      // send correction\n      let sentCorrection = false;\n      const request = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n      request.record = Libp2pRecord.deserialize(fixupRec);\n      for await (const event of this.network.sendRequest(from, request, options)) {\n        if (event.name === 'PEER_RESPONSE' && event.record != null && uint8ArrayEquals(event.record.value, Libp2pRecord.deserialize(fixupRec).value)) {\n          sentCorrection = true;\n        }\n        yield event;\n      }\n      if (!sentCorrection) {\n        yield queryErrorEvent({\n          from,\n          error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID')\n        });\n      }\n      this.log.error('Failed error correcting entry');\n    }\n  }\n  /**\n   * Store the given key/value pair in the DHT\n   */\n  async *put(key, value, options = {}) {\n    this.log('put key %b value %b', key, value);\n    // create record in the dht format\n    const record = createPutRecord(key, value);\n    // store the record locally\n    const dsKey = bufferToRecordKey(key);\n    this.log(`storing record for key ${dsKey.toString()}`);\n    await this.components.datastore.put(dsKey, record.subarray());\n    // put record to the closest peers\n    yield* pipe(this.peerRouting.getClosestPeers(key, {\n      signal: options.signal\n    }), source => map(source, event => {\n      return async () => {\n        if (event.name !== 'FINAL_PEER') {\n          return [event];\n        }\n        const events = [];\n        const msg = new Message(MESSAGE_TYPE.PUT_VALUE, key, 0);\n        msg.record = Libp2pRecord.deserialize(record);\n        this.log('send put to %p', event.peer.id);\n        for await (const putEvent of this.network.sendRequest(event.peer.id, msg, options)) {\n          events.push(putEvent);\n          if (putEvent.name !== 'PEER_RESPONSE') {\n            continue;\n          }\n          if (!(putEvent.record != null && uint8ArrayEquals(putEvent.record.value, Libp2pRecord.deserialize(record).value))) {\n            events.push(queryErrorEvent({\n              from: event.peer.id,\n              error: new CodeError('value not put correctly', 'ERR_PUT_VALUE_INVALID')\n            }));\n          }\n        }\n        return events;\n      };\n    }), source => parallel(source, {\n      ordered: false,\n      concurrency: ALPHA\n    }), async function* (source) {\n      for await (const events of source) {\n        yield* events;\n      }\n    });\n  }\n  /**\n   * Get the value to the given key\n   */\n  async *get(key, options = {}) {\n    this.log('get %b', key);\n    const vals = [];\n    for await (const event of this.getMany(key, options)) {\n      if (event.name === 'VALUE') {\n        vals.push(event);\n      }\n      yield event;\n    }\n    if (vals.length === 0) {\n      return;\n    }\n    const records = vals.map(v => v.value);\n    let i = 0;\n    try {\n      i = bestRecord(this.selectors, key, records);\n    } catch (err) {\n      // Assume the first record if no selector available\n      if (err.code !== 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY') {\n        throw err;\n      }\n    }\n    const best = records[i];\n    this.log('GetValue %b %b', key, best);\n    if (best == null) {\n      throw new CodeError('best value was not found', 'ERR_NOT_FOUND');\n    }\n    yield* this.sendCorrectionRecord(key, vals, best, options);\n    yield vals[i];\n  }\n  /**\n   * Get the `n` values to the given key without sorting\n   */\n  async *getMany(key, options = {}) {\n    this.log('getMany values for %b', key);\n    try {\n      const localRec = await this.getLocal(key);\n      yield valueEvent({\n        value: localRec.value,\n        from: this.components.peerId\n      });\n    } catch (err) {\n      this.log('error getting local value for %b', key, err);\n    }\n    const id = await convertBuffer(key);\n    const rtp = this.routingTable.closestPeers(id);\n    this.log('found %d peers in routing table', rtp.length);\n    const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    const getValueQuery = async function* ({\n      peer,\n      signal\n    }) {\n      for await (const event of self.peerRouting.getValueOrPeers(peer, key, {\n        signal\n      })) {\n        yield event;\n        if (event.name === 'PEER_RESPONSE' && event.record != null) {\n          yield valueEvent({\n            from: peer,\n            value: event.record.value\n          });\n        }\n      }\n    };\n    // we have peers, lets send the actual query to them\n    yield* this.queryManager.run(key, rtp, getValueQuery, options);\n  }\n}","map":{"version":3,"names":["CodeError","equals","uint8ArrayEquals","Libp2pRecord","verifyRecord","bestRecord","parallel","map","valueEvent","queryErrorEvent","Message","MESSAGE_TYPE","pipe","ALPHA","createPutRecord","convertBuffer","bufferToRecordKey","logger","ContentFetching","constructor","components","init","validators","selectors","peerRouting","queryManager","routingTable","network","lan","log","putLocal","key","rec","dsKey","datastore","put","getLocal","raw","get","deserialize","sendCorrectionRecord","vals","best","options","fixupRec","value","from","peerId","toString","subarray","err","error","sentCorrection","request","PUT_VALUE","record","event","sendRequest","name","getClosestPeers","signal","source","events","msg","peer","id","putEvent","push","ordered","concurrency","getMany","length","records","v","i","code","localRec","rtp","closestPeers","self","getValueQuery","getValueOrPeers","run"],"sources":["../../../src/content-fetching/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}