{"ast":null,"code":"import { objectToCamel } from './lib/object-to-camel.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { configure } from './lib/configure.js';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id(options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    const output = {\n      ...objectToCamel(data)\n    };\n    output.id = peerIdFromString(output.id);\n    if (output.addresses) {\n      output.addresses = output.addresses.map(( /** @type {string} */ma) => multiaddr(ma));\n    }\n\n    // @ts-expect-error server output is not typed\n    return output;\n  }\n  return id;\n});","map":{"version":3,"names":["objectToCamel","multiaddr","configure","toUrlSearchParams","peerIdFromString","createId","api","id","options","res","post","signal","searchParams","arg","peerId","toString","undefined","headers","data","json","output","addresses","map","ma"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/id.js"],"sourcesContent":["import { objectToCamel } from './lib/object-to-camel.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { configure } from './lib/configure.js'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\nexport const createId = configure(api => {\n  /**\n   * @type {RootAPI[\"id\"]}\n   */\n  async function id (options = {}) {\n    const res = await api.post('id', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: options.peerId ? options.peerId.toString() : undefined,\n        ...options\n      }),\n      headers: options.headers\n    })\n    const data = await res.json()\n\n    const output = {\n      ...objectToCamel(data)\n    }\n\n    output.id = peerIdFromString(output.id)\n\n    if (output.addresses) {\n      output.addresses = output.addresses.map((/** @type {string} */ ma) => multiaddr(ma))\n    }\n\n    // @ts-expect-error server output is not typed\n    return output\n  }\n  return id\n})\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,0BAA0B;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AACnD,SAASC,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,iBAAiB,QAAQ,+BAA+B;AACjE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGH,SAAS,CAACI,GAAG,IAAI;EACvC;AACF;AACA;EACE,eAAeC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/B,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,IAAI,EAAE;MAC/BC,MAAM,EAAEH,OAAO,CAACG,MAAM;MACtBC,YAAY,EAAET,iBAAiB,CAAC;QAC9BU,GAAG,EAAEL,OAAO,CAACM,MAAM,GAAGN,OAAO,CAACM,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAGC,SAAS;QAC3D,GAAGR;MACL,CAAC,CAAC;MACFS,OAAO,EAAET,OAAO,CAACS;IACnB,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,CAAC;IAE7B,MAAMC,MAAM,GAAG;MACb,GAAGpB,aAAa,CAACkB,IAAI;IACvB,CAAC;IAEDE,MAAM,CAACb,EAAE,GAAGH,gBAAgB,CAACgB,MAAM,CAACb,EAAE,CAAC;IAEvC,IAAIa,MAAM,CAACC,SAAS,EAAE;MACpBD,MAAM,CAACC,SAAS,GAAGD,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,EAAC,qBAAsBC,EAAE,KAAKtB,SAAS,CAACsB,EAAE,CAAC,CAAC;IACtF;;IAEA;IACA,OAAOH,MAAM;EACf;EACA,OAAOb,EAAE;AACX,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}