{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nvar interlaceUtils = require('./interlace');\nvar pixelBppMap = {\n  1: {\n    // L\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 0xff\n  },\n  2: {\n    // LA\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 1\n  },\n  3: {\n    // RGB\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 0xff\n  },\n  4: {\n    // RGBA\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3\n  }\n};\nfunction bitRetriever(data, depth) {\n  var leftOver = [];\n  var i = 0;\n  function split() {\n    if (i === data.length) {\n      throw new Error('Ran out of data');\n    }\n    var byte = data[i];\n    i++;\n    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n    switch (depth) {\n      default:\n        throw new Error('unrecognised depth');\n      case 16:\n        byte2 = data[i];\n        i++;\n        leftOver.push((byte << 8) + byte2);\n        break;\n      case 4:\n        byte2 = byte & 0x0f;\n        byte1 = byte >> 4;\n        leftOver.push(byte1, byte2);\n        break;\n      case 2:\n        byte4 = byte & 3;\n        byte3 = byte >> 2 & 3;\n        byte2 = byte >> 4 & 3;\n        byte1 = byte >> 6 & 3;\n        leftOver.push(byte1, byte2, byte3, byte4);\n        break;\n      case 1:\n        byte8 = byte & 1;\n        byte7 = byte >> 1 & 1;\n        byte6 = byte >> 2 & 1;\n        byte5 = byte >> 3 & 1;\n        byte4 = byte >> 4 & 1;\n        byte3 = byte >> 5 & 1;\n        byte2 = byte >> 6 & 1;\n        byte1 = byte >> 7 & 1;\n        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n        break;\n    }\n  }\n  return {\n    get: function (count) {\n      while (leftOver.length < count) {\n        split();\n      }\n      var returner = leftOver.slice(0, count);\n      leftOver = leftOver.slice(count);\n      return returner;\n    },\n    resetAfterLine: function () {\n      leftOver.length = 0;\n    },\n    end: function () {\n      if (i !== data.length) {\n        throw new Error('extra data found');\n      }\n    }\n  };\n}\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) {\n  // eslint-disable-line max-params\n  var imageWidth = image.width;\n  var imageHeight = image.height;\n  var imagePass = image.index;\n  for (var y = 0; y < imageHeight; y++) {\n    for (var x = 0; x < imageWidth; x++) {\n      var pxPos = getPxPos(x, y, imagePass);\n      for (var i = 0; i < 4; i++) {\n        var idx = pixelBppMap[bpp][i];\n        if (i === data.length) {\n          throw new Error('Ran out of data');\n        }\n        pxData[pxPos + i] = idx !== 0xff ? data[idx + rawPos] : 0xff;\n      }\n      rawPos += bpp; //eslint-disable-line no-param-reassign\n    }\n  }\n\n  return rawPos;\n}\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) {\n  // eslint-disable-line max-params\n  var imageWidth = image.width;\n  var imageHeight = image.height;\n  var imagePass = image.index;\n  for (var y = 0; y < imageHeight; y++) {\n    for (var x = 0; x < imageWidth; x++) {\n      var pixelData = bits.get(bpp);\n      var pxPos = getPxPos(x, y, imagePass);\n      for (var i = 0; i < 4; i++) {\n        var idx = pixelBppMap[bpp][i];\n        pxData[pxPos + i] = idx !== 0xff ? pixelData[idx] : maxBit;\n      }\n    }\n    bits.resetAfterLine();\n  }\n}\nexports.dataToBitMap = function (data, bitmapInfo) {\n  var width = bitmapInfo.width;\n  var height = bitmapInfo.height;\n  var depth = bitmapInfo.depth;\n  var bpp = bitmapInfo.bpp;\n  var interlace = bitmapInfo.interlace;\n  if (depth !== 8) {\n    var bits = bitRetriever(data, depth);\n  }\n  var pxData;\n  if (depth <= 8) {\n    pxData = new Buffer(width * height * 4);\n  } else {\n    pxData = new Uint16Array(width * height * 4);\n  }\n  var maxBit = Math.pow(2, depth) - 1;\n  var rawPos = 0;\n  var images;\n  var getPxPos;\n  if (interlace) {\n    images = interlaceUtils.getImagePasses(width, height);\n    getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n  } else {\n    var nonInterlacedPxPos = 0;\n    getPxPos = function () {\n      var returner = nonInterlacedPxPos;\n      nonInterlacedPxPos += 4;\n      return returner;\n    };\n    images = [{\n      width: width,\n      height: height\n    }];\n  }\n  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {\n    if (depth === 8) {\n      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n    } else {\n      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n    }\n  }\n  if (depth === 8) {\n    if (rawPos !== data.length) {\n      throw new Error('extra data found');\n    }\n  } else {\n    bits.end();\n  }\n  return pxData;\n};","map":{"version":3,"names":["require","interlaceUtils","pixelBppMap","bitRetriever","data","depth","leftOver","i","split","length","Error","byte","byte8","byte7","byte6","byte5","byte4","byte3","byte2","byte1","push","get","count","returner","slice","resetAfterLine","end","mapImage8Bit","image","pxData","getPxPos","bpp","rawPos","imageWidth","width","imageHeight","height","imagePass","index","y","x","pxPos","idx","mapImageCustomBit","bits","maxBit","pixelData","exports","dataToBitMap","bitmapInfo","interlace","Buffer","Uint16Array","Math","pow","images","getImagePasses","getInterlaceIterator","nonInterlacedPxPos","imageIndex"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/pngjs-nozlib@1.0.0/node_modules/pngjs-nozlib/lib/bitmapper.js"],"sourcesContent":["'use strict';\n\nvar interlaceUtils = require('./interlace');\n\nvar pixelBppMap = {\n  1: { // L\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 0xff\n  },\n  2: { // LA\n    0: 0,\n    1: 0,\n    2: 0,\n    3: 1\n  },\n  3: { // RGB\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 0xff\n  },\n  4: { // RGBA\n    0: 0,\n    1: 1,\n    2: 2,\n    3: 3\n  }\n};\n\nfunction bitRetriever(data, depth) {\n\n  var leftOver = [];\n  var i = 0;\n\n  function split() {\n    if (i === data.length) {\n      throw new Error('Ran out of data');\n    }\n    var byte = data[i];\n    i++;\n    var byte8, byte7, byte6, byte5, byte4, byte3, byte2, byte1;\n    switch (depth) {\n      default:\n        throw new Error('unrecognised depth');\n      case 16:\n        byte2 = data[i];\n        i++;\n        leftOver.push(((byte << 8) + byte2));\n        break;\n      case 4:\n        byte2 = byte & 0x0f;\n        byte1 = byte >> 4;\n        leftOver.push(byte1, byte2);\n        break;\n      case 2:\n        byte4 = byte & 3;\n        byte3 = byte >> 2 & 3;\n        byte2 = byte >> 4 & 3;\n        byte1 = byte >> 6 & 3;\n        leftOver.push(byte1, byte2, byte3, byte4);\n        break;\n      case 1:\n        byte8 = byte & 1;\n        byte7 = byte >> 1 & 1;\n        byte6 = byte >> 2 & 1;\n        byte5 = byte >> 3 & 1;\n        byte4 = byte >> 4 & 1;\n        byte3 = byte >> 5 & 1;\n        byte2 = byte >> 6 & 1;\n        byte1 = byte >> 7 & 1;\n        leftOver.push(byte1, byte2, byte3, byte4, byte5, byte6, byte7, byte8);\n        break;\n    }\n  }\n\n  return {\n    get: function(count) {\n      while (leftOver.length < count) {\n        split();\n      }\n      var returner = leftOver.slice(0, count);\n      leftOver = leftOver.slice(count);\n      return returner;\n    },\n    resetAfterLine: function() {\n      leftOver.length = 0;\n    },\n    end: function() {\n      if (i !== data.length) {\n        throw new Error('extra data found');\n      }\n    }\n  };\n}\n\nfunction mapImage8Bit(image, pxData, getPxPos, bpp, data, rawPos) { // eslint-disable-line max-params\n  var imageWidth = image.width;\n  var imageHeight = image.height;\n  var imagePass = image.index;\n  for (var y = 0; y < imageHeight; y++) {\n    for (var x = 0; x < imageWidth; x++) {\n      var pxPos = getPxPos(x, y, imagePass);\n\n      for (var i = 0; i < 4; i++) {\n        var idx = pixelBppMap[bpp][i];\n        if (i === data.length) {\n          throw new Error('Ran out of data');\n        }\n        pxData[pxPos + i] = idx !== 0xff ? data[idx + rawPos] : 0xff;\n      }\n      rawPos += bpp; //eslint-disable-line no-param-reassign\n    }\n  }\n  return rawPos;\n}\n\nfunction mapImageCustomBit(image, pxData, getPxPos, bpp, bits, maxBit) { // eslint-disable-line max-params\n  var imageWidth = image.width;\n  var imageHeight = image.height;\n  var imagePass = image.index;\n  for (var y = 0; y < imageHeight; y++) {\n    for (var x = 0; x < imageWidth; x++) {\n      var pixelData = bits.get(bpp);\n      var pxPos = getPxPos(x, y, imagePass);\n\n      for (var i = 0; i < 4; i++) {\n        var idx = pixelBppMap[bpp][i];\n        pxData[pxPos + i] = idx !== 0xff ? pixelData[idx] : maxBit;\n      }\n    }\n    bits.resetAfterLine();\n  }\n}\n\nexports.dataToBitMap = function(data, bitmapInfo) {\n\n  var width = bitmapInfo.width;\n  var height = bitmapInfo.height;\n  var depth = bitmapInfo.depth;\n  var bpp = bitmapInfo.bpp;\n  var interlace = bitmapInfo.interlace;\n\n  if (depth !== 8) {\n    var bits = bitRetriever(data, depth);\n  }\n  var pxData;\n  if (depth <= 8) {\n    pxData = new Buffer(width * height * 4);\n  }\n  else {\n    pxData = new Uint16Array(width * height * 4);\n  }\n  var maxBit = Math.pow(2, depth) - 1;\n  var rawPos = 0;\n  var images;\n  var getPxPos;\n\n  if (interlace) {\n    images = interlaceUtils.getImagePasses(width, height);\n    getPxPos = interlaceUtils.getInterlaceIterator(width, height);\n  }\n  else {\n    var nonInterlacedPxPos = 0;\n    getPxPos = function() {\n      var returner = nonInterlacedPxPos;\n      nonInterlacedPxPos += 4;\n      return returner;\n    };\n    images = [{ width: width, height: height }];\n  }\n\n  for (var imageIndex = 0; imageIndex < images.length; imageIndex++) {\n    if (depth === 8) {\n      rawPos = mapImage8Bit(images[imageIndex], pxData, getPxPos, bpp, data, rawPos);\n    }\n    else {\n      mapImageCustomBit(images[imageIndex], pxData, getPxPos, bpp, bits, maxBit);\n    }\n  }\n  if (depth === 8) {\n    if (rawPos !== data.length) {\n      throw new Error('extra data found');\n    }\n  }\n  else {\n    bits.end();\n  }\n\n  return pxData;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}