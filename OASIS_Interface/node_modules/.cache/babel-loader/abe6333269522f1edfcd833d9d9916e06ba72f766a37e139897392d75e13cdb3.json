{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package binary provides functions for encoding and decoding numbers in byte arrays.\n */\nvar int_1 = require(\"@stablelib/int\");\n// TODO(dchest): add asserts for correct value ranges and array offsets.\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset + 0] << 8 | array[offset + 1]) << 16 >> 16;\n}\nexports.readInt16BE = readInt16BE;\n/**\n * Reads 2 bytes from array starting at offset as big-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset + 0] << 8 | array[offset + 1]) >>> 0;\n}\nexports.readUint16BE = readUint16BE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * signed 16-bit integer and returns it.\n */\nfunction readInt16LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset + 1] << 8 | array[offset]) << 16 >> 16;\n}\nexports.readInt16LE = readInt16LE;\n/**\n * Reads 2 bytes from array starting at offset as little-endian\n * unsigned 16-bit integer and returns it.\n */\nfunction readUint16LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset + 1] << 8 | array[offset]) >>> 0;\n}\nexports.readUint16LE = readUint16LE;\n/**\n * Writes 2-byte big-endian representation of 16-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16BE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(2);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  out[offset + 0] = value >>> 8;\n  out[offset + 1] = value >>> 0;\n  return out;\n}\nexports.writeUint16BE = writeUint16BE;\nexports.writeInt16BE = writeUint16BE;\n/**\n * Writes 2-byte little-endian representation of 16-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 2-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint16LE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(2);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  out[offset + 0] = value >>> 0;\n  out[offset + 1] = value >>> 8;\n  return out;\n}\nexports.writeUint16LE = writeUint16LE;\nexports.writeInt16LE = writeUint16LE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3];\n}\nexports.readInt32BE = readInt32BE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset] << 24 | array[offset + 1] << 16 | array[offset + 2] << 8 | array[offset + 3]) >>> 0;\n}\nexports.readUint32BE = readUint32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * signed 32-bit integer and returns it.\n */\nfunction readInt32LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset];\n}\nexports.readInt32LE = readInt32LE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * unsigned 32-bit integer and returns it.\n */\nfunction readUint32LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  return (array[offset + 3] << 24 | array[offset + 2] << 16 | array[offset + 1] << 8 | array[offset]) >>> 0;\n}\nexports.readUint32LE = readUint32LE;\n/**\n * Writes 4-byte big-endian representation of 32-bit unsigned\n * value to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32BE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(4);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  out[offset + 0] = value >>> 24;\n  out[offset + 1] = value >>> 16;\n  out[offset + 2] = value >>> 8;\n  out[offset + 3] = value >>> 0;\n  return out;\n}\nexports.writeUint32BE = writeUint32BE;\nexports.writeInt32BE = writeUint32BE;\n/**\n * Writes 4-byte little-endian representation of 32-bit unsigned\n * value to array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint32LE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(4);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  out[offset + 0] = value >>> 0;\n  out[offset + 1] = value >>> 8;\n  out[offset + 2] = value >>> 16;\n  out[offset + 3] = value >>> 24;\n  return out;\n}\nexports.writeUint32LE = writeUint32LE;\nexports.writeInt32LE = writeUint32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var hi = readInt32BE(array, offset);\n  var lo = readInt32BE(array, offset + 4);\n  return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;\n}\nexports.readInt64BE = readInt64BE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var hi = readUint32BE(array, offset);\n  var lo = readUint32BE(array, offset + 4);\n  return hi * 0x100000000 + lo;\n}\nexports.readUint64BE = readUint64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * signed 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports exact\n * numbers in range -9007199254740991 to 9007199254740991.\n * If the number stored in the byte array is outside this range,\n * the result is not exact.\n */\nfunction readInt64LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var lo = readInt32LE(array, offset);\n  var hi = readInt32LE(array, offset + 4);\n  return hi * 0x100000000 + lo - (lo >> 31) * 0x100000000;\n}\nexports.readInt64LE = readInt64LE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * unsigned 64-bit integer and returns it.\n *\n * IMPORTANT: due to JavaScript limitation, supports values up to 2^53-1.\n */\nfunction readUint64LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var lo = readUint32LE(array, offset);\n  var hi = readUint32LE(array, offset + 4);\n  return hi * 0x100000000 + lo;\n}\nexports.readUint64LE = readUint64LE;\n/**\n * Writes 8-byte big-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64BE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  writeUint32BE(value / 0x100000000 >>> 0, out, offset);\n  writeUint32BE(value >>> 0, out, offset + 4);\n  return out;\n}\nexports.writeUint64BE = writeUint64BE;\nexports.writeInt64BE = writeUint64BE;\n/**\n * Writes 8-byte little-endian representation of 64-bit unsigned\n * value to byte array starting at offset.\n *\n * Due to JavaScript limitation, supports values up to 2^53-1.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeUint64LE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  writeUint32LE(value >>> 0, out, offset);\n  writeUint32LE(value / 0x100000000 >>> 0, out, offset + 4);\n  return out;\n}\nexports.writeUint64LE = writeUint64LE;\nexports.writeInt64LE = writeUint64LE;\n/**\n * Reads bytes from array starting at offset as big-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintBE(bitLength, array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  // TODO(dchest): implement support for bitLengths non-divisible by 8\n  if (bitLength % 8 !== 0) {\n    throw new Error(\"readUintBE supports only bitLengths divisible by 8\");\n  }\n  if (bitLength / 8 > array.length - offset) {\n    throw new Error(\"readUintBE: array is too short for the given bitLength\");\n  }\n  var result = 0;\n  var mul = 1;\n  for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n    result += array[i] * mul;\n    mul *= 256;\n  }\n  return result;\n}\nexports.readUintBE = readUintBE;\n/**\n * Reads bytes from array starting at offset as little-endian\n * unsigned bitLen-bit integer and returns it.\n *\n * Supports bit lengths divisible by 8, up to 48.\n */\nfunction readUintLE(bitLength, array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  // TODO(dchest): implement support for bitLengths non-divisible by 8\n  if (bitLength % 8 !== 0) {\n    throw new Error(\"readUintLE supports only bitLengths divisible by 8\");\n  }\n  if (bitLength / 8 > array.length - offset) {\n    throw new Error(\"readUintLE: array is too short for the given bitLength\");\n  }\n  var result = 0;\n  var mul = 1;\n  for (var i = offset; i < offset + bitLength / 8; i++) {\n    result += array[i] * mul;\n    mul *= 256;\n  }\n  return result;\n}\nexports.readUintLE = readUintLE;\n/**\n * Writes a big-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintBE(bitLength, value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(bitLength / 8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  // TODO(dchest): implement support for bitLengths non-divisible by 8\n  if (bitLength % 8 !== 0) {\n    throw new Error(\"writeUintBE supports only bitLengths divisible by 8\");\n  }\n  if (!int_1.isSafeInteger(value)) {\n    throw new Error(\"writeUintBE value must be an integer\");\n  }\n  var div = 1;\n  for (var i = bitLength / 8 + offset - 1; i >= offset; i--) {\n    out[i] = value / div & 0xff;\n    div *= 256;\n  }\n  return out;\n}\nexports.writeUintBE = writeUintBE;\n/**\n * Writes a little-endian representation of bitLen-bit unsigned\n * value to array starting at offset.\n *\n * Supports bit lengths divisible by 8, up to 48.\n *\n * If byte array is not given, creates a new one.\n *\n * Returns the output byte array.\n */\nfunction writeUintLE(bitLength, value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(bitLength / 8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  // TODO(dchest): implement support for bitLengths non-divisible by 8\n  if (bitLength % 8 !== 0) {\n    throw new Error(\"writeUintLE supports only bitLengths divisible by 8\");\n  }\n  if (!int_1.isSafeInteger(value)) {\n    throw new Error(\"writeUintLE value must be an integer\");\n  }\n  var div = 1;\n  for (var i = offset; i < offset + bitLength / 8; i++) {\n    out[i] = value / div & 0xff;\n    div *= 256;\n  }\n  return out;\n}\nexports.writeUintLE = writeUintLE;\n/**\n * Reads 4 bytes from array starting at offset as big-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  return view.getFloat32(offset);\n}\nexports.readFloat32BE = readFloat32BE;\n/**\n * Reads 4 bytes from array starting at offset as little-endian\n * 32-bit floating-point number and returns it.\n */\nfunction readFloat32LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  return view.getFloat32(offset, true);\n}\nexports.readFloat32LE = readFloat32LE;\n/**\n * Reads 8 bytes from array starting at offset as big-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64BE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  return view.getFloat64(offset);\n}\nexports.readFloat64BE = readFloat64BE;\n/**\n * Reads 8 bytes from array starting at offset as little-endian\n * 64-bit floating-point number (\"double\") and returns it.\n */\nfunction readFloat64LE(array, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n  return view.getFloat64(offset, true);\n}\nexports.readFloat64LE = readFloat64LE;\n/**\n * Writes 4-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32BE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(4);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n  view.setFloat32(offset, value);\n  return out;\n}\nexports.writeFloat32BE = writeFloat32BE;\n/**\n * Writes 4-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 4-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat32LE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(4);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n  view.setFloat32(offset, value, true);\n  return out;\n}\nexports.writeFloat32LE = writeFloat32LE;\n/**\n * Writes 8-byte big-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64BE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n  view.setFloat64(offset, value);\n  return out;\n}\nexports.writeFloat64BE = writeFloat64BE;\n/**\n * Writes 8-byte little-endian floating-point representation of value\n * to byte array starting at offset.\n *\n * If byte array is not given, creates a new 8-byte one.\n *\n * Returns the output byte array.\n */\nfunction writeFloat64LE(value, out, offset) {\n  if (out === void 0) {\n    out = new Uint8Array(8);\n  }\n  if (offset === void 0) {\n    offset = 0;\n  }\n  var view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n  view.setFloat64(offset, value, true);\n  return out;\n}\nexports.writeFloat64LE = writeFloat64LE;","map":{"version":3,"names":["require","int_1","readInt16BE","array","offset","exports","readUint16BE","readInt16LE","readUint16LE","writeUint16BE","value","out","Uint8Array","writeInt16BE","writeUint16LE","writeInt16LE","readInt32BE","readUint32BE","readInt32LE","readUint32LE","writeUint32BE","writeInt32BE","writeUint32LE","writeInt32LE","readInt64BE","hi","lo","readUint64BE","readInt64LE","readUint64LE","writeUint64BE","writeInt64BE","writeUint64LE","writeInt64LE","readUintBE","bitLength","Error","length","result","mul","i","readUintLE","writeUintBE","isSafeInteger","div","writeUintLE","readFloat32BE","view","DataView","buffer","byteOffset","byteLength","getFloat32","readFloat32LE","readFloat64BE","getFloat64","readFloat64LE","writeFloat32BE","setFloat32","writeFloat32LE","writeFloat64BE","setFloat64","writeFloat64LE"],"sources":["../binary.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}