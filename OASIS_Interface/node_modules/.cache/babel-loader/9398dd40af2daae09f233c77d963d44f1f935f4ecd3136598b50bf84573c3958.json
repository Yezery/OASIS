{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nimport varint from 'varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * string -> [[str name, str addr]... ]\n */\nexport function stringToStringTuples(str) {\n  const tuples = [];\n  const parts = str.split('/').slice(1); // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return [];\n  }\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = getProtocol(part);\n    if (proto.size === 0) {\n      tuples.push([part]);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    p++; // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    }\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      tuples.push([part,\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      cleanPath(parts.slice(p).join('/'))]);\n      break;\n    }\n    tuples.push([part, parts[p]]);\n  }\n  return tuples;\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nexport function stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    parts.push(proto.name);\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1]);\n    }\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n}\n/**\n * [[str name, str addr]... ] -> [[int code, Uint8Array]... ]\n */\nexport function stringTuplesToTuples(tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup];\n    }\n    const proto = protoFromTuple(tup);\n    if (tup.length > 1) {\n      return [proto.code, convertToBytes(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n/**\n * Convert tuples to string tuples\n *\n * [[int code, Uint8Array]... ] -> [[int code, str addr]... ]\n */\nexport function tuplesToStringTuples(tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    if (tup[1] != null) {\n      return [proto.code, convertToString(proto.code, tup[1])];\n    }\n    return [proto.code];\n  });\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n  return fromBytes(uint8ArrayConcat(tuples.map(tup => {\n    const proto = protoFromTuple(tup);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  })));\n}\n/**\n * For the passed address, return the serialized size\n */\nexport function sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr);\n    return size + (varint.decode.bytes ?? 0);\n  }\n}\nexport function bytesToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.decode.bytes ?? 0;\n    const p = getProtocol(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    }\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n  }\n  return tuples;\n}\n/**\n * Uint8Array -> String\n */\nexport function bytesToString(buf) {\n  const a = bytesToTuples(buf);\n  const b = tuplesToStringTuples(a);\n  return stringTuplesToString(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function stringToBytes(str) {\n  str = cleanPath(str);\n  const a = stringToStringTuples(str);\n  const b = stringTuplesToTuples(a);\n  return tuplesToBytes(b);\n}\n/**\n * String -> Uint8Array\n */\nexport function fromString(str) {\n  return stringToBytes(str);\n}\n/**\n * Uint8Array -> Uint8Array\n */\nexport function fromBytes(buf) {\n  const err = validateBytes(buf);\n  if (err != null) {\n    throw err;\n  }\n  return Uint8Array.from(buf); // copy\n}\n\nexport function validateBytes(buf) {\n  try {\n    bytesToTuples(buf); // try to parse. will throw if breaks\n  } catch (err) {\n    return err;\n  }\n}\nexport function isValidBytes(buf) {\n  return validateBytes(buf) === undefined;\n}\nexport function cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\nexport function ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}\nexport function protoFromTuple(tup) {\n  const proto = getProtocol(tup[0]);\n  return proto;\n}","map":{"version":3,"names":["convertToBytes","convertToString","getProtocol","varint","concat","uint8ArrayConcat","toString","uint8ArrayToString","stringToStringTuples","str","tuples","parts","split","slice","length","p","part","proto","size","push","ParseError","path","cleanPath","join","stringTuplesToString","map","tup","protoFromTuple","name","stringTuplesToTuples","Array","isArray","code","tuplesToStringTuples","tuplesToBytes","fromBytes","buf","Uint8Array","from","encode","sizeForAddr","addr","decode","bytes","bytesToTuples","i","n","bytesToString","a","b","stringToBytes","fromString","err","validateBytes","isValidBytes","undefined","trim","filter","Error"],"sources":["../../src/codec.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}