{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new(options = {}) {\n    let data;\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = new UnixFS({\n          type: 'directory'\n        }).marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    }\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    const cid = CID.createV0(hash);\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    });\n    if (options.preload !== false) {\n      preload(cid);\n    }\n    return cid;\n  }\n  return withTimeoutOption(_new);\n}","map":{"version":3,"names":["dagPB","sha256","UnixFS","withTimeoutOption","CID","createNew","repo","preload","_new","options","data","template","type","marshal","Error","buf","encode","Data","Links","hash","digest","cid","createV0","blocks","put","signal"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/object/new.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC5C;AACF;AACA;EACE,eAAeC,IAAIA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,IAAIC,IAAI;IAER,IAAID,OAAO,CAACE,QAAQ,EAAE;MACpB,IAAIF,OAAO,CAACE,QAAQ,KAAK,YAAY,EAAE;QACrCD,IAAI,GAAI,IAAIR,MAAM,CAAC;UAAEU,IAAI,EAAE;QAAY,CAAC,CAAC,CAAEC,OAAO,CAAC,CAAC;MACtD,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;MACrC;IACF;IAEA,MAAMC,GAAG,GAAGf,KAAK,CAACgB,MAAM,CAAC;MACvBC,IAAI,EAAEP,IAAI;MACVQ,KAAK,EAAE;IACT,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMlB,MAAM,CAACmB,MAAM,CAACL,GAAG,CAAC;IACrC,MAAMM,GAAG,GAAGjB,GAAG,CAACkB,QAAQ,CAACH,IAAI,CAAC;IAE9B,MAAMb,IAAI,CAACiB,MAAM,CAACC,GAAG,CAACH,GAAG,EAAEN,GAAG,EAAE;MAC9BU,MAAM,EAAEhB,OAAO,CAACgB;IAClB,CAAC,CAAC;IAEF,IAAIhB,OAAO,CAACF,OAAO,KAAK,KAAK,EAAE;MAC7BA,OAAO,CAACc,GAAG,CAAC;IACd;IAEA,OAAOA,GAAG;EACZ;EAEA,OAAOlB,iBAAiB,CAACK,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}