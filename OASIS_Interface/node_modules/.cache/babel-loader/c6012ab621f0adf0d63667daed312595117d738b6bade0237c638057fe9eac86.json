{"ast":null,"code":"import { peerIdFromString } from '@libp2p/peer-id';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr\n */\nexport function getPeerAddress(peer) {\n  if (isPeerId(peer)) {\n    return {\n      peerId: peer\n    };\n  }\n  if (isMultiaddr(peer)) {\n    const peerId = peer.getPeerId();\n    return {\n      multiaddr: peer,\n      peerId: peerId == null ? undefined : peerIdFromString(peerId)\n    };\n  }\n  throw errCode(new Error(`${peer} is not a PeerId or a Multiaddr`),\n  // eslint-disable-line @typescript-eslint/restrict-template-expressions\n  codes.ERR_INVALID_MULTIADDR);\n}","map":{"version":3,"names":["peerIdFromString","isMultiaddr","errCode","codes","isPeerId","getPeerAddress","peer","peerId","getPeerId","multiaddr","undefined","Error","ERR_INVALID_MULTIADDR"],"sources":["../../src/get-peer.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,iBAAiB;AAElD,SAASC,WAAW,QAAQ,yBAAyB;AACrD,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,KAAK,QAAQ,aAAa;AACnC,SAASC,QAAQ,QAAQ,2BAA2B;AAGpD;;;AAGA,OAAM,SAAUC,cAAcA,CAAEC,IAAwB;EACtD,IAAIF,QAAQ,CAACE,IAAI,CAAC,EAAE;IAClB,OAAO;MACLC,MAAM,EAAED;KACT;;EAGH,IAAIL,WAAW,CAACK,IAAI,CAAC,EAAE;IACrB,MAAMC,MAAM,GAAGD,IAAI,CAACE,SAAS,EAAE;IAE/B,OAAO;MACLC,SAAS,EAAEH,IAAI;MACfC,MAAM,EAAEA,MAAM,IAAI,IAAI,GAAGG,SAAS,GAAGV,gBAAgB,CAACO,MAAM;KAC7D;;EAGH,MAAML,OAAO,CACX,IAAIS,KAAK,CAAC,GAAGL,IAAI,iCAAiC,CAAC;EAAE;EACrDH,KAAK,CAACS,qBAAqB,CAC5B;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}