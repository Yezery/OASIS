{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Model from \"@/components/3DModelShow/3DModel.vue\";\nimport { getNFTStruct, Buy } from \"@/api/axios/contract\";\nimport { getOnSaleNFTByNFTAddress } from \"@/api/axios/Sale\";\nimport { getSeriesByNFTAddress } from \"@/api/axios/ownerContractLIst\";\n// getNFTStruct,\nexport default {\n  name: \"NFTInf\",\n  components: {\n    Model\n  },\n  data() {\n    return {\n      // ======= vuex\n      saleId: null,\n      modelPath: null,\n      nftName: null,\n      nftAddress: null,\n      tokenId: null,\n      isActive: null,\n      seller: \"\",\n      price: null,\n      // ======== ÂêàÁ∫¶\n      maxmums: 0,\n      symbol: null,\n      currentId: 0,\n      seriesName: null,\n      nftContract: null,\n      // ======== ÈÖçÁΩÆ\n      imgHeight: \"\",\n      bgHeight: \"\",\n      bought: false,\n      isChanging: false,\n      activeTab: \"first\",\n      initModel: null,\n      //ÊñπÊ≥ï\n      isInitModel: false,\n      showFloatingWindow: false,\n      // ======== ÊúçÂä°Âô®\n      onSaleNFTList: [],\n      seriesNFTList: []\n    };\n  },\n  watch: {},\n  mounted() {\n    this.init();\n  },\n  methods: {\n    seeModel(data) {\n      this.initModel = data;\n    },\n    setNewModelPath(path) {\n      this.isInitModel = true;\n      this.modelPath = path;\n      setTimeout(() => {\n        this.initModel();\n      }, 1000);\n    },\n    async getOnSaleNFT() {\n      await getOnSaleNFTByNFTAddress({\n        nftAddress: this.nftAddress\n      }).then(re => {\n        this.onSaleNFTList = re.data.data;\n      });\n    },\n    async getThisSeriesNFT() {\n      await getSeriesByNFTAddress({\n        nftAddress: this.nftAddress\n      }).then(re => {\n        this.seriesNFTList = re.data.data;\n      });\n    },\n    async init() {\n      try {\n        this.NFTInf = this.$store.state.NFTInf;\n        console.log(this.NFTInf);\n        this.saleId = this.NFTInf.saleId;\n        this.modelPath = this.NFTInf.modelPath;\n        this.nftName = this.NFTInf.nftName;\n        this.nftAddress = this.NFTInf.nftAddress;\n        this.tokenId = this.NFTInf.tokenId;\n        this.isActive = this.NFTInf.isActive;\n        this.seller = this.NFTInf.seller;\n        this.price = this.NFTInf.price;\n        await this.getSeriesByNFTAddress();\n        await this.getOnSaleNFT();\n        await getNFTStruct(this.nftAddress).then(re => {\n          this.nftContract = re;\n        });\n        await this.nftContract.methods._currentId().call().then(re => {\n          this.currentId = re;\n        });\n        await this.nftContract.methods.symbol().call().then(re => {\n          this.symbol = re;\n        });\n        await this.nftContract.methods.name().call().then(re => {\n          this.seriesName = re;\n        });\n        await this.nftContract.methods._maximums().call().then(re => {\n          this.maxmums = re;\n        });\n      } catch (error) {\n        console.log(error);\n        this.$router.push(\"/\");\n      }\n    },\n    async Buy() {\n      try {\n        let waitBuyNFT = {\n          isActive: true,\n          nftAddress: this.nftAddress,\n          price: this.price,\n          saleId: Number(this.saleId),\n          ownerAddress: this.seller,\n          tokenId: Number(this.tokenId),\n          symbol: this.symbol,\n          tokenURI: this.modelPath\n        };\n        let isSuccess = false;\n        this.isChanging = true;\n        await Buy(waitBuyNFT).then(re => {\n          isSuccess = re;\n        });\n        if (isSuccess) {\n          this.isChanging = false;\n          this.$notify({\n            title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.bought = true;\n        } else {\n          this.isChanging = false;\n          this.$notify({\n            title: \"ÊÇ®Â∑≤ÁªèÂèñÊ∂àË¥≠‰π∞\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      } catch (error) {\n        console.log(error);\n        this.isChanging = false;\n        this.$notify.error({\n          title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["Model","getNFTStruct","Buy","getOnSaleNFTByNFTAddress","getSeriesByNFTAddress","name","components","data","saleId","modelPath","nftName","nftAddress","tokenId","isActive","seller","price","maxmums","symbol","currentId","seriesName","nftContract","imgHeight","bgHeight","bought","isChanging","activeTab","initModel","isInitModel","showFloatingWindow","onSaleNFTList","seriesNFTList","watch","mounted","init","methods","seeModel","setNewModelPath","path","setTimeout","getOnSaleNFT","then","re","getThisSeriesNFT","NFTInf","$store","state","console","log","_currentId","call","_maximums","error","$router","push","waitBuyNFT","Number","ownerAddress","tokenURI","isSuccess","$notify","title","type","position","offset"],"sources":["src/components/infPage/3DNFTInf.vue"],"sourcesContent":["<template>\n  <div class=\"NFTInfMainBox animate__animated animate__fadeInDown\" v-loading.fullscreen.lock=\"isChanging\" element-loading-text=\"‰∫§ÊòìËøõË°å‰∏≠\" element-loading-spinner=\"el-icon-loading\" element-loading-background=\"rgba(0, 0, 0, 0.8)\">\n    <div class=\"NFTInfMain\" ref=\"NFTInfMain\">\n\n      <div class=\"NFTInfMainBg\">\n        <div class=\"NFTInfBg_backHome\">\n          <el-button icon=\"el-icon-back\" circle @click=\"$router.back(-1)\" />\n        </div>\n        <div class=\"NFTName\">\n          <h1>{{ nftName }}</h1>\n        </div>\n\n        <div class=\"show3DWindow\" ref=\"show3DWindow\" :class=\"{'active': showFloatingWindow}\">\n          <div class=\"show3DBox\">\n            <Model :model-path=\"modelPath\" @initModel=\"seeModel\" />\n          </div>\n        </div>\n\n        <div class=\"Inf\">\n          <div class=\"NFTContract\">\n            <div style=\"text-align: left;margin-bottom: 3%;\">\n              <el-button type=\"success\" plain class=\"Buy\" @click=\"Buy()\" :disabled=\"!$store.state.isconnect || NFTSeller.toUpperCase() == $store.state.currentAddress.toUpperCase() || bought || !NFTIsActive\">\n                <i class=\"el-icon-shopping-cart-1\" /> {{ bought?\"Â∑≤Ë¥≠ÂÖ•\":\"Ë¥≠ÂÖ•\" }}\n              </el-button>\n            </div>\n            <div class=\"NFTSupplyer\">\n              Áî± <span style=\"font-weight: 800;font-size: 1.2vw;\">{{ supplyer }}</span>\n            </div>\n            <div class=\"NFTInf\">\n              <div class=\"NFTCounts\">\n                Á≥ªÂàó<span style=\"font-weight: 800;\">{{ seriesName }}</span> ¬∑\n                ‰ª£Â∏ÅÁ¨¶Âè∑<span style=\"font-weight: 800;\">{{ symbol }}</span> ¬∑\n                ÈôêÈáèÈì∏ÈÄ†<span style=\"font-weight: 800;\">{{ maximums }}</span> ¬∑\n                ÁõÆÂâçÂ∑≤Èì∏ÈÄ†Êï∞Èáè<span style=\"font-weight: 800;\">{{ currentId }}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"selectBox\">\n          <div class=\"selectBox-Button\">\n            <el-tabs v-model=\"activeTab\">\n              <el-tab-pane label=\"Ê≠£Âú®ÂîÆÂçñ\" name=\"first\">\n                <div class=\"SeriesNFT\">\n                  <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 25px;\" v-if=\"onSaleNFTList.length == 0\">\n                    <el-empty description=\"Êó†Âú®ÂîÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in onSaleNFTList\">\n                      <div class=\"NFTInf3D\" :key=\"inf.image\">\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button @click=\"setNewModelPath(inf.ipfsPath)\" type=\"primary\" icon=\"el-icon-video-play\" circle />\n                            </div>\n                            <div class=\"Inf3DLeftBottom\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size: 25px;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div v-if=\"inf.isActive\" class=\"priceBox\">\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div>\n                              <div v-else class=\"priceBox\">\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane label=\"ÊöÇÊú™ÂèëÂîÆ\" name=\"second\">\n                <div class=\"SeriesNFT\">\n                  <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 25px;\" v-if=\"seriesNFTList.filter(inf => !inf.isActive).length == 0\">\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in seriesNFTList.filter(inf => !inf.isActive)\">\n                      <div class=\"NFTInf3D\" :key=\"inf.image\">\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button @click=\"setNewModelPath(inf.ipfsPath)\" type=\"primary\" icon=\"el-icon-video-play\" circle />\n                            </div>\n                            <div class=\"Inf3DLeftBottom\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size: 25px;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div v-if=\"inf.isActive\" class=\"priceBox\">\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div>\n                              <div v-else class=\"priceBox\">\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n              <el-tab-pane label=\"Á≥ªÂàóNFT\" name=\"third\">\n                <div class=\"SeriesNFT\">\n                  <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 25px;\" v-if=\"seriesNFTList.length == 0\">\n                    <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                  </div>\n                  <template v-else>\n                    <template v-for=\"inf in seriesNFTList\">\n                      <div class=\"NFTInf3D\" :key=\"inf.image\">\n                        <div class=\"Inf3D\">\n                          <div class=\"Inf3DLeft\">\n                            <div class=\"Inf3DLeftTop\">\n                              <el-button @click=\"setNewModelPath(inf.ipfsPath)\" type=\"primary\" icon=\"el-icon-video-play\" circle />\n                            </div>\n                            <div class=\"Inf3DLeftBottom\">\n                              <div class=\"TokenID\">\n                                <span style=\"font-size: 20px;\">#{{ inf.tokenId }}</span>\n                              </div>\n                            </div>\n                          </div>\n                          <div class=\"Inf3DRight\">\n                            <div style=\"height: 60%;display: flex;justify-content: center;align-items: center;font-size:  25px;\">\n                              {{ inf.nftName }}\n                            </div>\n                            <div style=\"width: 90%;height: 40%;display: flex;justify-content:space-between;align-items: center;\">\n                              <div v-if=\"inf.isActive\" class=\"priceBox\">\n                                <span class=\"price\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }}</span> ETH\n                              </div>\n                              <div v-else class=\"priceBox\">\n                                <span class=\"price\" />\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </template>\n                  </template>\n                </div>\n              </el-tab-pane>\n            </el-tabs>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Model from \"@/components/3DModelShow/3DModel.vue\";\n  import { getNFTStruct, Buy } from \"@/api/axios/contract\";\n  import { getOnSaleNFTByNFTAddress } from \"@/api/axios/Sale\";\n  import { getSeriesByNFTAddress } from \"@/api/axios/ownerContractLIst\";\n  // getNFTStruct,\n  export default {\n    name: \"NFTInf\",\n    components: {\n      Model,\n    },\n    data() {\n      return {\n        // ======= vuex\n        saleId: null,\n        modelPath: null,\n        nftName: null,\n        nftAddress: null,\n        tokenId: null,\n        isActive: null,\n        seller: \"\",\n        price: null,\n        // ======== ÂêàÁ∫¶\n        maxmums: 0,\n        symbol: null,\n        currentId: 0,\n        seriesName: null,\n        nftContract: null,\n        // ======== ÈÖçÁΩÆ\n        imgHeight: \"\",\n        bgHeight: \"\",\n        bought: false,\n        isChanging: false,\n        activeTab: \"first\",\n        initModel: null, //ÊñπÊ≥ï\n        isInitModel: false,\n        showFloatingWindow: false,\n        // ======== ÊúçÂä°Âô®\n        onSaleNFTList: [],\n        seriesNFTList: [],\n      };\n    },\n    watch: {},\n    mounted() {\n      this.init();\n    },\n\n    methods: {\n      seeModel(data) {\n        this.initModel = data;\n      },\n      setNewModelPath(path) {\n        this.isInitModel = true;\n        this.modelPath = path;\n        setTimeout(() => {\n          this.initModel();\n        }, 1000);\n      },\n      async getOnSaleNFT() {\n        await getOnSaleNFTByNFTAddress({\n          nftAddress: this.nftAddress,\n        }).then((re) => {\n          this.onSaleNFTList = re.data.data;\n        });\n      },\n      async getThisSeriesNFT() {\n        await getSeriesByNFTAddress({\n          nftAddress: this.nftAddress,\n        }).then((re) => {\n          this.seriesNFTList = re.data.data;\n        });\n      },\n      async init() {\n        try {\n          this.NFTInf = this.$store.state.NFTInf;\n          console.log(this.NFTInf);\n          this.saleId = this.NFTInf.saleId\n          this.modelPath = this.NFTInf.modelPath\n          this.nftName = this.NFTInf.nftName\n          this.nftAddress = this.NFTInf.nftAddress\n          this.tokenId = this.NFTInf.tokenId\n          this.isActive = this.NFTInf.isActive\n          this.seller = this.NFTInf.seller\n          this.price = this.NFTInf.price\n\n          await this.getSeriesByNFTAddress();\n          await this.getOnSaleNFT() \n         \n          await getNFTStruct(this.nftAddress).then((re) => {\n            this.nftContract = re;\n          });\n          await this.nftContract.methods\n            ._currentId()\n            .call()\n            .then((re) => {\n              this.currentId = re;\n            });\n          await this.nftContract.methods\n            .symbol()\n            .call()\n            .then((re) => {\n              this.symbol = re;\n            });\n          await this.nftContract.methods\n            .name()\n            .call()\n            .then((re) => {\n              this.seriesName = re;\n            });\n          await this.nftContract.methods\n            ._maximums()\n            .call()\n            .then((re) => {\n              this.maxmums = re;\n            });\n        } catch (error) {\n          console.log(error);\n          this.$router.push(\"/\")\n        }\n      },\n      async Buy() {\n        try {\n         let waitBuyNFT = {\n            isActive: true,\n            nftAddress: this.nftAddress,\n            price: this.price,\n            saleId: Number(this.saleId),\n            ownerAddress: this.seller,\n            tokenId: Number(this.tokenId),\n            symbol: this.symbol,\n            tokenURI: this.modelPath,\n          };\n          let isSuccess = false;\n          this.isChanging = true;\n          await Buy(waitBuyNFT).then((re) => {\n            isSuccess = re;\n          });\n          if (isSuccess) {\n            this.isChanging = false;\n            this.$notify({\n              title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.bought = true;\n          } else {\n            this.isChanging = false;\n            this.$notify({\n              title: \"ÊÇ®Â∑≤ÁªèÂèñÊ∂àË¥≠‰π∞\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        } catch (error) {\n          console.log(error);\n          this.isChanging = false;\n          this.$notify.error({\n            title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/style/components/NFTInf3D.scss\";\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}