{"ast":null,"code":"import { BitswapMessage as Message } from '../message/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport * as CONSTANTS from '../constants.js';\nimport { MsgQueue } from './msg-queue.js';\nimport { logger } from '../utils/index.js';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { trackedMap } from '@libp2p/tracked-map';\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor(peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    });\n    this.wantlist = new Wantlist(stats, libp2p);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries(cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n    });\n    entries.forEach(e => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc));\n        } else {\n          this.wantlist.remove(e.cid);\n        }\n      } else {\n        this._log('adding to wl');\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority);\n      }\n    });\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries);\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler(peerId) {\n    let mq = this.peers.get(peerId.toString());\n    if (mq) {\n      mq.refcnt++;\n      return;\n    }\n    mq = new MsgQueue(this._peerId, peerId, this.network);\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true);\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n    }\n    mq.addMessage(fullwantlist);\n    this.peers.set(peerId.toString(), mq);\n    return mq;\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler(peerId) {\n    const mq = this.peers.get(peerId.toString());\n    if (!mq) {\n      return;\n    }\n    mq.refcnt--;\n    if (mq.refcnt > 0) {\n      return;\n    }\n    this.peers.delete(peerId.toString());\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks(cids, options = {}) {\n    this._addEntries(cids, false);\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids);\n      });\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks(cids) {\n    this._log('unwant blocks: %s', cids.length);\n    this._addEntries(cids, true, true);\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants(cids) {\n    this._log('cancel wants: %s', cids.length);\n    this._addEntries(cids, true);\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers() {\n    return Array.from(this.peers.keys());\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected(peerId) {\n    this._startPeerHandler(peerId);\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected(peerId) {\n    this._stopPeerHandler(peerId);\n  }\n  start() {}\n  stop() {\n    this.peers.forEach(mq => this.disconnected(mq.peerId));\n  }\n}","map":{"version":3,"names":["BitswapMessage","Message","Wantlist","CONSTANTS","MsgQueue","logger","base58btc","trackedMap","WantManager","constructor","peerId","network","stats","libp2p","peers","name","metrics","wantlist","_stats","_peerId","_log","_addEntries","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","toString","remove","add","priority","p","values","addEntries","_startPeerHandler","mq","get","refcnt","fullwantlist","entry","addEntry","addMessage","set","_stopPeerHandler","delete","wantBlocks","options","signal","addEventListener","cancelWants","unwantBlocks","length","connectedPeers","Array","from","keys","connected","disconnected","start","stop"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/want-manager/index.js"],"sourcesContent":["\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport * as CONSTANTS from '../constants.js'\nimport { MsgQueue } from './msg-queue.js'\nimport { logger } from '../utils/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor (peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    })\n    this.wantlist = new Wantlist(stats, libp2p)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toString())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toString(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toString())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toString())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}