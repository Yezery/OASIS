{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { Message } from '../../message/index.js';\nimport { logger } from '@libp2p/logger';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:kad-dht:rpc:handlers:find-node');\nexport class FindNodeHandler {\n  constructor(components, init) {\n    const {\n      peerRouting,\n      lan\n    } = init;\n    this.components = components;\n    this.peerRouting = peerRouting;\n    this.lan = Boolean(lan);\n  }\n  /**\n   * Process `FindNode` DHT messages\n   */\n  async handle(peerId, msg) {\n    log('incoming request from %p for peers closer to %b', peerId, msg.key);\n    let closer = [];\n    if (uint8ArrayEquals(this.components.peerId.toBytes(), msg.key)) {\n      closer = [{\n        id: this.components.peerId,\n        multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code)),\n        protocols: []\n      }];\n    } else {\n      closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId);\n    }\n    closer = closer.map(this.lan ? removePublicAddresses : removePrivateAddresses).filter(({\n      multiaddrs\n    }) => multiaddrs.length);\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n    if (closer.length > 0) {\n      response.closerPeers = closer;\n    } else {\n      log('could not find any peers closer to %b than %p', msg.key, peerId);\n    }\n    return response;\n  }\n}","map":{"version":3,"names":["Message","logger","removePrivateAddresses","removePublicAddresses","equals","uint8ArrayEquals","protocols","log","FindNodeHandler","constructor","components","init","peerRouting","lan","Boolean","handle","peerId","msg","key","closer","toBytes","id","multiaddrs","addressManager","getAddresses","map","ma","decapsulateCode","code","getCloserPeersOffline","filter","length","response","type","Uint8Array","clusterLevel","closerPeers"],"sources":["../../../../src/rpc/handlers/find-node.ts"],"sourcesContent":[null],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SACEC,sBAAsB,EACtBC,qBAAqB,QAChB,gBAAgB;AACvB,SAASC,MAAM,IAAIC,gBAAgB,QAAQ,aAAa;AACxD,SAASC,SAAS,QAAQ,yBAAyB;AAOnD,MAAMC,GAAG,GAAGN,MAAM,CAAC,uCAAuC,CAAC;AAY3D,OAAM,MAAOO,eAAe;EAK1BC,YAAaC,UAAqC,EAAEC,IAAyB;IAC3E,MAAM;MAAEC,WAAW;MAAEC;IAAG,CAAE,GAAGF,IAAI;IAEjC,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACE,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACC,GAAG,GAAGC,OAAO,CAACD,GAAG,CAAC;EACzB;EAEA;;;EAGA,MAAME,MAAMA,CAAEC,MAAc,EAAEC,GAAY;IACxCV,GAAG,CAAC,iDAAiD,EAAES,MAAM,EAAEC,GAAG,CAACC,GAAG,CAAC;IAEvE,IAAIC,MAAM,GAAe,EAAE;IAE3B,IAAId,gBAAgB,CAAC,IAAI,CAACK,UAAU,CAACM,MAAM,CAACI,OAAO,EAAE,EAAEH,GAAG,CAACC,GAAG,CAAC,EAAE;MAC/DC,MAAM,GAAG,CAAC;QACRE,EAAE,EAAE,IAAI,CAACX,UAAU,CAACM,MAAM;QAC1BM,UAAU,EAAE,IAAI,CAACZ,UAAU,CAACa,cAAc,CAACC,YAAY,EAAE,CAACC,GAAG,CAACC,EAAE,IAAIA,EAAE,CAACC,eAAe,CAACrB,SAAS,CAAC,KAAK,CAAC,CAACsB,IAAI,CAAC,CAAC;QAC9GtB,SAAS,EAAE;OACZ,CAAC;KACH,MAAM;MACLa,MAAM,GAAG,MAAM,IAAI,CAACP,WAAW,CAACiB,qBAAqB,CAACZ,GAAG,CAACC,GAAG,EAAEF,MAAM,CAAC;;IAGxEG,MAAM,GAAGA,MAAM,CACZM,GAAG,CAAC,IAAI,CAACZ,GAAG,GAAGV,qBAAqB,GAAGD,sBAAsB,CAAC,CAC9D4B,MAAM,CAAC,CAAC;MAAER;IAAU,CAAE,KAAKA,UAAU,CAACS,MAAM,CAAC;IAEhD,MAAMC,QAAQ,GAAG,IAAIhC,OAAO,CAACiB,GAAG,CAACgB,IAAI,EAAE,IAAIC,UAAU,CAAC,CAAC,CAAC,EAAEjB,GAAG,CAACkB,YAAY,CAAC;IAE3E,IAAIhB,MAAM,CAACY,MAAM,GAAG,CAAC,EAAE;MACrBC,QAAQ,CAACI,WAAW,GAAGjB,MAAM;KAC9B,MAAM;MACLZ,GAAG,CAAC,+CAA+C,EAAEU,GAAG,CAACC,GAAG,EAAEF,MAAM,CAAC;;IAGvE,OAAOgB,QAAQ;EACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}