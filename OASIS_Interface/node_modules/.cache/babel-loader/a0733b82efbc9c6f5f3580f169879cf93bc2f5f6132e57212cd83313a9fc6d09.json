{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\nexport const Data = $root.Data = (() => {\n  /**\n   * Properties of a Data.\n   * @exports IData\n   * @interface IData\n   * @property {Data.DataType} Type Data Type\n   * @property {Uint8Array|null} [Data] Data Data\n   * @property {number|null} [filesize] Data filesize\n   * @property {Array.<number>|null} [blocksizes] Data blocksizes\n   * @property {number|null} [hashType] Data hashType\n   * @property {number|null} [fanout] Data fanout\n   * @property {number|null} [mode] Data mode\n   * @property {IUnixTime|null} [mtime] Data mtime\n   */\n\n  /**\n   * Constructs a new Data.\n   * @exports Data\n   * @classdesc Represents a Data.\n   * @implements IData\n   * @constructor\n   * @param {IData=} [p] Properties to set\n   */\n  function Data(p) {\n    this.blocksizes = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Data Type.\n   * @member {Data.DataType} Type\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.Type = 0;\n\n  /**\n   * Data Data.\n   * @member {Uint8Array} Data\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.Data = $util.newBuffer([]);\n\n  /**\n   * Data filesize.\n   * @member {number} filesize\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Data blocksizes.\n   * @member {Array.<number>} blocksizes\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.blocksizes = $util.emptyArray;\n\n  /**\n   * Data hashType.\n   * @member {number} hashType\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Data fanout.\n   * @member {number} fanout\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * Data mode.\n   * @member {number} mode\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.mode = 0;\n\n  /**\n   * Data mtime.\n   * @member {IUnixTime|null|undefined} mtime\n   * @memberof Data\n   * @instance\n   */\n  Data.prototype.mtime = null;\n\n  /**\n   * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n   * @function encode\n   * @memberof Data\n   * @static\n   * @param {IData} m Data message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Data.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int32(m.Type);\n    if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\")) w.uint32(18).bytes(m.Data);\n    if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\")) w.uint32(24).uint64(m.filesize);\n    if (m.blocksizes != null && m.blocksizes.length) {\n      for (var i = 0; i < m.blocksizes.length; ++i) w.uint32(32).uint64(m.blocksizes[i]);\n    }\n    if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\")) w.uint32(40).uint64(m.hashType);\n    if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\")) w.uint32(48).uint64(m.fanout);\n    if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\")) w.uint32(56).uint32(m.mode);\n    if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\")) $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n    return w;\n  };\n\n  /**\n   * Decodes a Data message from the specified reader or buffer.\n   * @function decode\n   * @memberof Data\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Data} Data\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Data.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Data();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.Type = r.int32();\n          break;\n        case 2:\n          m.Data = r.bytes();\n          break;\n        case 3:\n          m.filesize = r.uint64();\n          break;\n        case 4:\n          if (!(m.blocksizes && m.blocksizes.length)) m.blocksizes = [];\n          if ((t & 7) === 2) {\n            var c2 = r.uint32() + r.pos;\n            while (r.pos < c2) m.blocksizes.push(r.uint64());\n          } else m.blocksizes.push(r.uint64());\n          break;\n        case 5:\n          m.hashType = r.uint64();\n          break;\n        case 6:\n          m.fanout = r.uint64();\n          break;\n        case 7:\n          m.mode = r.uint32();\n          break;\n        case 8:\n          m.mtime = $root.UnixTime.decode(r, r.uint32());\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    if (!m.hasOwnProperty(\"Type\")) throw $util.ProtocolError(\"missing required 'Type'\", {\n      instance: m\n    });\n    return m;\n  };\n\n  /**\n   * Creates a Data message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Data\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Data} Data\n   */\n  Data.fromObject = function fromObject(d) {\n    if (d instanceof $root.Data) return d;\n    var m = new $root.Data();\n    switch (d.Type) {\n      case \"Raw\":\n      case 0:\n        m.Type = 0;\n        break;\n      case \"Directory\":\n      case 1:\n        m.Type = 1;\n        break;\n      case \"File\":\n      case 2:\n        m.Type = 2;\n        break;\n      case \"Metadata\":\n      case 3:\n        m.Type = 3;\n        break;\n      case \"Symlink\":\n      case 4:\n        m.Type = 4;\n        break;\n      case \"HAMTShard\":\n      case 5:\n        m.Type = 5;\n        break;\n    }\n    if (d.Data != null) {\n      if (typeof d.Data === \"string\") $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);else if (d.Data.length) m.Data = d.Data;\n    }\n    if (d.filesize != null) {\n      if ($util.Long) (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;else if (typeof d.filesize === \"string\") m.filesize = parseInt(d.filesize, 10);else if (typeof d.filesize === \"number\") m.filesize = d.filesize;else if (typeof d.filesize === \"object\") m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n    }\n    if (d.blocksizes) {\n      if (!Array.isArray(d.blocksizes)) throw TypeError(\".Data.blocksizes: array expected\");\n      m.blocksizes = [];\n      for (var i = 0; i < d.blocksizes.length; ++i) {\n        if ($util.Long) (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;else if (typeof d.blocksizes[i] === \"string\") m.blocksizes[i] = parseInt(d.blocksizes[i], 10);else if (typeof d.blocksizes[i] === \"number\") m.blocksizes[i] = d.blocksizes[i];else if (typeof d.blocksizes[i] === \"object\") m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n      }\n    }\n    if (d.hashType != null) {\n      if ($util.Long) (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;else if (typeof d.hashType === \"string\") m.hashType = parseInt(d.hashType, 10);else if (typeof d.hashType === \"number\") m.hashType = d.hashType;else if (typeof d.hashType === \"object\") m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n    }\n    if (d.fanout != null) {\n      if ($util.Long) (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;else if (typeof d.fanout === \"string\") m.fanout = parseInt(d.fanout, 10);else if (typeof d.fanout === \"number\") m.fanout = d.fanout;else if (typeof d.fanout === \"object\") m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n    }\n    if (d.mode != null) {\n      m.mode = d.mode >>> 0;\n    }\n    if (d.mtime != null) {\n      if (typeof d.mtime !== \"object\") throw TypeError(\".Data.mtime: object expected\");\n      m.mtime = $root.UnixTime.fromObject(d.mtime);\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a Data message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Data\n   * @static\n   * @param {Data} m Data\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Data.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.arrays || o.defaults) {\n      d.blocksizes = [];\n    }\n    if (o.defaults) {\n      d.Type = o.enums === String ? \"Raw\" : 0;\n      if (o.bytes === String) d.Data = \"\";else {\n        d.Data = [];\n        if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);\n      }\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.filesize = o.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.hashType = o.longs === String ? \"0\" : 0;\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.fanout = o.longs === String ? \"0\" : 0;\n      d.mode = 0;\n      d.mtime = null;\n    }\n    if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n      d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n    }\n    if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n    }\n    if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n      if (typeof m.filesize === \"number\") d.filesize = o.longs === String ? String(m.filesize) : m.filesize;else d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n    }\n    if (m.blocksizes && m.blocksizes.length) {\n      d.blocksizes = [];\n      for (var j = 0; j < m.blocksizes.length; ++j) {\n        if (typeof m.blocksizes[j] === \"number\") d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];else d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n      }\n    }\n    if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n      if (typeof m.hashType === \"number\") d.hashType = o.longs === String ? String(m.hashType) : m.hashType;else d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n    }\n    if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n      if (typeof m.fanout === \"number\") d.fanout = o.longs === String ? String(m.fanout) : m.fanout;else d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n    }\n    if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n      d.mode = m.mode;\n    }\n    if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n      d.mtime = $root.UnixTime.toObject(m.mtime, o);\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Data to JSON.\n   * @function toJSON\n   * @memberof Data\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Data.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  /**\n   * DataType enum.\n   * @name Data.DataType\n   * @enum {number}\n   * @property {number} Raw=0 Raw value\n   * @property {number} Directory=1 Directory value\n   * @property {number} File=2 File value\n   * @property {number} Metadata=3 Metadata value\n   * @property {number} Symlink=4 Symlink value\n   * @property {number} HAMTShard=5 HAMTShard value\n   */\n  Data.DataType = function () {\n    const valuesById = {},\n      values = Object.create(valuesById);\n    values[valuesById[0] = \"Raw\"] = 0;\n    values[valuesById[1] = \"Directory\"] = 1;\n    values[valuesById[2] = \"File\"] = 2;\n    values[valuesById[3] = \"Metadata\"] = 3;\n    values[valuesById[4] = \"Symlink\"] = 4;\n    values[valuesById[5] = \"HAMTShard\"] = 5;\n    return values;\n  }();\n  return Data;\n})();\nexport const UnixTime = $root.UnixTime = (() => {\n  /**\n   * Properties of an UnixTime.\n   * @exports IUnixTime\n   * @interface IUnixTime\n   * @property {number} Seconds UnixTime Seconds\n   * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n   */\n\n  /**\n   * Constructs a new UnixTime.\n   * @exports UnixTime\n   * @classdesc Represents an UnixTime.\n   * @implements IUnixTime\n   * @constructor\n   * @param {IUnixTime=} [p] Properties to set\n   */\n  function UnixTime(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * UnixTime Seconds.\n   * @member {number} Seconds\n   * @memberof UnixTime\n   * @instance\n   */\n  UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n\n  /**\n   * UnixTime FractionalNanoseconds.\n   * @member {number} FractionalNanoseconds\n   * @memberof UnixTime\n   * @instance\n   */\n  UnixTime.prototype.FractionalNanoseconds = 0;\n\n  /**\n   * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n   * @function encode\n   * @memberof UnixTime\n   * @static\n   * @param {IUnixTime} m UnixTime message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  UnixTime.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int64(m.Seconds);\n    if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\")) w.uint32(21).fixed32(m.FractionalNanoseconds);\n    return w;\n  };\n\n  /**\n   * Decodes an UnixTime message from the specified reader or buffer.\n   * @function decode\n   * @memberof UnixTime\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {UnixTime} UnixTime\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  UnixTime.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.UnixTime();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.Seconds = r.int64();\n          break;\n        case 2:\n          m.FractionalNanoseconds = r.fixed32();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    if (!m.hasOwnProperty(\"Seconds\")) throw $util.ProtocolError(\"missing required 'Seconds'\", {\n      instance: m\n    });\n    return m;\n  };\n\n  /**\n   * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof UnixTime\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {UnixTime} UnixTime\n   */\n  UnixTime.fromObject = function fromObject(d) {\n    if (d instanceof $root.UnixTime) return d;\n    var m = new $root.UnixTime();\n    if (d.Seconds != null) {\n      if ($util.Long) (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;else if (typeof d.Seconds === \"string\") m.Seconds = parseInt(d.Seconds, 10);else if (typeof d.Seconds === \"number\") m.Seconds = d.Seconds;else if (typeof d.Seconds === \"object\") m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n    }\n    if (d.FractionalNanoseconds != null) {\n      m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof UnixTime\n   * @static\n   * @param {UnixTime} m UnixTime\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  UnixTime.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, false);\n        d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.Seconds = o.longs === String ? \"0\" : 0;\n      d.FractionalNanoseconds = 0;\n    }\n    if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n      if (typeof m.Seconds === \"number\") d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;else d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n    }\n    if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n      d.FractionalNanoseconds = m.FractionalNanoseconds;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this UnixTime to JSON.\n   * @function toJSON\n   * @memberof UnixTime\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  UnixTime.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return UnixTime;\n})();\nexport const Metadata = $root.Metadata = (() => {\n  /**\n   * Properties of a Metadata.\n   * @exports IMetadata\n   * @interface IMetadata\n   * @property {string|null} [MimeType] Metadata MimeType\n   */\n\n  /**\n   * Constructs a new Metadata.\n   * @exports Metadata\n   * @classdesc Represents a Metadata.\n   * @implements IMetadata\n   * @constructor\n   * @param {IMetadata=} [p] Properties to set\n   */\n  function Metadata(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Metadata MimeType.\n   * @member {string} MimeType\n   * @memberof Metadata\n   * @instance\n   */\n  Metadata.prototype.MimeType = \"\";\n\n  /**\n   * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n   * @function encode\n   * @memberof Metadata\n   * @static\n   * @param {IMetadata} m Metadata message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Metadata.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\")) w.uint32(10).string(m.MimeType);\n    return w;\n  };\n\n  /**\n   * Decodes a Metadata message from the specified reader or buffer.\n   * @function decode\n   * @memberof Metadata\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Metadata} Metadata\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Metadata.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Metadata();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.MimeType = r.string();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Metadata\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Metadata} Metadata\n   */\n  Metadata.fromObject = function fromObject(d) {\n    if (d instanceof $root.Metadata) return d;\n    var m = new $root.Metadata();\n    if (d.MimeType != null) {\n      m.MimeType = String(d.MimeType);\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Metadata\n   * @static\n   * @param {Metadata} m Metadata\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Metadata.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      d.MimeType = \"\";\n    }\n    if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n      d.MimeType = m.MimeType;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Metadata to JSON.\n   * @function toJSON\n   * @memberof Metadata\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Metadata.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Metadata;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Data","p","blocksizes","ks","Object","keys","i","length","prototype","Type","newBuffer","filesize","Long","fromBits","emptyArray","hashType","fanout","mode","mtime","encode","m","w","create","uint32","int32","hasOwnProperty","call","bytes","uint64","UnixTime","fork","ldelim","decode","r","l","c","undefined","len","pos","t","c2","push","skipType","ProtocolError","instance","fromObject","d","base64","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","Array","isArray","TypeError","toObject","o","arrays","defaults","enums","String","n","longs","toString","Number","DataType","slice","j","toJSON","constructor","toJSONOptions","valuesById","values","Seconds","FractionalNanoseconds","int64","fixed32","Metadata","MimeType","string","default"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/ipfs-unixfs@9.0.1/node_modules/ipfs-unixfs/src/unixfs.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-unixfs\"] || ($protobuf.roots[\"ipfs-unixfs\"] = {});\n\nexport const Data = $root.Data = (() => {\n\n    /**\n     * Properties of a Data.\n     * @exports IData\n     * @interface IData\n     * @property {Data.DataType} Type Data Type\n     * @property {Uint8Array|null} [Data] Data Data\n     * @property {number|null} [filesize] Data filesize\n     * @property {Array.<number>|null} [blocksizes] Data blocksizes\n     * @property {number|null} [hashType] Data hashType\n     * @property {number|null} [fanout] Data fanout\n     * @property {number|null} [mode] Data mode\n     * @property {IUnixTime|null} [mtime] Data mtime\n     */\n\n    /**\n     * Constructs a new Data.\n     * @exports Data\n     * @classdesc Represents a Data.\n     * @implements IData\n     * @constructor\n     * @param {IData=} [p] Properties to set\n     */\n    function Data(p) {\n        this.blocksizes = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Data Type.\n     * @member {Data.DataType} Type\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Type = 0;\n\n    /**\n     * Data Data.\n     * @member {Uint8Array} Data\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.Data = $util.newBuffer([]);\n\n    /**\n     * Data filesize.\n     * @member {number} filesize\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data blocksizes.\n     * @member {Array.<number>} blocksizes\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.blocksizes = $util.emptyArray;\n\n    /**\n     * Data hashType.\n     * @member {number} hashType\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data fanout.\n     * @member {number} fanout\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Data mode.\n     * @member {number} mode\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mode = 0;\n\n    /**\n     * Data mtime.\n     * @member {IUnixTime|null|undefined} mtime\n     * @memberof Data\n     * @instance\n     */\n    Data.prototype.mtime = null;\n\n    /**\n     * Encodes the specified Data message. Does not implicitly {@link Data.verify|verify} messages.\n     * @function encode\n     * @memberof Data\n     * @static\n     * @param {IData} m Data message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Data.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int32(m.Type);\n        if (m.Data != null && Object.hasOwnProperty.call(m, \"Data\"))\n            w.uint32(18).bytes(m.Data);\n        if (m.filesize != null && Object.hasOwnProperty.call(m, \"filesize\"))\n            w.uint32(24).uint64(m.filesize);\n        if (m.blocksizes != null && m.blocksizes.length) {\n            for (var i = 0; i < m.blocksizes.length; ++i)\n                w.uint32(32).uint64(m.blocksizes[i]);\n        }\n        if (m.hashType != null && Object.hasOwnProperty.call(m, \"hashType\"))\n            w.uint32(40).uint64(m.hashType);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n            w.uint32(48).uint64(m.fanout);\n        if (m.mode != null && Object.hasOwnProperty.call(m, \"mode\"))\n            w.uint32(56).uint32(m.mode);\n        if (m.mtime != null && Object.hasOwnProperty.call(m, \"mtime\"))\n            $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n        return w;\n    };\n\n    /**\n     * Decodes a Data message from the specified reader or buffer.\n     * @function decode\n     * @memberof Data\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Data} Data\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Data.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Data();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Type = r.int32();\n                break;\n            case 2:\n                m.Data = r.bytes();\n                break;\n            case 3:\n                m.filesize = r.uint64();\n                break;\n            case 4:\n                if (!(m.blocksizes && m.blocksizes.length))\n                    m.blocksizes = [];\n                if ((t & 7) === 2) {\n                    var c2 = r.uint32() + r.pos;\n                    while (r.pos < c2)\n                        m.blocksizes.push(r.uint64());\n                } else\n                    m.blocksizes.push(r.uint64());\n                break;\n            case 5:\n                m.hashType = r.uint64();\n                break;\n            case 6:\n                m.fanout = r.uint64();\n                break;\n            case 7:\n                m.mode = r.uint32();\n                break;\n            case 8:\n                m.mtime = $root.UnixTime.decode(r, r.uint32());\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Type\"))\n            throw $util.ProtocolError(\"missing required 'Type'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates a Data message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Data\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Data} Data\n     */\n    Data.fromObject = function fromObject(d) {\n        if (d instanceof $root.Data)\n            return d;\n        var m = new $root.Data();\n        switch (d.Type) {\n        case \"Raw\":\n        case 0:\n            m.Type = 0;\n            break;\n        case \"Directory\":\n        case 1:\n            m.Type = 1;\n            break;\n        case \"File\":\n        case 2:\n            m.Type = 2;\n            break;\n        case \"Metadata\":\n        case 3:\n            m.Type = 3;\n            break;\n        case \"Symlink\":\n        case 4:\n            m.Type = 4;\n            break;\n        case \"HAMTShard\":\n        case 5:\n            m.Type = 5;\n            break;\n        }\n        if (d.Data != null) {\n            if (typeof d.Data === \"string\")\n                $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);\n            else if (d.Data.length)\n                m.Data = d.Data;\n        }\n        if (d.filesize != null) {\n            if ($util.Long)\n                (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;\n            else if (typeof d.filesize === \"string\")\n                m.filesize = parseInt(d.filesize, 10);\n            else if (typeof d.filesize === \"number\")\n                m.filesize = d.filesize;\n            else if (typeof d.filesize === \"object\")\n                m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n        }\n        if (d.blocksizes) {\n            if (!Array.isArray(d.blocksizes))\n                throw TypeError(\".Data.blocksizes: array expected\");\n            m.blocksizes = [];\n            for (var i = 0; i < d.blocksizes.length; ++i) {\n                if ($util.Long)\n                    (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;\n                else if (typeof d.blocksizes[i] === \"string\")\n                    m.blocksizes[i] = parseInt(d.blocksizes[i], 10);\n                else if (typeof d.blocksizes[i] === \"number\")\n                    m.blocksizes[i] = d.blocksizes[i];\n                else if (typeof d.blocksizes[i] === \"object\")\n                    m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n            }\n        }\n        if (d.hashType != null) {\n            if ($util.Long)\n                (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;\n            else if (typeof d.hashType === \"string\")\n                m.hashType = parseInt(d.hashType, 10);\n            else if (typeof d.hashType === \"number\")\n                m.hashType = d.hashType;\n            else if (typeof d.hashType === \"object\")\n                m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n        }\n        if (d.fanout != null) {\n            if ($util.Long)\n                (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;\n            else if (typeof d.fanout === \"string\")\n                m.fanout = parseInt(d.fanout, 10);\n            else if (typeof d.fanout === \"number\")\n                m.fanout = d.fanout;\n            else if (typeof d.fanout === \"object\")\n                m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n        }\n        if (d.mode != null) {\n            m.mode = d.mode >>> 0;\n        }\n        if (d.mtime != null) {\n            if (typeof d.mtime !== \"object\")\n                throw TypeError(\".Data.mtime: object expected\");\n            m.mtime = $root.UnixTime.fromObject(d.mtime);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Data message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Data\n     * @static\n     * @param {Data} m Data\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Data.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocksizes = [];\n        }\n        if (o.defaults) {\n            d.Type = o.enums === String ? \"Raw\" : 0;\n            if (o.bytes === String)\n                d.Data = \"\";\n            else {\n                d.Data = [];\n                if (o.bytes !== Array)\n                    d.Data = $util.newBuffer(d.Data);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.filesize = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.hashType = o.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.fanout = o.longs === String ? \"0\" : 0;\n            d.mode = 0;\n            d.mtime = null;\n        }\n        if (m.Type != null && m.hasOwnProperty(\"Type\")) {\n            d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n        }\n        if (m.Data != null && m.hasOwnProperty(\"Data\")) {\n            d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n        }\n        if (m.filesize != null && m.hasOwnProperty(\"filesize\")) {\n            if (typeof m.filesize === \"number\")\n                d.filesize = o.longs === String ? String(m.filesize) : m.filesize;\n            else\n                d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n        }\n        if (m.blocksizes && m.blocksizes.length) {\n            d.blocksizes = [];\n            for (var j = 0; j < m.blocksizes.length; ++j) {\n                if (typeof m.blocksizes[j] === \"number\")\n                    d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];\n                else\n                    d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n            }\n        }\n        if (m.hashType != null && m.hasOwnProperty(\"hashType\")) {\n            if (typeof m.hashType === \"number\")\n                d.hashType = o.longs === String ? String(m.hashType) : m.hashType;\n            else\n                d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n            if (typeof m.fanout === \"number\")\n                d.fanout = o.longs === String ? String(m.fanout) : m.fanout;\n            else\n                d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n        }\n        if (m.mode != null && m.hasOwnProperty(\"mode\")) {\n            d.mode = m.mode;\n        }\n        if (m.mtime != null && m.hasOwnProperty(\"mtime\")) {\n            d.mtime = $root.UnixTime.toObject(m.mtime, o);\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Data to JSON.\n     * @function toJSON\n     * @memberof Data\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Data.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * DataType enum.\n     * @name Data.DataType\n     * @enum {number}\n     * @property {number} Raw=0 Raw value\n     * @property {number} Directory=1 Directory value\n     * @property {number} File=2 File value\n     * @property {number} Metadata=3 Metadata value\n     * @property {number} Symlink=4 Symlink value\n     * @property {number} HAMTShard=5 HAMTShard value\n     */\n    Data.DataType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Raw\"] = 0;\n        values[valuesById[1] = \"Directory\"] = 1;\n        values[valuesById[2] = \"File\"] = 2;\n        values[valuesById[3] = \"Metadata\"] = 3;\n        values[valuesById[4] = \"Symlink\"] = 4;\n        values[valuesById[5] = \"HAMTShard\"] = 5;\n        return values;\n    })();\n\n    return Data;\n})();\n\nexport const UnixTime = $root.UnixTime = (() => {\n\n    /**\n     * Properties of an UnixTime.\n     * @exports IUnixTime\n     * @interface IUnixTime\n     * @property {number} Seconds UnixTime Seconds\n     * @property {number|null} [FractionalNanoseconds] UnixTime FractionalNanoseconds\n     */\n\n    /**\n     * Constructs a new UnixTime.\n     * @exports UnixTime\n     * @classdesc Represents an UnixTime.\n     * @implements IUnixTime\n     * @constructor\n     * @param {IUnixTime=} [p] Properties to set\n     */\n    function UnixTime(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * UnixTime Seconds.\n     * @member {number} Seconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n    /**\n     * UnixTime FractionalNanoseconds.\n     * @member {number} FractionalNanoseconds\n     * @memberof UnixTime\n     * @instance\n     */\n    UnixTime.prototype.FractionalNanoseconds = 0;\n\n    /**\n     * Encodes the specified UnixTime message. Does not implicitly {@link UnixTime.verify|verify} messages.\n     * @function encode\n     * @memberof UnixTime\n     * @static\n     * @param {IUnixTime} m UnixTime message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    UnixTime.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        w.uint32(8).int64(m.Seconds);\n        if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, \"FractionalNanoseconds\"))\n            w.uint32(21).fixed32(m.FractionalNanoseconds);\n        return w;\n    };\n\n    /**\n     * Decodes an UnixTime message from the specified reader or buffer.\n     * @function decode\n     * @memberof UnixTime\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {UnixTime} UnixTime\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    UnixTime.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.UnixTime();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.Seconds = r.int64();\n                break;\n            case 2:\n                m.FractionalNanoseconds = r.fixed32();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        if (!m.hasOwnProperty(\"Seconds\"))\n            throw $util.ProtocolError(\"missing required 'Seconds'\", { instance: m });\n        return m;\n    };\n\n    /**\n     * Creates an UnixTime message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof UnixTime\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {UnixTime} UnixTime\n     */\n    UnixTime.fromObject = function fromObject(d) {\n        if (d instanceof $root.UnixTime)\n            return d;\n        var m = new $root.UnixTime();\n        if (d.Seconds != null) {\n            if ($util.Long)\n                (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;\n            else if (typeof d.Seconds === \"string\")\n                m.Seconds = parseInt(d.Seconds, 10);\n            else if (typeof d.Seconds === \"number\")\n                m.Seconds = d.Seconds;\n            else if (typeof d.Seconds === \"object\")\n                m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n        }\n        if (d.FractionalNanoseconds != null) {\n            m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an UnixTime message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof UnixTime\n     * @static\n     * @param {UnixTime} m UnixTime\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    UnixTime.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, false);\n                d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.Seconds = o.longs === String ? \"0\" : 0;\n            d.FractionalNanoseconds = 0;\n        }\n        if (m.Seconds != null && m.hasOwnProperty(\"Seconds\")) {\n            if (typeof m.Seconds === \"number\")\n                d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;\n            else\n                d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n        }\n        if (m.FractionalNanoseconds != null && m.hasOwnProperty(\"FractionalNanoseconds\")) {\n            d.FractionalNanoseconds = m.FractionalNanoseconds;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this UnixTime to JSON.\n     * @function toJSON\n     * @memberof UnixTime\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    UnixTime.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return UnixTime;\n})();\n\nexport const Metadata = $root.Metadata = (() => {\n\n    /**\n     * Properties of a Metadata.\n     * @exports IMetadata\n     * @interface IMetadata\n     * @property {string|null} [MimeType] Metadata MimeType\n     */\n\n    /**\n     * Constructs a new Metadata.\n     * @exports Metadata\n     * @classdesc Represents a Metadata.\n     * @implements IMetadata\n     * @constructor\n     * @param {IMetadata=} [p] Properties to set\n     */\n    function Metadata(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Metadata MimeType.\n     * @member {string} MimeType\n     * @memberof Metadata\n     * @instance\n     */\n    Metadata.prototype.MimeType = \"\";\n\n    /**\n     * Encodes the specified Metadata message. Does not implicitly {@link Metadata.verify|verify} messages.\n     * @function encode\n     * @memberof Metadata\n     * @static\n     * @param {IMetadata} m Metadata message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Metadata.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.MimeType != null && Object.hasOwnProperty.call(m, \"MimeType\"))\n            w.uint32(10).string(m.MimeType);\n        return w;\n    };\n\n    /**\n     * Decodes a Metadata message from the specified reader or buffer.\n     * @function decode\n     * @memberof Metadata\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Metadata} Metadata\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Metadata.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Metadata();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.MimeType = r.string();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Metadata message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Metadata\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Metadata} Metadata\n     */\n    Metadata.fromObject = function fromObject(d) {\n        if (d instanceof $root.Metadata)\n            return d;\n        var m = new $root.Metadata();\n        if (d.MimeType != null) {\n            m.MimeType = String(d.MimeType);\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Metadata message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Metadata\n     * @static\n     * @param {Metadata} m Metadata\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Metadata.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            d.MimeType = \"\";\n        }\n        if (m.MimeType != null && m.hasOwnProperty(\"MimeType\")) {\n            d.MimeType = m.MimeType;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Metadata to JSON.\n     * @function toJSON\n     * @memberof Metadata\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Metadata.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Metadata;\n})();\n\nexport { $root as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}