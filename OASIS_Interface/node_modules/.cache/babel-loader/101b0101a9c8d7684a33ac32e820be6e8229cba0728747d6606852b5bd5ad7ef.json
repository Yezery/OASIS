{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { nanoid } from 'nanoid';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst pathSepS = '/';\nconst pathSepB = new TextEncoder().encode(pathSepS);\nconst pathSep = pathSepB[0];\n/**\n * A Key represents the unique identifier of an object.\n * Our Key scheme is inspired by file systems and Google App Engine key model.\n * Keys are meant to be unique across a system. Keys are hierarchical,\n * incorporating more and more specific namespaces. Thus keys can be deemed\n * 'children' or 'ancestors' of other keys:\n * - `new Key('/Comedy')`\n * - `new Key('/Comedy/MontyPython')`\n * Also, every namespace can be parametrized to embed relevant object\n * information. For example, the Key `name` (most specific namespace) could\n * include the object type:\n * - `new Key('/Comedy/MontyPython/Actor:JohnCleese')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop')`\n * - `new Key('/Comedy/MontyPython/Sketch:CheeseShop/Character:Mousebender')`\n *\n */\nexport class Key {\n  /**\n   * @param {string | Uint8Array} s\n   * @param {boolean} [clean]\n   */\n  constructor(s, clean) {\n    if (typeof s === 'string') {\n      this._buf = uint8ArrayFromString(s);\n    } else if (s instanceof Uint8Array) {\n      this._buf = s;\n    } else {\n      throw new Error('Invalid key, should be String of Uint8Array');\n    }\n    if (clean == null) {\n      clean = true;\n    }\n    if (clean) {\n      this.clean();\n    }\n    if (this._buf.byteLength === 0 || this._buf[0] !== pathSep) {\n      throw new Error('Invalid key');\n    }\n  }\n  /**\n   * Convert to the string representation\n   *\n   * @param {import('uint8arrays/to-string').SupportedEncodings} [encoding='utf8'] - The encoding to use.\n   * @returns {string}\n   */\n  toString(encoding = 'utf8') {\n    return uint8ArrayToString(this._buf, encoding);\n  }\n  /**\n   * Return the Uint8Array representation of the key\n   *\n   * @returns {Uint8Array}\n   */\n  uint8Array() {\n    return this._buf;\n  }\n  /**\n   * Return string representation of the key\n   *\n   * @returns {string}\n   */\n  get [Symbol.toStringTag]() {\n    return `Key(${this.toString()})`;\n  }\n  /**\n   * Constructs a key out of a namespace array.\n   *\n   * @param {Array<string>} list - The array of namespaces\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.withNamespaces(['one', 'two'])\n   * // => Key('/one/two')\n   * ```\n   */\n  static withNamespaces(list) {\n    return new Key(list.join(pathSepS));\n  }\n  /**\n   * Returns a randomly (uuid) generated key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * Key.random()\n   * // => Key('/f98719ea086343f7b71f32ea9d9d521d')\n   * ```\n   */\n  static random() {\n    return new Key(nanoid().replace(/-/g, ''));\n  }\n  /**\n   * @param {*} other\n   */\n  static asKey(other) {\n    if (other instanceof Uint8Array || typeof other === 'string') {\n      // we can create a key from this\n      return new Key(other);\n    }\n    if (typeof other.uint8Array === 'function') {\n      // this is an older version or may have crossed the esm/cjs boundary\n      return new Key(other.uint8Array());\n    }\n    return null;\n  }\n  /**\n   * Cleanup the current key\n   *\n   * @returns {void}\n   */\n  clean() {\n    if (this._buf == null || this._buf.byteLength === 0) {\n      this._buf = pathSepB;\n    }\n    if (this._buf[0] !== pathSep) {\n      const bytes = new Uint8Array(this._buf.byteLength + 1);\n      bytes.fill(pathSep, 0, 1);\n      bytes.set(this._buf, 1);\n      this._buf = bytes;\n    }\n    // normalize does not remove trailing slashes\n    while (this._buf.byteLength > 1 && this._buf[this._buf.byteLength - 1] === pathSep) {\n      this._buf = this._buf.subarray(0, -1);\n    }\n  }\n  /**\n   * Check if the given key is sorted lower than ourself.\n   *\n   * @param {Key} key - The other Key to check against\n   * @returns {boolean}\n   */\n  less(key) {\n    const list1 = this.list();\n    const list2 = key.list();\n    for (let i = 0; i < list1.length; i++) {\n      if (list2.length < i + 1) {\n        return false;\n      }\n      const c1 = list1[i];\n      const c2 = list2[i];\n      if (c1 < c2) {\n        return true;\n      } else if (c1 > c2) {\n        return false;\n      }\n    }\n    return list1.length < list2.length;\n  }\n  /**\n   * Returns the key with all parts in reversed order.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').reverse()\n   * // => Key('/Actor:JohnCleese/MontyPython/Comedy')\n   * ```\n   */\n  reverse() {\n    return Key.withNamespaces(this.list().slice().reverse());\n  }\n  /**\n   * Returns the `namespaces` making up this Key.\n   *\n   * @returns {Array<string>}\n   */\n  namespaces() {\n    return this.list();\n  }\n  /** Returns the \"base\" namespace of this key.\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').baseNamespace()\n   * // => 'Actor:JohnCleese'\n   * ```\n   */\n  baseNamespace() {\n    const ns = this.namespaces();\n    return ns[ns.length - 1];\n  }\n  /**\n   * Returns the `list` representation of this key.\n   *\n   * @returns {Array<string>}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').list()\n   * // => ['Comedy', 'MontyPythong', 'Actor:JohnCleese']\n   * ```\n   */\n  list() {\n    return this.toString().split(pathSepS).slice(1);\n  }\n  /**\n   * Returns the \"type\" of this key (value of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').type()\n   * // => 'Actor'\n   * ```\n   */\n  type() {\n    return namespaceType(this.baseNamespace());\n  }\n  /**\n   * Returns the \"name\" of this key (field of last namespace).\n   *\n   * @returns {string}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').name()\n   * // => 'JohnCleese'\n   * ```\n   */\n  name() {\n    return namespaceValue(this.baseNamespace());\n  }\n  /**\n   * Returns an \"instance\" of this type key (appends value to namespace).\n   *\n   * @param {string} s - The string to append.\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor').instance('JohnClesse')\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  instance(s) {\n    return new Key(this.toString() + ':' + s);\n  }\n  /**\n   * Returns the \"path\" of this key (parent + type).\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython/Actor:JohnCleese').path()\n   * // => Key('/Comedy/MontyPython/Actor')\n   * ```\n   */\n  path() {\n    let p = this.parent().toString();\n    if (!p.endsWith(pathSepS)) {\n      p += pathSepS;\n    }\n    p += this.type();\n    return new Key(p);\n  }\n  /**\n   * Returns the `parent` Key of this Key.\n   *\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key(\"/Comedy/MontyPython/Actor:JohnCleese\").parent()\n   * // => Key(\"/Comedy/MontyPython\")\n   * ```\n   */\n  parent() {\n    const list = this.list();\n    if (list.length === 1) {\n      return new Key(pathSepS);\n    }\n    return new Key(list.slice(0, -1).join(pathSepS));\n  }\n  /**\n   * Returns the `child` Key of this Key.\n   *\n   * @param {Key} key - The child Key to add\n   * @returns {Key}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').child(new Key('Actor:JohnCleese'))\n   * // => Key('/Comedy/MontyPython/Actor:JohnCleese')\n   * ```\n   */\n  child(key) {\n    if (this.toString() === pathSepS) {\n      return key;\n    } else if (key.toString() === pathSepS) {\n      return this;\n    }\n    return new Key(this.toString() + key.toString(), false);\n  }\n  /**\n   * Returns whether this key is a prefix of `other`\n   *\n   * @param {Key} other - The other key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy').isAncestorOf('/Comedy/MontyPython')\n   * // => true\n   * ```\n   */\n  isAncestorOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return other.toString().startsWith(this.toString());\n  }\n  /**\n   * Returns whether this key is a contains another as prefix.\n   *\n   * @param {Key} other - The other Key to test against\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * new Key('/Comedy/MontyPython').isDecendantOf('/Comedy')\n   * // => true\n   * ```\n   */\n  isDecendantOf(other) {\n    if (other.toString() === this.toString()) {\n      return false;\n    }\n    return this.toString().startsWith(other.toString());\n  }\n  /**\n   * Checks if this key has only one namespace.\n   *\n   * @returns {boolean}\n   *\n   */\n  isTopLevel() {\n    return this.list().length === 1;\n  }\n  /**\n   * Concats one or more Keys into one new Key.\n   *\n   * @param {Array<Key>} keys - The array of keys to concatenate\n   * @returns {Key}\n   */\n  concat(...keys) {\n    return Key.withNamespaces([...this.namespaces(), ...flatten(keys.map(key => key.namespaces()))]);\n  }\n}\n/**\n * The first component of a namespace. `foo` in `foo:bar`\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceType(ns) {\n  const parts = ns.split(':');\n  if (parts.length < 2) {\n    return '';\n  }\n  return parts.slice(0, -1).join(':');\n}\n/**\n * The last component of a namespace, `baz` in `foo:bar:baz`.\n *\n * @param {string} ns\n * @returns {string}\n */\nfunction namespaceValue(ns) {\n  const parts = ns.split(':');\n  return parts[parts.length - 1];\n}\n/**\n * Flatten array of arrays (only one level)\n *\n * @template T\n * @param {Array<any>} arr\n * @returns {T[]}\n */\nfunction flatten(arr) {\n  return [].concat(...arr);\n}","map":{"version":3,"names":["nanoid","toString","uint8ArrayToString","fromString","uint8ArrayFromString","pathSepS","pathSepB","TextEncoder","encode","pathSep","Key","constructor","s","clean","_buf","Uint8Array","Error","byteLength","encoding","uint8Array","Symbol","toStringTag","withNamespaces","list","join","random","replace","asKey","other","bytes","fill","set","subarray","less","key","list1","list2","i","length","c1","c2","reverse","slice","namespaces","baseNamespace","ns","split","type","namespaceType","name","namespaceValue","instance","path","p","parent","endsWith","child","isAncestorOf","startsWith","isDecendantOf","isTopLevel","concat","keys","flatten","map","parts","arr"],"sources":["../../src/key.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}