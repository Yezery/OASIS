{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport errCode from 'err-code';\nimport { normalizeCidPath, mapFile } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function* ls(ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath);\n    const pathComponents = legacyPath.split('/');\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]));\n    }\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options);\n    if (file.type === 'file') {\n      yield mapFile(file);\n      return;\n    }\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child);\n      }\n      return;\n    }\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n  }\n  return withTimeoutOption(ls);\n}","map":{"version":3,"names":["exporter","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","createLs","repo","preload","ls","ipfsPath","options","legacyPath","pathComponents","split","parse","ipfsPathOrCid","asCID","file","blocks","type","child","content","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/ls.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,gBAAgB,EAAEC,OAAO,QAAQ,aAAa;AACvD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC3C;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC3C,MAAMC,UAAU,GAAGV,gBAAgB,CAACQ,QAAQ,CAAC;IAC7C,MAAMG,cAAc,GAAGD,UAAU,CAACE,KAAK,CAAC,GAAG,CAAC;IAE5C,IAAIH,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;MAC7BA,OAAO,CAACH,GAAG,CAACU,KAAK,CAACF,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC;IAEA,MAAMG,aAAa,GAAGX,GAAG,CAACY,KAAK,CAACL,UAAU,CAAC,IAAIA,UAAU;IACzD,MAAMM,IAAI,GAAG,MAAMlB,QAAQ,CAACgB,aAAa,EAAET,IAAI,CAACY,MAAM,EAAER,OAAO,CAAC;IAEhE,IAAIO,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;MACxB,MAAMjB,OAAO,CAACe,IAAI,CAAC;MACnB;IACF;IAEA,IAAIA,IAAI,CAACE,IAAI,KAAK,WAAW,EAAE;MAC7B,WAAW,MAAMC,KAAK,IAAIH,IAAI,CAACI,OAAO,CAAC,CAAC,EAAE;QACxC,MAAMnB,OAAO,CAACkB,KAAK,CAAC;MACtB;MAEA;IACF;IAEA,MAAMpB,OAAO,CAAC,IAAIsB,KAAK,CAAE,uBAAsBL,IAAI,CAACE,IAAK,EAAC,CAAC,EAAE,yBAAyB,CAAC;EACzF;EAEA,OAAOhB,iBAAiB,CAACK,EAAE,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}