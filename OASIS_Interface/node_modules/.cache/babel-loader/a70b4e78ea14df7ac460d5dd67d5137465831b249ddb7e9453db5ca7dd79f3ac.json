{"ast":null,"code":"import { createPublish } from './publish.js';\nimport { createResolve } from './resolve.js';\nimport { PubSubAPI } from './pubsub/index.js';\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor({\n    dns,\n    ipns,\n    repo,\n    codecs,\n    peerId,\n    isOnline,\n    keychain,\n    options\n  }) {\n    this.publish = createPublish({\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain\n    });\n    this.resolve = createResolve({\n      dns,\n      ipns,\n      isOnline,\n      options\n    });\n    this.pubsub = new PubSubAPI({\n      ipns,\n      options\n    });\n  }\n}","map":{"version":3,"names":["createPublish","createResolve","PubSubAPI","NameAPI","constructor","dns","ipns","repo","codecs","peerId","isOnline","keychain","options","publish","resolve","pubsub"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/name/index.js"],"sourcesContent":["import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,aAAa,QAAQ,cAAc;AAC5C,SAASC,SAAS,QAAQ,mBAAmB;AAE7C,OAAO,MAAMC,OAAO,CAAC;EACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAAE;IAAEC,GAAG;IAAEC,IAAI;IAAEC,IAAI;IAAEC,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAQ,CAAC,EAAE;IAC7E,IAAI,CAACC,OAAO,GAAGb,aAAa,CAAC;MAAEM,IAAI;MAAEC,IAAI;MAAEC,MAAM;MAAEC,MAAM;MAAEC,QAAQ;MAAEC;IAAS,CAAC,CAAC;IAChF,IAAI,CAACG,OAAO,GAAGb,aAAa,CAAC;MAAEI,GAAG;MAAEC,IAAI;MAAEI,QAAQ;MAAEE;IAAQ,CAAC,CAAC;IAC9D,IAAI,CAACG,MAAM,GAAG,IAAIb,SAAS,CAAC;MAAEI,IAAI;MAAEM;IAAQ,CAAC,CAAC;EAChD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}