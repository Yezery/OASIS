{"ast":null,"code":"/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = codeOrName => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`));\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor(options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {};\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {};\n    this._loadCodec = options.loadCodec || LOAD_CODEC;\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec);\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec(codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`);\n    }\n    this._codecsByName[codec.name] = codec;\n    this._codecsByCode[codec.code] = codec;\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec(codec) {\n    delete this._codecsByName[codec.name];\n    delete this._codecsByCode[codec.code];\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec(code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode;\n    if (table[code]) {\n      return table[code];\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code);\n    if (table[code] == null) {\n      this.addCodec(codec);\n    }\n    return codec;\n  }\n  listCodecs() {\n    return Object.values(this._codecsByName);\n  }\n}","map":{"version":3,"names":["LOAD_CODEC","codeOrName","Promise","reject","Error","Multicodecs","constructor","options","_codecsByName","_codecsByCode","_loadCodec","loadCodec","codec","codecs","addCodec","name","code","removeCodec","getCodec","table","listCodecs","Object","values"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/multicodecs.js"],"sourcesContent":["/**\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('./types').LoadCodecFn} LoadCodecFn\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @type {LoadCodecFn}\n */\nconst LOAD_CODEC = (codeOrName) => Promise.reject(new Error(`No codec found for \"${codeOrName}\"`))\n\nexport class Multicodecs {\n  /**\n   * @param {object} options\n   * @param {LoadCodecFn} [options.loadCodec]\n   * @param {BlockCodec[]} options.codecs\n   */\n  constructor (options) {\n    // Object with current list of active resolvers\n    /** @type {Record<string, BlockCodec>}} */\n    this._codecsByName = {}\n\n    // Object with current list of active resolvers\n    /** @type {Record<number, BlockCodec>}} */\n    this._codecsByCode = {}\n\n    this._loadCodec = options.loadCodec || LOAD_CODEC\n\n    // Enable all supplied codecs\n    for (const codec of options.codecs) {\n      this.addCodec(codec)\n    }\n  }\n\n  /**\n   * Add support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  addCodec (codec) {\n    if (this._codecsByName[codec.name] || this._codecsByCode[codec.code]) {\n      throw new Error(`Resolver already exists for codec \"${codec.name}\"`)\n    }\n\n    this._codecsByName[codec.name] = codec\n    this._codecsByCode[codec.code] = codec\n  }\n\n  /**\n   * Remove support for a block codec\n   *\n   * @param {BlockCodec} codec\n   */\n  removeCodec (codec) {\n    delete this._codecsByName[codec.name]\n    delete this._codecsByCode[codec.code]\n  }\n\n  /**\n   * @param {number | string} code\n   */\n  async getCodec (code) {\n    const table = typeof code === 'string' ? this._codecsByName : this._codecsByCode\n\n    if (table[code]) {\n      return table[code]\n    }\n\n    // If not supported, attempt to dynamically load this codec\n    const codec = await this._loadCodec(code)\n\n    if (table[code] == null) {\n      this.addCodec(codec)\n    }\n\n    return codec\n  }\n\n  listCodecs () {\n    return Object.values(this._codecsByName)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,UAAU,GAAIC,UAAU,IAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAE,uBAAsBH,UAAW,GAAE,CAAC,CAAC;AAElG,OAAO,MAAMI,WAAW,CAAC;EACvB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,OAAO,EAAE;IACpB;IACA;IACA,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;;IAEvB;IACA;IACA,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IAEvB,IAAI,CAACC,UAAU,GAAGH,OAAO,CAACI,SAAS,IAAIX,UAAU;;IAEjD;IACA,KAAK,MAAMY,KAAK,IAAIL,OAAO,CAACM,MAAM,EAAE;MAClC,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC;IACtB;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQA,CAAEF,KAAK,EAAE;IACf,IAAI,IAAI,CAACJ,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,IAAI,IAAI,CAACN,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC,EAAE;MACpE,MAAM,IAAIZ,KAAK,CAAE,sCAAqCQ,KAAK,CAACG,IAAK,GAAE,CAAC;IACtE;IAEA,IAAI,CAACP,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC,GAAGH,KAAK;IACtC,IAAI,CAACH,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC,GAAGJ,KAAK;EACxC;;EAEA;AACF;AACA;AACA;AACA;EACEK,WAAWA,CAAEL,KAAK,EAAE;IAClB,OAAO,IAAI,CAACJ,aAAa,CAACI,KAAK,CAACG,IAAI,CAAC;IACrC,OAAO,IAAI,CAACN,aAAa,CAACG,KAAK,CAACI,IAAI,CAAC;EACvC;;EAEA;AACF;AACA;EACE,MAAME,QAAQA,CAAEF,IAAI,EAAE;IACpB,MAAMG,KAAK,GAAG,OAAOH,IAAI,KAAK,QAAQ,GAAG,IAAI,CAACR,aAAa,GAAG,IAAI,CAACC,aAAa;IAEhF,IAAIU,KAAK,CAACH,IAAI,CAAC,EAAE;MACf,OAAOG,KAAK,CAACH,IAAI,CAAC;IACpB;;IAEA;IACA,MAAMJ,KAAK,GAAG,MAAM,IAAI,CAACF,UAAU,CAACM,IAAI,CAAC;IAEzC,IAAIG,KAAK,CAACH,IAAI,CAAC,IAAI,IAAI,EAAE;MACvB,IAAI,CAACF,QAAQ,CAACF,KAAK,CAAC;IACtB;IAEA,OAAOA,KAAK;EACd;EAEAQ,UAAUA,CAAA,EAAI;IACZ,OAAOC,MAAM,CAACC,MAAM,CAAC,IAAI,CAACd,aAAa,CAAC;EAC1C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}