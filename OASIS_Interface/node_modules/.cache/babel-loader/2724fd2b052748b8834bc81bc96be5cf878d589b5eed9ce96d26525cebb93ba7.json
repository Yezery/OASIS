{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut({\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put(obj, options = {}) {\n    const release = await repo.gcLock.readLock();\n    try {\n      const buf = dagPB.encode(obj);\n      const hash = await sha256.digest(buf);\n      const cid = CID.createV1(dagPB.code, hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n      if (options.preload !== false) {\n        preload(cid);\n      }\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        });\n      }\n      return cid;\n    } finally {\n      release();\n    }\n  }\n  return withTimeoutOption(put);\n}","map":{"version":3,"names":["dagPB","CID","sha256","withTimeoutOption","createPut","repo","preload","put","obj","options","release","gcLock","readLock","buf","encode","hash","digest","cid","createV1","code","blocks","signal","pin","pins","pinRecursively"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/object/put.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,SAASC,GAAG,QAAQ,kBAAkB;AACtC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC5C;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAM,CAACC,QAAQ,CAAC,CAAC;IAE5C,IAAI;MACF,MAAMC,GAAG,GAAGb,KAAK,CAACc,MAAM,CAACN,GAAG,CAAC;MAC7B,MAAMO,IAAI,GAAG,MAAMb,MAAM,CAACc,MAAM,CAACH,GAAG,CAAC;MACrC,MAAMI,GAAG,GAAGhB,GAAG,CAACiB,QAAQ,CAAClB,KAAK,CAACmB,IAAI,EAAEJ,IAAI,CAAC;MAE1C,MAAMV,IAAI,CAACe,MAAM,CAACb,GAAG,CAACU,GAAG,EAAEJ,GAAG,EAAE;QAC9BQ,MAAM,EAAEZ,OAAO,CAACY;MAClB,CAAC,CAAC;MAEF,IAAIZ,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;QAC7BA,OAAO,CAACW,GAAG,CAAC;MACd;MAEA,IAAIR,OAAO,CAACa,GAAG,EAAE;QACf,MAAMjB,IAAI,CAACkB,IAAI,CAACC,cAAc,CAACP,GAAG,EAAE;UAClCI,MAAM,EAAEZ,OAAO,CAACY;QAClB,CAAC,CAAC;MACJ;MAEA,OAAOJ,GAAG;IACZ,CAAC,SAAS;MACRP,OAAO,CAAC,CAAC;IACX;EACF;EAEA,OAAOP,iBAAiB,CAACI,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}