{"ast":null,"code":"import { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createLs } from './ls.js';\nimport { createRm } from './rm.js';\nimport { createRmAll } from './rm-all.js';\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor({\n    codecs,\n    repo\n  }) {\n    const addAll = createAddAll({\n      codecs,\n      repo\n    });\n    this.addAll = addAll;\n    this.add = createAdd({\n      addAll\n    });\n    const rmAll = createRmAll({\n      codecs,\n      repo\n    });\n    this.rmAll = rmAll;\n    this.rm = createRm({\n      rmAll\n    });\n    this.ls = createLs({\n      codecs,\n      repo\n    });\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function* (query, options = {}) {\n        return Promise.reject(new Error('Not implemented'));\n      },\n      // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    };\n  }\n}","map":{"version":3,"names":["createAdd","createAddAll","createLs","createRm","createRmAll","PinAPI","constructor","codecs","repo","addAll","add","rmAll","rm","ls","remote","cid","options","Promise","reject","Error","query","service","name","credentials"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/pin/index.js"],"sourcesContent":["import { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\n\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,UAAU;AACpC,SAASC,YAAY,QAAQ,cAAc;AAC3C,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,QAAQ,QAAQ,SAAS;AAClC,SAASC,WAAW,QAAQ,aAAa;AAEzC,OAAO,MAAMC,MAAM,CAAC;EAClB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAE;IAAEC,MAAM;IAAEC;EAAK,CAAC,EAAE;IAC7B,MAAMC,MAAM,GAAGR,YAAY,CAAC;MAAEM,MAAM;MAAEC;IAAK,CAAC,CAAC;IAC7C,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,GAAG,GAAGV,SAAS,CAAC;MAAES;IAAO,CAAC,CAAC;IAChC,MAAME,KAAK,GAAGP,WAAW,CAAC;MAAEG,MAAM;MAAEC;IAAK,CAAC,CAAC;IAC3C,IAAI,CAACG,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,EAAE,GAAGT,QAAQ,CAAC;MAAEQ;IAAM,CAAC,CAAC;IAC7B,IAAI,CAACE,EAAE,GAAGX,QAAQ,CAAC;MAAEK,MAAM;MAAEC;IAAK,CAAC,CAAC;;IAEpC;IACA,IAAI,CAACM,MAAM,GAAG;MACZJ,GAAG,EAAEA,CAACK,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;MACxEN,EAAE,EAAE,gBAAAA,CAAkBO,KAAK,EAAEJ,OAAO,GAAG,CAAC,CAAC,EAAE;QAAE,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAAC,CAAC;MAAE;MACpGP,EAAE,EAAEA,CAACQ,KAAK,EAAEJ,OAAO,GAAG,CAAC,CAAC,KAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;MACzER,KAAK,EAAEA,CAACS,KAAK,EAAEJ,OAAO,GAAG,CAAC,CAAC,KAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAC5EE,OAAO,EAAE;QACPX,GAAG,EAAEA,CAACY,IAAI,EAAEC,WAAW,KAAKN,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACxEP,EAAE,EAAEA,CAACU,IAAI,EAAEN,OAAO,GAAG,CAAC,CAAC,KAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC,CAAC;QACxE;QACA;QACAN,EAAE,EAAEA,CAACG,OAAO,GAAG,CAAC,CAAC,KAAKC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iBAAiB,CAAC;MACnE;IACF,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}