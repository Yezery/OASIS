{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:add-provider');\nexport class AddProviderHandler {\n  constructor(init) {\n    const {\n      providers\n    } = init;\n    this.providers = providers;\n  }\n  async handle(peerId, msg) {\n    log('start');\n    if (msg.key == null || msg.key.length === 0) {\n      throw new CodeError('Missing key', 'ERR_MISSING_KEY');\n    }\n    let cid;\n    try {\n      // this is actually just the multihash, not the whole CID\n      cid = CID.decode(msg.key);\n    } catch (err) {\n      throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n    }\n    if (msg.providerPeers == null || msg.providerPeers.length === 0) {\n      log.error('no providers found in message');\n    }\n    await Promise.all(msg.providerPeers.map(async pi => {\n      // Ignore providers not from the originator\n      if (!pi.id.equals(peerId)) {\n        log('invalid provider peer %p from %p', pi.id, peerId);\n        return;\n      }\n      if (pi.multiaddrs.length < 1) {\n        log('no valid addresses for provider %p. Ignore', peerId);\n        return;\n      }\n      log('received provider %p for %s (addrs %s)', peerId, cid, pi.multiaddrs.map(m => m.toString()));\n      await this.providers.addProvider(cid, pi.id);\n    }));\n    return undefined;\n  }\n}","map":{"version":3,"names":["CID","CodeError","logger","log","AddProviderHandler","constructor","init","providers","handle","peerId","msg","key","length","cid","decode","err","providerPeers","error","Promise","all","map","pi","id","equals","multiaddrs","m","toString","addProvider","undefined"],"sources":["../../../../src/rpc/handlers/add-provider.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,MAAM,QAAQ,gBAAgB;AAMvC,MAAMC,GAAG,GAAGD,MAAM,CAAC,0CAA0C,CAAC;AAM9D,OAAM,MAAOE,kBAAkB;EAG7BC,YAAaC,IAA4B;IACvC,MAAM;MAAEC;IAAS,CAAE,GAAGD,IAAI;IAC1B,IAAI,CAACC,SAAS,GAAGA,SAAS;EAC5B;EAEA,MAAMC,MAAMA,CAAEC,MAAc,EAAEC,GAAY;IACxCP,GAAG,CAAC,OAAO,CAAC;IAEZ,IAAIO,GAAG,CAACC,GAAG,IAAI,IAAI,IAAID,GAAG,CAACC,GAAG,CAACC,MAAM,KAAK,CAAC,EAAE;MAC3C,MAAM,IAAIX,SAAS,CAAC,aAAa,EAAE,iBAAiB,CAAC;;IAGvD,IAAIY,GAAQ;IACZ,IAAI;MACF;MACAA,GAAG,GAAGb,GAAG,CAACc,MAAM,CAACJ,GAAG,CAACC,GAAG,CAAC;KAC1B,CAAC,OAAOI,GAAQ,EAAE;MACjB,MAAM,IAAId,SAAS,CAAC,aAAa,EAAE,iBAAiB,CAAC;;IAGvD,IAAIS,GAAG,CAACM,aAAa,IAAI,IAAI,IAAIN,GAAG,CAACM,aAAa,CAACJ,MAAM,KAAK,CAAC,EAAE;MAC/DT,GAAG,CAACc,KAAK,CAAC,+BAA+B,CAAC;;IAG5C,MAAMC,OAAO,CAACC,GAAG,CACfT,GAAG,CAACM,aAAa,CAACI,GAAG,CAAC,MAAOC,EAAE,IAAI;MACjC;MACA,IAAI,CAACA,EAAE,CAACC,EAAE,CAACC,MAAM,CAACd,MAAM,CAAC,EAAE;QACzBN,GAAG,CAAC,kCAAkC,EAAEkB,EAAE,CAACC,EAAE,EAAEb,MAAM,CAAC;QACtD;;MAGF,IAAIY,EAAE,CAACG,UAAU,CAACZ,MAAM,GAAG,CAAC,EAAE;QAC5BT,GAAG,CAAC,4CAA4C,EAAEM,MAAM,CAAC;QACzD;;MAGFN,GAAG,CAAC,wCAAwC,EAAEM,MAAM,EAAEI,GAAG,EAAEQ,EAAE,CAACG,UAAU,CAACJ,GAAG,CAAEK,CAAC,IAAKA,CAAC,CAACC,QAAQ,EAAE,CAAC,CAAC;MAElG,MAAM,IAAI,CAACnB,SAAS,CAACoB,WAAW,CAACd,GAAG,EAAEQ,EAAE,CAACC,EAAE,CAAC;IAC9C,CAAC,CAAC,CACH;IAED,OAAOM,SAAS;EAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}