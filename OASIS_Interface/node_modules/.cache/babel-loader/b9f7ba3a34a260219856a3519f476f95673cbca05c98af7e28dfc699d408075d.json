{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, nextFrame, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { getUniformLocations } from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpuResource) {\n    super();\n    // Maps data ids that have a pending read operation, to list of subscribers.\n    this.pendingRead = new WeakMap();\n    // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n    this.pendingDisposal = new WeakSet();\n    // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0;\n    // Accumulated time spent (including blocking) in uploading data to webgl.\n    this.uploadWaitMs = 0;\n    // Accumulated time spent (including blocking in downloading data from webgl.\n    this.downloadWaitMs = 0;\n    // record the last manual GL Flush time.\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let result;\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData;\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n    let buffer = null;\n    let tmpDownloadTarget;\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n    this.pendingRead.set(dataId, []);\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n    // Download the values from the GPU.\n    let vals;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId, options = {}) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = data.map(d => util.decodeString(d));\n        return buffer(t.shape, t.dtype, strings);\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape, t.dtype, data);\n  }\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n    f();\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    query.endMs = util.now();\n    return query;\n  }\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId, force = false) {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n    this.texData.delete(dataId);\n    return true;\n  }\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(inputs, sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD) {\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n  makeOutput(shape, dtype, values) {\n    return engine().makeTensorFromTensorInfo(this.makeTensorInfo(shape, dtype, values), this);\n  }\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null /* customUniformValues */, preventEagerUnpackingOutput);\n  }\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false, customTexShape) {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n      let texData = this.texData.get(input.dataId);\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        }\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n  compileAndRun(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput = false) {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n  getTextureManager() {\n    return this.textureManager;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n        height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking);\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n    return texData.values;\n  }\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n  async checkCompileCompletionAsync() {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p = new Promise(resolve => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n  async checkCompletionAsync_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n  checkCompletion_(binary) {\n    if (this.gpgpu.gl.getProgramParameter(binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(binary.source, this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n}\nMathBackendWebGL.nextDataId = 0;\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","nextFrame","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","getUniformLocations","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpuResource","pendingRead","WeakMap","pendingDisposal","WeakSet","dataRefCount","numBytesInGPU","uploadWaitMs","downloadWaitMs","lastGlFlushTime","warnedAboutMemory","pendingDeletes","disposed","getBool","Error","newGPGPU","gl","binaryCache","gpgpuCreatedLocally","gpgpu","canvas","textureManager","texData","nextDataId","numDataIds","write","values","shape","dtype","checkNumericalProblems","dataId","id","set","usage","UPLOAD","refCount","has","tensorData","get","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","slice","isPacked","program","CLONE","res","runWebGLProgram","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","read","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","texture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","callAndCheck","deleteBuffer","dTypeVals","delete","forEach","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromTensorInfo","Object","assign","bufferSync","t","strings","map","d","decodeString","_a","i","length","num","canBeRepresented","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","getShapeAs3D","output","downloadByteEncodedFloatMatrixFromOutputTexture","texShape","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","inputs","sizeThreshold","every","input","getGPGPUContext","where","condition","warn","condVals","dataSync","packedUnaryOp","x","op","outInfo","compileAndRun","abs","outValues","makeOutput","ABS","makeTensorInfo","isString","encodedValues","encodeString","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","customValues","texSize","assert","shapeAs3D","out","outputDtype","customUniformValues","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","glFlushThreshold","flush","unpacked","getBinary","getTextureManager","dispose","allKeys","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","Uint8ClampedArray","getPackedMatrixTextureShapeWidthHeight","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","mb","toFixed","console","bytesPerElement","checkCompileCompletion","entries","checkCompletion_","checkCompileCompletionAsync","parallelCompilationExtension","checkCompletionAsync_","p","getProgramParameter","COMPLETION_STATUS_KHR","LINK_STATUS","log","getProgramInfoLog","getShaderParameter","fragmentShader","COMPILE_STATUS","logShaderSourceAndInfoLog","source","getShaderInfoLog","uniformLocations","customUniformLocations","infLoc","nanLoc","inShapesLocations","inTexShapesLocations","outShapeLocation","outShapeStridesLocation","outTexShapeLocation","a","Int32Array","Math","round"],"sources":["../../../../../tfjs-backend-webgl/src/backend_webgl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, nextFrame, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {getUniformLocations, GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}): GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromTensorInfo(tmpTarget);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank, D extends DataType>(t: TensorInfo):\n      TensorBuffer<R, D> {\n    const data = this.readSync(t.dataId);\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        const strings = (data as Uint8Array[]).map(d => util.decodeString(d));\n        return buffer(t.shape as ShapeMap[R], t.dtype, strings) as\n            TensorBuffer<R, D>;\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, data as TypedArray) as\n        TensorBuffer<R, D>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') >\n          0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n            kernelMs\n                .map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n                .map(d => `${d.name}: ${d.ms}`)\n                .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromTensorInfo(outInfo);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromTensorInfo(outInfo) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    return engine().makeTensorFromTensorInfo(\n               this.makeTensorInfo(shape, dtype, values), this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    if (!env().get('ENGINE_COMPILE_ONLY')) {\n      gpgpu_math.runProgram(\n          this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    }\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      if (!env().get('ENGINE_COMPILE_ONLY')) {\n        texData.texture = outputTexData.texture;\n        // Once uploaded, don't store the values on cpu.\n        texData.values = null;\n        this.texData.delete(encodedOutputTarget.dataId);\n      } else {\n        this.disposeData(encodedOutputTarget.dataId);\n      }\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n  checkCompileCompletion() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      this.checkCompletion_(binary);\n    }\n  }\n\n  async checkCompileCompletionAsync(): Promise<boolean[]> {\n    const ps = [];\n    if (this.gpgpu.parallelCompilationExtension) {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        ps.push(this.checkCompletionAsync_(binary));\n      }\n      return Promise.all(ps);\n    } else {\n      for (const [, binary] of Object.entries(this.binaryCache)) {\n        const p: Promise<boolean> = new Promise((resolve) => {\n          try {\n            this.checkCompletion_(binary);\n            resolve(true);\n          } catch (error) {\n            throw error;\n          }\n        });\n        ps.push(p);\n      }\n      return Promise.all(ps);\n    }\n  }\n\n  private async checkCompletionAsync_(binary: GPGPUBinary): Promise<boolean> {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram,\n            this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)) {\n      return this.checkCompletion_(binary);\n    } else {\n      await nextFrame();\n      return this.checkCompletionAsync_(binary);\n    }\n  }\n\n  private checkCompletion_(binary: GPGPUBinary): boolean {\n    if (this.gpgpu.gl.getProgramParameter(\n            binary.webGLProgram, this.gpgpu.gl.LINK_STATUS) === false) {\n      console.log(this.gpgpu.gl.getProgramInfoLog(binary.webGLProgram));\n      if (this.gpgpu.gl.getShaderParameter(\n              binary.fragmentShader, this.gpgpu.gl.COMPILE_STATUS) === false) {\n        webgl_util.logShaderSourceAndInfoLog(\n            binary.source,\n            this.gpgpu.gl.getShaderInfoLog(binary.fragmentShader));\n        throw new Error('Failed to compile fragment shader.');\n      }\n      throw new Error('Failed to link vertex and fragment shaders.');\n    }\n    return true;\n  }\n\n  getUniformLocations() {\n    for (const [, binary] of Object.entries(this.binaryCache)) {\n      const {\n        uniformLocations,\n        customUniformLocations,\n        infLoc,\n        nanLoc,\n        inShapesLocations,\n        inTexShapesLocations,\n        outShapeLocation,\n        outShapeStridesLocation,\n        outTexShapeLocation\n      } = getUniformLocations(this.gpgpu, binary.program, binary.webGLProgram);\n      binary.uniformLocations = uniformLocations;\n      binary.customUniformLocations = customUniformLocations;\n      binary.infLoc = infLoc;\n      binary.nanLoc = nanLoc;\n      binary.inShapesLocations = inShapesLocations;\n      binary.inTexShapesLocations = inTexShapesLocations;\n      binary.outShapeLocation = outShapeLocation;\n      binary.outShapeStridesLocation = outShapeStridesLocation;\n      binary.outTexShapeLocation = outTexShapeLocation;\n    }\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}