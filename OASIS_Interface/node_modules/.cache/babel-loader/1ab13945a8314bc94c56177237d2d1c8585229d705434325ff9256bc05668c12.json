{"ast":null,"code":"/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { resolvePath } from '../../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport errCode from 'err-code';\nimport { PinTypes } from 'ipfs-repo/pin-types';\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin(type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  };\n  if (metadata) {\n    output.metadata = metadata;\n  }\n  return output;\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLs({\n  repo,\n  codecs\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"ls\"]}\n   */\n  async function* ls(options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all;\n    if (options.type) {\n      type = options.type;\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE');\n      }\n    }\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false;\n      for await (const {\n        path\n      } of normaliseInput(options.paths)) {\n        const {\n          cid\n        } = await resolvePath(repo, codecs, path);\n        const {\n          reason,\n          pinned,\n          parent,\n          metadata\n        } = await repo.pins.isPinnedWithType(cid, type);\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED');\n        }\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true;\n            yield toPin(reason, cid, metadata);\n            break;\n          default:\n            matched = true;\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata);\n        }\n      }\n      if (!matched) {\n        throw new Error('No match found');\n      }\n      return;\n    }\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata);\n      }\n    }\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid);\n      }\n    }\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const {\n        cid,\n        metadata\n      } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata);\n      }\n    }\n  }\n  return withTimeoutOption(ls);\n}","map":{"version":3,"names":["normaliseInput","resolvePath","withTimeoutOption","errCode","PinTypes","toPin","type","cid","metadata","output","createLs","repo","codecs","ls","options","all","Object","keys","includes","Error","paths","matched","path","reason","pinned","parent","pins","isPinnedWithType","direct","recursive","indirect","recursiveKeys","indirectKeys","directKeys"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/pin/ls.js"],"sourcesContent":["/* eslint max-nested-callbacks: [\"error\", 8] */\n\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport errCode from 'err-code'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n */\n\n/**\n * @param {string} type\n * @param {CID} cid\n * @param {Record<string, any>} [metadata]\n */\nfunction toPin (type, cid, metadata) {\n  /** @type {import('ipfs-core-types/src/pin').LsResult} */\n  const output = {\n    type,\n    cid\n  }\n\n  if (metadata) {\n    output.metadata = metadata\n  }\n\n  return output\n}\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createLs ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"ls\"]}\n   */\n  async function * ls (options = {}) {\n    /** @type {import('ipfs-core-types/src/pin').PinQueryType} */\n    let type = PinTypes.all\n\n    if (options.type) {\n      type = options.type\n\n      if (!Object.keys(PinTypes).includes(type)) {\n        throw errCode(new Error('Invalid pin type'), 'ERR_INVALID_PIN_TYPE')\n      }\n    }\n\n    if (options.paths) {\n      // check the pinned state of specific hashes\n      let matched = false\n\n      for await (const { path } of normaliseInput(options.paths)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { reason, pinned, parent, metadata } = await repo.pins.isPinnedWithType(cid, type)\n\n        if (!pinned) {\n          throw errCode(new Error(`path '${path}' is not pinned`), 'ERR_NOT_PINNED')\n        }\n\n        switch (reason) {\n          case PinTypes.direct:\n          case PinTypes.recursive:\n            matched = true\n            yield toPin(reason, cid, metadata)\n            break\n          default:\n            matched = true\n            yield toPin(`${PinTypes.indirect} through ${parent}`, cid, metadata)\n        }\n      }\n\n      if (!matched) {\n        throw new Error('No match found')\n      }\n\n      return\n    }\n\n    if (type === PinTypes.recursive || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.recursiveKeys()) {\n        yield toPin(PinTypes.recursive, cid, metadata)\n      }\n    }\n\n    if (type === PinTypes.indirect || type === PinTypes.all) {\n      for await (const cid of repo.pins.indirectKeys(options)) {\n        yield toPin(PinTypes.indirect, cid)\n      }\n    }\n\n    if (type === PinTypes.direct || type === PinTypes.all) {\n      for await (const { cid, metadata } of repo.pins.directKeys()) {\n        yield toPin(PinTypes.direct, cid, metadata)\n      }\n    }\n  }\n\n  return withTimeoutOption(ls)\n}\n"],"mappings":"AAAA;;AAEA,SAASA,cAAc,QAAQ,sCAAsC;AACrE,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,OAAOC,OAAO,MAAM,UAAU;AAC9B,SAASC,QAAQ,QAAQ,qBAAqB;;AAE9C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,KAAKA,CAAEC,IAAI,EAAEC,GAAG,EAAEC,QAAQ,EAAE;EACnC;EACA,MAAMC,MAAM,GAAG;IACbH,IAAI;IACJC;EACF,CAAC;EAED,IAAIC,QAAQ,EAAE;IACZC,MAAM,CAACD,QAAQ,GAAGA,QAAQ;EAC5B;EAEA,OAAOC,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CAAE;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAC1C;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC;IACA,IAAIR,IAAI,GAAGF,QAAQ,CAACW,GAAG;IAEvB,IAAID,OAAO,CAACR,IAAI,EAAE;MAChBA,IAAI,GAAGQ,OAAO,CAACR,IAAI;MAEnB,IAAI,CAACU,MAAM,CAACC,IAAI,CAACb,QAAQ,CAAC,CAACc,QAAQ,CAACZ,IAAI,CAAC,EAAE;QACzC,MAAMH,OAAO,CAAC,IAAIgB,KAAK,CAAC,kBAAkB,CAAC,EAAE,sBAAsB,CAAC;MACtE;IACF;IAEA,IAAIL,OAAO,CAACM,KAAK,EAAE;MACjB;MACA,IAAIC,OAAO,GAAG,KAAK;MAEnB,WAAW,MAAM;QAAEC;MAAK,CAAC,IAAItB,cAAc,CAACc,OAAO,CAACM,KAAK,CAAC,EAAE;QAC1D,MAAM;UAAEb;QAAI,CAAC,GAAG,MAAMN,WAAW,CAACU,IAAI,EAAEC,MAAM,EAAEU,IAAI,CAAC;QACrD,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEC,MAAM;UAAEjB;QAAS,CAAC,GAAG,MAAMG,IAAI,CAACe,IAAI,CAACC,gBAAgB,CAACpB,GAAG,EAAED,IAAI,CAAC;QAExF,IAAI,CAACkB,MAAM,EAAE;UACX,MAAMrB,OAAO,CAAC,IAAIgB,KAAK,CAAE,SAAQG,IAAK,iBAAgB,CAAC,EAAE,gBAAgB,CAAC;QAC5E;QAEA,QAAQC,MAAM;UACZ,KAAKnB,QAAQ,CAACwB,MAAM;UACpB,KAAKxB,QAAQ,CAACyB,SAAS;YACrBR,OAAO,GAAG,IAAI;YACd,MAAMhB,KAAK,CAACkB,MAAM,EAAEhB,GAAG,EAAEC,QAAQ,CAAC;YAClC;UACF;YACEa,OAAO,GAAG,IAAI;YACd,MAAMhB,KAAK,CAAE,GAAED,QAAQ,CAAC0B,QAAS,YAAWL,MAAO,EAAC,EAAElB,GAAG,EAAEC,QAAQ,CAAC;QACxE;MACF;MAEA,IAAI,CAACa,OAAO,EAAE;QACZ,MAAM,IAAIF,KAAK,CAAC,gBAAgB,CAAC;MACnC;MAEA;IACF;IAEA,IAAIb,IAAI,KAAKF,QAAQ,CAACyB,SAAS,IAAIvB,IAAI,KAAKF,QAAQ,CAACW,GAAG,EAAE;MACxD,WAAW,MAAM;QAAER,GAAG;QAAEC;MAAS,CAAC,IAAIG,IAAI,CAACe,IAAI,CAACK,aAAa,CAAC,CAAC,EAAE;QAC/D,MAAM1B,KAAK,CAACD,QAAQ,CAACyB,SAAS,EAAEtB,GAAG,EAAEC,QAAQ,CAAC;MAChD;IACF;IAEA,IAAIF,IAAI,KAAKF,QAAQ,CAAC0B,QAAQ,IAAIxB,IAAI,KAAKF,QAAQ,CAACW,GAAG,EAAE;MACvD,WAAW,MAAMR,GAAG,IAAII,IAAI,CAACe,IAAI,CAACM,YAAY,CAAClB,OAAO,CAAC,EAAE;QACvD,MAAMT,KAAK,CAACD,QAAQ,CAAC0B,QAAQ,EAAEvB,GAAG,CAAC;MACrC;IACF;IAEA,IAAID,IAAI,KAAKF,QAAQ,CAACwB,MAAM,IAAItB,IAAI,KAAKF,QAAQ,CAACW,GAAG,EAAE;MACrD,WAAW,MAAM;QAAER,GAAG;QAAEC;MAAS,CAAC,IAAIG,IAAI,CAACe,IAAI,CAACO,UAAU,CAAC,CAAC,EAAE;QAC5D,MAAM5B,KAAK,CAACD,QAAQ,CAACwB,MAAM,EAAErB,GAAG,EAAEC,QAAQ,CAAC;MAC7C;IACF;EACF;EAEA,OAAON,iBAAiB,CAACW,EAAE,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}