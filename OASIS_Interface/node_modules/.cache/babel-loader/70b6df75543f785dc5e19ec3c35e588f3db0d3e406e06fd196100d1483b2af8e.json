{"ast":null,"code":"import batch from 'it-batch';\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function* parallelBatch(source, size = 1) {\n  for await (const tasks of batch(source, size)) {\n    const things = tasks.map(async p => {\n      return await p().then(value => ({\n        ok: true,\n        value\n      }), err => ({\n        ok: false,\n        err\n      }));\n    });\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i];\n      if (result.ok) {\n        yield result.value;\n      } else {\n        throw result.err;\n      }\n    }\n  }\n}","map":{"version":3,"names":["batch","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,KAAK,MAAM,UAAU;AAY5B;;;;;AAKA,eAAe,gBAAiBC,aAAaA,CAAMC,MAAoE,EAAEC,IAAA,GAAe,CAAC;EACvI,WAAW,MAAMC,KAAK,IAAIJ,KAAK,CAACE,MAAM,EAAEC,IAAI,CAAC,EAAE;IAC7C,MAAME,MAAM,GAAyCD,KAAK,CAACE,GAAG,CAC5D,MAAOC,CAAmB,IAAI;MAC5B,OAAO,MAAMA,CAAC,EAAE,CAACC,IAAI,CAACC,KAAK,KAAK;QAAEC,EAAE,EAAE,IAAI;QAAED;MAAK,CAAE,CAAC,EAAEE,GAAG,KAAK;QAAED,EAAE,EAAE,KAAK;QAAEC;MAAG,CAAE,CAAC,CAAC;IACpF,CAAC,CAAC;IAEJ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;MACtC,MAAME,MAAM,GAAG,MAAMT,MAAM,CAACO,CAAC,CAAC;MAE9B,IAAIE,MAAM,CAACJ,EAAE,EAAE;QACb,MAAMI,MAAM,CAACL,KAAK;OACnB,MAAM;QACL,MAAMK,MAAM,CAACH,GAAG;;;;AAIxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}