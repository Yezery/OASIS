{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { allFF, deepEqual } from \"./util.js\";\nexport const IPv4Len = 4;\nexport const IPv6Len = 16;\nexport const maxIPv6Octet = parseInt(\"0xFFFF\", 16);\nexport const ipv4Prefix = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);\nexport function maskIp(ip, mask) {\n  if (mask.length === IPv6Len && ip.length === IPv4Len && allFF(mask, 0, 11)) {\n    mask = mask.slice(12);\n  }\n  if (mask.length === IPv4Len && ip.length === IPv6Len && deepEqual(ip, ipv4Prefix, 0, 11)) {\n    ip = ip.slice(12);\n  }\n  const n = ip.length;\n  if (n != mask.length) {\n    throw new Error(\"Failed to mask ip\");\n  }\n  const out = new Uint8Array(n);\n  for (let i = 0; i < n; i++) {\n    out[i] = ip[i] & mask[i];\n  }\n  return out;\n}\nexport function containsIp(net, ip) {\n  if (typeof ip === \"string\") {\n    ip = parseIP(ip);\n  }\n  if (ip == null) throw new Error(\"Invalid ip\");\n  if (ip.length !== net.network.length) {\n    return false;\n  }\n  for (let i = 0; i < ip.length; i++) {\n    if ((net.network[i] & net.mask[i]) !== (ip[i] & net.mask[i])) {\n      return false;\n    }\n  }\n  return true;\n}\nexport function iPv4FromIPv6(ip) {\n  if (!isIPv4mappedIPv6(ip)) {\n    throw new Error(\"Must have 0xffff prefix\");\n  }\n  return ip.slice(12);\n}\nexport function isIPv4mappedIPv6(ip) {\n  return deepEqual(ip, ipv4Prefix, 0, 11);\n}","map":{"version":3,"names":["parseIP","allFF","deepEqual","IPv4Len","IPv6Len","maxIPv6Octet","parseInt","ipv4Prefix","Uint8Array","maskIp","ip","mask","length","slice","n","Error","out","i","containsIp","net","network","iPv4FromIPv6","isIPv4mappedIPv6"],"sources":["../../src/ip.ts"],"sourcesContent":[null],"mappings":";;;AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,KAAK,EAAEC,SAAS,QAAQ,WAAW;AAE5C,OAAO,MAAMC,OAAO,GAAG,CAAC;AACxB,OAAO,MAAMC,OAAO,GAAG,EAAE;AAEzB,OAAO,MAAMC,YAAY,GAAGC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC;AAClD,OAAO,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CACvC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,GAAG,CACvC,CAAC;AAOF,OAAM,SAAUC,MAAMA,CAACC,EAAc,EAAEC,IAAgB;EACrD,IAAIA,IAAI,CAACC,MAAM,KAAKR,OAAO,IAAIM,EAAE,CAACE,MAAM,KAAKT,OAAO,IAAIF,KAAK,CAACU,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IAC1EA,IAAI,GAAGA,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC;;EAEvB,IACEF,IAAI,CAACC,MAAM,KAAKT,OAAO,IACvBO,EAAE,CAACE,MAAM,KAAKR,OAAO,IACrBF,SAAS,CAACQ,EAAE,EAAEH,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,EAChC;IACAG,EAAE,GAAGA,EAAE,CAACG,KAAK,CAAC,EAAE,CAAC;;EAEnB,MAAMC,CAAC,GAAGJ,EAAE,CAACE,MAAM;EACnB,IAAIE,CAAC,IAAIH,IAAI,CAACC,MAAM,EAAE;IACpB,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;;EAEtC,MAAMC,GAAG,GAAG,IAAIR,UAAU,CAACM,CAAC,CAAC;EAC7B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,CAAC,EAAEG,CAAC,EAAE,EAAE;IAC1BD,GAAG,CAACC,CAAC,CAAC,GAAGP,EAAE,CAACO,CAAC,CAAC,GAAGN,IAAI,CAACM,CAAC,CAAC;;EAE1B,OAAOD,GAAG;AACZ;AAEA,OAAM,SAAUE,UAAUA,CACxBC,GAAa,EACbT,EAAkC;EAElC,IAAI,OAAOA,EAAE,KAAK,QAAQ,EAAE;IAC1BA,EAAE,GAAGV,OAAO,CAACU,EAAE,CAAE;;EAEnB,IAAIA,EAAE,IAAI,IAAI,EAAE,MAAM,IAAIK,KAAK,CAAC,YAAY,CAAC;EAC7C,IAAIL,EAAE,CAACE,MAAM,KAAKO,GAAG,CAACC,OAAO,CAACR,MAAM,EAAE;IACpC,OAAO,KAAK;;EAEd,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,EAAE,CAACE,MAAM,EAAEK,CAAC,EAAE,EAAE;IAClC,IAAI,CAACE,GAAG,CAACC,OAAO,CAACH,CAAC,CAAC,GAAGE,GAAG,CAACR,IAAI,CAACM,CAAC,CAAC,OAAOP,EAAE,CAACO,CAAC,CAAC,GAAGE,GAAG,CAACR,IAAI,CAACM,CAAC,CAAC,CAAC,EAAE;MAC5D,OAAO,KAAK;;;EAGhB,OAAO,IAAI;AACb;AAEA,OAAM,SAAUI,YAAYA,CAACX,EAAc;EACzC,IAAI,CAACY,gBAAgB,CAACZ,EAAE,CAAC,EAAE;IACzB,MAAM,IAAIK,KAAK,CAAC,yBAAyB,CAAC;;EAE5C,OAAOL,EAAE,CAACG,KAAK,CAAC,EAAE,CAAC;AACrB;AAEA,OAAM,SAAUS,gBAAgBA,CAACZ,EAAyB;EACxD,OAAOR,SAAS,CAACQ,EAAE,EAAEH,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC;AACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}