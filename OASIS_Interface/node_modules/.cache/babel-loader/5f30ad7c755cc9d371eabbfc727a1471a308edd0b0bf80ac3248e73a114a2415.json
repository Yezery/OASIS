{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nexport const MIN_NONCE = 0;\n// For performance reasons, the nonce is represented as a JS `number`\n// Although JS `number` can safely represent integers up to 2 ** 53 - 1, we choose to only use\n// 4 bytes to store the data for performance reason.\n// This is a slight deviation from the noise spec, which describes the max nonce as 2 ** 64 - 2\n// The effect is that this implementation will need a new handshake to be performed after fewer messages are exchanged than other implementations with full uint64 nonces.\n// this MAX_NONCE is still a large number of messages, so the practical effect of this is negligible.\nexport const MAX_NONCE = 0xffffffff;\nconst ERR_MAX_NONCE = 'Cipherstate has reached maximum n, a new handshake must be performed';\n/**\n * The nonce is an uint that's increased over time.\n * Maintaining different representations help improve performance.\n */\nexport class Nonce {\n  constructor(n = MIN_NONCE) {\n    this.n = n;\n    this.bytes = new Uint8Array(12);\n    this.view = new DataView(this.bytes.buffer, this.bytes.byteOffset, this.bytes.byteLength);\n    this.view.setUint32(4, n, true);\n  }\n  increment() {\n    this.n++;\n    // Even though we're treating the nonce as 8 bytes, RFC7539 specifies 12 bytes for a nonce.\n    this.view.setUint32(4, this.n, true);\n  }\n  getBytes() {\n    return this.bytes;\n  }\n  getUint64() {\n    return this.n;\n  }\n  assertValue() {\n    if (this.n > MAX_NONCE) {\n      throw new Error(ERR_MAX_NONCE);\n    }\n  }\n}","map":{"version":3,"names":["MIN_NONCE","MAX_NONCE","ERR_MAX_NONCE","Nonce","constructor","n","bytes","Uint8Array","view","DataView","buffer","byteOffset","byteLength","setUint32","increment","getBytes","getUint64","assertValue","Error"],"sources":["../../src/nonce.ts"],"sourcesContent":[null],"mappings":";;;AAEA,OAAO,MAAMA,SAAS,GAAG,CAAC;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,UAAU;AAEnC,MAAMC,aAAa,GAAG,sEAAsE;AAE5F;;;;AAIA,OAAM,MAAOC,KAAK;EAKhBC,YAAaC,CAAC,GAAGL,SAAS;IACxB,IAAI,CAACK,CAAC,GAAGA,CAAC;IACV,IAAI,CAACC,KAAK,GAAG,IAAIC,UAAU,CAAC,EAAE,CAAC;IAC/B,IAAI,CAACC,IAAI,GAAG,IAAIC,QAAQ,CAAC,IAAI,CAACH,KAAK,CAACI,MAAM,EAAE,IAAI,CAACJ,KAAK,CAACK,UAAU,EAAE,IAAI,CAACL,KAAK,CAACM,UAAU,CAAC;IACzF,IAAI,CAACJ,IAAI,CAACK,SAAS,CAAC,CAAC,EAAER,CAAC,EAAE,IAAI,CAAC;EACjC;EAEAS,SAASA,CAAA;IACP,IAAI,CAACT,CAAC,EAAE;IACR;IACA,IAAI,CAACG,IAAI,CAACK,SAAS,CAAC,CAAC,EAAE,IAAI,CAACR,CAAC,EAAE,IAAI,CAAC;EACtC;EAEAU,QAAQA,CAAA;IACN,OAAO,IAAI,CAACT,KAAK;EACnB;EAEAU,SAASA,CAAA;IACP,OAAO,IAAI,CAACX,CAAC;EACf;EAEAY,WAAWA,CAAA;IACT,IAAI,IAAI,CAACZ,CAAC,GAAGJ,SAAS,EAAE;MACtB,MAAM,IAAIiB,KAAK,CAAChB,aAAa,CAAC;;EAElC"},"metadata":{},"sourceType":"module","externalDependencies":[]}