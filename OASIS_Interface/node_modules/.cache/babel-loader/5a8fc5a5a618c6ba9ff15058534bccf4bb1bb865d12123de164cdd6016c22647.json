{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\nexport const Message = $root.Message = (() => {\n  /**\n   * Properties of a Message.\n   * @exports IMessage\n   * @interface IMessage\n   * @property {Message.IWantlist|null} [wantlist] Message wantlist\n   * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n   * @property {Array.<Message.IBlock>|null} [payload] Message payload\n   * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n   * @property {number|null} [pendingBytes] Message pendingBytes\n   */\n\n  /**\n   * Constructs a new Message.\n   * @exports Message\n   * @classdesc Represents a Message.\n   * @implements IMessage\n   * @constructor\n   * @param {IMessage=} [p] Properties to set\n   */\n  function Message(p) {\n    this.blocks = [];\n    this.payload = [];\n    this.blockPresences = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Message wantlist.\n   * @member {Message.IWantlist|null|undefined} wantlist\n   * @memberof Message\n   * @instance\n   */\n  Message.prototype.wantlist = null;\n\n  /**\n   * Message blocks.\n   * @member {Array.<Uint8Array>} blocks\n   * @memberof Message\n   * @instance\n   */\n  Message.prototype.blocks = $util.emptyArray;\n\n  /**\n   * Message payload.\n   * @member {Array.<Message.IBlock>} payload\n   * @memberof Message\n   * @instance\n   */\n  Message.prototype.payload = $util.emptyArray;\n\n  /**\n   * Message blockPresences.\n   * @member {Array.<Message.IBlockPresence>} blockPresences\n   * @memberof Message\n   * @instance\n   */\n  Message.prototype.blockPresences = $util.emptyArray;\n\n  /**\n   * Message pendingBytes.\n   * @member {number} pendingBytes\n   * @memberof Message\n   * @instance\n   */\n  Message.prototype.pendingBytes = 0;\n\n  /**\n   * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n   * @function encode\n   * @memberof Message\n   * @static\n   * @param {IMessage} m Message message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Message.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\")) $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n    if (m.blocks != null && m.blocks.length) {\n      for (var i = 0; i < m.blocks.length; ++i) w.uint32(18).bytes(m.blocks[i]);\n    }\n    if (m.payload != null && m.payload.length) {\n      for (var i = 0; i < m.payload.length; ++i) $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n    }\n    if (m.blockPresences != null && m.blockPresences.length) {\n      for (var i = 0; i < m.blockPresences.length; ++i) $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n    }\n    if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\")) w.uint32(40).int32(m.pendingBytes);\n    return w;\n  };\n\n  /**\n   * Decodes a Message message from the specified reader or buffer.\n   * @function decode\n   * @memberof Message\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Message} Message\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Message.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Message();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          {\n            m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n            break;\n          }\n        case 2:\n          {\n            if (!(m.blocks && m.blocks.length)) m.blocks = [];\n            m.blocks.push(r.bytes());\n            break;\n          }\n        case 3:\n          {\n            if (!(m.payload && m.payload.length)) m.payload = [];\n            m.payload.push($root.Message.Block.decode(r, r.uint32()));\n            break;\n          }\n        case 4:\n          {\n            if (!(m.blockPresences && m.blockPresences.length)) m.blockPresences = [];\n            m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n            break;\n          }\n        case 5:\n          {\n            m.pendingBytes = r.int32();\n            break;\n          }\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a Message message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Message\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Message} Message\n   */\n  Message.fromObject = function fromObject(d) {\n    if (d instanceof $root.Message) return d;\n    var m = new $root.Message();\n    if (d.wantlist != null) {\n      if (typeof d.wantlist !== \"object\") throw TypeError(\".Message.wantlist: object expected\");\n      m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n    }\n    if (d.blocks) {\n      if (!Array.isArray(d.blocks)) throw TypeError(\".Message.blocks: array expected\");\n      m.blocks = [];\n      for (var i = 0; i < d.blocks.length; ++i) {\n        if (typeof d.blocks[i] === \"string\") $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);else if (d.blocks[i].length >= 0) m.blocks[i] = d.blocks[i];\n      }\n    }\n    if (d.payload) {\n      if (!Array.isArray(d.payload)) throw TypeError(\".Message.payload: array expected\");\n      m.payload = [];\n      for (var i = 0; i < d.payload.length; ++i) {\n        if (typeof d.payload[i] !== \"object\") throw TypeError(\".Message.payload: object expected\");\n        m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n      }\n    }\n    if (d.blockPresences) {\n      if (!Array.isArray(d.blockPresences)) throw TypeError(\".Message.blockPresences: array expected\");\n      m.blockPresences = [];\n      for (var i = 0; i < d.blockPresences.length; ++i) {\n        if (typeof d.blockPresences[i] !== \"object\") throw TypeError(\".Message.blockPresences: object expected\");\n        m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n      }\n    }\n    if (d.pendingBytes != null) {\n      m.pendingBytes = d.pendingBytes | 0;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a Message message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Message\n   * @static\n   * @param {Message} m Message\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Message.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.arrays || o.defaults) {\n      d.blocks = [];\n      d.payload = [];\n      d.blockPresences = [];\n    }\n    if (o.defaults) {\n      d.wantlist = null;\n      d.pendingBytes = 0;\n    }\n    if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n      d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n    }\n    if (m.blocks && m.blocks.length) {\n      d.blocks = [];\n      for (var j = 0; j < m.blocks.length; ++j) {\n        d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n      }\n    }\n    if (m.payload && m.payload.length) {\n      d.payload = [];\n      for (var j = 0; j < m.payload.length; ++j) {\n        d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n      }\n    }\n    if (m.blockPresences && m.blockPresences.length) {\n      d.blockPresences = [];\n      for (var j = 0; j < m.blockPresences.length; ++j) {\n        d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n      }\n    }\n    if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n      d.pendingBytes = m.pendingBytes;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Message to JSON.\n   * @function toJSON\n   * @memberof Message\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Message.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  /**\n   * Gets the default type url for Message\n   * @function getTypeUrl\n   * @memberof Message\n   * @static\n   * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n   * @returns {string} The default type url\n   */\n  Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n    if (typeUrlPrefix === undefined) {\n      typeUrlPrefix = \"type.googleapis.com\";\n    }\n    return typeUrlPrefix + \"/Message\";\n  };\n  Message.Wantlist = function () {\n    /**\n     * Properties of a Wantlist.\n     * @memberof Message\n     * @interface IWantlist\n     * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n     * @property {boolean|null} [full] Wantlist full\n     */\n\n    /**\n     * Constructs a new Wantlist.\n     * @memberof Message\n     * @classdesc Represents a Wantlist.\n     * @implements IWantlist\n     * @constructor\n     * @param {Message.IWantlist=} [p] Properties to set\n     */\n    function Wantlist(p) {\n      this.entries = [];\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Wantlist entries.\n     * @member {Array.<Message.Wantlist.IEntry>} entries\n     * @memberof Message.Wantlist\n     * @instance\n     */\n    Wantlist.prototype.entries = $util.emptyArray;\n\n    /**\n     * Wantlist full.\n     * @member {boolean} full\n     * @memberof Message.Wantlist\n     * @instance\n     */\n    Wantlist.prototype.full = false;\n\n    /**\n     * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n     * @function encode\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Message.IWantlist} m Wantlist message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Wantlist.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.entries != null && m.entries.length) {\n        for (var i = 0; i < m.entries.length; ++i) $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n      }\n      if (m.full != null && Object.hasOwnProperty.call(m, \"full\")) w.uint32(16).bool(m.full);\n      return w;\n    };\n\n    /**\n     * Decodes a Wantlist message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.Wantlist\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.Wantlist} Wantlist\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Wantlist.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Message.Wantlist();\n      while (r.pos < c) {\n        var t = r.uint32();\n        switch (t >>> 3) {\n          case 1:\n            {\n              if (!(m.entries && m.entries.length)) m.entries = [];\n              m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n              break;\n            }\n          case 2:\n            {\n              m.full = r.bool();\n              break;\n            }\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n      return m;\n    };\n\n    /**\n     * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.Wantlist} Wantlist\n     */\n    Wantlist.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.Wantlist) return d;\n      var m = new $root.Message.Wantlist();\n      if (d.entries) {\n        if (!Array.isArray(d.entries)) throw TypeError(\".Message.Wantlist.entries: array expected\");\n        m.entries = [];\n        for (var i = 0; i < d.entries.length; ++i) {\n          if (typeof d.entries[i] !== \"object\") throw TypeError(\".Message.Wantlist.entries: object expected\");\n          m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n        }\n      }\n      if (d.full != null) {\n        m.full = Boolean(d.full);\n      }\n      return m;\n    };\n\n    /**\n     * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.Wantlist\n     * @static\n     * @param {Message.Wantlist} m Wantlist\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Wantlist.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n      if (o.arrays || o.defaults) {\n        d.entries = [];\n      }\n      if (o.defaults) {\n        d.full = false;\n      }\n      if (m.entries && m.entries.length) {\n        d.entries = [];\n        for (var j = 0; j < m.entries.length; ++j) {\n          d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n        }\n      }\n      if (m.full != null && m.hasOwnProperty(\"full\")) {\n        d.full = m.full;\n      }\n      return d;\n    };\n\n    /**\n     * Converts this Wantlist to JSON.\n     * @function toJSON\n     * @memberof Message.Wantlist\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Wantlist.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for Wantlist\n     * @function getTypeUrl\n     * @memberof Message.Wantlist\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    Wantlist.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = \"type.googleapis.com\";\n      }\n      return typeUrlPrefix + \"/Message.Wantlist\";\n    };\n\n    /**\n     * WantType enum.\n     * @name Message.Wantlist.WantType\n     * @enum {number}\n     * @property {number} Block=0 Block value\n     * @property {number} Have=1 Have value\n     */\n    Wantlist.WantType = function () {\n      const valuesById = {},\n        values = Object.create(valuesById);\n      values[valuesById[0] = \"Block\"] = 0;\n      values[valuesById[1] = \"Have\"] = 1;\n      return values;\n    }();\n    Wantlist.Entry = function () {\n      /**\n       * Properties of an Entry.\n       * @memberof Message.Wantlist\n       * @interface IEntry\n       * @property {Uint8Array|null} [block] Entry block\n       * @property {number|null} [priority] Entry priority\n       * @property {boolean|null} [cancel] Entry cancel\n       * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n       * @property {boolean|null} [sendDontHave] Entry sendDontHave\n       */\n\n      /**\n       * Constructs a new Entry.\n       * @memberof Message.Wantlist\n       * @classdesc Represents an Entry.\n       * @implements IEntry\n       * @constructor\n       * @param {Message.Wantlist.IEntry=} [p] Properties to set\n       */\n      function Entry(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n\n      /**\n       * Entry block.\n       * @member {Uint8Array} block\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n      Entry.prototype.block = $util.newBuffer([]);\n\n      /**\n       * Entry priority.\n       * @member {number} priority\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n      Entry.prototype.priority = 0;\n\n      /**\n       * Entry cancel.\n       * @member {boolean} cancel\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n      Entry.prototype.cancel = false;\n\n      /**\n       * Entry wantType.\n       * @member {Message.Wantlist.WantType} wantType\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n      Entry.prototype.wantType = 0;\n\n      /**\n       * Entry sendDontHave.\n       * @member {boolean} sendDontHave\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       */\n      Entry.prototype.sendDontHave = false;\n\n      /**\n       * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n       * @function encode\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Entry.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.block != null && Object.hasOwnProperty.call(m, \"block\")) w.uint32(10).bytes(m.block);\n        if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\")) w.uint32(16).int32(m.priority);\n        if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\")) w.uint32(24).bool(m.cancel);\n        if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\")) w.uint32(32).int32(m.wantType);\n        if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\")) w.uint32(40).bool(m.sendDontHave);\n        return w;\n      };\n\n      /**\n       * Decodes an Entry message from the specified reader or buffer.\n       * @function decode\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {Message.Wantlist.Entry} Entry\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Entry.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.Message.Wantlist.Entry();\n        while (r.pos < c) {\n          var t = r.uint32();\n          switch (t >>> 3) {\n            case 1:\n              {\n                m.block = r.bytes();\n                break;\n              }\n            case 2:\n              {\n                m.priority = r.int32();\n                break;\n              }\n            case 3:\n              {\n                m.cancel = r.bool();\n                break;\n              }\n            case 4:\n              {\n                m.wantType = r.int32();\n                break;\n              }\n            case 5:\n              {\n                m.sendDontHave = r.bool();\n                break;\n              }\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n        return m;\n      };\n\n      /**\n       * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {Message.Wantlist.Entry} Entry\n       */\n      Entry.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message.Wantlist.Entry) return d;\n        var m = new $root.Message.Wantlist.Entry();\n        if (d.block != null) {\n          if (typeof d.block === \"string\") $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);else if (d.block.length >= 0) m.block = d.block;\n        }\n        if (d.priority != null) {\n          m.priority = d.priority | 0;\n        }\n        if (d.cancel != null) {\n          m.cancel = Boolean(d.cancel);\n        }\n        switch (d.wantType) {\n          case \"Block\":\n          case 0:\n            m.wantType = 0;\n            break;\n          case \"Have\":\n          case 1:\n            m.wantType = 1;\n            break;\n        }\n        if (d.sendDontHave != null) {\n          m.sendDontHave = Boolean(d.sendDontHave);\n        }\n        return m;\n      };\n\n      /**\n       * Creates a plain object from an Entry message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {Message.Wantlist.Entry} m Entry\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Entry.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n        if (o.defaults) {\n          if (o.bytes === String) d.block = \"\";else {\n            d.block = [];\n            if (o.bytes !== Array) d.block = $util.newBuffer(d.block);\n          }\n          d.priority = 0;\n          d.cancel = false;\n          d.wantType = o.enums === String ? \"Block\" : 0;\n          d.sendDontHave = false;\n        }\n        if (m.block != null && m.hasOwnProperty(\"block\")) {\n          d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n        }\n        if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n          d.priority = m.priority;\n        }\n        if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n          d.cancel = m.cancel;\n        }\n        if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n          d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n        }\n        if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n          d.sendDontHave = m.sendDontHave;\n        }\n        return d;\n      };\n\n      /**\n       * Converts this Entry to JSON.\n       * @function toJSON\n       * @memberof Message.Wantlist.Entry\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Entry.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      /**\n       * Gets the default type url for Entry\n       * @function getTypeUrl\n       * @memberof Message.Wantlist.Entry\n       * @static\n       * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n       * @returns {string} The default type url\n       */\n      Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n          typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/Message.Wantlist.Entry\";\n      };\n      return Entry;\n    }();\n    return Wantlist;\n  }();\n  Message.Block = function () {\n    /**\n     * Properties of a Block.\n     * @memberof Message\n     * @interface IBlock\n     * @property {Uint8Array|null} [prefix] Block prefix\n     * @property {Uint8Array|null} [data] Block data\n     */\n\n    /**\n     * Constructs a new Block.\n     * @memberof Message\n     * @classdesc Represents a Block.\n     * @implements IBlock\n     * @constructor\n     * @param {Message.IBlock=} [p] Properties to set\n     */\n    function Block(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Block prefix.\n     * @member {Uint8Array} prefix\n     * @memberof Message.Block\n     * @instance\n     */\n    Block.prototype.prefix = $util.newBuffer([]);\n\n    /**\n     * Block data.\n     * @member {Uint8Array} data\n     * @memberof Message.Block\n     * @instance\n     */\n    Block.prototype.data = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n     * @function encode\n     * @memberof Message.Block\n     * @static\n     * @param {Message.IBlock} m Block message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Block.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\")) w.uint32(10).bytes(m.prefix);\n      if (m.data != null && Object.hasOwnProperty.call(m, \"data\")) w.uint32(18).bytes(m.data);\n      return w;\n    };\n\n    /**\n     * Decodes a Block message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.Block\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.Block} Block\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Block.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Message.Block();\n      while (r.pos < c) {\n        var t = r.uint32();\n        switch (t >>> 3) {\n          case 1:\n            {\n              m.prefix = r.bytes();\n              break;\n            }\n          case 2:\n            {\n              m.data = r.bytes();\n              break;\n            }\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n      return m;\n    };\n\n    /**\n     * Creates a Block message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.Block\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.Block} Block\n     */\n    Block.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.Block) return d;\n      var m = new $root.Message.Block();\n      if (d.prefix != null) {\n        if (typeof d.prefix === \"string\") $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);else if (d.prefix.length >= 0) m.prefix = d.prefix;\n      }\n      if (d.data != null) {\n        if (typeof d.data === \"string\") $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);else if (d.data.length >= 0) m.data = d.data;\n      }\n      return m;\n    };\n\n    /**\n     * Creates a plain object from a Block message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.Block\n     * @static\n     * @param {Message.Block} m Block\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Block.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n      if (o.defaults) {\n        if (o.bytes === String) d.prefix = \"\";else {\n          d.prefix = [];\n          if (o.bytes !== Array) d.prefix = $util.newBuffer(d.prefix);\n        }\n        if (o.bytes === String) d.data = \"\";else {\n          d.data = [];\n          if (o.bytes !== Array) d.data = $util.newBuffer(d.data);\n        }\n      }\n      if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n        d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n      }\n      if (m.data != null && m.hasOwnProperty(\"data\")) {\n        d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n      }\n      return d;\n    };\n\n    /**\n     * Converts this Block to JSON.\n     * @function toJSON\n     * @memberof Message.Block\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Block.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for Block\n     * @function getTypeUrl\n     * @memberof Message.Block\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    Block.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = \"type.googleapis.com\";\n      }\n      return typeUrlPrefix + \"/Message.Block\";\n    };\n    return Block;\n  }();\n\n  /**\n   * BlockPresenceType enum.\n   * @name Message.BlockPresenceType\n   * @enum {number}\n   * @property {number} Have=0 Have value\n   * @property {number} DontHave=1 DontHave value\n   */\n  Message.BlockPresenceType = function () {\n    const valuesById = {},\n      values = Object.create(valuesById);\n    values[valuesById[0] = \"Have\"] = 0;\n    values[valuesById[1] = \"DontHave\"] = 1;\n    return values;\n  }();\n  Message.BlockPresence = function () {\n    /**\n     * Properties of a BlockPresence.\n     * @memberof Message\n     * @interface IBlockPresence\n     * @property {Uint8Array|null} [cid] BlockPresence cid\n     * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n     */\n\n    /**\n     * Constructs a new BlockPresence.\n     * @memberof Message\n     * @classdesc Represents a BlockPresence.\n     * @implements IBlockPresence\n     * @constructor\n     * @param {Message.IBlockPresence=} [p] Properties to set\n     */\n    function BlockPresence(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * BlockPresence cid.\n     * @member {Uint8Array} cid\n     * @memberof Message.BlockPresence\n     * @instance\n     */\n    BlockPresence.prototype.cid = $util.newBuffer([]);\n\n    /**\n     * BlockPresence type.\n     * @member {Message.BlockPresenceType} type\n     * @memberof Message.BlockPresence\n     * @instance\n     */\n    BlockPresence.prototype.type = 0;\n\n    /**\n     * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n     * @function encode\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    BlockPresence.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\")) w.uint32(10).bytes(m.cid);\n      if (m.type != null && Object.hasOwnProperty.call(m, \"type\")) w.uint32(16).int32(m.type);\n      return w;\n    };\n\n    /**\n     * Decodes a BlockPresence message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message.BlockPresence} BlockPresence\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    BlockPresence.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Message.BlockPresence();\n      while (r.pos < c) {\n        var t = r.uint32();\n        switch (t >>> 3) {\n          case 1:\n            {\n              m.cid = r.bytes();\n              break;\n            }\n          case 2:\n            {\n              m.type = r.int32();\n              break;\n            }\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n      return m;\n    };\n\n    /**\n     * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message.BlockPresence} BlockPresence\n     */\n    BlockPresence.fromObject = function fromObject(d) {\n      if (d instanceof $root.Message.BlockPresence) return d;\n      var m = new $root.Message.BlockPresence();\n      if (d.cid != null) {\n        if (typeof d.cid === \"string\") $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);else if (d.cid.length >= 0) m.cid = d.cid;\n      }\n      switch (d.type) {\n        case \"Have\":\n        case 0:\n          m.type = 0;\n          break;\n        case \"DontHave\":\n        case 1:\n          m.type = 1;\n          break;\n      }\n      return m;\n    };\n\n    /**\n     * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {Message.BlockPresence} m BlockPresence\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    BlockPresence.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n      if (o.defaults) {\n        if (o.bytes === String) d.cid = \"\";else {\n          d.cid = [];\n          if (o.bytes !== Array) d.cid = $util.newBuffer(d.cid);\n        }\n        d.type = o.enums === String ? \"Have\" : 0;\n      }\n      if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n        d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n      }\n      if (m.type != null && m.hasOwnProperty(\"type\")) {\n        d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n      }\n      return d;\n    };\n\n    /**\n     * Converts this BlockPresence to JSON.\n     * @function toJSON\n     * @memberof Message.BlockPresence\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    BlockPresence.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for BlockPresence\n     * @function getTypeUrl\n     * @memberof Message.BlockPresence\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    BlockPresence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n      if (typeUrlPrefix === undefined) {\n        typeUrlPrefix = \"type.googleapis.com\";\n      }\n      return typeUrlPrefix + \"/Message.BlockPresence\";\n    };\n    return BlockPresence;\n  }();\n  return Message;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Message","p","blocks","payload","blockPresences","ks","Object","keys","i","length","prototype","wantlist","emptyArray","pendingBytes","encode","m","w","create","hasOwnProperty","call","Wantlist","uint32","fork","ldelim","bytes","Block","BlockPresence","int32","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","TypeError","Array","isArray","base64","newBuffer","toObject","o","arrays","defaults","j","String","slice","toJSON","constructor","toJSONOptions","getTypeUrl","typeUrlPrefix","entries","full","Entry","bool","Boolean","WantType","valuesById","values","block","priority","cancel","wantType","sendDontHave","enums","prefix","data","BlockPresenceType","cid","type","default"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/message/message.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"ipfs-bitswap\"] || ($protobuf.roots[\"ipfs-bitswap\"] = {});\n\nexport const Message = $root.Message = (() => {\n\n    /**\n     * Properties of a Message.\n     * @exports IMessage\n     * @interface IMessage\n     * @property {Message.IWantlist|null} [wantlist] Message wantlist\n     * @property {Array.<Uint8Array>|null} [blocks] Message blocks\n     * @property {Array.<Message.IBlock>|null} [payload] Message payload\n     * @property {Array.<Message.IBlockPresence>|null} [blockPresences] Message blockPresences\n     * @property {number|null} [pendingBytes] Message pendingBytes\n     */\n\n    /**\n     * Constructs a new Message.\n     * @exports Message\n     * @classdesc Represents a Message.\n     * @implements IMessage\n     * @constructor\n     * @param {IMessage=} [p] Properties to set\n     */\n    function Message(p) {\n        this.blocks = [];\n        this.payload = [];\n        this.blockPresences = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Message wantlist.\n     * @member {Message.IWantlist|null|undefined} wantlist\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.wantlist = null;\n\n    /**\n     * Message blocks.\n     * @member {Array.<Uint8Array>} blocks\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blocks = $util.emptyArray;\n\n    /**\n     * Message payload.\n     * @member {Array.<Message.IBlock>} payload\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.payload = $util.emptyArray;\n\n    /**\n     * Message blockPresences.\n     * @member {Array.<Message.IBlockPresence>} blockPresences\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.blockPresences = $util.emptyArray;\n\n    /**\n     * Message pendingBytes.\n     * @member {number} pendingBytes\n     * @memberof Message\n     * @instance\n     */\n    Message.prototype.pendingBytes = 0;\n\n    /**\n     * Encodes the specified Message message. Does not implicitly {@link Message.verify|verify} messages.\n     * @function encode\n     * @memberof Message\n     * @static\n     * @param {IMessage} m Message message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Message.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.wantlist != null && Object.hasOwnProperty.call(m, \"wantlist\"))\n            $root.Message.Wantlist.encode(m.wantlist, w.uint32(10).fork()).ldelim();\n        if (m.blocks != null && m.blocks.length) {\n            for (var i = 0; i < m.blocks.length; ++i)\n                w.uint32(18).bytes(m.blocks[i]);\n        }\n        if (m.payload != null && m.payload.length) {\n            for (var i = 0; i < m.payload.length; ++i)\n                $root.Message.Block.encode(m.payload[i], w.uint32(26).fork()).ldelim();\n        }\n        if (m.blockPresences != null && m.blockPresences.length) {\n            for (var i = 0; i < m.blockPresences.length; ++i)\n                $root.Message.BlockPresence.encode(m.blockPresences[i], w.uint32(34).fork()).ldelim();\n        }\n        if (m.pendingBytes != null && Object.hasOwnProperty.call(m, \"pendingBytes\"))\n            w.uint32(40).int32(m.pendingBytes);\n        return w;\n    };\n\n    /**\n     * Decodes a Message message from the specified reader or buffer.\n     * @function decode\n     * @memberof Message\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Message} Message\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Message.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Message();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1: {\n                    m.wantlist = $root.Message.Wantlist.decode(r, r.uint32());\n                    break;\n                }\n            case 2: {\n                    if (!(m.blocks && m.blocks.length))\n                        m.blocks = [];\n                    m.blocks.push(r.bytes());\n                    break;\n                }\n            case 3: {\n                    if (!(m.payload && m.payload.length))\n                        m.payload = [];\n                    m.payload.push($root.Message.Block.decode(r, r.uint32()));\n                    break;\n                }\n            case 4: {\n                    if (!(m.blockPresences && m.blockPresences.length))\n                        m.blockPresences = [];\n                    m.blockPresences.push($root.Message.BlockPresence.decode(r, r.uint32()));\n                    break;\n                }\n            case 5: {\n                    m.pendingBytes = r.int32();\n                    break;\n                }\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a Message message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Message\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Message} Message\n     */\n    Message.fromObject = function fromObject(d) {\n        if (d instanceof $root.Message)\n            return d;\n        var m = new $root.Message();\n        if (d.wantlist != null) {\n            if (typeof d.wantlist !== \"object\")\n                throw TypeError(\".Message.wantlist: object expected\");\n            m.wantlist = $root.Message.Wantlist.fromObject(d.wantlist);\n        }\n        if (d.blocks) {\n            if (!Array.isArray(d.blocks))\n                throw TypeError(\".Message.blocks: array expected\");\n            m.blocks = [];\n            for (var i = 0; i < d.blocks.length; ++i) {\n                if (typeof d.blocks[i] === \"string\")\n                    $util.base64.decode(d.blocks[i], m.blocks[i] = $util.newBuffer($util.base64.length(d.blocks[i])), 0);\n                else if (d.blocks[i].length >= 0)\n                    m.blocks[i] = d.blocks[i];\n            }\n        }\n        if (d.payload) {\n            if (!Array.isArray(d.payload))\n                throw TypeError(\".Message.payload: array expected\");\n            m.payload = [];\n            for (var i = 0; i < d.payload.length; ++i) {\n                if (typeof d.payload[i] !== \"object\")\n                    throw TypeError(\".Message.payload: object expected\");\n                m.payload[i] = $root.Message.Block.fromObject(d.payload[i]);\n            }\n        }\n        if (d.blockPresences) {\n            if (!Array.isArray(d.blockPresences))\n                throw TypeError(\".Message.blockPresences: array expected\");\n            m.blockPresences = [];\n            for (var i = 0; i < d.blockPresences.length; ++i) {\n                if (typeof d.blockPresences[i] !== \"object\")\n                    throw TypeError(\".Message.blockPresences: object expected\");\n                m.blockPresences[i] = $root.Message.BlockPresence.fromObject(d.blockPresences[i]);\n            }\n        }\n        if (d.pendingBytes != null) {\n            m.pendingBytes = d.pendingBytes | 0;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a Message message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Message\n     * @static\n     * @param {Message} m Message\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Message.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.blocks = [];\n            d.payload = [];\n            d.blockPresences = [];\n        }\n        if (o.defaults) {\n            d.wantlist = null;\n            d.pendingBytes = 0;\n        }\n        if (m.wantlist != null && m.hasOwnProperty(\"wantlist\")) {\n            d.wantlist = $root.Message.Wantlist.toObject(m.wantlist, o);\n        }\n        if (m.blocks && m.blocks.length) {\n            d.blocks = [];\n            for (var j = 0; j < m.blocks.length; ++j) {\n                d.blocks[j] = o.bytes === String ? $util.base64.encode(m.blocks[j], 0, m.blocks[j].length) : o.bytes === Array ? Array.prototype.slice.call(m.blocks[j]) : m.blocks[j];\n            }\n        }\n        if (m.payload && m.payload.length) {\n            d.payload = [];\n            for (var j = 0; j < m.payload.length; ++j) {\n                d.payload[j] = $root.Message.Block.toObject(m.payload[j], o);\n            }\n        }\n        if (m.blockPresences && m.blockPresences.length) {\n            d.blockPresences = [];\n            for (var j = 0; j < m.blockPresences.length; ++j) {\n                d.blockPresences[j] = $root.Message.BlockPresence.toObject(m.blockPresences[j], o);\n            }\n        }\n        if (m.pendingBytes != null && m.hasOwnProperty(\"pendingBytes\")) {\n            d.pendingBytes = m.pendingBytes;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Message to JSON.\n     * @function toJSON\n     * @memberof Message\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Message.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    /**\n     * Gets the default type url for Message\n     * @function getTypeUrl\n     * @memberof Message\n     * @static\n     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n     * @returns {string} The default type url\n     */\n    Message.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n        if (typeUrlPrefix === undefined) {\n            typeUrlPrefix = \"type.googleapis.com\";\n        }\n        return typeUrlPrefix + \"/Message\";\n    };\n\n    Message.Wantlist = (function() {\n\n        /**\n         * Properties of a Wantlist.\n         * @memberof Message\n         * @interface IWantlist\n         * @property {Array.<Message.Wantlist.IEntry>|null} [entries] Wantlist entries\n         * @property {boolean|null} [full] Wantlist full\n         */\n\n        /**\n         * Constructs a new Wantlist.\n         * @memberof Message\n         * @classdesc Represents a Wantlist.\n         * @implements IWantlist\n         * @constructor\n         * @param {Message.IWantlist=} [p] Properties to set\n         */\n        function Wantlist(p) {\n            this.entries = [];\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Wantlist entries.\n         * @member {Array.<Message.Wantlist.IEntry>} entries\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.entries = $util.emptyArray;\n\n        /**\n         * Wantlist full.\n         * @member {boolean} full\n         * @memberof Message.Wantlist\n         * @instance\n         */\n        Wantlist.prototype.full = false;\n\n        /**\n         * Encodes the specified Wantlist message. Does not implicitly {@link Message.Wantlist.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.IWantlist} m Wantlist message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wantlist.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.entries != null && m.entries.length) {\n                for (var i = 0; i < m.entries.length; ++i)\n                    $root.Message.Wantlist.Entry.encode(m.entries[i], w.uint32(10).fork()).ldelim();\n            }\n            if (m.full != null && Object.hasOwnProperty.call(m, \"full\"))\n                w.uint32(16).bool(m.full);\n            return w;\n        };\n\n        /**\n         * Decodes a Wantlist message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Wantlist\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Wantlist} Wantlist\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wantlist.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        if (!(m.entries && m.entries.length))\n                            m.entries = [];\n                        m.entries.push($root.Message.Wantlist.Entry.decode(r, r.uint32()));\n                        break;\n                    }\n                case 2: {\n                        m.full = r.bool();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Wantlist message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Wantlist} Wantlist\n         */\n        Wantlist.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Wantlist)\n                return d;\n            var m = new $root.Message.Wantlist();\n            if (d.entries) {\n                if (!Array.isArray(d.entries))\n                    throw TypeError(\".Message.Wantlist.entries: array expected\");\n                m.entries = [];\n                for (var i = 0; i < d.entries.length; ++i) {\n                    if (typeof d.entries[i] !== \"object\")\n                        throw TypeError(\".Message.Wantlist.entries: object expected\");\n                    m.entries[i] = $root.Message.Wantlist.Entry.fromObject(d.entries[i]);\n                }\n            }\n            if (d.full != null) {\n                m.full = Boolean(d.full);\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Wantlist message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Wantlist\n         * @static\n         * @param {Message.Wantlist} m Wantlist\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wantlist.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.arrays || o.defaults) {\n                d.entries = [];\n            }\n            if (o.defaults) {\n                d.full = false;\n            }\n            if (m.entries && m.entries.length) {\n                d.entries = [];\n                for (var j = 0; j < m.entries.length; ++j) {\n                    d.entries[j] = $root.Message.Wantlist.Entry.toObject(m.entries[j], o);\n                }\n            }\n            if (m.full != null && m.hasOwnProperty(\"full\")) {\n                d.full = m.full;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Wantlist to JSON.\n         * @function toJSON\n         * @memberof Message.Wantlist\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wantlist.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Wantlist\n         * @function getTypeUrl\n         * @memberof Message.Wantlist\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Wantlist.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Wantlist\";\n        };\n\n        /**\n         * WantType enum.\n         * @name Message.Wantlist.WantType\n         * @enum {number}\n         * @property {number} Block=0 Block value\n         * @property {number} Have=1 Have value\n         */\n        Wantlist.WantType = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"Block\"] = 0;\n            values[valuesById[1] = \"Have\"] = 1;\n            return values;\n        })();\n\n        Wantlist.Entry = (function() {\n\n            /**\n             * Properties of an Entry.\n             * @memberof Message.Wantlist\n             * @interface IEntry\n             * @property {Uint8Array|null} [block] Entry block\n             * @property {number|null} [priority] Entry priority\n             * @property {boolean|null} [cancel] Entry cancel\n             * @property {Message.Wantlist.WantType|null} [wantType] Entry wantType\n             * @property {boolean|null} [sendDontHave] Entry sendDontHave\n             */\n\n            /**\n             * Constructs a new Entry.\n             * @memberof Message.Wantlist\n             * @classdesc Represents an Entry.\n             * @implements IEntry\n             * @constructor\n             * @param {Message.Wantlist.IEntry=} [p] Properties to set\n             */\n            function Entry(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Entry block.\n             * @member {Uint8Array} block\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.block = $util.newBuffer([]);\n\n            /**\n             * Entry priority.\n             * @member {number} priority\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.priority = 0;\n\n            /**\n             * Entry cancel.\n             * @member {boolean} cancel\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.cancel = false;\n\n            /**\n             * Entry wantType.\n             * @member {Message.Wantlist.WantType} wantType\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.wantType = 0;\n\n            /**\n             * Entry sendDontHave.\n             * @member {boolean} sendDontHave\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             */\n            Entry.prototype.sendDontHave = false;\n\n            /**\n             * Encodes the specified Entry message. Does not implicitly {@link Message.Wantlist.Entry.verify|verify} messages.\n             * @function encode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.IEntry} m Entry message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entry.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.block != null && Object.hasOwnProperty.call(m, \"block\"))\n                    w.uint32(10).bytes(m.block);\n                if (m.priority != null && Object.hasOwnProperty.call(m, \"priority\"))\n                    w.uint32(16).int32(m.priority);\n                if (m.cancel != null && Object.hasOwnProperty.call(m, \"cancel\"))\n                    w.uint32(24).bool(m.cancel);\n                if (m.wantType != null && Object.hasOwnProperty.call(m, \"wantType\"))\n                    w.uint32(32).int32(m.wantType);\n                if (m.sendDontHave != null && Object.hasOwnProperty.call(m, \"sendDontHave\"))\n                    w.uint32(40).bool(m.sendDontHave);\n                return w;\n            };\n\n            /**\n             * Decodes an Entry message from the specified reader or buffer.\n             * @function decode\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {Message.Wantlist.Entry} Entry\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entry.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Wantlist.Entry();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1: {\n                            m.block = r.bytes();\n                            break;\n                        }\n                    case 2: {\n                            m.priority = r.int32();\n                            break;\n                        }\n                    case 3: {\n                            m.cancel = r.bool();\n                            break;\n                        }\n                    case 4: {\n                            m.wantType = r.int32();\n                            break;\n                        }\n                    case 5: {\n                            m.sendDontHave = r.bool();\n                            break;\n                        }\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates an Entry message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {Message.Wantlist.Entry} Entry\n             */\n            Entry.fromObject = function fromObject(d) {\n                if (d instanceof $root.Message.Wantlist.Entry)\n                    return d;\n                var m = new $root.Message.Wantlist.Entry();\n                if (d.block != null) {\n                    if (typeof d.block === \"string\")\n                        $util.base64.decode(d.block, m.block = $util.newBuffer($util.base64.length(d.block)), 0);\n                    else if (d.block.length >= 0)\n                        m.block = d.block;\n                }\n                if (d.priority != null) {\n                    m.priority = d.priority | 0;\n                }\n                if (d.cancel != null) {\n                    m.cancel = Boolean(d.cancel);\n                }\n                switch (d.wantType) {\n                case \"Block\":\n                case 0:\n                    m.wantType = 0;\n                    break;\n                case \"Have\":\n                case 1:\n                    m.wantType = 1;\n                    break;\n                }\n                if (d.sendDontHave != null) {\n                    m.sendDontHave = Boolean(d.sendDontHave);\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from an Entry message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {Message.Wantlist.Entry} m Entry\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entry.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    if (o.bytes === String)\n                        d.block = \"\";\n                    else {\n                        d.block = [];\n                        if (o.bytes !== Array)\n                            d.block = $util.newBuffer(d.block);\n                    }\n                    d.priority = 0;\n                    d.cancel = false;\n                    d.wantType = o.enums === String ? \"Block\" : 0;\n                    d.sendDontHave = false;\n                }\n                if (m.block != null && m.hasOwnProperty(\"block\")) {\n                    d.block = o.bytes === String ? $util.base64.encode(m.block, 0, m.block.length) : o.bytes === Array ? Array.prototype.slice.call(m.block) : m.block;\n                }\n                if (m.priority != null && m.hasOwnProperty(\"priority\")) {\n                    d.priority = m.priority;\n                }\n                if (m.cancel != null && m.hasOwnProperty(\"cancel\")) {\n                    d.cancel = m.cancel;\n                }\n                if (m.wantType != null && m.hasOwnProperty(\"wantType\")) {\n                    d.wantType = o.enums === String ? $root.Message.Wantlist.WantType[m.wantType] : m.wantType;\n                }\n                if (m.sendDontHave != null && m.hasOwnProperty(\"sendDontHave\")) {\n                    d.sendDontHave = m.sendDontHave;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Entry to JSON.\n             * @function toJSON\n             * @memberof Message.Wantlist.Entry\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entry.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Entry\n             * @function getTypeUrl\n             * @memberof Message.Wantlist.Entry\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Entry.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/Message.Wantlist.Entry\";\n            };\n\n            return Entry;\n        })();\n\n        return Wantlist;\n    })();\n\n    Message.Block = (function() {\n\n        /**\n         * Properties of a Block.\n         * @memberof Message\n         * @interface IBlock\n         * @property {Uint8Array|null} [prefix] Block prefix\n         * @property {Uint8Array|null} [data] Block data\n         */\n\n        /**\n         * Constructs a new Block.\n         * @memberof Message\n         * @classdesc Represents a Block.\n         * @implements IBlock\n         * @constructor\n         * @param {Message.IBlock=} [p] Properties to set\n         */\n        function Block(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * Block prefix.\n         * @member {Uint8Array} prefix\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.prefix = $util.newBuffer([]);\n\n        /**\n         * Block data.\n         * @member {Uint8Array} data\n         * @memberof Message.Block\n         * @instance\n         */\n        Block.prototype.data = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified Block message. Does not implicitly {@link Message.Block.verify|verify} messages.\n         * @function encode\n         * @memberof Message.Block\n         * @static\n         * @param {Message.IBlock} m Block message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Block.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.prefix != null && Object.hasOwnProperty.call(m, \"prefix\"))\n                w.uint32(10).bytes(m.prefix);\n            if (m.data != null && Object.hasOwnProperty.call(m, \"data\"))\n                w.uint32(18).bytes(m.data);\n            return w;\n        };\n\n        /**\n         * Decodes a Block message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.Block\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.Block} Block\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Block.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.Block();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.prefix = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.data = r.bytes();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a Block message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.Block\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.Block} Block\n         */\n        Block.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.Block)\n                return d;\n            var m = new $root.Message.Block();\n            if (d.prefix != null) {\n                if (typeof d.prefix === \"string\")\n                    $util.base64.decode(d.prefix, m.prefix = $util.newBuffer($util.base64.length(d.prefix)), 0);\n                else if (d.prefix.length >= 0)\n                    m.prefix = d.prefix;\n            }\n            if (d.data != null) {\n                if (typeof d.data === \"string\")\n                    $util.base64.decode(d.data, m.data = $util.newBuffer($util.base64.length(d.data)), 0);\n                else if (d.data.length >= 0)\n                    m.data = d.data;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a Block message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.Block\n         * @static\n         * @param {Message.Block} m Block\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Block.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.prefix = \"\";\n                else {\n                    d.prefix = [];\n                    if (o.bytes !== Array)\n                        d.prefix = $util.newBuffer(d.prefix);\n                }\n                if (o.bytes === String)\n                    d.data = \"\";\n                else {\n                    d.data = [];\n                    if (o.bytes !== Array)\n                        d.data = $util.newBuffer(d.data);\n                }\n            }\n            if (m.prefix != null && m.hasOwnProperty(\"prefix\")) {\n                d.prefix = o.bytes === String ? $util.base64.encode(m.prefix, 0, m.prefix.length) : o.bytes === Array ? Array.prototype.slice.call(m.prefix) : m.prefix;\n            }\n            if (m.data != null && m.hasOwnProperty(\"data\")) {\n                d.data = o.bytes === String ? $util.base64.encode(m.data, 0, m.data.length) : o.bytes === Array ? Array.prototype.slice.call(m.data) : m.data;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this Block to JSON.\n         * @function toJSON\n         * @memberof Message.Block\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Block.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Block\n         * @function getTypeUrl\n         * @memberof Message.Block\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Block.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.Block\";\n        };\n\n        return Block;\n    })();\n\n    /**\n     * BlockPresenceType enum.\n     * @name Message.BlockPresenceType\n     * @enum {number}\n     * @property {number} Have=0 Have value\n     * @property {number} DontHave=1 DontHave value\n     */\n    Message.BlockPresenceType = (function() {\n        const valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"Have\"] = 0;\n        values[valuesById[1] = \"DontHave\"] = 1;\n        return values;\n    })();\n\n    Message.BlockPresence = (function() {\n\n        /**\n         * Properties of a BlockPresence.\n         * @memberof Message\n         * @interface IBlockPresence\n         * @property {Uint8Array|null} [cid] BlockPresence cid\n         * @property {Message.BlockPresenceType|null} [type] BlockPresence type\n         */\n\n        /**\n         * Constructs a new BlockPresence.\n         * @memberof Message\n         * @classdesc Represents a BlockPresence.\n         * @implements IBlockPresence\n         * @constructor\n         * @param {Message.IBlockPresence=} [p] Properties to set\n         */\n        function BlockPresence(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * BlockPresence cid.\n         * @member {Uint8Array} cid\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.cid = $util.newBuffer([]);\n\n        /**\n         * BlockPresence type.\n         * @member {Message.BlockPresenceType} type\n         * @memberof Message.BlockPresence\n         * @instance\n         */\n        BlockPresence.prototype.type = 0;\n\n        /**\n         * Encodes the specified BlockPresence message. Does not implicitly {@link Message.BlockPresence.verify|verify} messages.\n         * @function encode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.IBlockPresence} m BlockPresence message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        BlockPresence.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.cid != null && Object.hasOwnProperty.call(m, \"cid\"))\n                w.uint32(10).bytes(m.cid);\n            if (m.type != null && Object.hasOwnProperty.call(m, \"type\"))\n                w.uint32(16).int32(m.type);\n            return w;\n        };\n\n        /**\n         * Decodes a BlockPresence message from the specified reader or buffer.\n         * @function decode\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {Message.BlockPresence} BlockPresence\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        BlockPresence.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.Message.BlockPresence();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1: {\n                        m.cid = r.bytes();\n                        break;\n                    }\n                case 2: {\n                        m.type = r.int32();\n                        break;\n                    }\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates a BlockPresence message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {Message.BlockPresence} BlockPresence\n         */\n        BlockPresence.fromObject = function fromObject(d) {\n            if (d instanceof $root.Message.BlockPresence)\n                return d;\n            var m = new $root.Message.BlockPresence();\n            if (d.cid != null) {\n                if (typeof d.cid === \"string\")\n                    $util.base64.decode(d.cid, m.cid = $util.newBuffer($util.base64.length(d.cid)), 0);\n                else if (d.cid.length >= 0)\n                    m.cid = d.cid;\n            }\n            switch (d.type) {\n            case \"Have\":\n            case 0:\n                m.type = 0;\n                break;\n            case \"DontHave\":\n            case 1:\n                m.type = 1;\n                break;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from a BlockPresence message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {Message.BlockPresence} m BlockPresence\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        BlockPresence.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.cid = \"\";\n                else {\n                    d.cid = [];\n                    if (o.bytes !== Array)\n                        d.cid = $util.newBuffer(d.cid);\n                }\n                d.type = o.enums === String ? \"Have\" : 0;\n            }\n            if (m.cid != null && m.hasOwnProperty(\"cid\")) {\n                d.cid = o.bytes === String ? $util.base64.encode(m.cid, 0, m.cid.length) : o.bytes === Array ? Array.prototype.slice.call(m.cid) : m.cid;\n            }\n            if (m.type != null && m.hasOwnProperty(\"type\")) {\n                d.type = o.enums === String ? $root.Message.BlockPresenceType[m.type] : m.type;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this BlockPresence to JSON.\n         * @function toJSON\n         * @memberof Message.BlockPresence\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        BlockPresence.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for BlockPresence\n         * @function getTypeUrl\n         * @memberof Message.BlockPresence\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        BlockPresence.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/Message.BlockPresence\";\n        };\n\n        return BlockPresence;\n    })();\n\n    return Message;\n})();\n\nexport { $root as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}