{"ast":null,"code":"import { Key } from 'interface-datastore';\nimport { KeyTransformDatastore } from './keytransform.js';\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n */\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`);\n        }\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n    });\n  }\n}","map":{"version":3,"names":["Key","KeyTransformDatastore","NamespaceDatastore","constructor","child","prefix","convert","key","invert","toString","isAncestorOf","Error","slice","length"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/datastore-core@8.0.4/node_modules/datastore-core/src/namespace.js"],"sourcesContent":["import { Key } from 'interface-datastore'\nimport { KeyTransformDatastore } from './keytransform.js'\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n */\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  constructor (child, prefix) {\n    super(child, {\n      convert (key) {\n        return prefix.child(key)\n      },\n      invert (key) {\n        if (prefix.toString() === '/') {\n          return key\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`)\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false)\n      }\n    })\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,qBAAqB;AACzC,SAASC,qBAAqB,QAAQ,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,SAASD,qBAAqB,CAAC;EAC5D;AACF;AACA;AACA;EACEE,WAAWA,CAAEC,KAAK,EAAEC,MAAM,EAAE;IAC1B,KAAK,CAACD,KAAK,EAAE;MACXE,OAAOA,CAAEC,GAAG,EAAE;QACZ,OAAOF,MAAM,CAACD,KAAK,CAACG,GAAG,CAAC;MAC1B,CAAC;MACDC,MAAMA,CAAED,GAAG,EAAE;QACX,IAAIF,MAAM,CAACI,QAAQ,CAAC,CAAC,KAAK,GAAG,EAAE;UAC7B,OAAOF,GAAG;QACZ;QAEA,IAAI,CAACF,MAAM,CAACK,YAAY,CAACH,GAAG,CAAC,EAAE;UAC7B,MAAM,IAAII,KAAK,CAAE,qBAAoBN,MAAM,CAACI,QAAQ,CAAC,CAAE,aAAYF,GAAG,CAACE,QAAQ,CAAC,CAAE,EAAC,CAAC;QACtF;QAEA,OAAO,IAAIT,GAAG,CAACO,GAAG,CAACE,QAAQ,CAAC,CAAC,CAACG,KAAK,CAACP,MAAM,CAACI,QAAQ,CAAC,CAAC,CAACI,MAAM,CAAC,EAAE,KAAK,CAAC;MACvE;IACF,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}