{"ast":null,"code":"/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const ipfs = $root.ipfs = (() => {\n  /**\n   * Namespace ipfs.\n   * @exports ipfs\n   * @namespace\n   */\n  const ipfs = {};\n  ipfs.pin = function () {\n    /**\n     * Namespace pin.\n     * @memberof ipfs\n     * @namespace\n     */\n    const pin = {};\n    pin.Set = function () {\n      /**\n       * Properties of a Set.\n       * @memberof ipfs.pin\n       * @interface ISet\n       * @property {number|null} [version] Set version\n       * @property {number|null} [fanout] Set fanout\n       * @property {number|null} [seed] Set seed\n       */\n\n      /**\n       * Constructs a new Set.\n       * @memberof ipfs.pin\n       * @classdesc Represents a Set.\n       * @implements ISet\n       * @constructor\n       * @param {ipfs.pin.ISet=} [p] Properties to set\n       */\n      function Set(p) {\n        if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n      }\n\n      /**\n       * Set version.\n       * @member {number} version\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n      Set.prototype.version = 0;\n\n      /**\n       * Set fanout.\n       * @member {number} fanout\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n      Set.prototype.fanout = 0;\n\n      /**\n       * Set seed.\n       * @member {number} seed\n       * @memberof ipfs.pin.Set\n       * @instance\n       */\n      Set.prototype.seed = 0;\n\n      /**\n       * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n       * @function encode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.ISet} m Set message or plain object to encode\n       * @param {$protobuf.Writer} [w] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n      Set.encode = function encode(m, w) {\n        if (!w) w = $Writer.create();\n        if (m.version != null && Object.hasOwnProperty.call(m, \"version\")) w.uint32(8).uint32(m.version);\n        if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\")) w.uint32(16).uint32(m.fanout);\n        if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\")) w.uint32(29).fixed32(m.seed);\n        return w;\n      };\n\n      /**\n       * Decodes a Set message from the specified reader or buffer.\n       * @function decode\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n       * @param {number} [l] Message length if known beforehand\n       * @returns {ipfs.pin.Set} Set\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n      Set.decode = function decode(r, l) {\n        if (!(r instanceof $Reader)) r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l,\n          m = new $root.ipfs.pin.Set();\n        while (r.pos < c) {\n          var t = r.uint32();\n          switch (t >>> 3) {\n            case 1:\n              m.version = r.uint32();\n              break;\n            case 2:\n              m.fanout = r.uint32();\n              break;\n            case 3:\n              m.seed = r.fixed32();\n              break;\n            default:\n              r.skipType(t & 7);\n              break;\n          }\n        }\n        return m;\n      };\n\n      /**\n       * Creates a Set message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {Object.<string,*>} d Plain object\n       * @returns {ipfs.pin.Set} Set\n       */\n      Set.fromObject = function fromObject(d) {\n        if (d instanceof $root.ipfs.pin.Set) return d;\n        var m = new $root.ipfs.pin.Set();\n        if (d.version != null) {\n          m.version = d.version >>> 0;\n        }\n        if (d.fanout != null) {\n          m.fanout = d.fanout >>> 0;\n        }\n        if (d.seed != null) {\n          m.seed = d.seed >>> 0;\n        }\n        return m;\n      };\n\n      /**\n       * Creates a plain object from a Set message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof ipfs.pin.Set\n       * @static\n       * @param {ipfs.pin.Set} m Set\n       * @param {$protobuf.IConversionOptions} [o] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n      Set.toObject = function toObject(m, o) {\n        if (!o) o = {};\n        var d = {};\n        if (o.defaults) {\n          d.version = 0;\n          d.fanout = 0;\n          d.seed = 0;\n        }\n        if (m.version != null && m.hasOwnProperty(\"version\")) {\n          d.version = m.version;\n        }\n        if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n          d.fanout = m.fanout;\n        }\n        if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n          d.seed = m.seed;\n        }\n        return d;\n      };\n\n      /**\n       * Converts this Set to JSON.\n       * @function toJSON\n       * @memberof ipfs.pin.Set\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n      Set.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n      return Set;\n    }();\n    return pin;\n  }();\n  return ipfs;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","ipfs","pin","Set","p","ks","Object","keys","i","length","prototype","version","fanout","seed","encode","m","w","create","hasOwnProperty","call","uint32","fixed32","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","toObject","o","defaults","toJSON","constructor","toJSONOptions","default"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-9/pin.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const ipfs = $root.ipfs = (() => {\n\n    /**\n     * Namespace ipfs.\n     * @exports ipfs\n     * @namespace\n     */\n    const ipfs = {};\n\n    ipfs.pin = (function() {\n\n        /**\n         * Namespace pin.\n         * @memberof ipfs\n         * @namespace\n         */\n        const pin = {};\n\n        pin.Set = (function() {\n\n            /**\n             * Properties of a Set.\n             * @memberof ipfs.pin\n             * @interface ISet\n             * @property {number|null} [version] Set version\n             * @property {number|null} [fanout] Set fanout\n             * @property {number|null} [seed] Set seed\n             */\n\n            /**\n             * Constructs a new Set.\n             * @memberof ipfs.pin\n             * @classdesc Represents a Set.\n             * @implements ISet\n             * @constructor\n             * @param {ipfs.pin.ISet=} [p] Properties to set\n             */\n            function Set(p) {\n                if (p)\n                    for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                        if (p[ks[i]] != null)\n                            this[ks[i]] = p[ks[i]];\n            }\n\n            /**\n             * Set version.\n             * @member {number} version\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.version = 0;\n\n            /**\n             * Set fanout.\n             * @member {number} fanout\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.fanout = 0;\n\n            /**\n             * Set seed.\n             * @member {number} seed\n             * @memberof ipfs.pin.Set\n             * @instance\n             */\n            Set.prototype.seed = 0;\n\n            /**\n             * Encodes the specified Set message. Does not implicitly {@link ipfs.pin.Set.verify|verify} messages.\n             * @function encode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.ISet} m Set message or plain object to encode\n             * @param {$protobuf.Writer} [w] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Set.encode = function encode(m, w) {\n                if (!w)\n                    w = $Writer.create();\n                if (m.version != null && Object.hasOwnProperty.call(m, \"version\"))\n                    w.uint32(8).uint32(m.version);\n                if (m.fanout != null && Object.hasOwnProperty.call(m, \"fanout\"))\n                    w.uint32(16).uint32(m.fanout);\n                if (m.seed != null && Object.hasOwnProperty.call(m, \"seed\"))\n                    w.uint32(29).fixed32(m.seed);\n                return w;\n            };\n\n            /**\n             * Decodes a Set message from the specified reader or buffer.\n             * @function decode\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n             * @param {number} [l] Message length if known beforehand\n             * @returns {ipfs.pin.Set} Set\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Set.decode = function decode(r, l) {\n                if (!(r instanceof $Reader))\n                    r = $Reader.create(r);\n                var c = l === undefined ? r.len : r.pos + l, m = new $root.ipfs.pin.Set();\n                while (r.pos < c) {\n                    var t = r.uint32();\n                    switch (t >>> 3) {\n                    case 1:\n                        m.version = r.uint32();\n                        break;\n                    case 2:\n                        m.fanout = r.uint32();\n                        break;\n                    case 3:\n                        m.seed = r.fixed32();\n                        break;\n                    default:\n                        r.skipType(t & 7);\n                        break;\n                    }\n                }\n                return m;\n            };\n\n            /**\n             * Creates a Set message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {Object.<string,*>} d Plain object\n             * @returns {ipfs.pin.Set} Set\n             */\n            Set.fromObject = function fromObject(d) {\n                if (d instanceof $root.ipfs.pin.Set)\n                    return d;\n                var m = new $root.ipfs.pin.Set();\n                if (d.version != null) {\n                    m.version = d.version >>> 0;\n                }\n                if (d.fanout != null) {\n                    m.fanout = d.fanout >>> 0;\n                }\n                if (d.seed != null) {\n                    m.seed = d.seed >>> 0;\n                }\n                return m;\n            };\n\n            /**\n             * Creates a plain object from a Set message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof ipfs.pin.Set\n             * @static\n             * @param {ipfs.pin.Set} m Set\n             * @param {$protobuf.IConversionOptions} [o] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Set.toObject = function toObject(m, o) {\n                if (!o)\n                    o = {};\n                var d = {};\n                if (o.defaults) {\n                    d.version = 0;\n                    d.fanout = 0;\n                    d.seed = 0;\n                }\n                if (m.version != null && m.hasOwnProperty(\"version\")) {\n                    d.version = m.version;\n                }\n                if (m.fanout != null && m.hasOwnProperty(\"fanout\")) {\n                    d.fanout = m.fanout;\n                }\n                if (m.seed != null && m.hasOwnProperty(\"seed\")) {\n                    d.seed = m.seed;\n                }\n                return d;\n            };\n\n            /**\n             * Converts this Set to JSON.\n             * @function toJSON\n             * @memberof ipfs.pin.Set\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Set.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Set;\n        })();\n\n        return pin;\n    })();\n\n    return ipfs;\n})();\n\nexport { $root as default };\n"],"mappings":"AAAA;AACA,OAAOA,SAAS,MAAM,uBAAuB;;AAE7C;AACA,MAAMC,OAAO,GAAGD,SAAS,CAACE,MAAM;EAAEC,OAAO,GAAGH,SAAS,CAACI,MAAM;EAAEC,KAAK,GAAGL,SAAS,CAACM,IAAI;;AAEpF;AACA,MAAMC,KAAK,GAAGP,SAAS,CAACQ,KAAK,CAAC,SAAS,CAAC,KAAKR,SAAS,CAACQ,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;AAE7E,OAAO,MAAMC,IAAI,GAAGF,KAAK,CAACE,IAAI,GAAG,CAAC,MAAM;EAEpC;AACJ;AACA;AACA;AACA;EACI,MAAMA,IAAI,GAAG,CAAC,CAAC;EAEfA,IAAI,CAACC,GAAG,GAAI,YAAW;IAEnB;AACR;AACA;AACA;AACA;IACQ,MAAMA,GAAG,GAAG,CAAC,CAAC;IAEdA,GAAG,CAACC,GAAG,GAAI,YAAW;MAElB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;MAEY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACY,SAASA,GAAGA,CAACC,CAAC,EAAE;QACZ,IAAIA,CAAC,EACD,KAAK,IAAIC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAACH,CAAC,CAAC,EAAEI,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,EAAE,CAACI,MAAM,EAAE,EAAED,CAAC,EACnD,IAAIJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC,IAAI,IAAI,EAChB,IAAI,CAACH,EAAE,CAACG,CAAC,CAAC,CAAC,GAAGJ,CAAC,CAACC,EAAE,CAACG,CAAC,CAAC,CAAC;MACtC;;MAEA;AACZ;AACA;AACA;AACA;AACA;MACYL,GAAG,CAACO,SAAS,CAACC,OAAO,GAAG,CAAC;;MAEzB;AACZ;AACA;AACA;AACA;AACA;MACYR,GAAG,CAACO,SAAS,CAACE,MAAM,GAAG,CAAC;;MAExB;AACZ;AACA;AACA;AACA;AACA;MACYT,GAAG,CAACO,SAAS,CAACG,IAAI,GAAG,CAAC;;MAEtB;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYV,GAAG,CAACW,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;QAC/B,IAAI,CAACA,CAAC,EACFA,CAAC,GAAGrB,OAAO,CAACsB,MAAM,CAAC,CAAC;QACxB,IAAIF,CAAC,CAACJ,OAAO,IAAI,IAAI,IAAIL,MAAM,CAACY,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,SAAS,CAAC,EAC7DC,CAAC,CAACI,MAAM,CAAC,CAAC,CAAC,CAACA,MAAM,CAACL,CAAC,CAACJ,OAAO,CAAC;QACjC,IAAII,CAAC,CAACH,MAAM,IAAI,IAAI,IAAIN,MAAM,CAACY,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,QAAQ,CAAC,EAC3DC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACA,MAAM,CAACL,CAAC,CAACH,MAAM,CAAC;QACjC,IAAIG,CAAC,CAACF,IAAI,IAAI,IAAI,IAAIP,MAAM,CAACY,cAAc,CAACC,IAAI,CAACJ,CAAC,EAAE,MAAM,CAAC,EACvDC,CAAC,CAACI,MAAM,CAAC,EAAE,CAAC,CAACC,OAAO,CAACN,CAAC,CAACF,IAAI,CAAC;QAChC,OAAOG,CAAC;MACZ,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYb,GAAG,CAACmB,MAAM,GAAG,SAASA,MAAMA,CAACC,CAAC,EAAEC,CAAC,EAAE;QAC/B,IAAI,EAAED,CAAC,YAAY9B,OAAO,CAAC,EACvB8B,CAAC,GAAG9B,OAAO,CAACwB,MAAM,CAACM,CAAC,CAAC;QACzB,IAAIE,CAAC,GAAGD,CAAC,KAAKE,SAAS,GAAGH,CAAC,CAACI,GAAG,GAAGJ,CAAC,CAACK,GAAG,GAAGJ,CAAC;UAAET,CAAC,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,CAAC;QACzE,OAAOoB,CAAC,CAACK,GAAG,GAAGH,CAAC,EAAE;UACd,IAAII,CAAC,GAAGN,CAAC,CAACH,MAAM,CAAC,CAAC;UAClB,QAAQS,CAAC,KAAK,CAAC;YACf,KAAK,CAAC;cACFd,CAAC,CAACJ,OAAO,GAAGY,CAAC,CAACH,MAAM,CAAC,CAAC;cACtB;YACJ,KAAK,CAAC;cACFL,CAAC,CAACH,MAAM,GAAGW,CAAC,CAACH,MAAM,CAAC,CAAC;cACrB;YACJ,KAAK,CAAC;cACFL,CAAC,CAACF,IAAI,GAAGU,CAAC,CAACF,OAAO,CAAC,CAAC;cACpB;YACJ;cACIE,CAAC,CAACO,QAAQ,CAACD,CAAC,GAAG,CAAC,CAAC;cACjB;UACJ;QACJ;QACA,OAAOd,CAAC;MACZ,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;MACYZ,GAAG,CAAC4B,UAAU,GAAG,SAASA,UAAUA,CAACC,CAAC,EAAE;QACpC,IAAIA,CAAC,YAAYjC,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,EAC/B,OAAO6B,CAAC;QACZ,IAAIjB,CAAC,GAAG,IAAIhB,KAAK,CAACE,IAAI,CAACC,GAAG,CAACC,GAAG,CAAC,CAAC;QAChC,IAAI6B,CAAC,CAACrB,OAAO,IAAI,IAAI,EAAE;UACnBI,CAAC,CAACJ,OAAO,GAAGqB,CAAC,CAACrB,OAAO,KAAK,CAAC;QAC/B;QACA,IAAIqB,CAAC,CAACpB,MAAM,IAAI,IAAI,EAAE;UAClBG,CAAC,CAACH,MAAM,GAAGoB,CAAC,CAACpB,MAAM,KAAK,CAAC;QAC7B;QACA,IAAIoB,CAAC,CAACnB,IAAI,IAAI,IAAI,EAAE;UAChBE,CAAC,CAACF,IAAI,GAAGmB,CAAC,CAACnB,IAAI,KAAK,CAAC;QACzB;QACA,OAAOE,CAAC;MACZ,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYZ,GAAG,CAAC8B,QAAQ,GAAG,SAASA,QAAQA,CAAClB,CAAC,EAAEmB,CAAC,EAAE;QACnC,IAAI,CAACA,CAAC,EACFA,CAAC,GAAG,CAAC,CAAC;QACV,IAAIF,CAAC,GAAG,CAAC,CAAC;QACV,IAAIE,CAAC,CAACC,QAAQ,EAAE;UACZH,CAAC,CAACrB,OAAO,GAAG,CAAC;UACbqB,CAAC,CAACpB,MAAM,GAAG,CAAC;UACZoB,CAAC,CAACnB,IAAI,GAAG,CAAC;QACd;QACA,IAAIE,CAAC,CAACJ,OAAO,IAAI,IAAI,IAAII,CAAC,CAACG,cAAc,CAAC,SAAS,CAAC,EAAE;UAClDc,CAAC,CAACrB,OAAO,GAAGI,CAAC,CAACJ,OAAO;QACzB;QACA,IAAII,CAAC,CAACH,MAAM,IAAI,IAAI,IAAIG,CAAC,CAACG,cAAc,CAAC,QAAQ,CAAC,EAAE;UAChDc,CAAC,CAACpB,MAAM,GAAGG,CAAC,CAACH,MAAM;QACvB;QACA,IAAIG,CAAC,CAACF,IAAI,IAAI,IAAI,IAAIE,CAAC,CAACG,cAAc,CAAC,MAAM,CAAC,EAAE;UAC5Cc,CAAC,CAACnB,IAAI,GAAGE,CAAC,CAACF,IAAI;QACnB;QACA,OAAOmB,CAAC;MACZ,CAAC;;MAED;AACZ;AACA;AACA;AACA;AACA;AACA;MACY7B,GAAG,CAACO,SAAS,CAAC0B,MAAM,GAAG,SAASA,MAAMA,CAAA,EAAG;QACrC,OAAO,IAAI,CAACC,WAAW,CAACJ,QAAQ,CAAC,IAAI,EAAEzC,SAAS,CAACM,IAAI,CAACwC,aAAa,CAAC;MACxE,CAAC;MAED,OAAOnC,GAAG;IACd,CAAC,CAAE,CAAC;IAEJ,OAAOD,GAAG;EACd,CAAC,CAAE,CAAC;EAEJ,OAAOD,IAAI;AACf,CAAC,EAAE,CAAC;AAEJ,SAASF,KAAK,IAAIwC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}