{"ast":null,"code":"import { NotFoundError } from '../errors.js';\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Key} Key\n */\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback(key, has, store) {\n  const result = await has(key);\n  if (result) {\n    return result;\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store);\n  if (!levelJs) {\n    return false;\n  }\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString());\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result));\n    };\n  });\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nexport async function getWithFallback(key, get, has, store) {\n  if (await has(key)) {\n    return get(key);\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store);\n  if (!levelJs) {\n    throw new NotFoundError();\n  }\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString());\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result);\n      }\n      reject(new NotFoundError());\n    };\n  });\n}\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nfunction findLevelJs(store) {\n  let db = store;\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child;\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db;\n    }\n  }\n}","map":{"version":3,"names":["NotFoundError","hasWithFallback","key","has","store","result","levelJs","findLevelJs","Promise","resolve","reject","req","get","toString","transaction","onabort","error","oncomplete","Boolean","getWithFallback","db","child","type","constructor","name"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/utils/level.js"],"sourcesContent":["\nimport { NotFoundError } from '../errors.js'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Key} Key\n */\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nexport async function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw new NotFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(new NotFoundError())\n    }\n  })\n}\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nfunction findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,cAAc;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACtD,MAAMC,MAAM,GAAG,MAAMF,GAAG,CAACD,GAAG,CAAC;EAE7B,IAAIG,MAAM,EAAE;IACV,OAAOA,MAAM;EACf;;EAEA;EACA;EACA;EACA,MAAMC,OAAO,GAAGC,WAAW,CAACH,KAAK,CAAC;EAElC,IAAI,CAACE,OAAO,EAAE;IACZ,OAAO,KAAK;EACd;EAEA,OAAO,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA;IACA,MAAMC,GAAG,GAAGL,OAAO,CAACF,KAAK,CAAC,UAAU,CAAC,CAACQ,GAAG,CAACV,GAAG,CAACW,QAAQ,CAAC,CAAC,CAAC;IACzDF,GAAG,CAACG,WAAW,CAACC,OAAO,GAAG,MAAM;MAC9BL,MAAM,CAACC,GAAG,CAACG,WAAW,CAACE,KAAK,CAAC;IAC/B,CAAC;IACDL,GAAG,CAACG,WAAW,CAACG,UAAU,GAAG,MAAM;MACjCR,OAAO,CAACS,OAAO,CAACP,GAAG,CAACN,MAAM,CAAC,CAAC;IAC9B,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAec,eAAeA,CAAEjB,GAAG,EAAEU,GAAG,EAAET,GAAG,EAAEC,KAAK,EAAE;EAC3D,IAAI,MAAMD,GAAG,CAACD,GAAG,CAAC,EAAE;IAClB,OAAOU,GAAG,CAACV,GAAG,CAAC;EACjB;;EAEA;EACA;EACA;EACA,MAAMI,OAAO,GAAGC,WAAW,CAACH,KAAK,CAAC;EAElC,IAAI,CAACE,OAAO,EAAE;IACZ,MAAM,IAAIN,aAAa,CAAC,CAAC;EAC3B;EAEA,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC;IACA;IACA,MAAMC,GAAG,GAAGL,OAAO,CAACF,KAAK,CAAC,UAAU,CAAC,CAACQ,GAAG,CAACV,GAAG,CAACW,QAAQ,CAAC,CAAC,CAAC;IACzDF,GAAG,CAACG,WAAW,CAACC,OAAO,GAAG,MAAM;MAC9BL,MAAM,CAACC,GAAG,CAACG,WAAW,CAACE,KAAK,CAAC;IAC/B,CAAC;IACDL,GAAG,CAACG,WAAW,CAACG,UAAU,GAAG,MAAM;MACjC,IAAIN,GAAG,CAACN,MAAM,EAAE;QACd,OAAOI,OAAO,CAACE,GAAG,CAACN,MAAM,CAAC;MAC5B;MAEAK,MAAM,CAAC,IAAIV,aAAa,CAAC,CAAC,CAAC;IAC7B,CAAC;EACH,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,WAAWA,CAAEH,KAAK,EAAE;EAC3B,IAAIgB,EAAE,GAAGhB,KAAK;;EAEd;EACA,OAAOgB,EAAE,CAACA,EAAE,IAAIA,EAAE,CAACC,KAAK,EAAE;IACxB;IACAD,EAAE,GAAGA,EAAE,CAACA,EAAE,IAAIA,EAAE,CAACC,KAAK;;IAEtB;IACA;IACA,IAAID,EAAE,CAACE,IAAI,KAAK,UAAU,IAAIF,EAAE,CAACG,WAAW,CAACC,IAAI,KAAK,OAAO,EAAE;MAC7D,OAAOJ,EAAE;IACX;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}