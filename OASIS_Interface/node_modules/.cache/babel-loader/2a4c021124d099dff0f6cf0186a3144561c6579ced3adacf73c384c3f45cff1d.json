{"ast":null,"code":"import { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport { logger } from '@libp2p/logger';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { AddProviderHandler } from './handlers/add-provider.js';\nimport { FindNodeHandler } from './handlers/find-node.js';\nimport { GetProvidersHandler } from './handlers/get-providers.js';\nimport { GetValueHandler } from './handlers/get-value.js';\nimport { PingHandler } from './handlers/ping.js';\nimport { PutValueHandler } from './handlers/put-value.js';\nexport class RPC {\n  constructor(components, init) {\n    const {\n      providers,\n      peerRouting,\n      validators,\n      lan\n    } = init;\n    this.log = logger('libp2p:kad-dht:rpc');\n    this.routingTable = init.routingTable;\n    this.handlers = {\n      [MESSAGE_TYPE.GET_VALUE]: new GetValueHandler(components, {\n        peerRouting\n      }),\n      [MESSAGE_TYPE.PUT_VALUE]: new PutValueHandler(components, {\n        validators\n      }),\n      [MESSAGE_TYPE.FIND_NODE]: new FindNodeHandler(components, {\n        peerRouting,\n        lan\n      }),\n      [MESSAGE_TYPE.ADD_PROVIDER]: new AddProviderHandler({\n        providers\n      }),\n      [MESSAGE_TYPE.GET_PROVIDERS]: new GetProvidersHandler(components, {\n        peerRouting,\n        providers,\n        lan\n      }),\n      [MESSAGE_TYPE.PING]: new PingHandler()\n    };\n  }\n  /**\n   * Process incoming DHT messages\n   */\n  async handleMessage(peerId, msg) {\n    try {\n      await this.routingTable.add(peerId);\n    } catch (err) {\n      this.log.error('Failed to update the kbucket store', err);\n    }\n    // get handler & execute it\n    const handler = this.handlers[msg.type];\n    if (handler == null) {\n      this.log.error(`no handler found for message type: ${msg.type}`);\n      return;\n    }\n    return await handler.handle(peerId, msg);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   */\n  onIncomingStream(data) {\n    Promise.resolve().then(async () => {\n      const {\n        stream,\n        connection\n      } = data;\n      const peerId = connection.remotePeer;\n      try {\n        await this.routingTable.add(peerId);\n      } catch (err) {\n        this.log.error(err);\n      }\n      const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n      await pipe(stream, lp.decode(), async function* (source) {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg);\n          self.log('incoming %s from %p', desMessage.type, peerId);\n          const res = await self.handleMessage(peerId, desMessage);\n          // Not all handlers will return a response\n          if (res != null) {\n            yield res.serialize();\n          }\n        }\n      }, lp.encode(), stream);\n    }).catch(err => {\n      this.log.error(err);\n    });\n  }\n}","map":{"version":3,"names":["pipe","lp","logger","Message","MESSAGE_TYPE","AddProviderHandler","FindNodeHandler","GetProvidersHandler","GetValueHandler","PingHandler","PutValueHandler","RPC","constructor","components","init","providers","peerRouting","validators","lan","log","routingTable","handlers","GET_VALUE","PUT_VALUE","FIND_NODE","ADD_PROVIDER","GET_PROVIDERS","PING","handleMessage","peerId","msg","add","err","error","handler","type","handle","onIncomingStream","data","Promise","resolve","then","stream","connection","remotePeer","self","decode","source","desMessage","deserialize","res","serialize","encode","catch"],"sources":["../../../src/rpc/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}