{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport ssdp from '@achingbrain/ssdp';\nimport { logger } from '@libp2p/logger';\nimport first from 'it-first';\nimport pTimeout from 'p-timeout';\nconst log = logger('nat-port-mapper:discovery');\nconst ST = 'urn:schemas-upnp-org:device:InternetGatewayDevice:1';\nconst ONE_MINUTE = 60000;\nconst ONE_HOUR = ONE_MINUTE * 60;\nexport function discoverGateway(options = {}) {\n  const timeout = options.timeout ?? ONE_HOUR;\n  const discoveryTimeout = options.discoveryTimeout ?? ONE_MINUTE;\n  let service;\n  let expires;\n  return () => {\n    let discovery;\n    let clear;\n    const discover = {\n      gateway: async () => {\n        if (service != null && !(expires < Date.now())) {\n          return service;\n        }\n        if (options.gateway != null) {\n          log('Using overridden gateway address %s', options.gateway);\n          if (!options.gateway.startsWith('http')) {\n            options.gateway = `http://${options.gateway}`;\n          }\n          expires = Date.now() + timeout;\n          service = {\n            location: new URL(options.gateway),\n            details: {\n              device: {\n                serviceList: {\n                  service: []\n                },\n                deviceList: {\n                  device: []\n                }\n              }\n            },\n            expires,\n            serviceType: ST,\n            uniqueServiceName: 'unknown'\n          };\n        } else {\n          if (discovery == null) {\n            discovery = await ssdp({\n              start: false\n            });\n            discovery.on('error', err => {\n              log.error('ssdp error', err);\n            });\n            await discovery.start();\n          }\n          log('Discovering gateway');\n          const clearable = pTimeout(first(discovery.discover(ST)), {\n            milliseconds: discoveryTimeout\n          });\n          clear = clearable.clear;\n          const result = await clearable;\n          if (result == null) {\n            throw new Error('Could not discover gateway');\n          }\n          log('Discovered gateway %s', result.location);\n          service = result;\n          expires = Date.now() + timeout;\n        }\n        return service;\n      },\n      cancel: async () => {\n        if (discovery != null) {\n          await discovery.stop();\n        }\n        if (clear != null) {\n          clear();\n        }\n      }\n    };\n    return discover;\n  };\n}","map":{"version":3,"names":["ssdp","logger","first","pTimeout","log","ST","ONE_MINUTE","ONE_HOUR","discoverGateway","options","timeout","discoveryTimeout","service","expires","discovery","clear","discover","gateway","Date","now","startsWith","location","URL","details","device","serviceList","deviceList","serviceType","uniqueServiceName","start","on","err","error","clearable","milliseconds","result","Error","cancel","stop"],"sources":["../../../src/discovery/index.ts"],"sourcesContent":[null],"mappings":";;;AAAA,OAAOA,IAAI,MAAM,mBAAmB;AACpC,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,QAAQ,MAAM,WAAW;AAIhC,MAAMC,GAAG,GAAGH,MAAM,CAAC,2BAA2B,CAAC;AAwB/C,MAAMI,EAAE,GAAG,qDAAqD;AAChE,MAAMC,UAAU,GAAG,KAAK;AACxB,MAAMC,QAAQ,GAAGD,UAAU,GAAG,EAAE;AAEhC,OAAM,SAAUE,eAAeA,CAAEC,OAAA,GAA4B,EAAE;EAC7D,MAAMC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAIH,QAAQ;EAC3C,MAAMI,gBAAgB,GAAGF,OAAO,CAACE,gBAAgB,IAAIL,UAAU;EAC/D,IAAIM,OAAuC;EAC3C,IAAIC,OAAe;EAEnB,OAAO,MAAK;IACV,IAAIC,SAAe;IACnB,IAAIC,KAA+B;IAEnC,MAAMC,QAAQ,GAAoB;MAChCC,OAAO,EAAE,MAAAA,CAAA,KAAW;QAClB,IAAIL,OAAO,IAAI,IAAI,IAAI,EAAEC,OAAO,GAAGK,IAAI,CAACC,GAAG,EAAE,CAAC,EAAE;UAC9C,OAAOP,OAAO;;QAGhB,IAAIH,OAAO,CAACQ,OAAO,IAAI,IAAI,EAAE;UAC3Bb,GAAG,CAAC,qCAAqC,EAAEK,OAAO,CAACQ,OAAO,CAAC;UAE3D,IAAI,CAACR,OAAO,CAACQ,OAAO,CAACG,UAAU,CAAC,MAAM,CAAC,EAAE;YACvCX,OAAO,CAACQ,OAAO,GAAG,UAAUR,OAAO,CAACQ,OAAO,EAAE;;UAG/CJ,OAAO,GAAGK,IAAI,CAACC,GAAG,EAAE,GAAGT,OAAO;UAE9BE,OAAO,GAAG;YACRS,QAAQ,EAAE,IAAIC,GAAG,CAACb,OAAO,CAACQ,OAAO,CAAC;YAClCM,OAAO,EAAE;cACPC,MAAM,EAAE;gBACNC,WAAW,EAAE;kBACXb,OAAO,EAAE;iBACV;gBACDc,UAAU,EAAE;kBACVF,MAAM,EAAE;;;aAGb;YACDX,OAAO;YACPc,WAAW,EAAEtB,EAAE;YACfuB,iBAAiB,EAAE;WACpB;SACF,MAAM;UACL,IAAId,SAAS,IAAI,IAAI,EAAE;YACrBA,SAAS,GAAG,MAAMd,IAAI,CAAC;cACrB6B,KAAK,EAAE;aACR,CAAC;YACFf,SAAS,CAACgB,EAAE,CAAC,OAAO,EAAGC,GAAG,IAAI;cAC5B3B,GAAG,CAAC4B,KAAK,CAAC,YAAY,EAAED,GAAG,CAAC;YAC9B,CAAC,CAAC;YACF,MAAMjB,SAAS,CAACe,KAAK,EAAE;;UAGzBzB,GAAG,CAAC,qBAAqB,CAAC;UAC1B,MAAM6B,SAAS,GAAG9B,QAAQ,CAACD,KAAK,CAACY,SAAS,CAACE,QAAQ,CAAwBX,EAAE,CAAC,CAAC,EAAE;YAC/E6B,YAAY,EAAEvB;WACf,CAAC;UAEFI,KAAK,GAAGkB,SAAS,CAAClB,KAAK;UAEvB,MAAMoB,MAAM,GAAG,MAAMF,SAAS;UAE9B,IAAIE,MAAM,IAAI,IAAI,EAAE;YAClB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;;UAG/ChC,GAAG,CAAC,uBAAuB,EAAE+B,MAAM,CAACd,QAAQ,CAAC;UAE7CT,OAAO,GAAGuB,MAAM;UAChBtB,OAAO,GAAGK,IAAI,CAACC,GAAG,EAAE,GAAGT,OAAO;;QAGhC,OAAOE,OAAO;MAChB,CAAC;MACDyB,MAAM,EAAE,MAAAA,CAAA,KAAW;QACjB,IAAIvB,SAAS,IAAI,IAAI,EAAE;UACrB,MAAMA,SAAS,CAACwB,IAAI,EAAE;;QAGxB,IAAIvB,KAAK,IAAI,IAAI,EAAE;UACjBA,KAAK,EAAE;;MAEX;KACD;IAED,OAAOC,QAAQ;EACjB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}