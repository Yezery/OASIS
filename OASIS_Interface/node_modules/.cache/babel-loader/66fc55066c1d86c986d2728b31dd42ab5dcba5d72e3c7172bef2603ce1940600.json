{"ast":null,"code":"import { Uint8ArrayList } from 'uint8arraylist';\n// @ts-ignore\nimport { create } from 'rabin-wasm';\nimport errcode from 'err-code';\n\n/**\n * @typedef {object} RabinOptions\n * @property {number} min\n * @property {number} max\n * @property {number} bits\n * @property {number} window\n * @property {number} polynomial\n */\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function* rabinChunker(source, options) {\n  let min, max, avg;\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize;\n    min = options.minChunkSize;\n    max = options.maxChunkSize;\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE');\n  } else {\n    avg = options.avgChunkSize;\n    min = avg / 3;\n    max = avg + avg / 2;\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE');\n  }\n  if (max < min) {\n    max = min;\n  }\n  if (avg < min) {\n    avg = min;\n  }\n  const sizepow = Math.floor(Math.log2(avg));\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk;\n  }\n}\nexport default rabinChunker;\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {RabinOptions} options\n */\nasync function* rabin(source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window);\n  const buffers = new Uint8ArrayList();\n  for await (const chunk of source) {\n    buffers.append(chunk);\n    const sizes = r.fingerprint(chunk);\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i];\n      const buf = buffers.slice(0, size);\n      buffers.consume(size);\n      yield buf;\n    }\n  }\n  if (buffers.length) {\n    yield buffers.subarray(0);\n  }\n}","map":{"version":3,"names":["Uint8ArrayList","create","errcode","rabinChunker","source","options","min","max","avg","minChunkSize","maxChunkSize","avgChunkSize","Error","sizepow","Math","floor","log2","chunk","rabin","bits","window","polynomial","r","buffers","append","sizes","fingerprint","i","length","size","buf","slice","consume","subarray"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/chunker/rabin.js"],"sourcesContent":["import { Uint8ArrayList } from 'uint8arraylist'\n// @ts-ignore\nimport { create } from 'rabin-wasm'\nimport errcode from 'err-code'\n\n/**\n * @typedef {object} RabinOptions\n * @property {number} min\n * @property {number} max\n * @property {number} bits\n * @property {number} window\n * @property {number} polynomial\n */\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * rabinChunker (source, options) {\n  let min, max, avg\n\n  if (options.minChunkSize && options.maxChunkSize && options.avgChunkSize) {\n    avg = options.avgChunkSize\n    min = options.minChunkSize\n    max = options.maxChunkSize\n  } else if (!options.avgChunkSize) {\n    throw errcode(new Error('please specify an average chunk size'), 'ERR_INVALID_AVG_CHUNK_SIZE')\n  } else {\n    avg = options.avgChunkSize\n    min = avg / 3\n    max = avg + (avg / 2)\n  }\n\n  // validate min/max/avg in the same way as go\n  if (min < 16) {\n    throw errcode(new Error('rabin min must be greater than 16'), 'ERR_INVALID_MIN_CHUNK_SIZE')\n  }\n\n  if (max < min) {\n    max = min\n  }\n\n  if (avg < min) {\n    avg = min\n  }\n\n  const sizepow = Math.floor(Math.log2(avg))\n\n  for await (const chunk of rabin(source, {\n    min: min,\n    max: max,\n    bits: sizepow,\n    window: options.window,\n    polynomial: options.polynomial\n  })) {\n    yield chunk\n  }\n}\n\nexport default rabinChunker\n\n/**\n * @param {AsyncIterable<Uint8Array>} source\n * @param {RabinOptions} options\n */\nasync function * rabin (source, options) {\n  const r = await create(options.bits, options.min, options.max, options.window)\n  const buffers = new Uint8ArrayList()\n\n  for await (const chunk of source) {\n    buffers.append(chunk)\n\n    const sizes = r.fingerprint(chunk)\n\n    for (let i = 0; i < sizes.length; i++) {\n      const size = sizes[i]\n      const buf = buffers.slice(0, size)\n      buffers.consume(size)\n\n      yield buf\n    }\n  }\n\n  if (buffers.length) {\n    yield buffers.subarray(0)\n  }\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;AAC/C;AACA,SAASC,MAAM,QAAQ,YAAY;AACnC,OAAOC,OAAO,MAAM,UAAU;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAiBC,YAAYA,CAAEC,MAAM,EAAEC,OAAO,EAAE;EAC9C,IAAIC,GAAG,EAAEC,GAAG,EAAEC,GAAG;EAEjB,IAAIH,OAAO,CAACI,YAAY,IAAIJ,OAAO,CAACK,YAAY,IAAIL,OAAO,CAACM,YAAY,EAAE;IACxEH,GAAG,GAAGH,OAAO,CAACM,YAAY;IAC1BL,GAAG,GAAGD,OAAO,CAACI,YAAY;IAC1BF,GAAG,GAAGF,OAAO,CAACK,YAAY;EAC5B,CAAC,MAAM,IAAI,CAACL,OAAO,CAACM,YAAY,EAAE;IAChC,MAAMT,OAAO,CAAC,IAAIU,KAAK,CAAC,sCAAsC,CAAC,EAAE,4BAA4B,CAAC;EAChG,CAAC,MAAM;IACLJ,GAAG,GAAGH,OAAO,CAACM,YAAY;IAC1BL,GAAG,GAAGE,GAAG,GAAG,CAAC;IACbD,GAAG,GAAGC,GAAG,GAAIA,GAAG,GAAG,CAAE;EACvB;;EAEA;EACA,IAAIF,GAAG,GAAG,EAAE,EAAE;IACZ,MAAMJ,OAAO,CAAC,IAAIU,KAAK,CAAC,mCAAmC,CAAC,EAAE,4BAA4B,CAAC;EAC7F;EAEA,IAAIL,GAAG,GAAGD,GAAG,EAAE;IACbC,GAAG,GAAGD,GAAG;EACX;EAEA,IAAIE,GAAG,GAAGF,GAAG,EAAE;IACbE,GAAG,GAAGF,GAAG;EACX;EAEA,MAAMO,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,IAAI,CAACR,GAAG,CAAC,CAAC;EAE1C,WAAW,MAAMS,KAAK,IAAIC,KAAK,CAACd,MAAM,EAAE;IACtCE,GAAG,EAAEA,GAAG;IACRC,GAAG,EAAEA,GAAG;IACRY,IAAI,EAAEN,OAAO;IACbO,MAAM,EAAEf,OAAO,CAACe,MAAM;IACtBC,UAAU,EAAEhB,OAAO,CAACgB;EACtB,CAAC,CAAC,EAAE;IACF,MAAMJ,KAAK;EACb;AACF;AAEA,eAAed,YAAY;;AAE3B;AACA;AACA;AACA;AACA,gBAAiBe,KAAKA,CAAEd,MAAM,EAAEC,OAAO,EAAE;EACvC,MAAMiB,CAAC,GAAG,MAAMrB,MAAM,CAACI,OAAO,CAACc,IAAI,EAAEd,OAAO,CAACC,GAAG,EAAED,OAAO,CAACE,GAAG,EAAEF,OAAO,CAACe,MAAM,CAAC;EAC9E,MAAMG,OAAO,GAAG,IAAIvB,cAAc,CAAC,CAAC;EAEpC,WAAW,MAAMiB,KAAK,IAAIb,MAAM,EAAE;IAChCmB,OAAO,CAACC,MAAM,CAACP,KAAK,CAAC;IAErB,MAAMQ,KAAK,GAAGH,CAAC,CAACI,WAAW,CAACT,KAAK,CAAC;IAElC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACrC,MAAME,IAAI,GAAGJ,KAAK,CAACE,CAAC,CAAC;MACrB,MAAMG,GAAG,GAAGP,OAAO,CAACQ,KAAK,CAAC,CAAC,EAAEF,IAAI,CAAC;MAClCN,OAAO,CAACS,OAAO,CAACH,IAAI,CAAC;MAErB,MAAMC,GAAG;IACX;EACF;EAEA,IAAIP,OAAO,CAACK,MAAM,EAAE;IAClB,MAAML,OAAO,CAACU,QAAQ,CAAC,CAAC,CAAC;EAC3B;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}