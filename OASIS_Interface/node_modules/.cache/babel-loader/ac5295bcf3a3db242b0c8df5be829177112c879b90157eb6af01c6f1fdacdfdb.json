{"ast":null,"code":"import { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends EventEmitter {\n  constructor(components, init) {\n    super();\n    const {\n      protocol,\n      lan\n    } = init;\n    this.components = components;\n    this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`);\n    this.running = false;\n    this.protocol = protocol;\n  }\n  isStarted() {\n    return this.running;\n  }\n  /**\n   * Start the network\n   */\n  async start() {\n    if (this.running) {\n      return;\n    }\n    this.running = true;\n    // register protocol with topology\n    const topology = createTopology({\n      onConnect: peerId => {\n        this.log('observed peer %p with protocol %s', peerId, this.protocol);\n        this.dispatchEvent(new CustomEvent('peer', {\n          detail: peerId\n        }));\n      }\n    });\n    this.registrarId = await this.components.registrar.register(this.protocol, topology);\n  }\n  /**\n   * Stop all network activity\n   */\n  async stop() {\n    this.running = false;\n    // unregister protocol and handlers\n    if (this.registrarId != null) {\n      this.components.registrar.unregister(this.registrarId);\n      this.registrarId = undefined;\n    }\n  }\n}","map":{"version":3,"names":["createTopology","CustomEvent","EventEmitter","logger","TopologyListener","constructor","components","init","protocol","lan","log","running","isStarted","start","topology","onConnect","peerId","dispatchEvent","detail","registrarId","registrar","register","stop","unregister","undefined"],"sources":["../../src/topology-listener.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,EAAEC,YAAY,QAAQ,2BAA2B;AACrE,SAASC,MAAM,QAAQ,gBAAgB;AAevC;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQF,YAAoC;EAOxEG,YAAaC,UAA4B,EAAEC,IAA0B;IACnE,KAAK,EAAE;IAEP,MAAM;MAAEC,QAAQ;MAAEC;IAAG,CAAE,GAAGF,IAAI;IAE9B,IAAI,CAACD,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACI,GAAG,GAAGP,MAAM,CAAC,oCAAoCM,GAAG,GAAG,KAAK,GAAG,KAAK,EAAE,CAAC;IAC5E,IAAI,CAACE,OAAO,GAAG,KAAK;IACpB,IAAI,CAACH,QAAQ,GAAGA,QAAQ;EAC1B;EAEAI,SAASA,CAAA;IACP,OAAO,IAAI,CAACD,OAAO;EACrB;EAEA;;;EAGA,MAAME,KAAKA,CAAA;IACT,IAAI,IAAI,CAACF,OAAO,EAAE;MAChB;;IAGF,IAAI,CAACA,OAAO,GAAG,IAAI;IAEnB;IACA,MAAMG,QAAQ,GAAGd,cAAc,CAAC;MAC9Be,SAAS,EAAGC,MAAM,IAAI;QACpB,IAAI,CAACN,GAAG,CAAC,mCAAmC,EAAEM,MAAM,EAAE,IAAI,CAACR,QAAQ,CAAC;QACpE,IAAI,CAACS,aAAa,CAAC,IAAIhB,WAAW,CAAC,MAAM,EAAE;UACzCiB,MAAM,EAAEF;SACT,CAAC,CAAC;MACL;KACD,CAAC;IACF,IAAI,CAACG,WAAW,GAAG,MAAM,IAAI,CAACb,UAAU,CAACc,SAAS,CAACC,QAAQ,CAAC,IAAI,CAACb,QAAQ,EAAEM,QAAQ,CAAC;EACtF;EAEA;;;EAGA,MAAMQ,IAAIA,CAAA;IACR,IAAI,CAACX,OAAO,GAAG,KAAK;IAEpB;IACA,IAAI,IAAI,CAACQ,WAAW,IAAI,IAAI,EAAE;MAC5B,IAAI,CAACb,UAAU,CAACc,SAAS,CAACG,UAAU,CAAC,IAAI,CAACJ,WAAW,CAAC;MACtD,IAAI,CAACA,WAAW,GAAGK,SAAS;;EAEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}