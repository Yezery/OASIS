{"ast":null,"code":"/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const Envelope = $root.Envelope = (() => {\n  /**\n   * Properties of an Envelope.\n   * @exports IEnvelope\n   * @interface IEnvelope\n   * @property {Uint8Array|null} [publicKey] Envelope publicKey\n   * @property {Uint8Array|null} [payloadType] Envelope payloadType\n   * @property {Uint8Array|null} [payload] Envelope payload\n   * @property {Uint8Array|null} [signature] Envelope signature\n   */\n\n  /**\n   * Constructs a new Envelope.\n   * @exports Envelope\n   * @classdesc Represents an Envelope.\n   * @implements IEnvelope\n   * @constructor\n   * @param {IEnvelope=} [p] Properties to set\n   */\n  function Envelope(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * Envelope publicKey.\n   * @member {Uint8Array} publicKey\n   * @memberof Envelope\n   * @instance\n   */\n  Envelope.prototype.publicKey = $util.newBuffer([]);\n\n  /**\n   * Envelope payloadType.\n   * @member {Uint8Array} payloadType\n   * @memberof Envelope\n   * @instance\n   */\n  Envelope.prototype.payloadType = $util.newBuffer([]);\n\n  /**\n   * Envelope payload.\n   * @member {Uint8Array} payload\n   * @memberof Envelope\n   * @instance\n   */\n  Envelope.prototype.payload = $util.newBuffer([]);\n\n  /**\n   * Envelope signature.\n   * @member {Uint8Array} signature\n   * @memberof Envelope\n   * @instance\n   */\n  Envelope.prototype.signature = $util.newBuffer([]);\n\n  /**\n   * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n   * @function encode\n   * @memberof Envelope\n   * @static\n   * @param {IEnvelope} m Envelope message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  Envelope.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\")) w.uint32(10).bytes(m.publicKey);\n    if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\")) w.uint32(18).bytes(m.payloadType);\n    if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\")) w.uint32(26).bytes(m.payload);\n    if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\")) w.uint32(42).bytes(m.signature);\n    return w;\n  };\n\n  /**\n   * Decodes an Envelope message from the specified reader or buffer.\n   * @function decode\n   * @memberof Envelope\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {Envelope} Envelope\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  Envelope.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.Envelope();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.publicKey = r.bytes();\n          break;\n        case 2:\n          m.payloadType = r.bytes();\n          break;\n        case 3:\n          m.payload = r.bytes();\n          break;\n        case 5:\n          m.signature = r.bytes();\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Envelope\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {Envelope} Envelope\n   */\n  Envelope.fromObject = function fromObject(d) {\n    if (d instanceof $root.Envelope) return d;\n    var m = new $root.Envelope();\n    if (d.publicKey != null) {\n      if (typeof d.publicKey === \"string\") $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);else if (d.publicKey.length) m.publicKey = d.publicKey;\n    }\n    if (d.payloadType != null) {\n      if (typeof d.payloadType === \"string\") $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);else if (d.payloadType.length) m.payloadType = d.payloadType;\n    }\n    if (d.payload != null) {\n      if (typeof d.payload === \"string\") $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);else if (d.payload.length) m.payload = d.payload;\n    }\n    if (d.signature != null) {\n      if (typeof d.signature === \"string\") $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);else if (d.signature.length) m.signature = d.signature;\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Envelope\n   * @static\n   * @param {Envelope} m Envelope\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  Envelope.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.defaults) {\n      if (o.bytes === String) d.publicKey = \"\";else {\n        d.publicKey = [];\n        if (o.bytes !== Array) d.publicKey = $util.newBuffer(d.publicKey);\n      }\n      if (o.bytes === String) d.payloadType = \"\";else {\n        d.payloadType = [];\n        if (o.bytes !== Array) d.payloadType = $util.newBuffer(d.payloadType);\n      }\n      if (o.bytes === String) d.payload = \"\";else {\n        d.payload = [];\n        if (o.bytes !== Array) d.payload = $util.newBuffer(d.payload);\n      }\n      if (o.bytes === String) d.signature = \"\";else {\n        d.signature = [];\n        if (o.bytes !== Array) d.signature = $util.newBuffer(d.signature);\n      }\n    }\n    if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n      d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n    }\n    if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n      d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n    }\n    if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n      d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n    }\n    if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n      d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n    }\n    return d;\n  };\n\n  /**\n   * Converts this Envelope to JSON.\n   * @function toJSON\n   * @memberof Envelope\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  Envelope.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  return Envelope;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Envelope","p","ks","Object","keys","i","length","prototype","publicKey","newBuffer","payloadType","payload","signature","encode","m","w","create","hasOwnProperty","call","uint32","bytes","decode","r","l","c","undefined","len","pos","t","skipType","fromObject","d","base64","toObject","o","defaults","String","Array","slice","toJSON","constructor","toJSONOptions","default"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/envelope.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const Envelope = $root.Envelope = (() => {\n\n    /**\n     * Properties of an Envelope.\n     * @exports IEnvelope\n     * @interface IEnvelope\n     * @property {Uint8Array|null} [publicKey] Envelope publicKey\n     * @property {Uint8Array|null} [payloadType] Envelope payloadType\n     * @property {Uint8Array|null} [payload] Envelope payload\n     * @property {Uint8Array|null} [signature] Envelope signature\n     */\n\n    /**\n     * Constructs a new Envelope.\n     * @exports Envelope\n     * @classdesc Represents an Envelope.\n     * @implements IEnvelope\n     * @constructor\n     * @param {IEnvelope=} [p] Properties to set\n     */\n    function Envelope(p) {\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * Envelope publicKey.\n     * @member {Uint8Array} publicKey\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.publicKey = $util.newBuffer([]);\n\n    /**\n     * Envelope payloadType.\n     * @member {Uint8Array} payloadType\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payloadType = $util.newBuffer([]);\n\n    /**\n     * Envelope payload.\n     * @member {Uint8Array} payload\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.payload = $util.newBuffer([]);\n\n    /**\n     * Envelope signature.\n     * @member {Uint8Array} signature\n     * @memberof Envelope\n     * @instance\n     */\n    Envelope.prototype.signature = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified Envelope message. Does not implicitly {@link Envelope.verify|verify} messages.\n     * @function encode\n     * @memberof Envelope\n     * @static\n     * @param {IEnvelope} m Envelope message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Envelope.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.publicKey != null && Object.hasOwnProperty.call(m, \"publicKey\"))\n            w.uint32(10).bytes(m.publicKey);\n        if (m.payloadType != null && Object.hasOwnProperty.call(m, \"payloadType\"))\n            w.uint32(18).bytes(m.payloadType);\n        if (m.payload != null && Object.hasOwnProperty.call(m, \"payload\"))\n            w.uint32(26).bytes(m.payload);\n        if (m.signature != null && Object.hasOwnProperty.call(m, \"signature\"))\n            w.uint32(42).bytes(m.signature);\n        return w;\n    };\n\n    /**\n     * Decodes an Envelope message from the specified reader or buffer.\n     * @function decode\n     * @memberof Envelope\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {Envelope} Envelope\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Envelope.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.Envelope();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.publicKey = r.bytes();\n                break;\n            case 2:\n                m.payloadType = r.bytes();\n                break;\n            case 3:\n                m.payload = r.bytes();\n                break;\n            case 5:\n                m.signature = r.bytes();\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Envelope\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {Envelope} Envelope\n     */\n    Envelope.fromObject = function fromObject(d) {\n        if (d instanceof $root.Envelope)\n            return d;\n        var m = new $root.Envelope();\n        if (d.publicKey != null) {\n            if (typeof d.publicKey === \"string\")\n                $util.base64.decode(d.publicKey, m.publicKey = $util.newBuffer($util.base64.length(d.publicKey)), 0);\n            else if (d.publicKey.length)\n                m.publicKey = d.publicKey;\n        }\n        if (d.payloadType != null) {\n            if (typeof d.payloadType === \"string\")\n                $util.base64.decode(d.payloadType, m.payloadType = $util.newBuffer($util.base64.length(d.payloadType)), 0);\n            else if (d.payloadType.length)\n                m.payloadType = d.payloadType;\n        }\n        if (d.payload != null) {\n            if (typeof d.payload === \"string\")\n                $util.base64.decode(d.payload, m.payload = $util.newBuffer($util.base64.length(d.payload)), 0);\n            else if (d.payload.length)\n                m.payload = d.payload;\n        }\n        if (d.signature != null) {\n            if (typeof d.signature === \"string\")\n                $util.base64.decode(d.signature, m.signature = $util.newBuffer($util.base64.length(d.signature)), 0);\n            else if (d.signature.length)\n                m.signature = d.signature;\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Envelope\n     * @static\n     * @param {Envelope} m Envelope\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Envelope.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.publicKey = \"\";\n            else {\n                d.publicKey = [];\n                if (o.bytes !== Array)\n                    d.publicKey = $util.newBuffer(d.publicKey);\n            }\n            if (o.bytes === String)\n                d.payloadType = \"\";\n            else {\n                d.payloadType = [];\n                if (o.bytes !== Array)\n                    d.payloadType = $util.newBuffer(d.payloadType);\n            }\n            if (o.bytes === String)\n                d.payload = \"\";\n            else {\n                d.payload = [];\n                if (o.bytes !== Array)\n                    d.payload = $util.newBuffer(d.payload);\n            }\n            if (o.bytes === String)\n                d.signature = \"\";\n            else {\n                d.signature = [];\n                if (o.bytes !== Array)\n                    d.signature = $util.newBuffer(d.signature);\n            }\n        }\n        if (m.publicKey != null && m.hasOwnProperty(\"publicKey\")) {\n            d.publicKey = o.bytes === String ? $util.base64.encode(m.publicKey, 0, m.publicKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.publicKey) : m.publicKey;\n        }\n        if (m.payloadType != null && m.hasOwnProperty(\"payloadType\")) {\n            d.payloadType = o.bytes === String ? $util.base64.encode(m.payloadType, 0, m.payloadType.length) : o.bytes === Array ? Array.prototype.slice.call(m.payloadType) : m.payloadType;\n        }\n        if (m.payload != null && m.hasOwnProperty(\"payload\")) {\n            d.payload = o.bytes === String ? $util.base64.encode(m.payload, 0, m.payload.length) : o.bytes === Array ? Array.prototype.slice.call(m.payload) : m.payload;\n        }\n        if (m.signature != null && m.hasOwnProperty(\"signature\")) {\n            d.signature = o.bytes === String ? $util.base64.encode(m.signature, 0, m.signature.length) : o.bytes === Array ? Array.prototype.slice.call(m.signature) : m.signature;\n        }\n        return d;\n    };\n\n    /**\n     * Converts this Envelope to JSON.\n     * @function toJSON\n     * @memberof Envelope\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Envelope.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Envelope;\n})();\n\nexport { $root as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}