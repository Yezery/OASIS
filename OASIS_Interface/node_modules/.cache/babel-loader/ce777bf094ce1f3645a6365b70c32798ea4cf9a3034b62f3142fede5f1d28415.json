{"ast":null,"code":"'use strict';\n\nrequire(\"core-js/modules/es.array.push.js\");\nmodule.exports = Receptacle;\nvar toMS = require('ms');\nvar cache = Receptacle.prototype;\nvar counter = new Date() % 1e9;\nfunction getUID() {\n  return (Math.random() * 1e9 >>> 0) + counter++;\n}\n\n/**\n * Creates a cache with a maximum key size.\n *\n * @constructor\n * @param {Object} options\n * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).\n * @param {Array} [options.items=[]] the default items in the cache.\n */\nfunction Receptacle(options) {\n  options = options || {};\n  this.id = options.id || getUID();\n  this.max = options.max || Infinity;\n  this.items = options.items || [];\n  this._lookup = {};\n  this.size = this.items.length;\n  this.lastModified = new Date(options.lastModified || new Date());\n\n  // Setup initial timers and indexes for the cache.\n  for (var item, ttl, i = this.items.length; i--;) {\n    item = this.items[i];\n    ttl = new Date(item.expires) - new Date();\n    this._lookup[item.key] = item;\n    if (ttl > 0) this.expire(item.key, ttl);else if (ttl <= 0) this.delete(item.key);\n  }\n}\n\n/**\n * Tests if a key is currently in the cache.\n * Does not check if slot is empty.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {Boolean}\n */\ncache.has = function (key) {\n  return key in this._lookup;\n};\n\n/**\n * Retrieves a key from the cache and marks it as recently used.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {*}\n */\ncache.get = function (key) {\n  if (!this.has(key)) return null;\n  var record = this._lookup[key];\n  // Update expiry for \"refresh\" keys\n  if (record.refresh) this.expire(key, record.refresh);\n  // Move to front of the line.\n  this.items.splice(this.items.indexOf(record), 1);\n  this.items.push(record);\n  return record.value;\n};\n\n/**\n * Retrieves user meta data for a cached item.\n *\n * @param {String} key - the key to retrieve meta data from the cache.\n * @return {*}\n */\ncache.meta = function (key) {\n  if (!this.has(key)) return null;\n  var record = this._lookup[key];\n  if (!('meta' in record)) return null;\n  return record.meta;\n};\n\n/**\n * Puts a key into the cache with an optional expiry time.\n *\n * @param {String} key - the key for the value in the cache.\n * @param {*} value - the value to place at the key.\n * @param {Number} [options.ttl] - a time after which the key will be removed.\n * @return {Receptacle}\n */\ncache.set = function (key, value, options) {\n  var oldRecord = this._lookup[key];\n  var record = this._lookup[key] = {\n    key: key,\n    value: value\n  };\n  // Mark cache as modified.\n  this.lastModified = new Date();\n  if (oldRecord) {\n    // Replace an old key.\n    clearTimeout(oldRecord.timeout);\n    this.items.splice(this.items.indexOf(oldRecord), 1, record);\n  } else {\n    // Remove least used item if needed.\n    if (this.size >= this.max) this.delete(this.items[0].key);\n    // Add a new key.\n    this.items.push(record);\n    this.size++;\n  }\n  if (options) {\n    // Setup key expiry.\n    if ('ttl' in options) this.expire(key, options.ttl);\n    // Store user options in the record.\n    if ('meta' in options) record.meta = options.meta;\n    // Mark a auto refresh key.\n    if (options.refresh) record.refresh = options.ttl;\n  }\n  return this;\n};\n\n/**\n * Deletes an item from the cache.\n *\n * @param {String} key - the key to remove.\n * @return {Receptacle}\n */\ncache.delete = function (key) {\n  var record = this._lookup[key];\n  if (!record) return false;\n  this.lastModified = new Date();\n  this.items.splice(this.items.indexOf(record), 1);\n  clearTimeout(record.timeout);\n  delete this._lookup[key];\n  this.size--;\n  return this;\n};\n\n/**\n * Utility to register a key that will be removed after some time.\n *\n * @param {String} key - the key to remove.\n * @param {Number} [ms] - the timeout before removal.\n * @return {Receptacle}\n */\ncache.expire = function (key, ttl) {\n  var ms = ttl || 0;\n  var record = this._lookup[key];\n  if (!record) return this;\n  if (typeof ms === 'string') ms = toMS(ttl);\n  if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.');\n  clearTimeout(record.timeout);\n  record.timeout = setTimeout(this.delete.bind(this, record.key), ms);\n  record.expires = Number(new Date()) + ms;\n  return this;\n};\n\n/**\n * Deletes all items from the cache.\n * @return {Receptacle}\n */\ncache.clear = function () {\n  for (var i = this.items.length; i--;) this.delete(this.items[i].key);\n  return this;\n};\n\n/**\n * Fixes serialization issues in polyfilled environments.\n * Ensures non-cyclical serialized object.\n */\ncache.toJSON = function () {\n  var items = new Array(this.items.length);\n  var item;\n  for (var i = items.length; i--;) {\n    item = this.items[i];\n    items[i] = {\n      key: item.key,\n      meta: item.meta,\n      value: item.value,\n      expires: item.expires,\n      refresh: item.refresh\n    };\n  }\n  return {\n    id: this.id,\n    max: isFinite(this.max) ? this.max : undefined,\n    lastModified: this.lastModified,\n    items: items\n  };\n};","map":{"version":3,"names":["require","module","exports","Receptacle","toMS","cache","prototype","counter","Date","getUID","Math","random","options","id","max","Infinity","items","_lookup","size","length","lastModified","item","ttl","i","expires","key","expire","delete","has","get","record","refresh","splice","indexOf","push","value","meta","set","oldRecord","clearTimeout","timeout","ms","TypeError","setTimeout","bind","Number","clear","toJSON","Array","isFinite","undefined"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/receptacle@1.3.2/node_modules/receptacle/index.js"],"sourcesContent":["'use strict'\n\nmodule.exports = Receptacle\nvar toMS = require('ms')\nvar cache = Receptacle.prototype\nvar counter = new Date() % 1e9\n\nfunction getUID () { return (Math.random() * 1e9 >>> 0) + (counter++) }\n\n/**\n * Creates a cache with a maximum key size.\n *\n * @constructor\n * @param {Object} options\n * @param {Number} [options.max=Infinity] the maximum number of keys allowed in the cache (lru).\n * @param {Array} [options.items=[]] the default items in the cache.\n */\nfunction Receptacle (options) {\n  options = options || {}\n  this.id = options.id || getUID()\n  this.max = options.max || Infinity\n  this.items = options.items || []\n  this._lookup = {}\n  this.size = this.items.length\n  this.lastModified = new Date(options.lastModified || new Date())\n\n  // Setup initial timers and indexes for the cache.\n  for (var item, ttl, i = this.items.length; i--;) {\n    item = this.items[i]\n    ttl = new Date(item.expires) - new Date()\n    this._lookup[item.key] = item\n    if (ttl > 0) this.expire(item.key, ttl)\n    else if (ttl <= 0) this.delete(item.key)\n  }\n}\n\n/**\n * Tests if a key is currently in the cache.\n * Does not check if slot is empty.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {Boolean}\n */\ncache.has = function (key) {\n  return key in this._lookup\n}\n\n/**\n * Retrieves a key from the cache and marks it as recently used.\n *\n * @param {String} key - the key to retrieve from the cache.\n * @return {*}\n */\ncache.get = function (key) {\n  if (!this.has(key)) return null\n  var record = this._lookup[key]\n  // Update expiry for \"refresh\" keys\n  if (record.refresh) this.expire(key, record.refresh)\n  // Move to front of the line.\n  this.items.splice(this.items.indexOf(record), 1)\n  this.items.push(record)\n  return record.value\n}\n\n/**\n * Retrieves user meta data for a cached item.\n *\n * @param {String} key - the key to retrieve meta data from the cache.\n * @return {*}\n */\ncache.meta = function (key) {\n  if (!this.has(key)) return null\n  var record = this._lookup[key]\n  if (!('meta' in record)) return null\n  return record.meta\n}\n\n/**\n * Puts a key into the cache with an optional expiry time.\n *\n * @param {String} key - the key for the value in the cache.\n * @param {*} value - the value to place at the key.\n * @param {Number} [options.ttl] - a time after which the key will be removed.\n * @return {Receptacle}\n */\ncache.set = function (key, value, options) {\n  var oldRecord = this._lookup[key]\n  var record = this._lookup[key] = { key: key, value: value }\n  // Mark cache as modified.\n  this.lastModified = new Date()\n\n  if (oldRecord) {\n    // Replace an old key.\n    clearTimeout(oldRecord.timeout)\n    this.items.splice(this.items.indexOf(oldRecord), 1, record)\n  } else {\n    // Remove least used item if needed.\n    if (this.size >= this.max) this.delete(this.items[0].key)\n    // Add a new key.\n    this.items.push(record)\n    this.size++\n  }\n\n  if (options) {\n    // Setup key expiry.\n    if ('ttl' in options) this.expire(key, options.ttl)\n    // Store user options in the record.\n    if ('meta' in options) record.meta = options.meta\n    // Mark a auto refresh key.\n    if (options.refresh) record.refresh = options.ttl\n  }\n\n  return this\n}\n\n/**\n * Deletes an item from the cache.\n *\n * @param {String} key - the key to remove.\n * @return {Receptacle}\n */\ncache.delete = function (key) {\n  var record = this._lookup[key]\n  if (!record) return false\n  this.lastModified = new Date()\n  this.items.splice(this.items.indexOf(record), 1)\n  clearTimeout(record.timeout)\n  delete this._lookup[key]\n  this.size--\n  return this\n}\n\n/**\n * Utility to register a key that will be removed after some time.\n *\n * @param {String} key - the key to remove.\n * @param {Number} [ms] - the timeout before removal.\n * @return {Receptacle}\n */\ncache.expire = function (key, ttl) {\n  var ms = ttl || 0\n  var record = this._lookup[key]\n  if (!record) return this\n  if (typeof ms === 'string') ms = toMS(ttl)\n  if (typeof ms !== 'number') throw new TypeError('Expiration time must be a string or number.')\n  clearTimeout(record.timeout)\n  record.timeout = setTimeout(this.delete.bind(this, record.key), ms)\n  record.expires = Number(new Date()) + ms\n  return this\n}\n\n/**\n * Deletes all items from the cache.\n * @return {Receptacle}\n */\ncache.clear = function () {\n  for (var i = this.items.length; i--;) this.delete(this.items[i].key)\n  return this\n}\n\n/**\n * Fixes serialization issues in polyfilled environments.\n * Ensures non-cyclical serialized object.\n */\ncache.toJSON = function () {\n  var items = new Array(this.items.length)\n  var item\n  for (var i = items.length; i--;) {\n    item = this.items[i]\n    items[i] = {\n      key: item.key,\n      meta: item.meta,\n      value: item.value,\n      expires: item.expires,\n      refresh: item.refresh\n    }\n  }\n\n  return {\n    id: this.id,\n    max: isFinite(this.max) ? this.max : undefined,\n    lastModified: this.lastModified,\n    items: items\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}