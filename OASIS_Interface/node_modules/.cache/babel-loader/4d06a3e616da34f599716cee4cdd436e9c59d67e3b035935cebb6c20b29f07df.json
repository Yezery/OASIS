{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { InvalidCryptoExchangeError, UnexpectedPeerError } from '@libp2p/interface-connection-encrypter/errors';\nimport { decode0, decode1, decode2, encode0, encode1, encode2 } from './encoder.js';\nimport { XX } from './handshakes/xx.js';\nimport { logger, logLocalStaticKeys, logLocalEphemeralKeys, logRemoteEphemeralKey, logRemoteStaticKey, logCipherState } from './logger.js';\nimport { decodePayload, getPeerIdFromPayload, verifySignedPayload } from './utils.js';\nexport class XXHandshake {\n  constructor(isInitiator, payload, prologue, crypto, staticKeypair, connection, remotePeer, handshake) {\n    this.remoteExtensions = {\n      webtransportCerthashes: []\n    };\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n    this.xx = handshake ?? new XX(crypto);\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n  }\n  // stage 0\n  async propose() {\n    logLocalStaticKeys(this.session.hs.s);\n    if (this.isInitiator) {\n      logger.trace('Stage 0 - Initiator starting to send first message.');\n      const messageBuffer = this.xx.sendMessage(this.session, new Uint8Array(0));\n      this.connection.writeLP(encode0(messageBuffer));\n      logger.trace('Stage 0 - Initiator finished sending first message.');\n      logLocalEphemeralKeys(this.session.hs.e);\n    } else {\n      logger.trace('Stage 0 - Responder waiting to receive first message...');\n      const receivedMessageBuffer = decode0((await this.connection.readLP()).subarray());\n      const {\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if (!valid) {\n        throw new InvalidCryptoExchangeError('xx handshake stage 0 validation fail');\n      }\n      logger.trace('Stage 0 - Responder received first message.');\n      logRemoteEphemeralKey(this.session.hs.re);\n    }\n  }\n  // stage 1\n  async exchange() {\n    if (this.isInitiator) {\n      logger.trace('Stage 1 - Initiator waiting to receive first message from responder...');\n      const receivedMessageBuffer = decode1((await this.connection.readLP()).subarray());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if (!valid) {\n        throw new InvalidCryptoExchangeError('xx handshake stage 1 validation fail');\n      }\n      logger.trace('Stage 1 - Initiator received the message.');\n      logRemoteEphemeralKey(this.session.hs.re);\n      logRemoteStaticKey(this.session.hs.rs);\n      logger.trace(\"Initiator going to check remote's signature...\");\n      try {\n        const decodedPayload = decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteNoiseExtension(decodedPayload.extensions);\n      } catch (e) {\n        const err = e;\n        throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n      }\n      logger.trace('All good with the signature!');\n    } else {\n      logger.trace('Stage 1 - Responder sending out first message with signed payload and static key.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode1(messageBuffer));\n      logger.trace('Stage 1 - Responder sent the second handshake message with signed payload.');\n      logLocalEphemeralKeys(this.session.hs.e);\n    }\n  }\n  // stage 2\n  async finish() {\n    if (this.isInitiator) {\n      logger.trace('Stage 2 - Initiator sending third handshake message.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encode2(messageBuffer));\n      logger.trace('Stage 2 - Initiator sent message with signed payload.');\n    } else {\n      logger.trace('Stage 2 - Responder waiting for third handshake message...');\n      const receivedMessageBuffer = decode2((await this.connection.readLP()).subarray());\n      const {\n        plaintext,\n        valid\n      } = this.xx.recvMessage(this.session, receivedMessageBuffer);\n      if (!valid) {\n        throw new InvalidCryptoExchangeError('xx handshake stage 2 validation fail');\n      }\n      logger.trace('Stage 2 - Responder received the message, finished handshake.');\n      try {\n        const decodedPayload = decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await getPeerIdFromPayload(decodedPayload));\n        await verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteNoiseExtension(decodedPayload.extensions);\n      } catch (e) {\n        const err = e;\n        throw new UnexpectedPeerError(`Error occurred while verifying signed payload: ${err.message}`);\n      }\n    }\n    logCipherState(this.session);\n  }\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.xx.encryptWithAd(cs, new Uint8Array(0), plaintext);\n  }\n  decrypt(ciphertext, session, dst) {\n    const cs = this.getCS(session, false);\n    return this.xx.decryptWithAd(cs, new Uint8Array(0), ciphertext, dst);\n  }\n  getRemoteStaticKey() {\n    return this.session.hs.rs;\n  }\n  getCS(session, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new InvalidCryptoExchangeError('Handshake not completed properly, cipher state does not exist.');\n    }\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n  setRemoteNoiseExtension(e) {\n    if (e) {\n      this.remoteExtensions = e;\n    }\n  }\n}","map":{"version":3,"names":["InvalidCryptoExchangeError","UnexpectedPeerError","decode0","decode1","decode2","encode0","encode1","encode2","XX","logger","logLocalStaticKeys","logLocalEphemeralKeys","logRemoteEphemeralKey","logRemoteStaticKey","logCipherState","decodePayload","getPeerIdFromPayload","verifySignedPayload","XXHandshake","constructor","isInitiator","payload","prologue","crypto","staticKeypair","connection","remotePeer","handshake","remoteExtensions","webtransportCerthashes","xx","session","initSession","propose","hs","s","trace","messageBuffer","sendMessage","Uint8Array","writeLP","e","receivedMessageBuffer","readLP","subarray","valid","recvMessage","re","exchange","plaintext","rs","decodedPayload","setRemoteNoiseExtension","extensions","err","message","finish","encrypt","cs","getCS","encryptWithAd","decrypt","ciphertext","dst","decryptWithAd","getRemoteStaticKey","encryption","cs1","cs2"],"sources":["../../src/handshake-xx.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}