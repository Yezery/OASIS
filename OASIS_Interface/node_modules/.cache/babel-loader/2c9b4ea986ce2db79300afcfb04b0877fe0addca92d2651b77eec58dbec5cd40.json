{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { logger as createLogger } from '@libp2p/logger';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { BitswapMessageEntry } from '../message/entry.js';\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap'];\n  if (subsystem) {\n    name.push(subsystem);\n  }\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`);\n  }\n  return createLogger(name.join(':'));\n};\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nexport const includesWith = (pred, x, list) => {\n  let idx = 0;\n  const len = list.length;\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n    idx += 1;\n  }\n  return false;\n};\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const uniqWith = (pred, list) => {\n  let idx = 0;\n  const len = list.length;\n  const result = [];\n  let item;\n  while (idx < len) {\n    item = list[idx];\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n    idx += 1;\n  }\n  return result;\n};\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v);\n    if (acc[k]) {\n      acc[k].push(v);\n    } else {\n      acc[k] = [v];\n    }\n    return acc;\n  }, /** @type {Record<K, V[]>} */{});\n};\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values);\n  });\n};\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a);\n    const bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key);\n    if (valueB === undefined) {\n      return false;\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false;\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false;\n    }\n  }\n  return true;\n};","map":{"version":3,"names":["logger","createLogger","equals","uint8ArrayEquals","BitswapMessageEntry","id","subsystem","name","push","toString","slice","join","includesWith","pred","x","list","idx","len","length","uniqWith","result","item","groupBy","reduce","acc","v","k","pullAllWith","values","filter","i","sortBy","fn","Array","prototype","call","sort","a","b","aa","bb","isMapEqual","size","key","valueA","valueB","get","undefined","Uint8Array"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/utils/index.js"],"sourcesContent":["import { logger as createLogger } from '@libp2p/logger'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { BitswapMessageEntry } from '../message/entry.js'\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`)\n  }\n\n  return createLogger(name.join(':'))\n}\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nexport const includesWith = (pred, x, list) => {\n  let idx = 0\n  const len = list.length\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true\n    }\n    idx += 1\n  }\n  return false\n}\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const uniqWith = (pred, list) => {\n  let idx = 0\n  const len = list.length\n  const result = []\n  let item\n\n  while (idx < len) {\n    item = list[idx]\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v)\n\n    if (acc[k]) {\n      acc[k].push(v)\n    } else {\n      acc[k] = [v]\n    }\n    return acc\n  }, /** @type {Record<K, V[]>} */({}))\n}\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values)\n  })\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key)\n\n    if (valueB === undefined) {\n      return false\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}