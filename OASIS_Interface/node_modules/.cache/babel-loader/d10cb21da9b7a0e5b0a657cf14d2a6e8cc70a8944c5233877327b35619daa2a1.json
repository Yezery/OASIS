{"ast":null,"code":"import _classPrivateFieldInitSpec from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classPrivateFieldGet from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet.js\";\nimport _classPrivateFieldSet from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nimport { CodeError } from '@libp2p/interface/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { CID } from 'multiformats/cid';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bytesToMultiaddrParts, stringToMultiaddrParts, tuplesToBytes } from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\nexport { MultiaddrFilter } from './filter/multiaddr-filter.js';\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n  let ip;\n  let host = addr.address;\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n    case 6:\n      ip = 'ip6';\n      if (host.includes('%')) {\n        const parts = host.split('%');\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr');\n        }\n        host = parts[0];\n        const zone = parts[1];\n        ip = `/ip6zone/${zone}/ip6`;\n      }\n      break;\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  }\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(proto => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n  return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nvar _string = /*#__PURE__*/new WeakMap();\nvar _tuples = /*#__PURE__*/new WeakMap();\nvar _stringTuples = /*#__PURE__*/new WeakMap();\nvar _path = /*#__PURE__*/new WeakMap();\nclass DefaultMultiaddr {\n  constructor(addr) {\n    _defineProperty(this, \"bytes\", void 0);\n    _classPrivateFieldInitSpec(this, _string, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _tuples, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _stringTuples, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldInitSpec(this, _path, {\n      writable: true,\n      value: void 0\n    });\n    _defineProperty(this, symbol, true);\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    let parts;\n    if (addr instanceof Uint8Array) {\n      parts = bytesToMultiaddrParts(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      parts = stringToMultiaddrParts(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      parts = bytesToMultiaddrParts(addr.bytes);\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n    this.bytes = parts.bytes;\n    _classPrivateFieldSet(this, _string, parts.string);\n    _classPrivateFieldSet(this, _tuples, parts.tuples);\n    _classPrivateFieldSet(this, _stringTuples, parts.stringTuples);\n    _classPrivateFieldSet(this, _path, parts.path);\n  }\n  toString() {\n    return _classPrivateFieldGet(this, _string);\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toOptions() {\n    let family;\n    let transport;\n    let host;\n    let port;\n    let zone = '';\n    const tcp = getProtocol('tcp');\n    const udp = getProtocol('udp');\n    const ip4 = getProtocol('ip4');\n    const ip6 = getProtocol('ip6');\n    const dns6 = getProtocol('dns6');\n    const ip6zone = getProtocol('ip6zone');\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`;\n      }\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name;\n        port = 443;\n        host = `${value ?? ''}${zone}`;\n        family = code === dns6.code ? 6 : 4;\n      }\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name;\n        port = parseInt(value ?? '');\n      }\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name;\n        host = `${value ?? ''}${zone}`;\n        family = code === ip6.code ? 6 : 4;\n      }\n    }\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family,\n      host,\n      transport,\n      port\n    };\n    return opts;\n  }\n  protos() {\n    return _classPrivateFieldGet(this, _tuples).map(([code]) => Object.assign({}, getProtocol(code)));\n  }\n  protoCodes() {\n    return _classPrivateFieldGet(this, _tuples).map(([code]) => code);\n  }\n  protoNames() {\n    return _classPrivateFieldGet(this, _tuples).map(([code]) => getProtocol(code).name);\n  }\n  tuples() {\n    return _classPrivateFieldGet(this, _tuples);\n  }\n  stringTuples() {\n    return _classPrivateFieldGet(this, _stringTuples);\n  }\n  encapsulate(addr) {\n    addr = new DefaultMultiaddr(addr);\n    return new DefaultMultiaddr(this.toString() + addr.toString());\n  }\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new DefaultMultiaddr(s.slice(0, i));\n  }\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  getPeerId() {\n    try {\n      let tuples = [];\n      this.stringTuples().forEach(([code, name]) => {\n        if (code === names.p2p.code) {\n          tuples.push([code, name]);\n        }\n        // if this is a p2p-circuit address, return the target peer id if present\n        // not the peer id of the relay\n        if (code === names['p2p-circuit'].code) {\n          tuples = [];\n        }\n      });\n      // Get the last ipfs tuple ['p2p', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getPath() {\n    return _classPrivateFieldGet(this, _path);\n  }\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw new CodeError(`no available resolver for ${resolvableProto.name}`, 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new DefaultMultiaddr(a));\n  }\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [inspect]() {\n    return `Multiaddr(${_classPrivateFieldGet(this, _string)})`;\n  }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"names":["CodeError","base58btc","CID","equals","uint8ArrayEquals","toString","uint8ArrayToString","bytesToMultiaddrParts","stringToMultiaddrParts","tuplesToBytes","getProtocol","names","inspect","Symbol","for","DNS_CODES","code","resolvers","Map","symbol","MultiaddrFilter","fromNodeAddress","addr","transport","Error","ip","host","address","family","includes","parts","split","length","zone","DefaultMultiaddr","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","_string","WeakMap","_tuples","_stringTuples","_path","constructor","_defineProperty","_classPrivateFieldInitSpec","writable","Uint8Array","charAt","bytes","_classPrivateFieldSet","string","tuples","stringTuples","path","_classPrivateFieldGet","toJSON","toOptions","tcp","udp","ip4","ip6","dns6","ip6zone","name","parseInt","opts","map","Object","assign","protoCodes","protoNames","encapsulate","decapsulate","addrString","s","i","lastIndexOf","slice","decapsulateCode","getPeerId","forEach","p2p","push","tuple","pop","peerIdStr","decode","parse","multihash","e","getPath","resolve","options","resolvableProto","find","p","resolver","get","addresses","a","nodeAddress","isThinWaistAddress","multiaddr","protocols"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}