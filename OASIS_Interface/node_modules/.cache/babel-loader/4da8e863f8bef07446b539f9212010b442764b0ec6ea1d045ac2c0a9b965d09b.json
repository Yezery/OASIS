{"ast":null,"code":"// dns-nodejs gets replaced by dns-browser when bundled\nimport { resolveDnslink } from 'ipfs-core-config/dns';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n  return domain;\n}\nexport function createDns() {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = {\n    recursive: true\n  }) => {\n    // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string');\n    }\n    domain = fqdnFixups(domain);\n    return resolveDnslink(domain, options);\n  };\n  return withTimeoutOption(resolveDNS);\n}","map":{"version":3,"names":["resolveDnslink","withTimeoutOption","fqdnFixups","domain","endsWith","replace","createDns","resolveDNS","options","recursive","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/dns.js"],"sourcesContent":["// dns-nodejs gets replaced by dns-browser when bundled\nimport { resolveDnslink } from 'ipfs-core-config/dns'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {string} domain\n * @returns {string}\n */\nfunction fqdnFixups (domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link')\n  }\n  return domain\n}\n\nexport function createDns () {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"dns\"]}\n   */\n  const resolveDNS = async (domain, options = { recursive: true }) => { // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string')\n    }\n\n    domain = fqdnFixups(domain)\n\n    return resolveDnslink(domain, options)\n  }\n\n  return withTimeoutOption(resolveDNS)\n}\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,sBAAsB;AACrD,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAAEC,MAAM,EAAE;EAC3B;EACA;EACA,IAAIA,MAAM,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC3BD,MAAM,GAAGA,MAAM,CAACE,OAAO,CAAC,OAAO,EAAE,WAAW,CAAC;EAC/C;EACA,OAAOF,MAAM;AACf;AAEA,OAAO,SAASG,SAASA,CAAA,EAAI;EAC3B;AACF;AACA;EACE,MAAMC,UAAU,GAAG,MAAAA,CAAOJ,MAAM,EAAEK,OAAO,GAAG;IAAEC,SAAS,EAAE;EAAK,CAAC,KAAK;IAAE;IACpE,IAAI,OAAON,MAAM,KAAK,QAAQ,EAAE;MAC9B,MAAM,IAAIO,KAAK,CAAC,4CAA4C,CAAC;IAC/D;IAEAP,MAAM,GAAGD,UAAU,CAACC,MAAM,CAAC;IAE3B,OAAOH,cAAc,CAACG,MAAM,EAAEK,OAAO,CAAC;EACxC,CAAC;EAED,OAAOP,iBAAiB,CAACM,UAAU,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}