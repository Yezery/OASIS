{"ast":null,"code":"import { TopicValidatorResult } from '@libp2p/interface-pubsub';\nexport var SignaturePolicy;\n(function (SignaturePolicy) {\n  /**\n   * On the producing side:\n   * - Build messages with the signature, key (from may be enough for certain inlineable public key types), from and seqno fields.\n   *\n   * On the consuming side:\n   * - Enforce the fields to be present, reject otherwise.\n   * - Propagate only if the fields are valid and signature can be verified, reject otherwise.\n   */\n  SignaturePolicy[\"StrictSign\"] = \"StrictSign\";\n  /**\n   * On the producing side:\n   * - Build messages without the signature, key, from and seqno fields.\n   * - The corresponding protobuf key-value pairs are absent from the marshalled message, not just empty.\n   *\n   * On the consuming side:\n   * - Enforce the fields to be absent, reject otherwise.\n   * - Propagate only if the fields are absent, reject otherwise.\n   * - A message_id function will not be able to use the above fields, and should instead rely on the data field. A commonplace strategy is to calculate a hash.\n   */\n  SignaturePolicy[\"StrictNoSign\"] = \"StrictNoSign\";\n})(SignaturePolicy || (SignaturePolicy = {}));\nexport var PublishConfigType;\n(function (PublishConfigType) {\n  PublishConfigType[PublishConfigType[\"Signing\"] = 0] = \"Signing\";\n  PublishConfigType[PublishConfigType[\"Anonymous\"] = 1] = \"Anonymous\";\n})(PublishConfigType || (PublishConfigType = {}));\nexport var RejectReason;\n(function (RejectReason) {\n  /**\n   * The message failed the configured validation during decoding.\n   * SelfOrigin is considered a ValidationError\n   */\n  RejectReason[\"Error\"] = \"error\";\n  /**\n   * Custom validator fn reported status IGNORE.\n   */\n  RejectReason[\"Ignore\"] = \"ignore\";\n  /**\n   * Custom validator fn reported status REJECT.\n   */\n  RejectReason[\"Reject\"] = \"reject\";\n  /**\n   * The peer that sent the message OR the source from field is blacklisted.\n   * Causes messages to be ignored, not penalized, neither do score record creation.\n   */\n  RejectReason[\"Blacklisted\"] = \"blacklisted\";\n})(RejectReason || (RejectReason = {}));\nexport var ValidateError;\n(function (ValidateError) {\n  /// The message has an invalid signature,\n  ValidateError[\"InvalidSignature\"] = \"invalid_signature\";\n  /// The sequence number was the incorrect size\n  ValidateError[\"InvalidSeqno\"] = \"invalid_seqno\";\n  /// The PeerId was invalid\n  ValidateError[\"InvalidPeerId\"] = \"invalid_peerid\";\n  /// Signature existed when validation has been sent to\n  /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n  ValidateError[\"SignaturePresent\"] = \"signature_present\";\n  /// Sequence number existed when validation has been sent to\n  /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n  ValidateError[\"SeqnoPresent\"] = \"seqno_present\";\n  /// Message source existed when validation has been sent to\n  /// [`crate::behaviour::MessageAuthenticity::Anonymous`].\n  ValidateError[\"FromPresent\"] = \"from_present\";\n  /// The data transformation failed.\n  ValidateError[\"TransformFailed\"] = \"transform_failed\";\n})(ValidateError || (ValidateError = {}));\nexport var MessageStatus;\n(function (MessageStatus) {\n  MessageStatus[\"duplicate\"] = \"duplicate\";\n  MessageStatus[\"invalid\"] = \"invalid\";\n  MessageStatus[\"valid\"] = \"valid\";\n})(MessageStatus || (MessageStatus = {}));\n/**\n * Typesafe conversion of MessageAcceptance -> RejectReason. TS ensures all values covered\n */\nexport function rejectReasonFromAcceptance(acceptance) {\n  switch (acceptance) {\n    case TopicValidatorResult.Ignore:\n      return RejectReason.Ignore;\n    case TopicValidatorResult.Reject:\n      return RejectReason.Reject;\n  }\n}","map":{"version":3,"names":["TopicValidatorResult","SignaturePolicy","PublishConfigType","RejectReason","ValidateError","MessageStatus","rejectReasonFromAcceptance","acceptance","Ignore","Reject"],"sources":["../../src/types.ts"],"sourcesContent":[null],"mappings":"AAIA,SAAkBA,oBAAoB,QAAQ,0BAA0B;AA+CxE,WAAYC,eAqBX;AArBD,WAAYA,eAAe;EACzB;;;;;;;;EAQAA,eAAA,6BAAyB;EACzB;;;;;;;;;;EAUAA,eAAA,iCAA6B;AAC/B,CAAC,EArBWA,eAAe,KAAfA,eAAe;AA4B3B,WAAYC,iBAGX;AAHD,WAAYA,iBAAiB;EAC3BA,iBAAA,CAAAA,iBAAA,4BAAO;EACPA,iBAAA,CAAAA,iBAAA,gCAAS;AACX,CAAC,EAHWA,iBAAiB,KAAjBA,iBAAiB;AAkB7B,WAAYC,YAmBX;AAnBD,WAAYA,YAAY;EACtB;;;;EAIAA,YAAA,mBAAe;EACf;;;EAGAA,YAAA,qBAAiB;EACjB;;;EAGAA,YAAA,qBAAiB;EACjB;;;;EAIAA,YAAA,+BAA2B;AAC7B,CAAC,EAnBWA,YAAY,KAAZA,YAAY;AAqBxB,WAAYC,aAkBX;AAlBD,WAAYA,aAAa;EACvB;EACAA,aAAA,0CAAsC;EACtC;EACAA,aAAA,kCAA8B;EAC9B;EACAA,aAAA,oCAAgC;EAChC;EACA;EACAA,aAAA,0CAAsC;EACtC;EACA;EACAA,aAAA,kCAA8B;EAC9B;EACA;EACAA,aAAA,gCAA4B;EAC5B;EACAA,aAAA,wCAAoC;AACtC,CAAC,EAlBWA,aAAa,KAAbA,aAAa;AAoBzB,WAAYC,aAIX;AAJD,WAAYA,aAAa;EACvBA,aAAA,2BAAuB;EACvBA,aAAA,uBAAmB;EACnBA,aAAA,mBAAe;AACjB,CAAC,EAJWA,aAAa,KAAbA,aAAa;AAezB;;;AAGA,OAAM,SAAUC,0BAA0BA,CACxCC,UAAsE;EAEtE,QAAQA,UAAU;IAChB,KAAKP,oBAAoB,CAACQ,MAAM;MAC9B,OAAOL,YAAY,CAACK,MAAM;IAC5B,KAAKR,oBAAoB,CAACS,MAAM;MAC9B,OAAON,YAAY,CAACM,MAAM;;AAEhC"},"metadata":{},"sourceType":"module","externalDependencies":[]}