{"ast":null,"code":"import { Token, Type } from './token.js';\nimport { assertEnoughData, decodeErrPrefix } from './common.js';\nimport * as uint from './0uint.js';\nimport { encodeBytes } from './2bytes.js';\nimport { toString, slice } from './byte-utils.js';\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} prefix\n * @param {number} length\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nfunction toToken(data, pos, prefix, length, options) {\n  const totLength = prefix + length;\n  assertEnoughData(data, pos, totLength);\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength);\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength);\n  }\n  return tok;\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeStringCompact(data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options);\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options);\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options);\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options);\n}\n\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString64(data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options);\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`);\n  }\n  return toToken(data, pos, 9, l, options);\n}\nexport const encodeString = encodeBytes;","map":{"version":3,"names":["Token","Type","assertEnoughData","decodeErrPrefix","uint","encodeBytes","toString","slice","toToken","data","pos","prefix","length","options","totLength","tok","string","retainStringBytes","byteValue","decodeStringCompact","minor","decodeString8","_minor","readUint8","decodeString16","readUint16","decodeString32","readUint32","decodeString64","l","readUint64","Error","encodeString"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/cborg@4.0.1/node_modules/cborg/lib/3string.js"],"sourcesContent":["import { Token, Type } from './token.js'\nimport { assertEnoughData, decodeErrPrefix } from './common.js'\nimport * as uint from './0uint.js'\nimport { encodeBytes } from './2bytes.js'\nimport { toString, slice } from './byte-utils.js'\n\n/**\n * @typedef {import('./bl.js').Bl} Bl\n * @typedef {import('../interface').DecodeOptions} DecodeOptions\n */\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} prefix\n * @param {number} length\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nfunction toToken (data, pos, prefix, length, options) {\n  const totLength = prefix + length\n  assertEnoughData(data, pos, totLength)\n  const tok = new Token(Type.string, toString(data, pos + prefix, pos + totLength), totLength)\n  if (options.retainStringBytes === true) {\n    tok.byteValue = slice(data, pos + prefix, pos + totLength)\n  }\n  return tok\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeStringCompact (data, pos, minor, options) {\n  return toToken(data, pos, 1, minor, options)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString8 (data, pos, _minor, options) {\n  return toToken(data, pos, 2, uint.readUint8(data, pos + 1, options), options)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString16 (data, pos, _minor, options) {\n  return toToken(data, pos, 3, uint.readUint16(data, pos + 1, options), options)\n}\n\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString32 (data, pos, _minor, options) {\n  return toToken(data, pos, 5, uint.readUint32(data, pos + 1, options), options)\n}\n\n// TODO: maybe we shouldn't support this ..\n/**\n * @param {Uint8Array} data\n * @param {number} pos\n * @param {number} _minor\n * @param {DecodeOptions} options\n * @returns {Token}\n */\nexport function decodeString64 (data, pos, _minor, options) {\n  const l = uint.readUint64(data, pos + 1, options)\n  if (typeof l === 'bigint') {\n    throw new Error(`${decodeErrPrefix} 64-bit integer string lengths not supported`)\n  }\n  return toToken(data, pos, 9, l, options)\n}\n\nexport const encodeString = encodeBytes\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}