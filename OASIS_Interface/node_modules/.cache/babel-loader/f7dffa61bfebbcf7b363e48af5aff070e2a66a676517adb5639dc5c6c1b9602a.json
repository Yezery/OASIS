{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Documents/\\u5927\\u5B66\\u7D20\\u6750/\\u6BD5\\u4E1A\\u8BBE\\u8BA1/OASIS/OASIS_Interface/node_modules/.store/@babel+runtime@7.23.2/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nlet _Symbol$toStringTag;\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { symbol } from '@libp2p/interface-peer-id';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { bases } from 'multiformats/basics';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { identity } from 'multiformats/hashes/identity';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst baseDecoder = Object.values(bases).map(codec => codec.decoder)\n// @ts-expect-error https://github.com/multiformats/js-multiformats/issues/141\n.reduce((acc, curr) => acc.or(curr), bases.identity.decoder);\n// these values are from https://github.com/multiformats/multicodec/blob/master/table.csv\nconst LIBP2P_KEY_CODE = 0x72;\nconst MARSHALLED_ED225519_PUBLIC_KEY_LENGTH = 36;\nconst MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH = 37;\n_Symbol$toStringTag = Symbol.toStringTag;\nclass PeerIdImpl {\n  constructor(init) {\n    _defineProperty(this, \"type\", void 0);\n    _defineProperty(this, \"multihash\", void 0);\n    _defineProperty(this, \"privateKey\", void 0);\n    _defineProperty(this, \"publicKey\", void 0);\n    _defineProperty(this, \"string\", void 0);\n    _defineProperty(this, symbol, true);\n    this.type = init.type;\n    this.multihash = init.multihash;\n    this.privateKey = init.privateKey;\n    // mark string cache as non-enumerable\n    Object.defineProperty(this, 'string', {\n      enumerable: false,\n      writable: true\n    });\n  }\n  get [_Symbol$toStringTag]() {\n    return `PeerId(${this.toString()})`;\n  }\n  toString() {\n    if (this.string == null) {\n      this.string = base58btc.encode(this.multihash.bytes).slice(1);\n    }\n    return this.string;\n  }\n  // return self-describing String representation\n  // in default format from RFC 0001: https://github.com/libp2p/specs/pull/209\n  toCID() {\n    return CID.createV1(LIBP2P_KEY_CODE, this.multihash);\n  }\n  toBytes() {\n    return this.multihash.bytes;\n  }\n  /**\n   * Returns Multiaddr as a JSON string\n   */\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Checks the equality of `this` peer against a given PeerId\n   */\n  equals(id) {\n    if (id instanceof Uint8Array) {\n      return uint8ArrayEquals(this.multihash.bytes, id);\n    } else if (typeof id === 'string') {\n      return peerIdFromString(id).equals(this);\n    } else if (id?.multihash?.bytes != null) {\n      return uint8ArrayEquals(this.multihash.bytes, id.multihash.bytes);\n    } else {\n      throw new Error('not valid Id');\n    }\n  }\n  /**\n   * Returns PeerId as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { peerIdFromString } from '@libp2p/peer-id'\n   *\n   * console.info(peerIdFromString('QmFoo'))\n   * // 'PeerId(QmFoo)'\n   * ```\n   */\n  [inspect]() {\n    return `PeerId(${this.toString()})`;\n  }\n}\nclass RSAPeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({\n      ...init,\n      type: 'RSA'\n    });\n    _defineProperty(this, \"type\", 'RSA');\n    _defineProperty(this, \"publicKey\", void 0);\n    this.publicKey = init.publicKey;\n  }\n}\nclass Ed25519PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({\n      ...init,\n      type: 'Ed25519'\n    });\n    _defineProperty(this, \"type\", 'Ed25519');\n    _defineProperty(this, \"publicKey\", void 0);\n    this.publicKey = init.multihash.digest;\n  }\n}\nclass Secp256k1PeerIdImpl extends PeerIdImpl {\n  constructor(init) {\n    super({\n      ...init,\n      type: 'secp256k1'\n    });\n    _defineProperty(this, \"type\", 'secp256k1');\n    _defineProperty(this, \"publicKey\", void 0);\n    this.publicKey = init.multihash.digest;\n  }\n}\nexport function createPeerId(init) {\n  if (init.type === 'RSA') {\n    return new RSAPeerIdImpl(init);\n  }\n  if (init.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(init);\n  }\n  if (init.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(init);\n  }\n  throw new CodeError('Type must be \"RSA\", \"Ed25519\" or \"secp256k1\"', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromPeerId(other) {\n  if (other.type === 'RSA') {\n    return new RSAPeerIdImpl(other);\n  }\n  if (other.type === 'Ed25519') {\n    return new Ed25519PeerIdImpl(other);\n  }\n  if (other.type === 'secp256k1') {\n    return new Secp256k1PeerIdImpl(other);\n  }\n  throw new CodeError('Not a PeerId', 'ERR_INVALID_PARAMETERS');\n}\nexport function peerIdFromString(str, decoder) {\n  decoder = decoder ?? baseDecoder;\n  if (str.charAt(0) === '1' || str.charAt(0) === 'Q') {\n    // identity hash ed25519/secp256k1 key or sha2-256 hash of\n    // rsa public key - base58btc encoded either way\n    const multihash = Digest.decode(base58btc.decode(`z${str}`));\n    if (str.startsWith('12D')) {\n      return new Ed25519PeerIdImpl({\n        multihash\n      });\n    } else if (str.startsWith('16U')) {\n      return new Secp256k1PeerIdImpl({\n        multihash\n      });\n    } else {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  }\n  return peerIdFromBytes(baseDecoder.decode(str));\n}\nexport function peerIdFromBytes(buf) {\n  try {\n    const multihash = Digest.decode(buf);\n    if (multihash.code === identity.code) {\n      if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n        return new Ed25519PeerIdImpl({\n          multihash\n        });\n      } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n        return new Secp256k1PeerIdImpl({\n          multihash\n        });\n      }\n    }\n    if (multihash.code === sha256.code) {\n      return new RSAPeerIdImpl({\n        multihash\n      });\n    }\n  } catch {\n    return peerIdFromCID(CID.decode(buf));\n  }\n  throw new Error('Supplied PeerID CID is invalid');\n}\nexport function peerIdFromCID(cid) {\n  if (cid == null || cid.multihash == null || cid.version == null || cid.version === 1 && cid.code !== LIBP2P_KEY_CODE) {\n    throw new Error('Supplied PeerID CID is invalid');\n  }\n  const multihash = cid.multihash;\n  if (multihash.code === sha256.code) {\n    return new RSAPeerIdImpl({\n      multihash: cid.multihash\n    });\n  } else if (multihash.code === identity.code) {\n    if (multihash.digest.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n      return new Ed25519PeerIdImpl({\n        multihash: cid.multihash\n      });\n    } else if (multihash.digest.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n      return new Secp256k1PeerIdImpl({\n        multihash: cid.multihash\n      });\n    }\n  }\n  throw new Error('Supplied PeerID CID is invalid');\n}\n/**\n * @param publicKey - A marshalled public key\n * @param privateKey - A marshalled private key\n */\nexport async function peerIdFromKeys(publicKey, privateKey) {\n  if (publicKey.length === MARSHALLED_ED225519_PUBLIC_KEY_LENGTH) {\n    return new Ed25519PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n  if (publicKey.length === MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH) {\n    return new Secp256k1PeerIdImpl({\n      multihash: Digest.create(identity.code, publicKey),\n      privateKey\n    });\n  }\n  return new RSAPeerIdImpl({\n    multihash: await sha256.digest(publicKey),\n    publicKey,\n    privateKey\n  });\n}","map":{"version":3,"names":["symbol","CodeError","base58btc","bases","CID","Digest","identity","sha256","equals","uint8ArrayEquals","inspect","Symbol","for","baseDecoder","Object","values","map","codec","decoder","reduce","acc","curr","or","LIBP2P_KEY_CODE","MARSHALLED_ED225519_PUBLIC_KEY_LENGTH","MARSHALLED_SECP256K1_PUBLIC_KEY_LENGTH","_Symbol$toStringTag","toStringTag","PeerIdImpl","constructor","init","_defineProperty","type","multihash","privateKey","defineProperty","enumerable","writable","toString","string","encode","bytes","slice","toCID","createV1","toBytes","toJSON","id","Uint8Array","peerIdFromString","Error","RSAPeerIdImpl","publicKey","Ed25519PeerIdImpl","digest","Secp256k1PeerIdImpl","createPeerId","peerIdFromPeerId","other","str","charAt","decode","startsWith","peerIdFromBytes","buf","code","length","peerIdFromCID","cid","version","peerIdFromKeys","create"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}