{"ast":null,"code":"import { TAG_LENGTH } from '@stablelib/chacha20poly1305';\nimport { NOISE_MSG_MAX_LENGTH_BYTES, NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG } from '../constants.js';\nimport { uint16BEEncode } from '../encoder.js';\n// Returns generator that encrypts payload from the user\nexport function encryptStream(handshake, metrics) {\n  return async function* (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG;\n        if (end > chunk.length) {\n          end = chunk.length;\n        }\n        const data = handshake.encrypt(chunk.subarray(i, end), handshake.session);\n        metrics?.encryptedPackets.increment();\n        yield uint16BEEncode(data.byteLength);\n        yield data;\n      }\n    }\n  };\n}\n// Decrypt received payload to the user\nexport function decryptStream(handshake, metrics) {\n  return async function* (source) {\n    for await (const chunk of source) {\n      for (let i = 0; i < chunk.length; i += NOISE_MSG_MAX_LENGTH_BYTES) {\n        let end = i + NOISE_MSG_MAX_LENGTH_BYTES;\n        if (end > chunk.length) {\n          end = chunk.length;\n        }\n        if (end - TAG_LENGTH < i) {\n          throw new Error('Invalid chunk');\n        }\n        const encrypted = chunk.subarray(i, end);\n        // memory allocation is not cheap so reuse the encrypted Uint8Array\n        // see https://github.com/ChainSafe/js-libp2p-noise/pull/242#issue-1422126164\n        // this is ok because chacha20 reads bytes one by one and don't reread after that\n        // it's also tested in https://github.com/ChainSafe/as-chacha20poly1305/pull/1/files#diff-25252846b58979dcaf4e41d47b3eadd7e4f335e7fb98da6c049b1f9cd011f381R48\n        const dst = chunk.subarray(i, end - TAG_LENGTH);\n        const {\n          plaintext: decrypted,\n          valid\n        } = handshake.decrypt(encrypted, handshake.session, dst);\n        if (!valid) {\n          metrics?.decryptErrors.increment();\n          throw new Error('Failed to validate decrypted chunk');\n        }\n        metrics?.decryptedPackets.increment();\n        yield decrypted;\n      }\n    }\n  };\n}","map":{"version":3,"names":["TAG_LENGTH","NOISE_MSG_MAX_LENGTH_BYTES","NOISE_MSG_MAX_LENGTH_BYTES_WITHOUT_TAG","uint16BEEncode","encryptStream","handshake","metrics","source","chunk","i","length","end","data","encrypt","subarray","session","encryptedPackets","increment","byteLength","decryptStream","Error","encrypted","dst","plaintext","decrypted","valid","decrypt","decryptErrors","decryptedPackets"],"sources":["../../../src/crypto/streaming.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,UAAU,QAAQ,6BAA6B;AAKxD,SAASC,0BAA0B,EAAEC,sCAAsC,QAAQ,iBAAiB;AACpG,SAASC,cAAc,QAAQ,eAAe;AAE9C;AACA,OAAM,SAAUC,aAAaA,CAAEC,SAAqB,EAAEC,OAAyB;EAC7E,OAAO,iBAAkBC,MAAM;IAC7B,WAAW,MAAMC,KAAK,IAAID,MAAM,EAAE;MAChC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,IAAIP,sCAAsC,EAAE;QAC7E,IAAIS,GAAG,GAAGF,CAAC,GAAGP,sCAAsC;QACpD,IAAIS,GAAG,GAAGH,KAAK,CAACE,MAAM,EAAE;UACtBC,GAAG,GAAGH,KAAK,CAACE,MAAM;;QAGpB,MAAME,IAAI,GAAGP,SAAS,CAACQ,OAAO,CAACL,KAAK,CAACM,QAAQ,CAACL,CAAC,EAAEE,GAAG,CAAC,EAAEN,SAAS,CAACU,OAAO,CAAC;QACzET,OAAO,EAAEU,gBAAgB,CAACC,SAAS,EAAE;QAErC,MAAMd,cAAc,CAACS,IAAI,CAACM,UAAU,CAAC;QACrC,MAAMN,IAAI;;;EAGhB,CAAC;AACH;AAEA;AACA,OAAM,SAAUO,aAAaA,CAAEd,SAAqB,EAAEC,OAAyB;EAC7E,OAAO,iBAAkBC,MAAM;IAC7B,WAAW,MAAMC,KAAK,IAAID,MAAM,EAAE;MAChC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,IAAIR,0BAA0B,EAAE;QACjE,IAAIU,GAAG,GAAGF,CAAC,GAAGR,0BAA0B;QACxC,IAAIU,GAAG,GAAGH,KAAK,CAACE,MAAM,EAAE;UACtBC,GAAG,GAAGH,KAAK,CAACE,MAAM;;QAGpB,IAAIC,GAAG,GAAGX,UAAU,GAAGS,CAAC,EAAE;UACxB,MAAM,IAAIW,KAAK,CAAC,eAAe,CAAC;;QAElC,MAAMC,SAAS,GAAGb,KAAK,CAACM,QAAQ,CAACL,CAAC,EAAEE,GAAG,CAAC;QACxC;QACA;QACA;QACA;QACA,MAAMW,GAAG,GAAGd,KAAK,CAACM,QAAQ,CAACL,CAAC,EAAEE,GAAG,GAAGX,UAAU,CAAC;QAC/C,MAAM;UAAEuB,SAAS,EAAEC,SAAS;UAAEC;QAAK,CAAE,GAAGpB,SAAS,CAACqB,OAAO,CAACL,SAAS,EAAEhB,SAAS,CAACU,OAAO,EAAEO,GAAG,CAAC;QAC5F,IAAI,CAACG,KAAK,EAAE;UACVnB,OAAO,EAAEqB,aAAa,CAACV,SAAS,EAAE;UAClC,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;;QAEvDd,OAAO,EAAEsB,gBAAgB,CAACX,SAAS,EAAE;QACrC,MAAMO,SAAS;;;EAGrB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}