{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createBitswap } from 'ipfs-bitswap';\nimport { createLibp2p } from './libp2p.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { BlockStorage } from '../block-storage.js';\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor(peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start({\n    peerId,\n    repo,\n    print,\n    hashers,\n    options\n  }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open();\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll();\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    });\n    await libp2p.start();\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`);\n    }\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    });\n    await bitswap.start();\n    const blockstore = new BlockStorage(repo.blocks, bitswap);\n    repo.blocks = blockstore;\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore;\n    return new Network(peerId, libp2p, bitswap, repo, blockstore);\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop(network) {\n    network.repo.blocks = network.blockstore.unwrap();\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap();\n    await network.bitswap.stop();\n    await network.libp2p.stop();\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString();\n  /** @type {Multiaddr[]} */\n  const addrs = [];\n  const swarm = config.Addresses && config.Addresses.Swarm || [];\n  for (const addr of swarm) {\n    let ma = multiaddr(addr);\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId();\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`);\n    }\n    addrs.push(ma);\n  }\n  return addrs;\n};\nconst WEBSOCKET_STAR_PROTO_CODE = 479;","map":{"version":3,"names":["createBitswap","createLibp2p","multiaddr","errCode","BlockStorage","Network","constructor","peerId","libp2p","bitswap","repo","blockstore","start","print","hashers","options","closed","open","config","getAll","multiaddrs","readAddrs","keychainConfig","undefined","ma","getMultiaddrs","toString","blocks","statsEnabled","hashLoader","maxInboundStreams","maxOutboundStreams","pins","stop","network","unwrap","peerIdStr","addrs","swarm","Addresses","Swarm","addr","protoCodes","includes","WEBSOCKET_STAR_PROTO_CODE","Error","maId","getPeerId","encapsulate","push"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/network.js"],"sourcesContent":["import { createBitswap } from 'ipfs-bitswap'\nimport { createLibp2p } from './libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { BlockStorage } from '../block-storage.js'\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, hashers, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    await libp2p.start()\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await network.bitswap.stop()\n    await network.libp2p.stop()\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}