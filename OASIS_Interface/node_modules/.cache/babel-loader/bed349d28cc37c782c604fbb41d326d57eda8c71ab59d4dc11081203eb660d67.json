{"ast":null,"code":"import { createId } from './id.js';\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options);\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline(options = {}) {\n    const res = await id(options);\n    return Boolean(res && res.addresses && res.addresses.length);\n  }\n  return isOnline;\n};","map":{"version":3,"names":["createId","createIsOnline","options","id","isOnline","res","Boolean","addresses","length"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/is-online.js"],"sourcesContent":["import { createId } from './id.js'\n\n/**\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n */\n\n/**\n * @param {import('./types').Options} options\n */\nexport const createIsOnline = options => {\n  const id = createId(options)\n\n  /**\n   * @type {RootAPI[\"isOnline\"]}\n   */\n  async function isOnline (options = {}) {\n    const res = await id(options)\n\n    return Boolean(res && res.addresses && res.addresses.length)\n  }\n  return isOnline\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,SAAS;;AAElC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGC,OAAO,IAAI;EACvC,MAAMC,EAAE,GAAGH,QAAQ,CAACE,OAAO,CAAC;;EAE5B;AACF;AACA;EACE,eAAeE,QAAQA,CAAEF,OAAO,GAAG,CAAC,CAAC,EAAE;IACrC,MAAMG,GAAG,GAAG,MAAMF,EAAE,CAACD,OAAO,CAAC;IAE7B,OAAOI,OAAO,CAACD,GAAG,IAAIA,GAAG,CAACE,SAAS,IAAIF,GAAG,CAACE,SAAS,CAACC,MAAM,CAAC;EAC9D;EACA,OAAOJ,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}