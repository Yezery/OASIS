{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function* dagImport(source, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body\n    } = await multipartRequest(source, controller, options.headers);\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({\n        'pin-roots': options.pinRoots\n      })\n    });\n    for await (const {\n      Root\n    } of res.ndjson()) {\n      if (Root !== undefined) {\n        const {\n          Cid: {\n            '/': Cid\n          },\n          PinErrorMsg\n        } = Root;\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        };\n      }\n    }\n  }\n  return dagImport;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","abortSignal","multipartRequest","CID","createImport","api","dagImport","source","options","controller","AbortController","signal","headers","body","res","post","searchParams","pinRoots","Root","ndjson","undefined","Cid","PinErrorMsg","root","cid","parse","pinErrorMsg"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/dag/import.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\nexport const createImport = configure(api => {\n  /**\n   * @type {DAGAPI[\"import\"]}\n   */\n  async function * dagImport (source, options = {}) {\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body } = await multipartRequest(source, controller, options.headers)\n\n    const res = await api.post('dag/import', {\n      signal,\n      headers,\n      body,\n      searchParams: toUrlSearchParams({ 'pin-roots': options.pinRoots })\n    })\n\n    for await (const { Root } of res.ndjson()) {\n      if (Root !== undefined) {\n        const { Cid: { '/': Cid }, PinErrorMsg } = Root\n\n        yield {\n          root: {\n            cid: CID.parse(Cid),\n            pinErrorMsg: PinErrorMsg\n          }\n        }\n      }\n    }\n  }\n\n  return dagImport\n})\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAGL,SAAS,CAACM,GAAG,IAAI;EAC3C;AACF;AACA;EACE,gBAAiBC,SAASA,CAAEC,MAAM,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAChD,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGV,WAAW,CAACQ,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;IAC7D,MAAM;MAAEC,OAAO;MAAEC;IAAK,CAAC,GAAG,MAAMX,gBAAgB,CAACK,MAAM,EAAEE,UAAU,EAAED,OAAO,CAACI,OAAO,CAAC;IAErF,MAAME,GAAG,GAAG,MAAMT,GAAG,CAACU,IAAI,CAAC,YAAY,EAAE;MACvCJ,MAAM;MACNC,OAAO;MACPC,IAAI;MACJG,YAAY,EAAEhB,iBAAiB,CAAC;QAAE,WAAW,EAAEQ,OAAO,CAACS;MAAS,CAAC;IACnE,CAAC,CAAC;IAEF,WAAW,MAAM;MAAEC;IAAK,CAAC,IAAIJ,GAAG,CAACK,MAAM,CAAC,CAAC,EAAE;MACzC,IAAID,IAAI,KAAKE,SAAS,EAAE;QACtB,MAAM;UAAEC,GAAG,EAAE;YAAE,GAAG,EAAEA;UAAI,CAAC;UAAEC;QAAY,CAAC,GAAGJ,IAAI;QAE/C,MAAM;UACJK,IAAI,EAAE;YACJC,GAAG,EAAErB,GAAG,CAACsB,KAAK,CAACJ,GAAG,CAAC;YACnBK,WAAW,EAAEJ;UACf;QACF,CAAC;MACH;IACF;EACF;EAEA,OAAOhB,SAAS;AAClB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}