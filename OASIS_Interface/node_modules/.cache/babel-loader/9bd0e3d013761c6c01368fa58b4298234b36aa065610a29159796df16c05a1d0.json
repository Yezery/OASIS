{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport * as varint from 'uint8-varint';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { convertToBytes, convertToString } from './convert.js';\nimport { getProtocol } from './protocols-table.js';\nexport function stringToMultiaddrParts(str) {\n  str = cleanPath(str);\n  const tuples = [];\n  const stringTuples = [];\n  let path = null;\n  const parts = str.split('/').slice(1);\n  if (parts.length === 1 && parts[0] === '') {\n    return {\n      bytes: new Uint8Array(),\n      string: '/',\n      tuples: [],\n      stringTuples: [],\n      path: null\n    };\n  }\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p];\n    const proto = getProtocol(part);\n    if (proto.size === 0) {\n      tuples.push([proto.code]);\n      stringTuples.push([proto.code]);\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    p++; // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str);\n    }\n    // if it's a path proto, take the rest\n    if (proto.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = cleanPath(parts.slice(p).join('/'));\n      tuples.push([proto.code, convertToBytes(proto.code, path)]);\n      stringTuples.push([proto.code, path]);\n      break;\n    }\n    const bytes = convertToBytes(proto.code, parts[p]);\n    tuples.push([proto.code, bytes]);\n    stringTuples.push([proto.code, convertToString(proto.code, bytes)]);\n  }\n  return {\n    string: stringTuplesToString(stringTuples),\n    bytes: tuplesToBytes(tuples),\n    tuples,\n    stringTuples,\n    path\n  };\n}\nexport function bytesToMultiaddrParts(bytes) {\n  const tuples = [];\n  const stringTuples = [];\n  let path = null;\n  let i = 0;\n  while (i < bytes.length) {\n    const code = varint.decode(bytes, i);\n    const n = varint.encodingLength(code);\n    const p = getProtocol(code);\n    const size = sizeForAddr(p, bytes.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      stringTuples.push([code]);\n      i += n;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    const addr = bytes.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > bytes.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(bytes, 'base16'));\n    }\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n    const stringAddr = convertToString(code, addr);\n    stringTuples.push([code, stringAddr]);\n    if (p.path === true) {\n      // should we need to check each path part to see if it's a proto?\n      // This would allow for other protocols to be added after a unix path,\n      // however it would have issues if the path had a protocol name in the path\n      path = stringAddr;\n      break;\n    }\n  }\n  return {\n    bytes: Uint8Array.from(bytes),\n    string: stringTuplesToString(stringTuples),\n    tuples,\n    stringTuples,\n    path\n  };\n}\n/**\n * [[str name, str addr]... ] -> string\n */\nfunction stringTuplesToString(tuples) {\n  const parts = [];\n  tuples.map(tup => {\n    const proto = getProtocol(tup[0]);\n    parts.push(proto.name);\n    if (tup.length > 1 && tup[1] != null) {\n      parts.push(tup[1]);\n    }\n    return null;\n  });\n  return cleanPath(parts.join('/'));\n}\n/**\n * [[int code, Uint8Array ]... ] -> Uint8Array\n */\nexport function tuplesToBytes(tuples) {\n  return uint8ArrayConcat(tuples.map(tup => {\n    const proto = getProtocol(tup[0]);\n    let buf = Uint8Array.from(varint.encode(proto.code));\n    if (tup.length > 1 && tup[1] != null) {\n      buf = uint8ArrayConcat([buf, tup[1]]); // add address buffer\n    }\n\n    return buf;\n  }));\n}\n/**\n * For the passed address, return the serialized size\n */\nfunction sizeForAddr(p, addr) {\n  if (p.size > 0) {\n    return p.size / 8;\n  } else if (p.size === 0) {\n    return 0;\n  } else {\n    const size = varint.decode(addr instanceof Uint8Array ? addr : Uint8Array.from(addr));\n    return size + varint.encodingLength(size);\n  }\n}\nexport function bytesToTuples(buf) {\n  const tuples = [];\n  let i = 0;\n  while (i < buf.length) {\n    const code = varint.decode(buf, i);\n    const n = varint.encodingLength(code);\n    const p = getProtocol(code);\n    const size = sizeForAddr(p, buf.slice(i + n));\n    if (size === 0) {\n      tuples.push([code]);\n      i += n;\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    const addr = buf.slice(i + n, i + n + size);\n    i += size + n;\n    if (i > buf.length) {\n      // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address Uint8Array: ' + uint8ArrayToString(buf, 'base16'));\n    }\n    // ok, tuple seems good.\n    tuples.push([code, addr]);\n  }\n  return tuples;\n}\nexport function cleanPath(str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/');\n}\nexport function ParseError(str) {\n  return new Error('Error parsing address: ' + str);\n}","map":{"version":3,"names":["varint","concat","uint8ArrayConcat","toString","uint8ArrayToString","convertToBytes","convertToString","getProtocol","stringToMultiaddrParts","str","cleanPath","tuples","stringTuples","path","parts","split","slice","length","bytes","Uint8Array","string","p","part","proto","size","push","code","ParseError","join","stringTuplesToString","tuplesToBytes","bytesToMultiaddrParts","i","decode","n","encodingLength","sizeForAddr","addr","stringAddr","from","map","tup","name","buf","encode","bytesToTuples","trim","filter","a","Error"],"sources":["../../src/codec.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}