{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays';\nimport { logger } from '../logger.js';\nimport { Nonce } from '../nonce.js';\nexport class AbstractHandshake {\n  constructor(crypto) {\n    this.crypto = crypto;\n  }\n  encryptWithAd(cs, ad, plaintext) {\n    const e = this.encrypt(cs.k, cs.n, ad, plaintext);\n    cs.n.increment();\n    return e;\n  }\n  decryptWithAd(cs, ad, ciphertext, dst) {\n    const {\n      plaintext,\n      valid\n    } = this.decrypt(cs.k, cs.n, ad, ciphertext, dst);\n    if (valid) cs.n.increment();\n    return {\n      plaintext,\n      valid\n    };\n  }\n  // Cipher state related\n  hasKey(cs) {\n    return !this.isEmptyKey(cs.k);\n  }\n  createEmptyKey() {\n    return new Uint8Array(32);\n  }\n  isEmptyKey(k) {\n    const emptyKey = this.createEmptyKey();\n    return uint8ArrayEquals(emptyKey, k);\n  }\n  encrypt(k, n, ad, plaintext) {\n    n.assertValue();\n    return this.crypto.chaCha20Poly1305Encrypt(plaintext, n.getBytes(), ad, k);\n  }\n  encryptAndHash(ss, plaintext) {\n    let ciphertext;\n    if (this.hasKey(ss.cs)) {\n      ciphertext = this.encryptWithAd(ss.cs, ss.h, plaintext);\n    } else {\n      ciphertext = plaintext;\n    }\n    this.mixHash(ss, ciphertext);\n    return ciphertext;\n  }\n  decrypt(k, n, ad, ciphertext, dst) {\n    n.assertValue();\n    const encryptedMessage = this.crypto.chaCha20Poly1305Decrypt(ciphertext, n.getBytes(), ad, k, dst);\n    if (encryptedMessage) {\n      return {\n        plaintext: encryptedMessage,\n        valid: true\n      };\n    } else {\n      return {\n        plaintext: new Uint8Array(0),\n        valid: false\n      };\n    }\n  }\n  decryptAndHash(ss, ciphertext) {\n    let plaintext;\n    let valid = true;\n    if (this.hasKey(ss.cs)) {\n      ({\n        plaintext,\n        valid\n      } = this.decryptWithAd(ss.cs, ss.h, ciphertext));\n    } else {\n      plaintext = ciphertext;\n    }\n    this.mixHash(ss, ciphertext);\n    return {\n      plaintext,\n      valid\n    };\n  }\n  dh(privateKey, publicKey) {\n    try {\n      const derivedU8 = this.crypto.generateX25519SharedKey(privateKey, publicKey);\n      if (derivedU8.length === 32) {\n        return derivedU8;\n      }\n      return derivedU8.subarray(0, 32);\n    } catch (e) {\n      const err = e;\n      logger.error(err);\n      return new Uint8Array(32);\n    }\n  }\n  mixHash(ss, data) {\n    ss.h = this.getHash(ss.h, data);\n  }\n  getHash(a, b) {\n    const u = this.crypto.hashSHA256(uint8ArrayConcat([a, b], a.length + b.length));\n    return u;\n  }\n  mixKey(ss, ikm) {\n    const [ck, tempK] = this.crypto.getHKDF(ss.ck, ikm);\n    ss.cs = this.initializeKey(tempK);\n    ss.ck = ck;\n  }\n  initializeKey(k) {\n    return {\n      k,\n      n: new Nonce()\n    };\n  }\n  // Symmetric state related\n  initializeSymmetric(protocolName) {\n    const protocolNameBytes = uint8ArrayFromString(protocolName, 'utf-8');\n    const h = this.hashProtocolName(protocolNameBytes);\n    const ck = h;\n    const key = this.createEmptyKey();\n    const cs = this.initializeKey(key);\n    return {\n      cs,\n      ck,\n      h\n    };\n  }\n  hashProtocolName(protocolName) {\n    if (protocolName.length <= 32) {\n      const h = new Uint8Array(32);\n      h.set(protocolName);\n      return h;\n    } else {\n      return this.getHash(protocolName, new Uint8Array(0));\n    }\n  }\n  split(ss) {\n    const [tempk1, tempk2] = this.crypto.getHKDF(ss.ck, new Uint8Array(0));\n    const cs1 = this.initializeKey(tempk1);\n    const cs2 = this.initializeKey(tempk2);\n    return {\n      cs1,\n      cs2\n    };\n  }\n  writeMessageRegular(cs, payload) {\n    const ciphertext = this.encryptWithAd(cs, new Uint8Array(0), payload);\n    const ne = this.createEmptyKey();\n    const ns = new Uint8Array(0);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n  readMessageRegular(cs, message) {\n    return this.decryptWithAd(cs, new Uint8Array(0), message.ciphertext);\n  }\n}","map":{"version":3,"names":["equals","uint8ArrayEquals","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","logger","Nonce","AbstractHandshake","constructor","crypto","encryptWithAd","cs","ad","plaintext","e","encrypt","k","n","increment","decryptWithAd","ciphertext","dst","valid","decrypt","hasKey","isEmptyKey","createEmptyKey","Uint8Array","emptyKey","assertValue","chaCha20Poly1305Encrypt","getBytes","encryptAndHash","ss","h","mixHash","encryptedMessage","chaCha20Poly1305Decrypt","decryptAndHash","dh","privateKey","publicKey","derivedU8","generateX25519SharedKey","length","subarray","err","error","data","getHash","a","b","u","hashSHA256","mixKey","ikm","ck","tempK","getHKDF","initializeKey","initializeSymmetric","protocolName","protocolNameBytes","hashProtocolName","key","set","split","tempk1","tempk2","cs1","cs2","writeMessageRegular","payload","ne","ns","readMessageRegular","message"],"sources":["../../../src/handshakes/abstract-handshake.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}