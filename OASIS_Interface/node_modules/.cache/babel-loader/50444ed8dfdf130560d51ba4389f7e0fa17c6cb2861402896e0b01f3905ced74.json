{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport randomBytes from '../random-bytes.js';\nimport webcrypto from '../webcrypto.js';\nimport { jwk2pub, jwk2priv } from './jwk2pem.js';\nimport * as utils from './rsa-utils.js';\nexport { utils };\nexport async function generateKey(bits) {\n  const pair = await webcrypto.get().subtle.generateKey({\n    name: 'RSASSA-PKCS1-v1_5',\n    modulusLength: bits,\n    publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign', 'verify']);\n  const keys = await exportKey(pair);\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  };\n}\n// Takes a jwk key\nexport async function unmarshalPrivateKey(key) {\n  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['sign']);\n  const pair = [privateKey, await derivePublicFromPrivate(key)];\n  const keys = await exportKey({\n    privateKey: pair[0],\n    publicKey: pair[1]\n  });\n  return {\n    privateKey: keys[0],\n    publicKey: keys[1]\n  };\n}\nexport { randomBytes as getRandomValues };\nexport async function hashAndSign(key, msg) {\n  const privateKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['sign']);\n  const sig = await webcrypto.get().subtle.sign({\n    name: 'RSASSA-PKCS1-v1_5'\n  }, privateKey, Uint8Array.from(msg));\n  return new Uint8Array(sig, 0, sig.byteLength);\n}\nexport async function hashAndVerify(key, sig, msg) {\n  const publicKey = await webcrypto.get().subtle.importKey('jwk', key, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, false, ['verify']);\n  return webcrypto.get().subtle.verify({\n    name: 'RSASSA-PKCS1-v1_5'\n  }, publicKey, sig, msg);\n}\nasync function exportKey(pair) {\n  if (pair.privateKey == null || pair.publicKey == null) {\n    throw new CodeError('Private and public key are required', 'ERR_INVALID_PARAMETERS');\n  }\n  return Promise.all([webcrypto.get().subtle.exportKey('jwk', pair.privateKey), webcrypto.get().subtle.exportKey('jwk', pair.publicKey)]);\n}\nasync function derivePublicFromPrivate(jwKey) {\n  return webcrypto.get().subtle.importKey('jwk', {\n    kty: jwKey.kty,\n    n: jwKey.n,\n    e: jwKey.e\n  }, {\n    name: 'RSASSA-PKCS1-v1_5',\n    hash: {\n      name: 'SHA-256'\n    }\n  }, true, ['verify']);\n}\n/*\n\nRSA encryption/decryption for the browser with webcrypto workaround\n\"bloody dark magic. webcrypto's why.\"\n\nExplanation:\n  - Convert JWK to nodeForge\n  - Convert msg Uint8Array to nodeForge buffer: ByteBuffer is a \"binary-string backed buffer\", so let's make our Uint8Array a binary string\n  - Convert resulting nodeForge buffer to Uint8Array: it returns a binary string, turn that into a Uint8Array\n\n*/\nfunction convertKey(key, pub, msg, handle) {\n  const fkey = pub ? jwk2pub(key) : jwk2priv(key);\n  const fmsg = uint8ArrayToString(Uint8Array.from(msg), 'ascii');\n  const fomsg = handle(fmsg, fkey);\n  return uint8ArrayFromString(fomsg, 'ascii');\n}\nexport function encrypt(key, msg) {\n  return convertKey(key, true, msg, (msg, key) => key.encrypt(msg));\n}\nexport function decrypt(key, msg) {\n  return convertKey(key, false, msg, (msg, key) => key.decrypt(msg));\n}","map":{"version":3,"names":["CodeError","fromString","uint8ArrayFromString","toString","uint8ArrayToString","randomBytes","webcrypto","jwk2pub","jwk2priv","utils","generateKey","bits","pair","get","subtle","name","modulusLength","publicExponent","Uint8Array","hash","keys","exportKey","privateKey","publicKey","unmarshalPrivateKey","key","importKey","derivePublicFromPrivate","getRandomValues","hashAndSign","msg","sig","sign","from","byteLength","hashAndVerify","verify","Promise","all","jwKey","kty","n","e","convertKey","pub","handle","fkey","fmsg","fomsg","encrypt","decrypt"],"sources":["../../../src/keys/rsa-browser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}