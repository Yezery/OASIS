{"ast":null,"code":"import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function* importer(source, blockstore, options = {}) {\n  const opts = defaultOptions(options);\n  let dagBuilder;\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n  let treeBuilder;\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates;\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source;\n  } else {\n    // @ts-ignore\n    candidates = [source];\n  }\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}","map":{"version":3,"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","source","blockstore","options","opts","dagBuilder","treeBuilder","candidates","Symbol","asyncIterator","iterator","entry","fileImportConcurrency","cid","path","unixfs","size"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/index.js"],"sourcesContent":["import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"],"mappings":"AAAA,OAAOA,aAAa,MAAM,mBAAmB;AAC7C,OAAOC,cAAc,MAAM,cAAc;AACzC,OAAOC,YAAY,MAAM,wBAAwB;AACjD,OAAOC,aAAa,MAAM,mBAAmB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAiBC,QAAQA,CAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAClE,MAAMC,IAAI,GAAGP,cAAc,CAACM,OAAO,CAAC;EAEpC,IAAIE,UAAU;EAEd,IAAI,OAAOF,OAAO,CAACE,UAAU,KAAK,UAAU,EAAE;IAC5CA,UAAU,GAAGF,OAAO,CAACE,UAAU;EACjC,CAAC,MAAM;IACLA,UAAU,GAAGP,YAAY;EAC3B;EAEA,IAAIQ,WAAW;EAEf,IAAI,OAAOH,OAAO,CAACG,WAAW,KAAK,UAAU,EAAE;IAC7CA,WAAW,GAAGH,OAAO,CAACG,WAAW;EACnC,CAAC,MAAM;IACLA,WAAW,GAAGP,aAAa;EAC7B;;EAEA;EACA,IAAIQ,UAAU;EAEd,IAAIC,MAAM,CAACC,aAAa,IAAIR,MAAM,IAAIO,MAAM,CAACE,QAAQ,IAAIT,MAAM,EAAE;IAC/D;IACAM,UAAU,GAAGN,MAAM;EACrB,CAAC,MAAM;IACL;IACAM,UAAU,GAAG,CAACN,MAAM,CAAC;EACvB;EAEA,WAAW,MAAMU,KAAK,IAAIL,WAAW,CAACV,aAAa,CAACS,UAAU,CAACE,UAAU,EAAEL,UAAU,EAAEE,IAAI,CAAC,EAAEA,IAAI,CAACQ,qBAAqB,CAAC,EAAEV,UAAU,EAAEE,IAAI,CAAC,EAAE;IAC5I,MAAM;MACJS,GAAG,EAAEF,KAAK,CAACE,GAAG;MACdC,IAAI,EAAEH,KAAK,CAACG,IAAI;MAChBC,MAAM,EAAEJ,KAAK,CAACI,MAAM;MACpBC,IAAI,EAAEL,KAAK,CAACK;IACd,CAAC;EACH;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}