{"ast":null,"code":"import hashlru from 'hashlru';\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor(maxSize) {\n    this.lru = hashlru(maxSize);\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get(key) {\n    const value = this.lru.get(key);\n    if (value) {\n      if (value.expire && value.expire < Date.now()) {\n        this.lru.remove(key);\n        return undefined;\n      }\n      return value.value;\n    }\n    return undefined;\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set(key, value, ttl) {\n    this.lru.set(key, {\n      value,\n      expire: Date.now() + ttl\n    });\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has(key) {\n    const value = this.get(key);\n    if (value) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove(key) {\n    this.lru.remove(key);\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear() {\n    this.lru.clear();\n  }\n}","map":{"version":3,"names":["hashlru","TLRU","constructor","maxSize","lru","get","key","value","expire","Date","now","remove","undefined","set","ttl","has","clear"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/utils/tlru.js"],"sourcesContent":["import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,CAAC;EAChB;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,OAAO,EAAE;IACpB,IAAI,CAACC,GAAG,GAAGJ,OAAO,CAACG,OAAO,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,GAAGA,CAAEC,GAAG,EAAE;IACR,MAAMC,KAAK,GAAG,IAAI,CAACH,GAAG,CAACC,GAAG,CAACC,GAAG,CAAC;IAC/B,IAAIC,KAAK,EAAE;MACT,IAAKA,KAAK,CAACC,MAAM,IAAMD,KAAK,CAACC,MAAM,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAE,EAAE;QACjD,IAAI,CAACN,GAAG,CAACO,MAAM,CAACL,GAAG,CAAC;QACpB,OAAOM,SAAS;MAClB;MACA,OAAOL,KAAK,CAACA,KAAK;IACpB;IACA,OAAOK,SAAS;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,GAAGA,CAAEP,GAAG,EAAEC,KAAK,EAAEO,GAAG,EAAE;IACpB,IAAI,CAACV,GAAG,CAACS,GAAG,CAACP,GAAG,EAAE;MAAEC,KAAK;MAAEC,MAAM,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGI;IAAI,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,GAAGA,CAAET,GAAG,EAAE;IACR,MAAMC,KAAK,GAAG,IAAI,CAACF,GAAG,CAACC,GAAG,CAAC;IAC3B,IAAIC,KAAK,EAAE;MACT,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;EACEI,MAAMA,CAAEL,GAAG,EAAE;IACX,IAAI,CAACF,GAAG,CAACO,MAAM,CAACL,GAAG,CAAC;EACtB;;EAEA;AACF;AACA;AACA;AACA;EACEU,KAAKA,CAAA,EAAI;IACP,IAAI,CAACZ,GAAG,CAACY,KAAK,CAAC,CAAC;EAClB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}