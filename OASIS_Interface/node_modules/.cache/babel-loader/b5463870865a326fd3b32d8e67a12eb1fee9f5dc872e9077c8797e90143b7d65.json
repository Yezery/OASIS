{"ast":null,"code":"import mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport * as dagPB from '@ipld/dag-pb';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs:mfs:stat');\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n};\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat(path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    log(`Fetching stats for ${path}`);\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options);\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n    let file;\n    try {\n      file = await exporter(exportPath, context.repo.blocks);\n    } catch ( /** @type {any} */err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n      }\n      throw err;\n    }\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`);\n    }\n    return statters[file.type](file);\n  }\n  return withTimeoutOption(mfsStat);\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: file => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n    return stat;\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n    return stat;\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"names":["mergeOpts","toMfsPath","exporter","logger","errCode","withTimeoutOption","dagPB","mergeOptions","bind","ignoreUndefined","log","defaultOptions","withLocal","createStat","context","mfsStat","path","options","type","cid","mfsPath","exportPath","file","repo","blocks","err","code","Error","statters","raw","size","node","length","cumulativeSize","local","undefined","sizeLocal","withLocality","stat","unixfs","fileSize","encode","Links","reduce","acc","curr","Tsize","blockSizes","mode","mtime","directory","object","identity"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/stat.js"],"sourcesContent":["import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}