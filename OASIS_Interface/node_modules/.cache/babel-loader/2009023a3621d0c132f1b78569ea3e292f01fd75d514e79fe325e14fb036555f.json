{"ast":null,"code":"import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = node => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function* contentGenerator(options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n  return contentGenerator;\n};\n\n/**\n * @type {import('../types').Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND');\n  }\n  const block = await blockstore.get(cid, options);\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  };\n};\nexport default resolve;","map":{"version":3,"names":["errCode","extractDataFromBlock","validateOffsetAndLength","rawContent","node","contentGenerator","options","offset","length","resolve","cid","name","path","toResolve","depth","blockstore","Error","block","get","entry","type","content","size"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/raw.js"],"sourcesContent":["import errCode from 'err-code'\nimport extractDataFromBlock from '../utils/extract-data-from-block.js'\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js'\n\n/**\n * @typedef {import('../types').ExporterOptions} ExporterOptions\n */\n\n/**\n * @param {Uint8Array} node\n */\nconst rawContent = (node) => {\n  /**\n   * @param {ExporterOptions} options\n   */\n  async function * contentGenerator (options = {}) {\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length)\n\n    yield extractDataFromBlock(node, 0, offset, offset + length)\n  }\n\n  return contentGenerator\n}\n\n/**\n * @type {import('../types').Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND')\n  }\n\n  const block = await blockstore.get(cid, options)\n\n  return {\n    entry: {\n      type: 'raw',\n      name,\n      path,\n      cid,\n      content: rawContent(block),\n      depth,\n      size: block.length,\n      node: block\n    }\n  }\n}\n\nexport default resolve\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,OAAOC,oBAAoB,MAAM,qCAAqC;AACtE,OAAOC,uBAAuB,MAAM,wCAAwC;;AAE5E;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAC3B;AACF;AACA;EACE,gBAAiBC,gBAAgBA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/C,MAAM;MACJC,MAAM;MACNC;IACF,CAAC,GAAGN,uBAAuB,CAACE,IAAI,CAACI,MAAM,EAAEF,OAAO,CAACC,MAAM,EAAED,OAAO,CAACE,MAAM,CAAC;IAExE,MAAMP,oBAAoB,CAACG,IAAI,EAAE,CAAC,EAAEG,MAAM,EAAEA,MAAM,GAAGC,MAAM,CAAC;EAC9D;EAEA,OAAOH,gBAAgB;AACzB,CAAC;;AAED;AACA;AACA;AACA,MAAMI,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEJ,OAAO,EAAEK,KAAK,EAAEC,UAAU,EAAET,OAAO,KAAK;EACzF,IAAIO,SAAS,CAACL,MAAM,EAAE;IACpB,MAAMR,OAAO,CAAC,IAAIgB,KAAK,CAAE,iBAAgBJ,IAAK,sBAAqBF,GAAI,EAAC,CAAC,EAAE,eAAe,CAAC;EAC7F;EAEA,MAAMO,KAAK,GAAG,MAAMF,UAAU,CAACG,GAAG,CAACR,GAAG,EAAEJ,OAAO,CAAC;EAEhD,OAAO;IACLa,KAAK,EAAE;MACLC,IAAI,EAAE,KAAK;MACXT,IAAI;MACJC,IAAI;MACJF,GAAG;MACHW,OAAO,EAAElB,UAAU,CAACc,KAAK,CAAC;MAC1BH,KAAK;MACLQ,IAAI,EAAEL,KAAK,CAACT,MAAM;MAClBJ,IAAI,EAAEa;IACR;EACF,CAAC;AACH,CAAC;AAED,eAAeR,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}