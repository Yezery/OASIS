{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nexport class MessageCache {\n  /**\n   * Holds history of messages in timebounded history arrays\n   */\n  constructor(\n  /**\n   * The number of indices in the cache history used for gossiping. That means that a message\n   * won't get gossiped anymore when shift got called `gossip` many times after inserting the\n   * message in the cache.\n   */\n  gossip, historyCapacity, msgIdToStrFn) {\n    this.gossip = gossip;\n    this.msgs = new Map();\n    this.history = [];\n    /** Track with accounting of messages in the mcache that are not yet validated */\n    this.notValidatedCount = 0;\n    this.msgIdToStrFn = msgIdToStrFn;\n    for (let i = 0; i < historyCapacity; i++) {\n      this.history[i] = [];\n    }\n  }\n  get size() {\n    return this.msgs.size;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   * Returns true if the message is not known and is inserted in the cache\n   */\n  put(messageId, msg, validated = false) {\n    const {\n      msgIdStr\n    } = messageId;\n    // Don't add duplicate entries to the cache.\n    if (this.msgs.has(msgIdStr)) {\n      return false;\n    }\n    this.msgs.set(msgIdStr, {\n      message: msg,\n      validated,\n      originatingPeers: new Set(),\n      iwantCounts: new Map()\n    });\n    this.history[0].push({\n      ...messageId,\n      topic: msg.topic\n    });\n    if (!validated) {\n      this.notValidatedCount++;\n    }\n    return true;\n  }\n  observeDuplicate(msgId, fromPeerIdStr) {\n    const entry = this.msgs.get(msgId);\n    if (entry &&\n    // if the message is already validated, we don't need to store extra peers sending us\n    // duplicates as the message has already been forwarded\n    !entry.validated) {\n      entry.originatingPeers.add(fromPeerIdStr);\n    }\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   */\n  get(msgId) {\n    return this.msgs.get(this.msgIdToStrFn(msgId))?.message;\n  }\n  /**\n   * Increases the iwant count for the given message by one and returns the message together\n   * with the iwant if the message exists.\n   */\n  getWithIWantCount(msgIdStr, p) {\n    const msg = this.msgs.get(msgIdStr);\n    if (!msg) {\n      return null;\n    }\n    const count = (msg.iwantCounts.get(p) ?? 0) + 1;\n    msg.iwantCounts.set(p, count);\n    return {\n      msg: msg.message,\n      count\n    };\n  }\n  /**\n   * Retrieves a list of message IDs for a set of topics\n   */\n  getGossipIDs(topics) {\n    const msgIdsByTopic = new Map();\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        const msg = this.msgs.get(entry.msgIdStr);\n        if (msg && msg.validated && topics.has(entry.topic)) {\n          let msgIds = msgIdsByTopic.get(entry.topic);\n          if (!msgIds) {\n            msgIds = [];\n            msgIdsByTopic.set(entry.topic, msgIds);\n          }\n          msgIds.push(entry.msgId);\n        }\n      });\n    }\n    return msgIdsByTopic;\n  }\n  /**\n   * Gets a message with msgId and tags it as validated.\n   * This function also returns the known peers that have sent us this message. This is used to\n   * prevent us sending redundant messages to peers who have already propagated it.\n   */\n  validate(msgId) {\n    const entry = this.msgs.get(msgId);\n    if (!entry) {\n      return null;\n    }\n    if (!entry.validated) {\n      this.notValidatedCount--;\n    }\n    const {\n      message,\n      originatingPeers\n    } = entry;\n    entry.validated = true;\n    // Clear the known peers list (after a message is validated, it is forwarded and we no\n    // longer need to store the originating peers).\n    entry.originatingPeers = new Set();\n    return {\n      message,\n      originatingPeers\n    };\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   */\n  shift() {\n    const lastCacheEntries = this.history[this.history.length - 1];\n    lastCacheEntries.forEach(cacheEntry => {\n      const entry = this.msgs.get(cacheEntry.msgIdStr);\n      if (entry) {\n        this.msgs.delete(cacheEntry.msgIdStr);\n        if (!entry.validated) {\n          this.notValidatedCount--;\n        }\n      }\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n  remove(msgId) {\n    const entry = this.msgs.get(msgId);\n    if (!entry) {\n      return null;\n    }\n    // Keep the message on the history vector, it will be dropped on a shift()\n    this.msgs.delete(msgId);\n    return entry;\n  }\n}","map":{"version":3,"names":["MessageCache","constructor","gossip","historyCapacity","msgIdToStrFn","msgs","Map","history","notValidatedCount","i","size","put","messageId","msg","validated","msgIdStr","has","set","message","originatingPeers","Set","iwantCounts","push","topic","observeDuplicate","msgId","fromPeerIdStr","entry","get","add","getWithIWantCount","p","count","getGossipIDs","topics","msgIdsByTopic","forEach","msgIds","validate","shift","lastCacheEntries","length","cacheEntry","delete","pop","unshift","remove"],"sources":["../../src/message-cache.ts"],"sourcesContent":[null],"mappings":";;AAuBA,OAAM,MAAOA,YAAY;EAUvB;;;EAGAC;EACE;;;;;EAKiBC,MAAc,EAC/BC,eAAuB,EACvBC,YAA0B;IAFT,KAAAF,MAAM,GAANA,MAAM;IAlBzB,KAAAG,IAAI,GAAG,IAAIC,GAAG,EAA+B;IAI7C,KAAAC,OAAO,GAAmB,EAAE;IAE5B;IACA,KAAAC,iBAAiB,GAAG,CAAC;IAenB,IAAI,CAACJ,YAAY,GAAGA,YAAY;IAChC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,eAAe,EAAEM,CAAC,EAAE,EAAE;MACxC,IAAI,CAACF,OAAO,CAACE,CAAC,CAAC,GAAG,EAAE;;EAExB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,IAAI,CAACL,IAAI,CAACK,IAAI;EACvB;EAEA;;;;EAIAC,GAAGA,CAACC,SAAoB,EAAEC,GAAiB,EAAEC,SAAS,GAAG,KAAK;IAC5D,MAAM;MAAEC;IAAQ,CAAE,GAAGH,SAAS;IAC9B;IACA,IAAI,IAAI,CAACP,IAAI,CAACW,GAAG,CAACD,QAAQ,CAAC,EAAE;MAC3B,OAAO,KAAK;;IAGd,IAAI,CAACV,IAAI,CAACY,GAAG,CAACF,QAAQ,EAAE;MACtBG,OAAO,EAAEL,GAAG;MACZC,SAAS;MACTK,gBAAgB,EAAE,IAAIC,GAAG,EAAE;MAC3BC,WAAW,EAAE,IAAIf,GAAG;KACrB,CAAC;IAEF,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACe,IAAI,CAAC;MAAE,GAAGV,SAAS;MAAEW,KAAK,EAAEV,GAAG,CAACU;IAAK,CAAE,CAAC;IAExD,IAAI,CAACT,SAAS,EAAE;MACd,IAAI,CAACN,iBAAiB,EAAE;;IAG1B,OAAO,IAAI;EACb;EAEAgB,gBAAgBA,CAACC,KAAe,EAAEC,aAAwB;IACxD,MAAMC,KAAK,GAAG,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACH,KAAK,CAAC;IAElC,IACEE,KAAK;IACL;IACA;IACA,CAACA,KAAK,CAACb,SAAS,EAChB;MACAa,KAAK,CAACR,gBAAgB,CAACU,GAAG,CAACH,aAAa,CAAC;;EAE7C;EAEA;;;EAGAE,GAAGA,CAACH,KAAiB;IACnB,OAAO,IAAI,CAACpB,IAAI,CAACuB,GAAG,CAAC,IAAI,CAACxB,YAAY,CAACqB,KAAK,CAAC,CAAC,EAAEP,OAAO;EACzD;EAEA;;;;EAIAY,iBAAiBA,CAACf,QAAgB,EAAEgB,CAAS;IAC3C,MAAMlB,GAAG,GAAG,IAAI,CAACR,IAAI,CAACuB,GAAG,CAACb,QAAQ,CAAC;IACnC,IAAI,CAACF,GAAG,EAAE;MACR,OAAO,IAAI;;IAGb,MAAMmB,KAAK,GAAG,CAACnB,GAAG,CAACQ,WAAW,CAACO,GAAG,CAACG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC/ClB,GAAG,CAACQ,WAAW,CAACJ,GAAG,CAACc,CAAC,EAAEC,KAAK,CAAC;IAE7B,OAAO;MAAEnB,GAAG,EAAEA,GAAG,CAACK,OAAO;MAAEc;IAAK,CAAE;EACpC;EAEA;;;EAGAC,YAAYA,CAACC,MAAmB;IAC9B,MAAMC,aAAa,GAAG,IAAI7B,GAAG,EAAwB;IACrD,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACP,MAAM,EAAEO,CAAC,EAAE,EAAE;MACpC,IAAI,CAACF,OAAO,CAACE,CAAC,CAAC,CAAC2B,OAAO,CAAET,KAAK,IAAI;QAChC,MAAMd,GAAG,GAAG,IAAI,CAACR,IAAI,CAACuB,GAAG,CAACD,KAAK,CAACZ,QAAQ,CAAC;QACzC,IAAIF,GAAG,IAAIA,GAAG,CAACC,SAAS,IAAIoB,MAAM,CAAClB,GAAG,CAACW,KAAK,CAACJ,KAAK,CAAC,EAAE;UACnD,IAAIc,MAAM,GAAGF,aAAa,CAACP,GAAG,CAACD,KAAK,CAACJ,KAAK,CAAC;UAC3C,IAAI,CAACc,MAAM,EAAE;YACXA,MAAM,GAAG,EAAE;YACXF,aAAa,CAAClB,GAAG,CAACU,KAAK,CAACJ,KAAK,EAAEc,MAAM,CAAC;;UAExCA,MAAM,CAACf,IAAI,CAACK,KAAK,CAACF,KAAK,CAAC;;MAE5B,CAAC,CAAC;;IAGJ,OAAOU,aAAa;EACtB;EAEA;;;;;EAKAG,QAAQA,CAACb,KAAe;IACtB,MAAME,KAAK,GAAG,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACH,KAAK,CAAC;IAClC,IAAI,CAACE,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb,IAAI,CAACA,KAAK,CAACb,SAAS,EAAE;MACpB,IAAI,CAACN,iBAAiB,EAAE;;IAG1B,MAAM;MAAEU,OAAO;MAAEC;IAAgB,CAAE,GAAGQ,KAAK;IAC3CA,KAAK,CAACb,SAAS,GAAG,IAAI;IACtB;IACA;IACAa,KAAK,CAACR,gBAAgB,GAAG,IAAIC,GAAG,EAAE;IAClC,OAAO;MAAEF,OAAO;MAAEC;IAAgB,CAAE;EACtC;EAEA;;;EAGAoB,KAAKA,CAAA;IACH,MAAMC,gBAAgB,GAAG,IAAI,CAACjC,OAAO,CAAC,IAAI,CAACA,OAAO,CAACkC,MAAM,GAAG,CAAC,CAAC;IAC9DD,gBAAgB,CAACJ,OAAO,CAAEM,UAAU,IAAI;MACtC,MAAMf,KAAK,GAAG,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACc,UAAU,CAAC3B,QAAQ,CAAC;MAChD,IAAIY,KAAK,EAAE;QACT,IAAI,CAACtB,IAAI,CAACsC,MAAM,CAACD,UAAU,CAAC3B,QAAQ,CAAC;QACrC,IAAI,CAACY,KAAK,CAACb,SAAS,EAAE;UACpB,IAAI,CAACN,iBAAiB,EAAE;;;IAG9B,CAAC,CAAC;IAEF,IAAI,CAACD,OAAO,CAACqC,GAAG,EAAE;IAClB,IAAI,CAACrC,OAAO,CAACsC,OAAO,CAAC,EAAE,CAAC;EAC1B;EAEAC,MAAMA,CAACrB,KAAe;IACpB,MAAME,KAAK,GAAG,IAAI,CAACtB,IAAI,CAACuB,GAAG,CAACH,KAAK,CAAC;IAClC,IAAI,CAACE,KAAK,EAAE;MACV,OAAO,IAAI;;IAGb;IACA,IAAI,CAACtB,IAAI,CAACsC,MAAM,CAAClB,KAAK,CAAC;IACvB,OAAOE,KAAK;EACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}