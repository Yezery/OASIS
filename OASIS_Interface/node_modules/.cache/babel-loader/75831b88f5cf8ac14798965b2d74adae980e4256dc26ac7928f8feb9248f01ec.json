{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport xml2js from 'xml2js';\nexport function parseAdvertOptions(ssdp, options) {\n  if (options == null) {\n    throw new Error('Empty advert passed');\n  }\n  if (options.usn == null) {\n    throw new Error('Advert should have a usn property');\n  }\n  const opts = mergeOptions(options, {\n    usn: options.usn,\n    interval: 10000,\n    ttl: 1800000,\n    ipv4: true,\n    ipv6: true,\n    location: null,\n    details: {\n      $: {\n        xmlns: 'urn:schemas-upnp-org:device-1-0'\n      },\n      specVersion: {\n        major: 1,\n        minor: 1\n      },\n      URLBase: 'http://example.com',\n      device: {\n        deviceType: options.usn,\n        friendlyName: 'A friendly device name',\n        manufacturer: 'Manufactuer name',\n        manufacturerURL: 'http://example.com',\n        modelDescription: 'A description of the device',\n        modelName: 'A model name',\n        modelNumber: 'A vendor specific model number',\n        modelURL: 'http://example.com',\n        serialNumber: 'A device specific serial number',\n        UDN: ssdp.udn,\n        presentationURL: 'index.html'\n      }\n    }\n  });\n  const details = opts.details;\n  opts.details = async () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const builder = new xml2js.Builder();\n        resolve(builder.buildObject(details));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n  return opts;\n}","map":{"version":3,"names":["mergeOptions","xml2js","parseAdvertOptions","ssdp","options","Error","usn","opts","interval","ttl","ipv4","ipv6","location","details","$","xmlns","specVersion","major","minor","URLBase","device","deviceType","friendlyName","manufacturer","manufacturerURL","modelDescription","modelName","modelNumber","modelURL","serialNumber","UDN","udn","presentationURL","Promise","resolve","reject","builder","Builder","buildObject","error"],"sources":["../../../src/advertise/parse-options.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,YAAY,MAAM,eAAe;AACxC,OAAOC,MAAM,MAAM,QAAQ;AAI3B,OAAM,SAAUC,kBAAkBA,CAAEC,IAAU,EAAEC,OAAqB;EACnE,IAAIA,OAAO,IAAI,IAAI,EAAE;IACnB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;;EAGxC,IAAID,OAAO,CAACE,GAAG,IAAI,IAAI,EAAE;IACvB,MAAM,IAAID,KAAK,CAAC,mCAAmC,CAAC;;EAGtD,MAAME,IAAI,GAAWP,YAAY,CAACI,OAAO,EAAE;IACzCE,GAAG,EAAEF,OAAO,CAACE,GAAG;IAChBE,QAAQ,EAAE,KAAK;IACfC,GAAG,EAAE,OAAO;IACZC,IAAI,EAAE,IAAI;IACVC,IAAI,EAAE,IAAI;IACVC,QAAQ,EAAE,IAAI;IACdC,OAAO,EAAE;MACPC,CAAC,EAAE;QACDC,KAAK,EAAE;OACR;MACDC,WAAW,EAAE;QACXC,KAAK,EAAE,CAAC;QACRC,KAAK,EAAE;OACR;MACDC,OAAO,EAAE,oBAAoB;MAC7BC,MAAM,EAAE;QACNC,UAAU,EAAEjB,OAAO,CAACE,GAAG;QACvBgB,YAAY,EAAE,wBAAwB;QACtCC,YAAY,EAAE,kBAAkB;QAChCC,eAAe,EAAE,oBAAoB;QACrCC,gBAAgB,EAAE,6BAA6B;QAC/CC,SAAS,EAAE,cAAc;QACzBC,WAAW,EAAE,gCAAgC;QAC7CC,QAAQ,EAAE,oBAAoB;QAC9BC,YAAY,EAAE,iCAAiC;QAC/CC,GAAG,EAAE3B,IAAI,CAAC4B,GAAG;QACbC,eAAe,EAAE;;;GAGtB,CAAC;EAEF,MAAMnB,OAAO,GAAGN,IAAI,CAACM,OAAO;EAE5BN,IAAI,CAACM,OAAO,GAAG,YAAW;IACxB,OAAO,IAAIoB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,IAAI;QACF,MAAMC,OAAO,GAAG,IAAInC,MAAM,CAACoC,OAAO,EAAE;QACpCH,OAAO,CAACE,OAAO,CAACE,WAAW,CAACzB,OAAO,CAAC,CAAC;OACtC,CAAC,OAAO0B,KAAK,EAAE;QACdJ,MAAM,CAACI,KAAK,CAAC;;IAEjB,CAAC,CAAC;EACJ,CAAC;EAED,OAAOhC,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}