{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js';\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or(decoder) {\n    return or(this, decoder);\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode(input) {\n    const prefix = /** @type {Prefix} */input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder( /** @type {Decoders<L|R>} */{\n  ...(left.decoders || {\n    [/** @type API.UnibaseDecoder<L> */left.prefix]: left\n  }),\n  ...(right.decoders || {\n    [/** @type API.UnibaseDecoder<R> */right.prefix]: right\n  })\n});\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({\n  name,\n  prefix,\n  encode,\n  decode\n}) => new Codec(name, prefix, encode, decode);\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({\n  prefix,\n  name,\n  alphabet\n}) => {\n  const {\n    encode,\n    decode\n  } = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  });\n};\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  // Count the padding bytes:\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n\n  // Parse the data:\n  let bits = 0; // Number of bits currently in the buffer\n  let buffer = 0; // Bits waiting to be written out, MSB first\n  let written = 0; // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`);\n    }\n\n    // Append the bits to the buffer:\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 0xff & buffer >> bits;\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0; // Number of bits currently in the buffer\n  let buffer = 0; // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({\n  name,\n  prefix,\n  bitsPerChar,\n  alphabet\n}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","map":{"version":3,"names":["basex","coerce","API","Encoder","constructor","name","prefix","baseEncode","encode","bytes","Uint8Array","Error","Decoder","baseDecode","codePointAt","undefined","prefixCodePoint","decode","text","JSON","stringify","slice","length","or","decoder","ComposedDecoder","decoders","input","RangeError","Object","keys","left","right","Codec","encoder","from","baseX","alphabet","string","bitsPerChar","codes","i","end","out","bits","buffer","written","value","SyntaxError","data","pad","mask","rfc4648"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/multiformats@11.0.2/node_modules/multiformats/src/bases/base.js"],"sourcesContent":["import basex from '../../vendor/base-x.js'\nimport { coerce } from '../bytes.js'\n// Linter can't see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\n/**\n * Class represents both BaseEncoder and MultibaseEncoder meaning it\n * can be used to encode to multibase or base encode without multibase\n * prefix.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.BaseEncoder}\n */\nclass Encoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   */\n  constructor (name, prefix, baseEncode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n  }\n\n  /**\n   * @param {Uint8Array} bytes\n   * @returns {API.Multibase<Prefix>}\n   */\n  encode (bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`\n    } else {\n      throw Error('Unknown type, must be binary type')\n    }\n  }\n}\n\n/**\n * @template {string} Prefix\n */\n/**\n * Class represents both BaseDecoder and MultibaseDecoder so it could be used\n * to decode multibases (with matching prefix) or just base decode strings\n * with corresponding base encoding.\n *\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.UnibaseDecoder<Prefix>}\n * @implements {API.BaseDecoder}\n */\nclass Decoder {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    /* c8 ignore next 3 */\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character')\n    }\n    /** @private */\n    this.prefixCodePoint = /** @type {number} */ (prefix.codePointAt(0))\n    this.baseDecode = baseDecode\n  }\n\n  /**\n   * @param {string} text\n   */\n  decode (text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)\n      }\n      return this.baseDecode(text.slice(this.prefix.length))\n    } else {\n      throw Error('Can only multibase decode strings')\n    }\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n}\n\n/**\n * @template {string} Prefix\n * @typedef {Record<Prefix, API.UnibaseDecoder<Prefix>>} Decoders\n */\n\n/**\n * @template {string} Prefix\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.CombobaseDecoder<Prefix>}\n */\nclass ComposedDecoder {\n  /**\n   * @param {Decoders<Prefix>} decoders\n   */\n  constructor (decoders) {\n    this.decoders = decoders\n  }\n\n  /**\n   * @template {string} OtherPrefix\n   * @param {API.UnibaseDecoder<OtherPrefix>|ComposedDecoder<OtherPrefix>} decoder\n   * @returns {ComposedDecoder<Prefix|OtherPrefix>}\n   */\n  or (decoder) {\n    return or(this, decoder)\n  }\n\n  /**\n   * @param {string} input\n   * @returns {Uint8Array}\n   */\n  decode (input) {\n    const prefix = /** @type {Prefix} */ (input[0])\n    const decoder = this.decoders[prefix]\n    if (decoder) {\n      return decoder.decode(input)\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)\n    }\n  }\n}\n\n/**\n * @template {string} L\n * @template {string} R\n * @param {API.UnibaseDecoder<L>|API.CombobaseDecoder<L>} left\n * @param {API.UnibaseDecoder<R>|API.CombobaseDecoder<R>} right\n * @returns {ComposedDecoder<L|R>}\n */\nexport const or = (left, right) => new ComposedDecoder(/** @type {Decoders<L|R>} */({\n  ...(left.decoders || { [/** @type API.UnibaseDecoder<L> */(left).prefix]: left }),\n  ...(right.decoders || { [/** @type API.UnibaseDecoder<R> */(right).prefix]: right })\n}))\n\n/**\n * @class\n * @template {string} Base\n * @template {string} Prefix\n * @implements {API.MultibaseCodec<Prefix>}\n * @implements {API.MultibaseEncoder<Prefix>}\n * @implements {API.MultibaseDecoder<Prefix>}\n * @implements {API.BaseCodec}\n * @implements {API.BaseEncoder}\n * @implements {API.BaseDecoder}\n */\nexport class Codec {\n  /**\n   * @param {Base} name\n   * @param {Prefix} prefix\n   * @param {(bytes:Uint8Array) => string} baseEncode\n   * @param {(text:string) => Uint8Array} baseDecode\n   */\n  constructor (name, prefix, baseEncode, baseDecode) {\n    this.name = name\n    this.prefix = prefix\n    this.baseEncode = baseEncode\n    this.baseDecode = baseDecode\n    this.encoder = new Encoder(name, prefix, baseEncode)\n    this.decoder = new Decoder(name, prefix, baseDecode)\n  }\n\n  /**\n   * @param {Uint8Array} input\n   */\n  encode (input) {\n    return this.encoder.encode(input)\n  }\n\n  /**\n   * @param {string} input\n   */\n  decode (input) {\n    return this.decoder.decode(input)\n  }\n}\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {(bytes:Uint8Array) => string} options.encode\n * @param {(input:string) => Uint8Array} options.decode\n * @returns {Codec<Base, Prefix>}\n */\nexport const from = ({ name, prefix, encode, decode }) =>\n  new Codec(name, prefix, encode, decode)\n\n/**\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @returns {Codec<Base, Prefix>}\n */\nexport const baseX = ({ prefix, name, alphabet }) => {\n  const { encode, decode } = basex(alphabet, name)\n  return from({\n    prefix,\n    name,\n    encode,\n    /**\n     * @param {string} text\n     */\n    decode: text => coerce(decode(text))\n  })\n}\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @param {string} name\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`)\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @template {string} Base\n * @template {string} Prefix\n * @param {object} options\n * @param {Base} options.name\n * @param {Prefix} options.prefix\n * @param {string} options.alphabet\n * @param {number} options.bitsPerChar\n */\nexport const rfc4648 = ({ name, prefix, bitsPerChar, alphabet }) => {\n  return from({\n    prefix,\n    name,\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar, name)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}