{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nexport function createPut({\n  codecs,\n  hashers,\n  repo,\n  preload\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"put\"]}\n   */\n  async function put(block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n    try {\n      const cidVersion = options.version != null ? options.version : 0;\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw');\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256');\n      const hash = await hasher.digest(block);\n      const codec = await codecs.getCodec(codecName);\n      const cid = CID.create(cidVersion, codec.code, hash);\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      });\n      if (options.preload !== false) {\n        preload(cid);\n      }\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        });\n      }\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n  return withTimeoutOption(put);\n}","map":{"version":3,"names":["CID","withTimeoutOption","createPut","codecs","hashers","repo","preload","put","block","options","release","pin","gcLock","readLock","cidVersion","version","codecName","format","hasher","getHasher","mhtype","hash","digest","codec","getCodec","cid","create","code","blocks","signal","pins","pinRecursively"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/block/put.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n */\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n *\n */\nexport function createPut ({ codecs, hashers, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"put\"]}\n   */\n  async function put (block, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const cidVersion = options.version != null ? options.version : 0\n      const codecName = options.format || (cidVersion === 0 ? 'dag-pb' : 'raw')\n\n      const hasher = await hashers.getHasher(options.mhtype || 'sha2-256')\n      const hash = await hasher.digest(block)\n      const codec = await codecs.getCodec(codecName)\n      const cid = CID.create(cidVersion, codec.code, hash)\n\n      await repo.blocks.put(cid, block, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin === true) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAASA,CAAE;EAAEC,MAAM;EAAEC,OAAO;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC7D;AACF;AACA;EACE,eAAeC,GAAGA,CAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvC,MAAMC,OAAO,GAAGD,OAAO,CAACE,GAAG,GAAG,MAAMN,IAAI,CAACO,MAAM,CAACC,QAAQ,CAAC,CAAC,GAAG,IAAI;IAEjE,IAAI;MACF,MAAMC,UAAU,GAAGL,OAAO,CAACM,OAAO,IAAI,IAAI,GAAGN,OAAO,CAACM,OAAO,GAAG,CAAC;MAChE,MAAMC,SAAS,GAAGP,OAAO,CAACQ,MAAM,KAAKH,UAAU,KAAK,CAAC,GAAG,QAAQ,GAAG,KAAK,CAAC;MAEzE,MAAMI,MAAM,GAAG,MAAMd,OAAO,CAACe,SAAS,CAACV,OAAO,CAACW,MAAM,IAAI,UAAU,CAAC;MACpE,MAAMC,IAAI,GAAG,MAAMH,MAAM,CAACI,MAAM,CAACd,KAAK,CAAC;MACvC,MAAMe,KAAK,GAAG,MAAMpB,MAAM,CAACqB,QAAQ,CAACR,SAAS,CAAC;MAC9C,MAAMS,GAAG,GAAGzB,GAAG,CAAC0B,MAAM,CAACZ,UAAU,EAAES,KAAK,CAACI,IAAI,EAAEN,IAAI,CAAC;MAEpD,MAAMhB,IAAI,CAACuB,MAAM,CAACrB,GAAG,CAACkB,GAAG,EAAEjB,KAAK,EAAE;QAChCqB,MAAM,EAAEpB,OAAO,CAACoB;MAClB,CAAC,CAAC;MAEF,IAAIpB,OAAO,CAACH,OAAO,KAAK,KAAK,EAAE;QAC7BA,OAAO,CAACmB,GAAG,CAAC;MACd;MAEA,IAAIhB,OAAO,CAACE,GAAG,KAAK,IAAI,EAAE;QACxB,MAAMN,IAAI,CAACyB,IAAI,CAACC,cAAc,CAACN,GAAG,EAAE;UAClCI,MAAM,EAAEpB,OAAO,CAACoB;QAClB,CAAC,CAAC;MACJ;MAEA,OAAOJ,GAAG;IACZ,CAAC,SAAS;MACR,IAAIf,OAAO,EAAE;QACXA,OAAO,CAAC,CAAC;MACX;IACF;EACF;EAEA,OAAOT,iBAAiB,CAACM,GAAG,CAAC;AAC/B"},"metadata":{},"sourceType":"module","externalDependencies":[]}