{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assert } from '../../util';\nimport { greaterEqual } from '../greater_equal';\nimport { lessEqual } from '../less_equal';\nimport { logicalAnd } from '../logical_and';\nimport { op } from '../operation';\nimport { range } from '../range';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { unstack } from '../unstack';\nimport { where } from '../where';\nimport { zeros } from '../zeros';\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_(a, numLower, numUpper) {\n  assert(numLower % 1 === 0, () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(numUpper % 1 === 0, () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n  const $a = convertToTensor(a, 'a', 'bandPart');\n  assert($a.rank >= 2, () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n  if (!(numLower <= M)) {\n    throw new Error(`bandPart(): numLower (${numLower})` + ` must not be greater than the number of rows (${M}).`);\n  }\n  if (!(numUpper <= N)) {\n    throw new Error(`bandPart(): numUpper (${numUpper})` + ` must not be greater than the number of columns (${N}).`);\n  }\n  if (numLower < 0) {\n    numLower = M;\n  }\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n  const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  const j = range(0, N, 1, 'int32');\n  const ij = sub(i, j);\n  const inBand = logicalAnd(lessEqual(ij, scalar(+numLower, 'int32')), greaterEqual(ij, scalar(-numUpper, 'int32')));\n  const zero = zeros([M, N], $a.dtype);\n  return reshape(stack(unstack(reshape($a, [-1, M, N])).map(mat => where(inBand, mat, zero))), shape);\n}\nexport const bandPart = op({\n  bandPart_\n});","map":{"version":3,"names":["convertToTensor","assert","greaterEqual","lessEqual","logicalAnd","op","range","reshape","scalar","stack","sub","unstack","where","zeros","bandPart_","a","numLower","numUpper","$a","rank","shape","M","N","slice","Error","i","j","ij","inBand","zero","dtype","map","mat","bandPart"],"sources":["../../../../../../../tfjs-core/src/ops/linalg/band_part.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assert} from '../../util';\n\nimport {greaterEqual} from '../greater_equal';\nimport {lessEqual} from '../less_equal';\nimport {logicalAnd} from '../logical_and';\nimport {op} from '../operation';\nimport {range} from '../range';\nimport {reshape} from '../reshape';\nimport {scalar} from '../scalar';\nimport {stack} from '../stack';\nimport {sub} from '../sub';\nimport {unstack} from '../unstack';\nimport {where} from '../where';\nimport {zeros} from '../zeros';\n\n/**\n * Copy a tensor setting everything outside a central band in each innermost\n * matrix to zero.\n *\n * The band part is computed as follows: Assume input has `k` dimensions\n * `[I, J, K, ..., M, N]`, then the output is a tensor with the same shape where\n * `band[i, j, k, ..., m, n] = in_band(m, n) * input[i, j, k, ..., m, n]`.\n * The indicator function\n * `in_band(m, n) = (num_lower < 0 || (m-n) <= num_lower))`\n * `&& (num_upper < 0 || (n-m) <= num_upper)`\n *\n * ```js\n * const x = tf.tensor2d([[ 0,  1,  2, 3],\n *                        [-1,  0,  1, 2],\n *                        [-2, -1,  0, 1],\n *                        [-3, -2, -1, 0]]);\n * let y = tf.linalg.bandPart(x, 1, -1);\n * y.print(); // [[ 0,  1,  2, 3],\n *            //  [-1,  0,  1, 2],\n *            //  [ 0, -1,  0, 1],\n *            //  [ 0, 0 , -1, 0]]\n * let z = tf.linalg.bandPart(x, 2, 1);\n * z.print(); // [[ 0,  1,  0, 0],\n *            //  [-1,  0,  1, 0],\n *            //  [-2, -1,  0, 1],\n *            //  [ 0, -2, -1, 0]]\n * ```\n *\n * @param x Rank `k` tensor\n * @param numLower Number of subdiagonals to keep.\n *   If negative, keep entire lower triangle.\n * @param numUpper Number of subdiagonals to keep.\n *   If negative, keep entire upper triangle.\n * @returns Rank `k` tensor of the same shape as input.\n *   The extracted banded tensor.\n *\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\n */\nfunction bandPart_<T extends Tensor>(\n    a: T|TensorLike, numLower: number, numUpper: number): T {\n  assert(\n      numLower % 1 === 0,\n      () => `bandPart(): numLower must be an integer, got ${numLower}.`);\n  assert(\n      numUpper % 1 === 0,\n      () => `bandPart(): numUpper must be an integer, got ${numUpper}.`);\n\n  const $a = convertToTensor(a, 'a', 'bandPart');\n\n  assert(\n      $a.rank >= 2,\n      () => `bandPart(): Rank must be at least 2, got ${$a.rank}.`);\n\n  const shape = $a.shape;\n  const [M, N] = $a.shape.slice(-2);\n\n  if (!(numLower <= M)) {\n    throw new Error(\n        `bandPart(): numLower (${numLower})` +\n        ` must not be greater than the number of rows (${M}).`);\n  }\n  if (!(numUpper <= N)) {\n    throw new Error(\n        `bandPart(): numUpper (${numUpper})` +\n        ` must not be greater than the number of columns (${N}).`);\n  }\n\n  if (numLower < 0) {\n    numLower = M;\n  }\n  if (numUpper < 0) {\n    numUpper = N;\n  }\n\n  const i = reshape(range(0, M, 1, 'int32'), [-1, 1]);\n  const j = range(0, N, 1, 'int32');\n  const ij = sub(i, j);\n\n  const inBand = logicalAnd(\n      lessEqual(ij, scalar(+numLower, 'int32')),\n      greaterEqual(ij, scalar(-numUpper, 'int32')));\n\n  const zero = zeros([M, N], $a.dtype);\n\n  return reshape(\n             stack(unstack(reshape($a, [-1, M, N]))\n                       .map(mat => where(inBand, mat, zero))),\n             shape) as T;\n}\n\nexport const bandPart = op({bandPart_});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}