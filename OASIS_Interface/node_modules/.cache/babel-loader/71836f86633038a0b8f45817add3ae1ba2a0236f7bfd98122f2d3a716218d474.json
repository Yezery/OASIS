{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat(options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    });\n    return toCoreInterface(await res.json());\n  }\n  return stat;\n});\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface(res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map(( /** @type {{ '/': string }} */k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map(( /** @type {string} */str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  };\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","peerIdFromString","createStat","api","stat","options","res","post","searchParams","signal","headers","toCoreInterface","json","provideBufLen","ProvideBufLen","wantlist","Wantlist","map","k","parse","peers","Peers","str","blocksReceived","BigInt","BlocksReceived","dataReceived","DataReceived","blocksSent","BlocksSent","dataSent","DataSent","dupBlksReceived","DupBlksReceived","dupDataReceived","DupDataReceived"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/bitswap/stat.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/bitswap').API<HTTPClientExtraOptions>} BitswapAPI\n */\n\nexport const createStat = configure(api => {\n  /**\n   * @type {BitswapAPI[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    const res = await api.post('bitswap/stat', {\n      searchParams: toUrlSearchParams(options),\n      signal: options.signal,\n      headers: options.headers\n    })\n\n    return toCoreInterface(await res.json())\n  }\n  return stat\n})\n\n/**\n * @param {any} res\n */\nfunction toCoreInterface (res) {\n  return {\n    provideBufLen: res.ProvideBufLen,\n    wantlist: (res.Wantlist || []).map((/** @type {{ '/': string }} */ k) => CID.parse(k['/'])),\n    peers: (res.Peers || []).map((/** @type {string} */ str) => peerIdFromString(str)),\n    blocksReceived: BigInt(res.BlocksReceived),\n    dataReceived: BigInt(res.DataReceived),\n    blocksSent: BigInt(res.BlocksSent),\n    dataSent: BigInt(res.DataSent),\n    dupBlksReceived: BigInt(res.DupBlksReceived),\n    dupDataReceived: BigInt(res.DupDataReceived)\n  }\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,iBAAiB;;AAElD;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,UAAU,GAAGH,SAAS,CAACI,GAAG,IAAI;EACzC;AACF;AACA;EACE,eAAeC,IAAIA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,cAAc,EAAE;MACzCC,YAAY,EAAER,iBAAiB,CAACK,OAAO,CAAC;MACxCI,MAAM,EAAEJ,OAAO,CAACI,MAAM;MACtBC,OAAO,EAAEL,OAAO,CAACK;IACnB,CAAC,CAAC;IAEF,OAAOC,eAAe,CAAC,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC,CAAC;EAC1C;EACA,OAAOR,IAAI;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASO,eAAeA,CAAEL,GAAG,EAAE;EAC7B,OAAO;IACLO,aAAa,EAAEP,GAAG,CAACQ,aAAa;IAChCC,QAAQ,EAAE,CAACT,GAAG,CAACU,QAAQ,IAAI,EAAE,EAAEC,GAAG,CAAC,EAAC,8BAA+BC,CAAC,KAAKpB,GAAG,CAACqB,KAAK,CAACD,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAC3FE,KAAK,EAAE,CAACd,GAAG,CAACe,KAAK,IAAI,EAAE,EAAEJ,GAAG,CAAC,EAAC,qBAAsBK,GAAG,KAAKrB,gBAAgB,CAACqB,GAAG,CAAC,CAAC;IAClFC,cAAc,EAAEC,MAAM,CAAClB,GAAG,CAACmB,cAAc,CAAC;IAC1CC,YAAY,EAAEF,MAAM,CAAClB,GAAG,CAACqB,YAAY,CAAC;IACtCC,UAAU,EAAEJ,MAAM,CAAClB,GAAG,CAACuB,UAAU,CAAC;IAClCC,QAAQ,EAAEN,MAAM,CAAClB,GAAG,CAACyB,QAAQ,CAAC;IAC9BC,eAAe,EAAER,MAAM,CAAClB,GAAG,CAAC2B,eAAe,CAAC;IAC5CC,eAAe,EAAEV,MAAM,CAAClB,GAAG,CAAC6B,eAAe;EAC7C,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}