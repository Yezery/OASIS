{"ast":null,"code":"import bases from './util/bases.js';\n/**\n * Turns a `Uint8Array` into a string.\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n */\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (base == null) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  if ((encoding === 'utf8' || encoding === 'utf-8') && globalThis.Buffer != null && globalThis.Buffer.from != null) {\n    return globalThis.Buffer.from(array.buffer, array.byteOffset, array.byteLength).toString('utf8');\n  }\n  // strip multibase prefix\n  return base.encoder.encode(array).substring(1);\n}","map":{"version":3,"names":["bases","toString","array","encoding","base","Error","globalThis","Buffer","from","buffer","byteOffset","byteLength","encoder","encode","substring"],"sources":["../../src/to-string.ts"],"sourcesContent":[null],"mappings":"AAAA,OAAOA,KAAK,MAAmC,iBAAiB;AAIhE;;;;;;;AAOA,OAAM,SAAUC,QAAQA,CAAEC,KAAiB,EAAEC,QAAA,GAA+B,MAAM;EAChF,MAAMC,IAAI,GAAGJ,KAAK,CAACG,QAAQ,CAAC;EAE5B,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBF,QAAQ,GAAG,CAAC;;EAGvD,IAAI,CAACA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,OAAO,KAAKG,UAAU,CAACC,MAAM,IAAI,IAAI,IAAID,UAAU,CAACC,MAAM,CAACC,IAAI,IAAI,IAAI,EAAE;IAChH,OAAOF,UAAU,CAACC,MAAM,CAACC,IAAI,CAACN,KAAK,CAACO,MAAM,EAAEP,KAAK,CAACQ,UAAU,EAAER,KAAK,CAACS,UAAU,CAAC,CAACV,QAAQ,CAAC,MAAM,CAAC;;EAGlG;EACA,OAAOG,IAAI,CAACQ,OAAO,CAACC,MAAM,CAACX,KAAK,CAAC,CAACY,SAAS,CAAC,CAAC,CAAC;AAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}