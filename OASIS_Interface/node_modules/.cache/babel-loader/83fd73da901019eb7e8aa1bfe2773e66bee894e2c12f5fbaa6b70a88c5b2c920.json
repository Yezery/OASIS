{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { pbStream } from 'it-pb-stream';\nimport { duplexPair } from 'it-pair/duplex';\nimport { pipe } from 'it-pipe';\nimport { decode } from 'it-length-prefixed';\nimport { NOISE_MSG_MAX_LENGTH_BYTES } from './constants.js';\nimport { stablelib } from './crypto/stablelib.js';\nimport { decryptStream, encryptStream } from './crypto/streaming.js';\nimport { uint16BEDecode, uint16BEEncode } from './encoder.js';\nimport { XXHandshake } from './handshake-xx.js';\nimport { getPayload } from './utils.js';\nimport { registerMetrics } from './metrics.js';\nexport class Noise {\n  constructor(init = {}) {\n    this.protocol = '/noise';\n    const {\n      staticNoiseKey,\n      extensions,\n      crypto,\n      prologueBytes,\n      metrics\n    } = init;\n    this.crypto = crypto ?? stablelib;\n    this.extensions = extensions;\n    this.metrics = metrics ? registerMetrics(metrics) : undefined;\n    if (staticNoiseKey) {\n      // accepts x25519 private key of length 32\n      this.staticKeys = this.crypto.generateX25519KeyPairFromSeed(staticNoiseKey);\n    } else {\n      this.staticKeys = this.crypto.generateX25519KeyPair();\n    }\n    this.prologue = prologueBytes ?? new Uint8Array(0);\n  }\n  /**\n   * Encrypt outgoing data to the remote party (handshake as initiator)\n   *\n   * @param {PeerId} localPeer - PeerId of the receiving peer\n   * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encrypted\n   * @param {PeerId} remotePeer - PeerId of the remote peer. Used to validate the integrity of the remote peer.\n   * @returns {Promise<SecuredConnection>}\n   */\n  async secureOutbound(localPeer, connection, remotePeer) {\n    const wrappedConnection = pbStream(connection, {\n      lengthEncoder: uint16BEEncode,\n      lengthDecoder: uint16BEDecode,\n      maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n    });\n    const handshake = await this.performHandshake({\n      connection: wrappedConnection,\n      isInitiator: true,\n      localPeer,\n      remotePeer\n    });\n    const conn = await this.createSecureConnection(wrappedConnection, handshake);\n    return {\n      conn,\n      remoteExtensions: handshake.remoteExtensions,\n      remotePeer: handshake.remotePeer\n    };\n  }\n  /**\n   * Decrypt incoming data (handshake as responder).\n   *\n   * @param {PeerId} localPeer - PeerId of the receiving peer.\n   * @param {Duplex<Uint8Array>} connection - streaming iterable duplex that will be encryption.\n   * @param {PeerId} remotePeer - optional PeerId of the initiating peer, if known. This may only exist during transport upgrades.\n   * @returns {Promise<SecuredConnection>}\n   */\n  async secureInbound(localPeer, connection, remotePeer) {\n    const wrappedConnection = pbStream(connection, {\n      lengthEncoder: uint16BEEncode,\n      lengthDecoder: uint16BEDecode,\n      maxDataLength: NOISE_MSG_MAX_LENGTH_BYTES\n    });\n    const handshake = await this.performHandshake({\n      connection: wrappedConnection,\n      isInitiator: false,\n      localPeer,\n      remotePeer\n    });\n    const conn = await this.createSecureConnection(wrappedConnection, handshake);\n    return {\n      conn,\n      remotePeer: handshake.remotePeer,\n      remoteExtensions: handshake.remoteExtensions\n    };\n  }\n  /**\n   * If Noise pipes supported, tries IK handshake first with XX as fallback if it fails.\n   * If noise pipes disabled or remote peer static key is unknown, use XX.\n   *\n   * @param {HandshakeParams} params\n   */\n  async performHandshake(params) {\n    const payload = await getPayload(params.localPeer, this.staticKeys.publicKey, this.extensions);\n    // run XX handshake\n    return await this.performXXHandshake(params, payload);\n  }\n  async performXXHandshake(params, payload) {\n    const {\n      isInitiator,\n      remotePeer,\n      connection\n    } = params;\n    const handshake = new XXHandshake(isInitiator, payload, this.prologue, this.crypto, this.staticKeys, connection, remotePeer);\n    try {\n      await handshake.propose();\n      await handshake.exchange();\n      await handshake.finish();\n      this.metrics?.xxHandshakeSuccesses.increment();\n    } catch (e) {\n      this.metrics?.xxHandshakeErrors.increment();\n      if (e instanceof Error) {\n        e.message = `Error occurred during XX handshake: ${e.message}`;\n        throw e;\n      }\n    }\n    return handshake;\n  }\n  async createSecureConnection(connection, handshake) {\n    // Create encryption box/unbox wrapper\n    const [secure, user] = duplexPair();\n    const network = connection.unwrap();\n    await pipe(secure,\n    // write to wrapper\n    encryptStream(handshake, this.metrics),\n    // encrypt data + prefix with message length\n    network,\n    // send to the remote peer\n    decode({\n      lengthDecoder: uint16BEDecode\n    }),\n    // read message length prefix\n    decryptStream(handshake, this.metrics),\n    // decrypt the incoming data\n    secure // pipe to the wrapper\n    );\n\n    return user;\n  }\n}","map":{"version":3,"names":["pbStream","duplexPair","pipe","decode","NOISE_MSG_MAX_LENGTH_BYTES","stablelib","decryptStream","encryptStream","uint16BEDecode","uint16BEEncode","XXHandshake","getPayload","registerMetrics","Noise","constructor","init","protocol","staticNoiseKey","extensions","crypto","prologueBytes","metrics","undefined","staticKeys","generateX25519KeyPairFromSeed","generateX25519KeyPair","prologue","Uint8Array","secureOutbound","localPeer","connection","remotePeer","wrappedConnection","lengthEncoder","lengthDecoder","maxDataLength","handshake","performHandshake","isInitiator","conn","createSecureConnection","remoteExtensions","secureInbound","params","payload","publicKey","performXXHandshake","propose","exchange","finish","xxHandshakeSuccesses","increment","e","xxHandshakeErrors","Error","message","secure","user","network","unwrap"],"sources":["../../src/noise.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}