{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out;\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d\n};","map":{"version":3,"names":["backend_util","Conv2D","env","Conv2DProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","conv2d","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","program","runWebGLProgram","outReshaped","outShape","disposeIntermediateTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["../../../../../../tfjs-backend-webgl/src/kernels/Conv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAY,EAAEC,MAAM,EAA6BC,GAAG,QAA6C,uBAAuB;AAGhI,SAAQC,aAAa,QAAO,aAAa;AACzC,SAAQC,cAAc,EAAEC,gBAAgB,QAAO,eAAe;AAC9D,SAAQC,OAAO,QAAO,WAAW;AAEjC,OAAM,SAAUC,MAAMA,CAClBC,IACyE;EAC3E,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,MAAM;IAACI,CAAC;IAAEC;EAAM,CAAC,GAAGJ,MAAM;EAC1B,MAAM;IAACK,OAAO;IAAEC,GAAG;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGP,KAAK;EAEpE,MAAMQ,WAAW,GAAGnB,YAAY,CAACoB,uBAAuB,CAACJ,UAAU,CAAC;EACpE,MAAMK,QAAQ,GAAGrB,YAAY,CAACsB,iBAAiB,CAC3CV,CAAC,CAACW,KAAyC,EAC3CV,MAAM,CAACU,KAAyC,EAAET,OAAO,EAAEG,SAAS,EAAEF,GAAG,EACzEG,eAAe,EAAE,KAAK,CAAC,iBAAiBC,WAAW,CAAC;EACxD,IAAIK,GAAe;EAEnB,IAAIH,QAAQ,CAACI,YAAY,KAAK,CAAC,IAAIJ,QAAQ,CAACK,WAAW,KAAK,CAAC,IACzDL,QAAQ,CAACM,cAAc,KAAK,CAAC,IAAIN,QAAQ,CAACO,aAAa,KAAK,CAAC,IAC7DP,QAAQ,CAACQ,YAAY,KAAK,CAAC,IAAIR,QAAQ,CAACS,WAAW,KAAK,CAAC,KACxDT,QAAQ,CAACU,OAAO,CAACC,IAAI,KAAK,MAAM,IAAIX,QAAQ,CAACU,OAAO,CAACC,IAAI,KAAK,OAAO,CAAC,EAAE;IAC3ER,GAAG,GAAGpB,cAAc,CAAC;MAACQ,CAAC;MAAEC,MAAM;MAAEQ,QAAQ;MAAEX;IAAO,CAAC,CAAC;GACrD,MAAM,IAAIR,GAAG,EAAE,CAAC+B,OAAO,CAAC,mBAAmB,CAAC,IAAIrB,CAAC,CAACW,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;IACjEC,GAAG,GAAGnB,gBAAgB,CAAC;MAACO,CAAC;MAAEC,MAAM;MAAEQ,QAAQ;MAAEX;IAAO,CAAC,CAAC;GACvD,MAAM;IACL,MAAMwB,OAAO,GAAG,IAAI/B,aAAa,CAACkB,QAAQ,CAAC;IAC3CG,GAAG,GAAGd,OAAO,CAACyB,eAAe,CAACD,OAAO,EAAE,CAACtB,CAAC,EAAEC,MAAM,CAAC,EAAE,SAAS,CAAC;;EAGhE,MAAMuB,WAAW,GACb9B,OAAO,CAAC;IAACG,MAAM,EAAE;MAACG,CAAC,EAAEY;IAAG,CAAC;IAAEd,OAAO;IAAEC,KAAK,EAAE;MAACY,KAAK,EAAEF,QAAQ,CAACgB;IAAQ;EAAC,CAAC,CAAC;EAC3E3B,OAAO,CAAC4B,6BAA6B,CAACd,GAAG,CAAC;EAE1C,OAAOY,WAAW;AACpB;AAEA,OAAO,MAAMG,YAAY,GAAiB;EACxCC,UAAU,EAAEvC,MAAM;EAClBwC,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEnC;CACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}