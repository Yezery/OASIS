{"ast":null,"code":"import { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode(context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  });\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg);\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  };\n  const buf = dagPB.encode(node);\n  const hash = await hasher.digest(buf);\n  const cid = CID.create(options.cidVersion, dagPB.code, hash);\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf);\n  }\n  return {\n    cid,\n    node\n  };\n}","map":{"version":3,"names":["UnixFS","dagPB","CID","createNode","context","type","options","metadata","mode","mtime","hasher","hashers","getHasher","hashAlg","node","Data","marshal","Links","buf","encode","hash","digest","cid","create","cidVersion","code","flush","repo","blocks","put"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/create-node.js"],"sourcesContent":["import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,aAAa;AACpC,OAAO,KAAKC,KAAK,MAAM,cAAc;AACrC,SAASC,GAAG,QAAQ,kBAAkB;;AAEtC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAEC,OAAO,EAAEC,IAAI,EAAEC,OAAO,EAAE;EACxD,MAAMC,QAAQ,GAAG,IAAIP,MAAM,CAAC;IAC1BK,IAAI;IACJG,IAAI,EAAEF,OAAO,CAACE,IAAI;IAClBC,KAAK,EAAEH,OAAO,CAACG;EACjB,CAAC,CAAC;;EAEF;EACA,MAAMC,MAAM,GAAG,MAAMN,OAAO,CAACO,OAAO,CAACC,SAAS,CAACN,OAAO,CAACO,OAAO,CAAC;EAC/D,MAAMC,IAAI,GAAG;IACXC,IAAI,EAAER,QAAQ,CAACS,OAAO,CAAC,CAAC;IACxBC,KAAK,EAAE;EACT,CAAC;EACD,MAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAM,CAACL,IAAI,CAAC;EAC9B,MAAMM,IAAI,GAAG,MAAMV,MAAM,CAACW,MAAM,CAACH,GAAG,CAAC;EACrC,MAAMI,GAAG,GAAGpB,GAAG,CAACqB,MAAM,CAACjB,OAAO,CAACkB,UAAU,EAAEvB,KAAK,CAACwB,IAAI,EAAEL,IAAI,CAAC;EAE5D,IAAId,OAAO,CAACoB,KAAK,EAAE;IACjB,MAAMtB,OAAO,CAACuB,IAAI,CAACC,MAAM,CAACC,GAAG,CAACP,GAAG,EAAEJ,GAAG,CAAC;EACzC;EAEA,OAAO;IACLI,GAAG;IACHR;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}