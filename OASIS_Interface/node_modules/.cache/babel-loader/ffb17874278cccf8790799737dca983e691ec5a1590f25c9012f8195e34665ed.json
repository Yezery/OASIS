{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Use the `createLibp2p` function to create a libp2p node.\n *\n * @example\n *\n * ```typescript\n * import { createLibp2p } from 'libp2p'\n *\n * const node = await createLibp2p({\n *   // ...other options\n * })\n * ```\n */\nimport { createLibp2pNode } from './libp2p.js';\n/**\n * Returns a new instance of the Libp2p interface, generating a new PeerId\n * if one is not passed as part of the options.\n *\n * The node will be started unless `start: false` is passed as an option.\n *\n * @example\n *\n * ```js\n * import { createLibp2p } from 'libp2p'\n * import { tcp } from '@libp2p/tcp'\n * import { mplex } from '@libp2p/mplex'\n * import { noise } from '@chainsafe/libp2p-noise'\n *\n * // specify options\n * const options = {\n *   transports: [tcp()],\n *   streamMuxers: [mplex()],\n *   connectionEncryption: [noise()]\n * }\n *\n * // create libp2p\n * const libp2p = await createLibp2p(options)\n * ```\n */\nexport async function createLibp2p(options) {\n  const node = await createLibp2pNode(options);\n  if (options.start !== false) {\n    await node.start();\n  }\n  return node;\n}","map":{"version":3,"names":["createLibp2pNode","createLibp2p","options","node","start"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;AAgBA,SAASA,gBAAgB,QAAQ,aAAa;AA8J9C;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAO,eAAeC,YAAYA,CAAEC,OAAsB;EACxD,MAAMC,IAAI,GAAG,MAAMH,gBAAgB,CAACE,OAAO,CAAC;EAE5C,IAAIA,OAAO,CAACE,KAAK,KAAK,KAAK,EAAE;IAC3B,MAAMD,IAAI,CAACC,KAAK,EAAE;;EAGpB,OAAOD,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}