{"ast":null,"code":"'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nrequire(\"core-js/modules/es.array.unshift.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nfunction Denque(array, options) {\n  var options = options || {};\n  this._head = 0;\n  this._tail = 0;\n  this._capacity = options.capacity;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = this._head + i & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = this._head - 1 + len & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = head + 1 & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = tail + 1 & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = tail - 1 + len & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = this._head + i & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = i - 1 + len & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = this._head + 1 + len & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = i + 1 + len & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = this._tail - 1 + len & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[this._head + i + k & this._capacityMask];\n  }\n  i = this._head + i & this._capacityMask;\n  if (index + count === size) {\n    this._tail = this._tail - count + len & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = this._head + count + len & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = this._head + index + count + len & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = i - 1 + len & this._capacityMask]);\n    }\n    i = this._head - 1 + len & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = i - 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = i + count + len & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = i + 1 + len & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if (i !== (i | 0)) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[this._head + k & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = this._head + i + len & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[this._head + i + count + k & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = this._head + i + len & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = this._tail - leng + len & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n  this._list.length <<= 1;\n  this._capacityMask = this._capacityMask << 1 | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\nmodule.exports = Denque;","map":{"version":3,"names":["require","Denque","array","options","_head","_tail","_capacity","capacity","_capacityMask","_list","Array","isArray","_fromArray","prototype","peekAt","index","i","len","size","undefined","get","peek","peekFront","peekBack","Object","defineProperty","length","unshift","item","_growArray","pop","shift","head","_shrinkArray","push","tail","removeOne","k","remove","count","removed","del_count","toArray","clear","splice","arguments","temp","arg_len","arguments_index","leng","isEmpty","_copyArray","fullCopy","newArray","list","module","exports"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/denque@1.5.1/node_modules/denque/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array, options) {\n  var options = options || {};\n\n  this._head = 0;\n  this._tail = 0;\n  this._capacity = options.capacity;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peekAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._capacity && this.size() > this._capacity) this.pop();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n  if (this._capacity && this.size() > this._capacity) {\n    this.shift();\n  }\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (i < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n    if (index < 0) this._tail = i;\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length <<= 1;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AAFAA,OAAA;AAAAA,OAAA;AAGA,SAASC,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;EAC9B,IAAIA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAE3B,IAAI,CAACC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,SAAS,GAAGH,OAAO,CAACI,QAAQ;EACjC,IAAI,CAACC,aAAa,GAAG,GAAG;EACxB,IAAI,CAACC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC;EACzB,IAAIA,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;IACxB,IAAI,CAACU,UAAU,CAACV,KAAK,CAAC;EACxB;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAM,CAACY,SAAS,CAACC,MAAM,GAAG,SAASA,MAAMA,CAACC,KAAK,EAAE;EAC/C,IAAIC,CAAC,GAAGD,KAAK;EACb;EACA,IAAKC,CAAC,MAAMA,CAAC,GAAG,CAAC,CAAC,EAAG;IACnB,OAAO,KAAK,CAAC;EACf;EACA,IAAIC,GAAG,GAAG,IAAI,CAACC,IAAI,CAAC,CAAC;EACrB,IAAIF,CAAC,IAAIC,GAAG,IAAID,CAAC,GAAG,CAACC,GAAG,EAAE,OAAOE,SAAS;EAC1C,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIC,GAAG;EACnBD,CAAC,GAAI,IAAI,CAACZ,KAAK,GAAGY,CAAC,GAAI,IAAI,CAACR,aAAa;EACzC,OAAO,IAAI,CAACC,KAAK,CAACO,CAAC,CAAC;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAf,MAAM,CAACY,SAAS,CAACO,GAAG,GAAG,SAASA,GAAGA,CAACJ,CAAC,EAAE;EACrC,OAAO,IAAI,CAACF,MAAM,CAACE,CAAC,CAAC;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACAf,MAAM,CAACY,SAAS,CAACQ,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;EACtC,IAAI,IAAI,CAACjB,KAAK,KAAK,IAAI,CAACC,KAAK,EAAE,OAAOc,SAAS;EAC/C,OAAO,IAAI,CAACV,KAAK,CAAC,IAAI,CAACL,KAAK,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACAH,MAAM,CAACY,SAAS,CAACS,SAAS,GAAG,SAASA,SAASA,CAAA,EAAG;EAChD,OAAO,IAAI,CAACD,IAAI,CAAC,CAAC;AACpB,CAAC;;AAED;AACA;AACA;AACA;AACApB,MAAM,CAACY,SAAS,CAACU,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;EAC9C,OAAO,IAAI,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACAU,MAAM,CAACC,cAAc,CAACxB,MAAM,CAACY,SAAS,EAAE,QAAQ,EAAE;EAChDO,GAAG,EAAE,SAASM,MAAMA,CAAA,EAAG;IACrB,OAAO,IAAI,CAACR,IAAI,CAAC,CAAC;EACpB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACAjB,MAAM,CAACY,SAAS,CAACK,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;EACtC,IAAI,IAAI,CAACd,KAAK,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,CAAC;EACvC,IAAI,IAAI,CAACD,KAAK,GAAG,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI,CAACA,KAAK,GAAG,IAAI,CAACD,KAAK,CAAC,KACvD,OAAO,IAAI,CAACI,aAAa,GAAG,CAAC,IAAI,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACC,KAAK,CAAC;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACAJ,MAAM,CAACY,SAAS,CAACc,OAAO,GAAG,SAASA,OAAOA,CAACC,IAAI,EAAE;EAChD,IAAIA,IAAI,KAAKT,SAAS,EAAE,OAAO,IAAI,CAACD,IAAI,CAAC,CAAC;EAC1C,IAAID,GAAG,GAAG,IAAI,CAACR,KAAK,CAACiB,MAAM;EAC3B,IAAI,CAACtB,KAAK,GAAI,IAAI,CAACA,KAAK,GAAG,CAAC,GAAGa,GAAG,GAAI,IAAI,CAACT,aAAa;EACxD,IAAI,CAACC,KAAK,CAAC,IAAI,CAACL,KAAK,CAAC,GAAGwB,IAAI;EAC7B,IAAI,IAAI,CAACvB,KAAK,KAAK,IAAI,CAACD,KAAK,EAAE,IAAI,CAACyB,UAAU,CAAC,CAAC;EAChD,IAAI,IAAI,CAACvB,SAAS,IAAI,IAAI,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,SAAS,EAAE,IAAI,CAACwB,GAAG,CAAC,CAAC;EAC9D,IAAI,IAAI,CAAC1B,KAAK,GAAG,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI,CAACA,KAAK,GAAG,IAAI,CAACD,KAAK,CAAC,KACvD,OAAO,IAAI,CAACI,aAAa,GAAG,CAAC,IAAI,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACC,KAAK,CAAC;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAJ,MAAM,CAACY,SAAS,CAACkB,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;EACxC,IAAIC,IAAI,GAAG,IAAI,CAAC5B,KAAK;EACrB,IAAI4B,IAAI,KAAK,IAAI,CAAC3B,KAAK,EAAE,OAAOc,SAAS;EACzC,IAAIS,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACuB,IAAI,CAAC;EAC3B,IAAI,CAACvB,KAAK,CAACuB,IAAI,CAAC,GAAGb,SAAS;EAC5B,IAAI,CAACf,KAAK,GAAI4B,IAAI,GAAG,CAAC,GAAI,IAAI,CAACxB,aAAa;EAC5C,IAAIwB,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC3B,KAAK,GAAG,KAAK,IAAI,IAAI,CAACA,KAAK,IAAI,IAAI,CAACI,KAAK,CAACiB,MAAM,KAAK,CAAC,EAAE,IAAI,CAACO,YAAY,CAAC,CAAC;EAChG,OAAOL,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA3B,MAAM,CAACY,SAAS,CAACqB,IAAI,GAAG,SAASA,IAAIA,CAACN,IAAI,EAAE;EAC1C,IAAIA,IAAI,KAAKT,SAAS,EAAE,OAAO,IAAI,CAACD,IAAI,CAAC,CAAC;EAC1C,IAAIiB,IAAI,GAAG,IAAI,CAAC9B,KAAK;EACrB,IAAI,CAACI,KAAK,CAAC0B,IAAI,CAAC,GAAGP,IAAI;EACvB,IAAI,CAACvB,KAAK,GAAI8B,IAAI,GAAG,CAAC,GAAI,IAAI,CAAC3B,aAAa;EAC5C,IAAI,IAAI,CAACH,KAAK,KAAK,IAAI,CAACD,KAAK,EAAE;IAC7B,IAAI,CAACyB,UAAU,CAAC,CAAC;EACnB;EACA,IAAI,IAAI,CAACvB,SAAS,IAAI,IAAI,CAACY,IAAI,CAAC,CAAC,GAAG,IAAI,CAACZ,SAAS,EAAE;IAClD,IAAI,CAACyB,KAAK,CAAC,CAAC;EACd;EACA,IAAI,IAAI,CAAC3B,KAAK,GAAG,IAAI,CAACC,KAAK,EAAE,OAAO,IAAI,CAACA,KAAK,GAAG,IAAI,CAACD,KAAK,CAAC,KACvD,OAAO,IAAI,CAACI,aAAa,GAAG,CAAC,IAAI,IAAI,CAACJ,KAAK,GAAG,IAAI,CAACC,KAAK,CAAC;AAChE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAJ,MAAM,CAACY,SAAS,CAACiB,GAAG,GAAG,SAASA,GAAGA,CAAA,EAAG;EACpC,IAAIK,IAAI,GAAG,IAAI,CAAC9B,KAAK;EACrB,IAAI8B,IAAI,KAAK,IAAI,CAAC/B,KAAK,EAAE,OAAOe,SAAS;EACzC,IAAIF,GAAG,GAAG,IAAI,CAACR,KAAK,CAACiB,MAAM;EAC3B,IAAI,CAACrB,KAAK,GAAI8B,IAAI,GAAG,CAAC,GAAGlB,GAAG,GAAI,IAAI,CAACT,aAAa;EAClD,IAAIoB,IAAI,GAAG,IAAI,CAACnB,KAAK,CAAC,IAAI,CAACJ,KAAK,CAAC;EACjC,IAAI,CAACI,KAAK,CAAC,IAAI,CAACJ,KAAK,CAAC,GAAGc,SAAS;EAClC,IAAI,IAAI,CAACf,KAAK,GAAG,CAAC,IAAI+B,IAAI,GAAG,KAAK,IAAIA,IAAI,IAAIlB,GAAG,KAAK,CAAC,EAAE,IAAI,CAACgB,YAAY,CAAC,CAAC;EAC5E,OAAOL,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA3B,MAAM,CAACY,SAAS,CAACuB,SAAS,GAAG,SAASA,SAASA,CAACrB,KAAK,EAAE;EACrD,IAAIC,CAAC,GAAGD,KAAK;EACb;EACA,IAAKC,CAAC,MAAMA,CAAC,GAAG,CAAC,CAAC,EAAG;IACnB,OAAO,KAAK,CAAC;EACf;EACA,IAAI,IAAI,CAACZ,KAAK,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,KAAK,CAAC;EAC5C,IAAIa,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;EACtB,IAAID,GAAG,GAAG,IAAI,CAACR,KAAK,CAACiB,MAAM;EAC3B,IAAIV,CAAC,IAAIE,IAAI,IAAIF,CAAC,GAAG,CAACE,IAAI,EAAE,OAAO,KAAK,CAAC;EACzC,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,IAAI;EACpBF,CAAC,GAAI,IAAI,CAACZ,KAAK,GAAGY,CAAC,GAAI,IAAI,CAACR,aAAa;EACzC,IAAIoB,IAAI,GAAG,IAAI,CAACnB,KAAK,CAACO,CAAC,CAAC;EACxB,IAAIqB,CAAC;EACL,IAAItB,KAAK,GAAGG,IAAI,GAAG,CAAC,EAAE;IACpB,KAAKmB,CAAC,GAAGtB,KAAK,EAAEsB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAI,CAAC5B,KAAK,CAACO,CAAC,CAAC,GAAG,IAAI,CAACP,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC;IACpE;IACA,IAAI,CAACC,KAAK,CAACO,CAAC,CAAC,GAAG,KAAK,CAAC;IACtB,IAAI,CAACZ,KAAK,GAAI,IAAI,CAACA,KAAK,GAAG,CAAC,GAAGa,GAAG,GAAI,IAAI,CAACT,aAAa;EAC1D,CAAC,MAAM;IACL,KAAK6B,CAAC,GAAGnB,IAAI,GAAG,CAAC,GAAGH,KAAK,EAAEsB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACrC,IAAI,CAAC5B,KAAK,CAACO,CAAC,CAAC,GAAG,IAAI,CAACP,KAAK,CAACO,CAAC,GAAKA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC;IACrE;IACA,IAAI,CAACC,KAAK,CAACO,CAAC,CAAC,GAAG,KAAK,CAAC;IACtB,IAAI,CAACX,KAAK,GAAI,IAAI,CAACA,KAAK,GAAG,CAAC,GAAGY,GAAG,GAAI,IAAI,CAACT,aAAa;EAC1D;EACA,OAAOoB,IAAI;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA3B,MAAM,CAACY,SAAS,CAACyB,MAAM,GAAG,SAASA,MAAMA,CAACvB,KAAK,EAAEwB,KAAK,EAAE;EACtD,IAAIvB,CAAC,GAAGD,KAAK;EACb,IAAIyB,OAAO;EACX,IAAIC,SAAS,GAAGF,KAAK;EACrB;EACA,IAAKvB,CAAC,MAAMA,CAAC,GAAG,CAAC,CAAC,EAAG;IACnB,OAAO,KAAK,CAAC;EACf;EACA,IAAI,IAAI,CAACZ,KAAK,KAAK,IAAI,CAACC,KAAK,EAAE,OAAO,KAAK,CAAC;EAC5C,IAAIa,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;EACtB,IAAID,GAAG,GAAG,IAAI,CAACR,KAAK,CAACiB,MAAM;EAC3B,IAAIV,CAAC,IAAIE,IAAI,IAAIF,CAAC,GAAG,CAACE,IAAI,IAAIqB,KAAK,GAAG,CAAC,EAAE,OAAO,KAAK,CAAC;EACtD,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,IAAI;EACpB,IAAIqB,KAAK,KAAK,CAAC,IAAI,CAACA,KAAK,EAAE;IACzBC,OAAO,GAAG,IAAI9B,KAAK,CAAC,CAAC,CAAC;IACtB8B,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,CAACJ,SAAS,CAACpB,CAAC,CAAC;IAC9B,OAAOwB,OAAO;EAChB;EACA,IAAIxB,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAGuB,KAAK,IAAIrB,IAAI,EAAE;IAChCsB,OAAO,GAAG,IAAI,CAACE,OAAO,CAAC,CAAC;IACxB,IAAI,CAACC,KAAK,CAAC,CAAC;IACZ,OAAOH,OAAO;EAChB;EACA,IAAIxB,CAAC,GAAGuB,KAAK,GAAGrB,IAAI,EAAEqB,KAAK,GAAGrB,IAAI,GAAGF,CAAC;EACtC,IAAIqB,CAAC;EACLG,OAAO,GAAG,IAAI9B,KAAK,CAAC6B,KAAK,CAAC;EAC1B,KAAKF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGE,KAAK,EAAEF,CAAC,EAAE,EAAE;IAC1BG,OAAO,CAACH,CAAC,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAE,IAAI,CAACL,KAAK,GAAGY,CAAC,GAAGqB,CAAC,GAAI,IAAI,CAAC7B,aAAa,CAAC;EACpE;EACAQ,CAAC,GAAI,IAAI,CAACZ,KAAK,GAAGY,CAAC,GAAI,IAAI,CAACR,aAAa;EACzC,IAAIO,KAAK,GAAGwB,KAAK,KAAKrB,IAAI,EAAE;IAC1B,IAAI,CAACb,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGkC,KAAK,GAAGtB,GAAG,GAAI,IAAI,CAACT,aAAa;IAC5D,KAAK6B,CAAC,GAAGE,KAAK,EAAEF,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAI,CAAC5B,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC,GAAG,KAAK,CAAC;IAC7D;IACA,OAAOgC,OAAO;EAChB;EACA,IAAIzB,KAAK,KAAK,CAAC,EAAE;IACf,IAAI,CAACX,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGmC,KAAK,GAAGtB,GAAG,GAAI,IAAI,CAACT,aAAa;IAC5D,KAAK6B,CAAC,GAAGE,KAAK,GAAG,CAAC,EAAEF,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC9B,IAAI,CAAC5B,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC,GAAG,KAAK,CAAC;IAC7D;IACA,OAAOgC,OAAO;EAChB;EACA,IAAIxB,CAAC,GAAGE,IAAI,GAAG,CAAC,EAAE;IAChB,IAAI,CAACd,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGW,KAAK,GAAGwB,KAAK,GAAGtB,GAAG,GAAI,IAAI,CAACT,aAAa;IACpE,KAAK6B,CAAC,GAAGtB,KAAK,EAAEsB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,IAAI,CAACV,OAAO,CAAC,IAAI,CAAClB,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC,CAAC;IAClE;IACAQ,CAAC,GAAI,IAAI,CAACZ,KAAK,GAAG,CAAC,GAAGa,GAAG,GAAI,IAAI,CAACT,aAAa;IAC/C,OAAOiC,SAAS,GAAG,CAAC,EAAE;MACpB,IAAI,CAAChC,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC,GAAG,KAAK,CAAC;MAC3DiC,SAAS,EAAE;IACb;IACA,IAAI1B,KAAK,GAAG,CAAC,EAAE,IAAI,CAACV,KAAK,GAAGW,CAAC;EAC/B,CAAC,MAAM;IACL,IAAI,CAACX,KAAK,GAAGW,CAAC;IACdA,CAAC,GAAIA,CAAC,GAAGuB,KAAK,GAAGtB,GAAG,GAAI,IAAI,CAACT,aAAa;IAC1C,KAAK6B,CAAC,GAAGnB,IAAI,IAAIqB,KAAK,GAAGxB,KAAK,CAAC,EAAEsB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC3C,IAAI,CAACH,IAAI,CAAC,IAAI,CAACzB,KAAK,CAACO,CAAC,EAAE,CAAC,CAAC;IAC5B;IACAA,CAAC,GAAG,IAAI,CAACX,KAAK;IACd,OAAOoC,SAAS,GAAG,CAAC,EAAE;MACpB,IAAI,CAAChC,KAAK,CAACO,CAAC,GAAIA,CAAC,GAAG,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa,CAAC,GAAG,KAAK,CAAC;MAC3DiC,SAAS,EAAE;IACb;EACF;EACA,IAAI,IAAI,CAACrC,KAAK,GAAG,CAAC,IAAI,IAAI,CAACC,KAAK,GAAG,KAAK,IAAI,IAAI,CAACA,KAAK,IAAIY,GAAG,KAAK,CAAC,EAAE,IAAI,CAACgB,YAAY,CAAC,CAAC;EACxF,OAAOO,OAAO;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAvC,MAAM,CAACY,SAAS,CAAC+B,MAAM,GAAG,SAASA,MAAMA,CAAC7B,KAAK,EAAEwB,KAAK,EAAE;EACtD,IAAIvB,CAAC,GAAGD,KAAK;EACb;EACA,IAAKC,CAAC,MAAMA,CAAC,GAAG,CAAC,CAAC,EAAG;IACnB,OAAO,KAAK,CAAC;EACf;EACA,IAAIE,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,CAAC;EACtB,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIE,IAAI;EACpB,IAAIF,CAAC,GAAGE,IAAI,EAAE,OAAO,KAAK,CAAC;EAC3B,IAAI2B,SAAS,CAACnB,MAAM,GAAG,CAAC,EAAE;IACxB,IAAIW,CAAC;IACL,IAAIS,IAAI;IACR,IAAIN,OAAO;IACX,IAAIO,OAAO,GAAGF,SAAS,CAACnB,MAAM;IAC9B,IAAIT,GAAG,GAAG,IAAI,CAACR,KAAK,CAACiB,MAAM;IAC3B,IAAIsB,eAAe,GAAG,CAAC;IACvB,IAAI,CAAC9B,IAAI,IAAIF,CAAC,GAAGE,IAAI,GAAG,CAAC,EAAE;MACzB4B,IAAI,GAAG,IAAIpC,KAAK,CAACM,CAAC,CAAC;MACnB,KAAKqB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGrB,CAAC,EAAEqB,CAAC,EAAE,EAAE;QACtBS,IAAI,CAACT,CAAC,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAE,IAAI,CAACL,KAAK,GAAGiC,CAAC,GAAI,IAAI,CAAC7B,aAAa,CAAC;MAC7D;MACA,IAAI+B,KAAK,KAAK,CAAC,EAAE;QACfC,OAAO,GAAG,EAAE;QACZ,IAAIxB,CAAC,GAAG,CAAC,EAAE;UACT,IAAI,CAACZ,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGY,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa;QAC1D;MACF,CAAC,MAAM;QACLgC,OAAO,GAAG,IAAI,CAACF,MAAM,CAACtB,CAAC,EAAEuB,KAAK,CAAC;QAC/B,IAAI,CAACnC,KAAK,GAAI,IAAI,CAACA,KAAK,GAAGY,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa;MAC1D;MACA,OAAOuC,OAAO,GAAGC,eAAe,EAAE;QAChC,IAAI,CAACrB,OAAO,CAACkB,SAAS,CAAC,EAAEE,OAAO,CAAC,CAAC;MACpC;MACA,KAAKV,CAAC,GAAGrB,CAAC,EAAEqB,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QACtB,IAAI,CAACV,OAAO,CAACmB,IAAI,CAACT,CAAC,GAAG,CAAC,CAAC,CAAC;MAC3B;IACF,CAAC,MAAM;MACLS,IAAI,GAAG,IAAIpC,KAAK,CAACQ,IAAI,IAAIF,CAAC,GAAGuB,KAAK,CAAC,CAAC;MACpC,IAAIU,IAAI,GAAGH,IAAI,CAACpB,MAAM;MACtB,KAAKW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,IAAI,EAAEZ,CAAC,EAAE,EAAE;QACzBS,IAAI,CAACT,CAAC,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAAE,IAAI,CAACL,KAAK,GAAGY,CAAC,GAAGuB,KAAK,GAAGF,CAAC,GAAI,IAAI,CAAC7B,aAAa,CAAC;MACzE;MACA,IAAI+B,KAAK,KAAK,CAAC,EAAE;QACfC,OAAO,GAAG,EAAE;QACZ,IAAIxB,CAAC,IAAIE,IAAI,EAAE;UACb,IAAI,CAACb,KAAK,GAAI,IAAI,CAACD,KAAK,GAAGY,CAAC,GAAGC,GAAG,GAAI,IAAI,CAACT,aAAa;QAC1D;MACF,CAAC,MAAM;QACLgC,OAAO,GAAG,IAAI,CAACF,MAAM,CAACtB,CAAC,EAAEuB,KAAK,CAAC;QAC/B,IAAI,CAAClC,KAAK,GAAI,IAAI,CAACA,KAAK,GAAG4C,IAAI,GAAGhC,GAAG,GAAI,IAAI,CAACT,aAAa;MAC7D;MACA,OAAOwC,eAAe,GAAGD,OAAO,EAAE;QAChC,IAAI,CAACb,IAAI,CAACW,SAAS,CAACG,eAAe,EAAE,CAAC,CAAC;MACzC;MACA,KAAKX,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGY,IAAI,EAAEZ,CAAC,EAAE,EAAE;QACzB,IAAI,CAACH,IAAI,CAACY,IAAI,CAACT,CAAC,CAAC,CAAC;MACpB;IACF;IACA,OAAOG,OAAO;EAChB,CAAC,MAAM;IACL,OAAO,IAAI,CAACF,MAAM,CAACtB,CAAC,EAAEuB,KAAK,CAAC;EAC9B;AACF,CAAC;;AAED;AACA;AACA;AACAtC,MAAM,CAACY,SAAS,CAAC8B,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;EACxC,IAAI,CAACvC,KAAK,GAAG,CAAC;EACd,IAAI,CAACC,KAAK,GAAG,CAAC;AAChB,CAAC;;AAED;AACA;AACA;AACA;AACAJ,MAAM,CAACY,SAAS,CAACqC,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;EAC5C,OAAO,IAAI,CAAC9C,KAAK,KAAK,IAAI,CAACC,KAAK;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACAJ,MAAM,CAACY,SAAS,CAAC6B,OAAO,GAAG,SAASA,OAAOA,CAAA,EAAG;EAC5C,OAAO,IAAI,CAACS,UAAU,CAAC,KAAK,CAAC;AAC/B,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACAlD,MAAM,CAACY,SAAS,CAACD,UAAU,GAAG,SAASA,UAAUA,CAACV,KAAK,EAAE;EACvD,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,KAAK,CAACwB,MAAM,EAAEV,CAAC,EAAE,EAAE,IAAI,CAACkB,IAAI,CAAChC,KAAK,CAACc,CAAC,CAAC,CAAC;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAf,MAAM,CAACY,SAAS,CAACsC,UAAU,GAAG,SAASA,UAAUA,CAACC,QAAQ,EAAE;EAC1D,IAAIC,QAAQ,GAAG,EAAE;EACjB,IAAIC,IAAI,GAAG,IAAI,CAAC7C,KAAK;EACrB,IAAIQ,GAAG,GAAGqC,IAAI,CAAC5B,MAAM;EACrB,IAAIV,CAAC;EACL,IAAIoC,QAAQ,IAAI,IAAI,CAAChD,KAAK,GAAG,IAAI,CAACC,KAAK,EAAE;IACvC,KAAKW,CAAC,GAAG,IAAI,CAACZ,KAAK,EAAEY,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAEqC,QAAQ,CAACnB,IAAI,CAACoB,IAAI,CAACtC,CAAC,CAAC,CAAC;IACzD,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACX,KAAK,EAAEW,CAAC,EAAE,EAAEqC,QAAQ,CAACnB,IAAI,CAACoB,IAAI,CAACtC,CAAC,CAAC,CAAC;EACzD,CAAC,MAAM;IACL,KAAKA,CAAC,GAAG,IAAI,CAACZ,KAAK,EAAEY,CAAC,GAAG,IAAI,CAACX,KAAK,EAAEW,CAAC,EAAE,EAAEqC,QAAQ,CAACnB,IAAI,CAACoB,IAAI,CAACtC,CAAC,CAAC,CAAC;EAClE;EACA,OAAOqC,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACApD,MAAM,CAACY,SAAS,CAACgB,UAAU,GAAG,SAASA,UAAUA,CAAA,EAAG;EAClD,IAAI,IAAI,CAACzB,KAAK,EAAE;IACd;IACA,IAAI,CAACK,KAAK,GAAG,IAAI,CAAC0C,UAAU,CAAC,IAAI,CAAC;IAClC,IAAI,CAAC/C,KAAK,GAAG,CAAC;EAChB;;EAEA;EACA,IAAI,CAACC,KAAK,GAAG,IAAI,CAACI,KAAK,CAACiB,MAAM;EAE9B,IAAI,CAACjB,KAAK,CAACiB,MAAM,KAAK,CAAC;EACvB,IAAI,CAAClB,aAAa,GAAI,IAAI,CAACA,aAAa,IAAI,CAAC,GAAI,CAAC;AACpD,CAAC;;AAED;AACA;AACA;AACA;AACAP,MAAM,CAACY,SAAS,CAACoB,YAAY,GAAG,SAASA,YAAYA,CAAA,EAAG;EACtD,IAAI,CAACxB,KAAK,CAACiB,MAAM,MAAM,CAAC;EACxB,IAAI,CAAClB,aAAa,MAAM,CAAC;AAC3B,CAAC;AAGD+C,MAAM,CAACC,OAAO,GAAGvD,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}