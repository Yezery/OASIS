{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { SendingQuery, PeerResponse, FinalPeer, QueryError, Provider, Value, AddingPeer, DialingPeer } from './response-types.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: peerIdFromString(ID),\n        multiaddrs: Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      })),\n      providers: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: peerIdFromString(ID),\n        multiaddrs: Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    };\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interface-peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    };\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      };\n    }\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({\n        ID,\n        Addrs\n      }) => ({\n        id: peerIdFromString(ID),\n        multiaddrs: Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }))\n    };\n  }\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({\n      ID\n    }) => peerIdFromString(ID));\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};","map":{"version":3,"names":["fromString","uint8ArrayFromString","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","multiaddr","peerIdFromString","mapEvent","event","Type","name","type","from","ID","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","protocols","providers","peer","length","error","Error","Extra","value","peers"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/dht/map-event.js"],"sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {{Type: number, ID: string, Extra: string, Responses: {ID: string, Addrs: string[]}[]}} event\n * @returns {import('ipfs-core-types/src/dht').QueryEvent}\n */\nexport const mapEvent = (event) => {\n  if (event.Type === SendingQuery) {\n    return {\n      name: 'SENDING_QUERY',\n      type: event.Type\n    }\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: peerIdFromString(event.ID),\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      // TODO: how to infer this from the go-ipfs response\n      messageType: 0,\n      // TODO: how to infer this from the go-ipfs response\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] })),\n      providers: (event.Responses || []).map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n      // TODO: how to infer this from the go-ipfs response\n      // record: ???\n    }\n  }\n\n  if (event.Type === FinalPeer) {\n    // dht.query ends with a FinalPeer event with no Responses\n    /** @type {import('@libp2p/interface-peer-info').PeerInfo} */\n    let peer = {\n      // @ts-expect-error go-ipfs does not return this\n      id: event.ID ?? peerIdFromString(event.ID),\n      /** @type {Multiaddr[]} */\n      multiaddrs: [],\n      protocols: []\n    }\n\n    if (event.Responses && event.Responses.length) {\n      // dht.findPeer has the result in the Responses field\n      peer = {\n        id: peerIdFromString(event.Responses[0].ID),\n        multiaddrs: event.Responses[0].Addrs.map(addr => multiaddr(addr)),\n        protocols: []\n      }\n    }\n\n    return {\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    }\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    }\n  }\n\n  if (event.Type === Provider) {\n    return {\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ ID, Addrs }) => ({ id: peerIdFromString(ID), multiaddrs: Addrs.map(addr => multiaddr(addr)), protocols: [] }))\n    }\n  }\n\n  if (event.Type === Value) {\n    return {\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    }\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ ID }) => peerIdFromString(ID))\n\n    if (!peers.length) {\n      throw new Error('No peer found')\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    }\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: peerIdFromString(event.ID)\n    }\n  }\n\n  throw new Error('Unknown DHT event type')\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}