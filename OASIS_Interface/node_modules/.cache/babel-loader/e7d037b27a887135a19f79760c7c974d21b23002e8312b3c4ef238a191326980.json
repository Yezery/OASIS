{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer') || {};\nconst {\n  Encoding\n} = require('./encoding');\nconst textEndec = require('./text-endec');\n\n/**\n * @template TIn, TOut\n * @extends {Encoding<TIn,Buffer,TOut>}\n */\nclass BufferFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Buffer, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({\n      ...options,\n      format: 'buffer'\n    });\n  }\n\n  /** @override */\n  createViewTranscoder() {\n    return new ViewFormat({\n      encode: this.encode,\n      // Buffer is a view (UInt8Array)\n      decode: data => this.decode(Buffer.from(data.buffer, data.byteOffset, data.byteLength)),\n      name: `${this.name}+view`\n    });\n  }\n\n  /** @override */\n  createBufferTranscoder() {\n    return this;\n  }\n}\n\n/**\n * @extends {Encoding<TIn,Uint8Array,TOut>}\n * @template TIn, TOut\n */\nclass ViewFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Uint8Array, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({\n      ...options,\n      format: 'view'\n    });\n  }\n\n  /** @override */\n  createBufferTranscoder() {\n    return new BufferFormat({\n      encode: data => {\n        const view = this.encode(data);\n        return Buffer.from(view.buffer, view.byteOffset, view.byteLength);\n      },\n      decode: this.decode,\n      // Buffer is a view (UInt8Array)\n      name: `${this.name}+buffer`\n    });\n  }\n\n  /** @override */\n  createViewTranscoder() {\n    return this;\n  }\n}\n\n/**\n * @extends {Encoding<TIn,string,TOut>}\n * @template TIn, TOut\n */\nclass UTF8Format extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, string, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({\n      ...options,\n      format: 'utf8'\n    });\n  }\n\n  /** @override */\n  createBufferTranscoder() {\n    return new BufferFormat({\n      encode: data => Buffer.from(this.encode(data), 'utf8'),\n      decode: data => this.decode(data.toString('utf8')),\n      name: `${this.name}+buffer`\n    });\n  }\n\n  /** @override */\n  createViewTranscoder() {\n    const {\n      textEncoder,\n      textDecoder\n    } = textEndec();\n    return new ViewFormat({\n      encode: data => textEncoder.encode(this.encode(data)),\n      decode: data => this.decode(textDecoder.decode(data)),\n      name: `${this.name}+view`\n    });\n  }\n\n  /** @override */\n  createUTF8Transcoder() {\n    return this;\n  }\n}\nexports.BufferFormat = BufferFormat;\nexports.ViewFormat = ViewFormat;\nexports.UTF8Format = UTF8Format;\n\n/**\n * @typedef {import('./encoding').IEncoding<TIn,TFormat,TOut>} IEncoding\n * @template TIn, TFormat, TOut\n */","map":{"version":3,"names":["Buffer","require","Encoding","textEndec","BufferFormat","constructor","options","format","createViewTranscoder","ViewFormat","encode","decode","data","from","buffer","byteOffset","byteLength","name","createBufferTranscoder","view","UTF8Format","toString","textEncoder","textDecoder","createUTF8Transcoder","exports"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/level-transcoder@1.0.1/node_modules/level-transcoder/lib/formats.js"],"sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer') || {}\nconst { Encoding } = require('./encoding')\nconst textEndec = require('./text-endec')\n\n/**\n * @template TIn, TOut\n * @extends {Encoding<TIn,Buffer,TOut>}\n */\nclass BufferFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Buffer, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'buffer' })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    return new ViewFormat({\n      encode: this.encode, // Buffer is a view (UInt8Array)\n      decode: (data) => this.decode(\n        Buffer.from(data.buffer, data.byteOffset, data.byteLength)\n      ),\n      name: `${this.name}+view`\n    })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return this\n  }\n}\n\n/**\n * @extends {Encoding<TIn,Uint8Array,TOut>}\n * @template TIn, TOut\n */\nclass ViewFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Uint8Array, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'view' })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return new BufferFormat({\n      encode: (data) => {\n        const view = this.encode(data)\n        return Buffer.from(view.buffer, view.byteOffset, view.byteLength)\n      },\n      decode: this.decode, // Buffer is a view (UInt8Array)\n      name: `${this.name}+buffer`\n    })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    return this\n  }\n}\n\n/**\n * @extends {Encoding<TIn,string,TOut>}\n * @template TIn, TOut\n */\nclass UTF8Format extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, string, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'utf8' })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return new BufferFormat({\n      encode: (data) => Buffer.from(this.encode(data), 'utf8'),\n      decode: (data) => this.decode(data.toString('utf8')),\n      name: `${this.name}+buffer`\n    })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    const { textEncoder, textDecoder } = textEndec()\n\n    return new ViewFormat({\n      encode: (data) => textEncoder.encode(this.encode(data)),\n      decode: (data) => this.decode(textDecoder.decode(data)),\n      name: `${this.name}+view`\n    })\n  }\n\n  /** @override */\n  createUTF8Transcoder () {\n    return this\n  }\n}\n\nexports.BufferFormat = BufferFormat\nexports.ViewFormat = ViewFormat\nexports.UTF8Format = UTF8Format\n\n/**\n * @typedef {import('./encoding').IEncoding<TIn,TFormat,TOut>} IEncoding\n * @template TIn, TFormat, TOut\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}