{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect({\n  network\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  async function connect(multiaddrOrPeerId, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    await libp2p.dial(multiaddrOrPeerId, options);\n  }\n  return withTimeoutOption(connect);\n}","map":{"version":3,"names":["withTimeoutOption","createConnect","network","connect","multiaddrOrPeerId","options","libp2p","use","dial"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/swarm/connect.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createConnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"connect\"]}\n   */\n  async function connect (multiaddrOrPeerId, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.dial(multiaddrOrPeerId, options)\n  }\n\n  return withTimeoutOption(connect)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAE;EAAEC;AAAQ,CAAC,EAAE;EAC1C;AACF;AACA;EACE,eAAeC,OAAOA,CAAEC,iBAAiB,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACvD,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAMJ,OAAO,CAACK,GAAG,CAACF,OAAO,CAAC;IAC7C,MAAMC,MAAM,CAACE,IAAI,CAACJ,iBAAiB,EAAEC,OAAO,CAAC;EAC/C;EAEA,OAAOL,iBAAiB,CAACG,OAAO,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}