{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nvar createThunk = require(\"./lib/thunk.js\");\nfunction Procedure() {\n  this.argTypes = [];\n  this.shimArgs = [];\n  this.arrayArgs = [];\n  this.arrayBlockIndices = [];\n  this.scalarArgs = [];\n  this.offsetArgs = [];\n  this.offsetArgIndex = [];\n  this.indexArgs = [];\n  this.shapeArgs = [];\n  this.funcName = \"\";\n  this.pre = null;\n  this.body = null;\n  this.post = null;\n  this.debug = false;\n}\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure();\n\n  //Parse blocks\n  proc.pre = user_args.pre;\n  proc.body = user_args.body;\n  proc.post = user_args.post;\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0);\n  proc.argTypes = proc_args;\n  for (var i = 0; i < proc_args.length; ++i) {\n    var arg_type = proc_args[i];\n    if (arg_type === \"array\" || typeof arg_type === \"object\" && arg_type.blockIndices) {\n      proc.argTypes[i] = \"array\";\n      proc.arrayArgs.push(i);\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0);\n      proc.shimArgs.push(\"array\" + i);\n      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array args\");\n      }\n      if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array args\");\n      }\n    } else if (arg_type === \"scalar\") {\n      proc.scalarArgs.push(i);\n      proc.shimArgs.push(\"scalar\" + i);\n    } else if (arg_type === \"index\") {\n      proc.indexArgs.push(i);\n      if (i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\");\n      }\n      if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\");\n      }\n      if (i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\");\n      }\n    } else if (arg_type === \"shape\") {\n      proc.shapeArgs.push(i);\n      if (i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\");\n      }\n      if (i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\");\n      }\n      if (i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\");\n      }\n    } else if (typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\";\n      proc.offsetArgs.push({\n        array: arg_type.array,\n        offset: arg_type.offset\n      });\n      proc.offsetArgIndex.push(i);\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i]);\n    }\n  }\n\n  //Make sure at least one array argument was specified\n  if (proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\");\n  }\n\n  //Make sure arguments are correct\n  if (proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\");\n  }\n  if (proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\");\n  }\n  if (proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\");\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug;\n\n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\";\n\n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64;\n  return createThunk(proc);\n}\nmodule.exports = compileCwise;","map":{"version":3,"names":["require","createThunk","Procedure","argTypes","shimArgs","arrayArgs","arrayBlockIndices","scalarArgs","offsetArgs","offsetArgIndex","indexArgs","shapeArgs","funcName","pre","body","post","debug","compileCwise","user_args","proc","proc_args","args","slice","i","length","arg_type","blockIndices","push","count","Error","lvalue","offset","array","printCode","blockSize","module","exports"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/cwise-compiler@1.1.3/node_modules/cwise-compiler/compiler.js"],"sourcesContent":["\"use strict\"\n\nvar createThunk = require(\"./lib/thunk.js\")\n\nfunction Procedure() {\n  this.argTypes = []\n  this.shimArgs = []\n  this.arrayArgs = []\n  this.arrayBlockIndices = []\n  this.scalarArgs = []\n  this.offsetArgs = []\n  this.offsetArgIndex = []\n  this.indexArgs = []\n  this.shapeArgs = []\n  this.funcName = \"\"\n  this.pre = null\n  this.body = null\n  this.post = null\n  this.debug = false\n}\n\nfunction compileCwise(user_args) {\n  //Create procedure\n  var proc = new Procedure()\n  \n  //Parse blocks\n  proc.pre    = user_args.pre\n  proc.body   = user_args.body\n  proc.post   = user_args.post\n\n  //Parse arguments\n  var proc_args = user_args.args.slice(0)\n  proc.argTypes = proc_args\n  for(var i=0; i<proc_args.length; ++i) {\n    var arg_type = proc_args[i]\n    if(arg_type === \"array\" || (typeof arg_type === \"object\" && arg_type.blockIndices)) {\n      proc.argTypes[i] = \"array\"\n      proc.arrayArgs.push(i)\n      proc.arrayBlockIndices.push(arg_type.blockIndices ? arg_type.blockIndices : 0)\n      proc.shimArgs.push(\"array\" + i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count>0) {\n        throw new Error(\"cwise: pre() block may not reference array args\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count>0) {\n        throw new Error(\"cwise: post() block may not reference array args\")\n      }\n    } else if(arg_type === \"scalar\") {\n      proc.scalarArgs.push(i)\n      proc.shimArgs.push(\"scalar\" + i)\n    } else if(arg_type === \"index\") {\n      proc.indexArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].count > 0) {\n        throw new Error(\"cwise: pre() block may not reference array index\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array index\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].count > 0) {\n        throw new Error(\"cwise: post() block may not reference array index\")\n      }\n    } else if(arg_type === \"shape\") {\n      proc.shapeArgs.push(i)\n      if(i < proc.pre.args.length && proc.pre.args[i].lvalue) {\n        throw new Error(\"cwise: pre() block may not write to array shape\")\n      }\n      if(i < proc.body.args.length && proc.body.args[i].lvalue) {\n        throw new Error(\"cwise: body() block may not write to array shape\")\n      }\n      if(i < proc.post.args.length && proc.post.args[i].lvalue) {\n        throw new Error(\"cwise: post() block may not write to array shape\")\n      }\n    } else if(typeof arg_type === \"object\" && arg_type.offset) {\n      proc.argTypes[i] = \"offset\"\n      proc.offsetArgs.push({ array: arg_type.array, offset:arg_type.offset })\n      proc.offsetArgIndex.push(i)\n    } else {\n      throw new Error(\"cwise: Unknown argument type \" + proc_args[i])\n    }\n  }\n  \n  //Make sure at least one array argument was specified\n  if(proc.arrayArgs.length <= 0) {\n    throw new Error(\"cwise: No array arguments specified\")\n  }\n  \n  //Make sure arguments are correct\n  if(proc.pre.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in pre() block\")\n  }\n  if(proc.body.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in body() block\")\n  }\n  if(proc.post.args.length > proc_args.length) {\n    throw new Error(\"cwise: Too many arguments in post() block\")\n  }\n\n  //Check debug flag\n  proc.debug = !!user_args.printCode || !!user_args.debug\n  \n  //Retrieve name\n  proc.funcName = user_args.funcName || \"cwise\"\n  \n  //Read in block size\n  proc.blockSize = user_args.blockSize || 64\n\n  return createThunk(proc)\n}\n\nmodule.exports = compileCwise\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}