{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { createGet } from './get.js';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat({\n  repo,\n  preload\n}) {\n  const get = createGet({\n    repo,\n    preload\n  });\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat(cid, options = {}) {\n    const node = await get(cid, options);\n    const serialized = dagPB.encode(node);\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n  return withTimeoutOption(stat);\n}","map":{"version":3,"names":["dagPB","withTimeoutOption","createGet","createStat","repo","preload","get","stat","cid","options","node","serialized","encode","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/object/stat.js"],"sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPB.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,cAAc;AACrC,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,SAAS,QAAQ,UAAU;;AAEpC;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC7C,MAAMC,GAAG,GAAGJ,SAAS,CAAC;IAAEE,IAAI;IAAEC;EAAQ,CAAC,CAAC;;EAExC;AACF;AACA;EACE,eAAeE,IAAIA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACtC,MAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACE,GAAG,EAAEC,OAAO,CAAC;IACpC,MAAME,UAAU,GAAGX,KAAK,CAACY,MAAM,CAACF,IAAI,CAAC;IACrC,MAAMG,SAAS,GAAGF,UAAU,CAACG,MAAM;IACnC,MAAMC,UAAU,GAAGL,IAAI,CAACM,KAAK,CAACC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,IAAIC,CAAC,CAACC,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;IAErE,OAAO;MACLC,IAAI,EAAEb,GAAG;MACTc,QAAQ,EAAEZ,IAAI,CAACM,KAAK,CAACF,MAAM;MAC3BS,SAAS,EAAEV,SAAS;MACpBW,SAAS,EAAEX,SAAS,GAAG,CAACH,IAAI,CAACe,IAAI,IAAI,EAAE,EAAEX,MAAM;MAC/CY,QAAQ,EAAE,CAAChB,IAAI,CAACe,IAAI,IAAI,EAAE,EAAEX,MAAM;MAClCa,cAAc,EAAEd,SAAS,GAAGE;IAC9B,CAAC;EACH;EAEA,OAAOd,iBAAiB,CAACM,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}