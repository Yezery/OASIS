{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nimport debug from 'debug';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { getWithFallback, hasWithFallback } from './utils/level.js';\nconst log = debug('ipfs:repo:version');\nconst versionKey = new Key('version');\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version(store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists() {\n      // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store);\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get() {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n      return parseInt(uint8ArrayToString(buf), 10);\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check(expected) {\n      const version = await this.get();\n      log('comparing version: %s and %s', version, expected);\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n      return version === expected || compatibleVersion;\n    }\n  };\n}","map":{"version":3,"names":["Key","debug","toString","uint8ArrayToString","fromString","uint8ArrayFromString","getWithFallback","hasWithFallback","log","versionKey","version","store","exists","has","bind","get","buf","parseInt","set","put","String","check","expected","compatibleVersion"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/version.js"],"sourcesContent":["\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"],"mappings":"AACA,SAASA,GAAG,QAAQ,yBAAyB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,IAAIC,kBAAkB,QAAQ,uBAAuB;AACtE,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,eAAe,EAAEC,eAAe,QAAQ,kBAAkB;AAEnE,MAAMC,GAAG,GAAGP,KAAK,CAAC,mBAAmB,CAAC;AACtC,MAAMQ,UAAU,GAAG,IAAIT,GAAG,CAAC,SAAS,CAAC;;AAErC;AACA;AACA;AACA;AACA,OAAO,SAASU,OAAOA,CAAEC,KAAK,EAAE;EAC9B,OAAO;IACL;AACJ;AACA;AACA;IACI,MAAMC,MAAMA,CAAA,EAAI;MAAE;MAChB;MACA;MACA;MACA,OAAOL,eAAe,CAACE,UAAU,EAAEE,KAAK,CAACE,GAAG,CAACC,IAAI,CAACH,KAAK,CAAC,EAAEA,KAAK,CAAC;IAClE,CAAC;IACD;AACJ;AACA;AACA;AACA;IACI,MAAMI,GAAGA,CAAA,EAAI;MACX;MACA;MACA;MACA,MAAMC,GAAG,GAAG,MAAMV,eAAe,CAACG,UAAU,EAAEE,KAAK,CAACI,GAAG,CAACD,IAAI,CAACH,KAAK,CAAC,EAAEA,KAAK,CAACE,GAAG,CAACC,IAAI,CAACH,KAAK,CAAC,EAAEA,KAAK,CAAC;MAClG,OAAOM,QAAQ,CAACd,kBAAkB,CAACa,GAAG,CAAC,EAAE,EAAE,CAAC;IAC9C,CAAC;IACD;AACJ;AACA;AACA;AACA;AACA;IACIE,GAAGA,CAAER,OAAO,EAAE;MACZ,OAAOC,KAAK,CAACQ,GAAG,CAACV,UAAU,EAAEJ,oBAAoB,CAACe,MAAM,CAACV,OAAO,CAAC,CAAC,CAAC;IACrE,CAAC;IACD;AACJ;AACA;AACA;AACA;IACI,MAAMW,KAAKA,CAAEC,QAAQ,EAAE;MACrB,MAAMZ,OAAO,GAAG,MAAM,IAAI,CAACK,GAAG,CAAC,CAAC;MAChCP,GAAG,CAAC,8BAA8B,EAAEE,OAAO,EAAEY,QAAQ,CAAC;MACtD;MACA;MACA,MAAMC,iBAAiB,GAAIb,OAAO,KAAK,CAAC,IAAIY,QAAQ,KAAK,CAAC,IAAMA,QAAQ,KAAK,CAAC,IAAIZ,OAAO,KAAK,CAAE;MAEhG,OAAOA,OAAO,KAAKY,QAAQ,IAAIC,iBAAiB;IAClD;EACF,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}