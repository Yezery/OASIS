{"ast":null,"code":"import { savetoIPFS } from \"@/api/axios/contract.js\";\nexport default {\n  data() {\n    return {\n      imageUrl: \"\",\n      fileList: [],\n      dialogImageUrl: \"\",\n      dialogVisible: false,\n      disabled: false,\n      inputName: \"\",\n      options: [{\n        value: \"ART\",\n        label: \"Art(艺术)\"\n      }, {\n        value: \"GAME\",\n        label: \"Game(游戏)\"\n      }, {\n        value: \"FASHION\",\n        label: \"Fashion(时尚)\"\n      }, {\n        value: \"MUSIC\",\n        label: \"Music(音乐)\"\n      }, {\n        value: \"OTHER\",\n        label: \"Other(其他)\"\n      }],\n      inputType: \"\",\n      active: 1\n    };\n  },\n  mounted() {},\n  methods: {\n    async DeployMintNFTContract() {\n      const MintNFTContractABI = JSON.parse(``);\n      const contract = new web3.eth.Contract(MintNFTContractABI);\n      const bytecode = \"\";\n      var _this = this;\n      let NewContractAddress = await contract.deploy({\n        data: bytecode,\n        arguments: [this.inputName, this.inputType]\n      }).send({\n        from: this.$store.state.currentAddress\n      });\n      let NewContract = await new _this.$store.state.Web3.eth.Contract(MintNFTContractABI, NewContractAddress._address);\n      console.log(NewContract);\n      console.log(NewContract._address);\n      return NewContract;\n    },\n    async CreateToken(contract, tokenURI) {\n      await contract.methods.createToken(tokenURI).send({\n        from: this.$store.state.currentAddress\n      });\n\n      //   await contract.methods.tokenURI(1).call(async (err, result) => {\n      // \tconsole.log(\"im tokenurl\"+ result);\n      //     return result;\n      //   });\n    },\n\n    async savetoIPFS() {\n      console.log(this.$refs.pictureUpload.uploadFiles);\n      const httpGateway = \"http://127.0.0.1:8080\";\n      try {\n        if (this.$refs.pictureUpload.uploadFiles.length != 0) {\n          //ipfs的add方法是将东西添加到ipfs网络上\n          let results = await this.$store.state.ipfs.add(this.$refs.pictureUpload.uploadFiles[0].raw);\n          console.log(this.$refs.pictureUpload.uploadFiles[0].raw);\n          let hash1 = results.path;\n          console.log(hash1);\n          var img_href = `${httpGateway}/ipfs/${hash1}`;\n          console.log(img_href);\n          return img_href;\n        }\n      } catch (err) {\n        console.error(err);\n      }\n    },\n    async NFTtoChain() {\n      let MintNFTContract = await this.DeployMintNFTContract();\n      console.log(`okMINT:${MintNFTContract}`);\n      let GETIPFSURI = await this.savetoIPFS();\n      console.log(`okURI:${GETIPFSURI}`);\n      if (GETIPFSURI != null) {\n        await this.CreateToken(MintNFTContract, GETIPFSURI);\n        await this.$notify({\n          title: \"创造\",\n          message: `Create Success !`,\n          position: \"top-left\"\n        });\n        var that = this;\n      }\n      return;\n    },\n    handleRemove(file) {\n      let uploadFiles = this.$refs.pictureUpload.uploadFiles;\n      for (var i = 0; i < uploadFiles.length; i++) {\n        if (uploadFiles[i][\"url\"] == file.url) {\n          uploadFiles.splice(i, 1);\n        }\n      }\n    },\n    test() {\n      savetoIPFS(this.$refs.pictureUpload.uploadFiles);\n    }\n  }\n};","map":{"version":3,"names":["savetoIPFS","data","imageUrl","fileList","dialogImageUrl","dialogVisible","disabled","inputName","options","value","label","inputType","active","mounted","methods","DeployMintNFTContract","MintNFTContractABI","JSON","parse","contract","web3","eth","Contract","bytecode","_this","NewContractAddress","deploy","arguments","send","from","$store","state","currentAddress","NewContract","Web3","_address","console","log","CreateToken","tokenURI","createToken","$refs","pictureUpload","uploadFiles","httpGateway","length","results","ipfs","add","raw","hash1","path","img_href","err","error","NFTtoChain","MintNFTContract","GETIPFSURI","$notify","title","message","position","that","handleRemove","file","i","url","splice","test"],"sources":["src/views/market/imitNFT.vue"],"sourcesContent":["<template>\n  <div class=\"MainWindow\">\n    <div style=\"\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n      \" v-if=\"this.$store.state.isconnect\">\n      <div class=\"ImitTitle\">CREATE YOUR NFT</div>\n      <div class=\"tipfiled1\">\n        <span style=\"color: red\">*</span> Required fields\n      </div>\n      <div class=\"tipfiled2\">Art、Game、Fashion、Music、Other</div>\n      <div class=\"NFTImageSelectBox\"></div>\n      <div class=\"imageUpLoad\">\n        <el-upload action=\"#\" list-type=\"picture-card\" ref=\"pictureUpload\" :file-list=\"fileList\" :auto-upload=\"false\">\n          <i slot=\"default\" class=\"el-icon-picture\" style=\"\n              font-size: 82px;\n              color: var(--Dark--);\n              transition: all 0.3s ease-in-out;\n            \"></i>\n          <div slot=\"file\" slot-scope=\"{ file }\">\n            <img class=\"el-upload-list__item-thumbnail\" :src=\"file.url\" alt=\"\" />\n            <span class=\"el-upload-list__item-actions\">\n              <span v-if=\"!disabled\" class=\"el-upload-list__item-delete\" @click=\"handleRemove(file)\">\n                <i class=\"el-icon-delete\"></i>\n              </span>\n            </span>\n          </div>\n        </el-upload>\n        <el-dialog :visible.sync=\"dialogVisible\">\n          <img width=\"100%\" :src=\"dialogImageUrl\" alt=\"\" />\n        </el-dialog>\n      </div>\n      <div class=\"selectBox\">\n        <div class=\"select\">\n          <div class=\"tipfiled1\">\n            <div class=\"tipfiled2\">\n              <span style=\"color: red\">*</span> Item Name\n            </div>\n          </div>\n          <el-input v-model=\"inputName\" placeholder=\"请输入名称\"></el-input>\n        </div>\n        <div class=\"select\">\n          <div class=\"tipfiled1\">\n            <div class=\"tipfiled2\">\n              <span style=\"color: red\">*</span> Collection\n            </div>\n          </div>\n          <el-select v-model=\"inputType\" clearable placeholder=\"请选择类型\">\n            <el-option v-for=\"item in options\" :key=\"item.value\" :label=\"item.label\" :value=\"item.value\">\n            </el-option>\n          </el-select>\n        </div>\n      </div>\n\n      <div class=\"sumbitBox\">\n        <el-button type=\"primary\" @click=\"test\">CREATE</el-button>\n      </div>\n    </div>\n    <div style=\"\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        position: relative;\n      \" v-if=\"!this.$store.state.isconnect\">\n      <div class=\"unLoginImitTitle\">\n        PLEASE CONNECTING <br />\n        TO METAMASK\n      </div>\n      <img src=\"@/assets/webAssets/UnLoginPhoto.png\" alt=\"\" width=\"150px\" height=\"150px\" style=\"position: absolute; top: 40%; left: 0%; transform: rotate(-3deg)\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { savetoIPFS } from \"@/api/axios/contract.js\"\n  export default {\n    data() {\n      return {\n        imageUrl: \"\",\n        fileList: [],\n        dialogImageUrl: \"\",\n        dialogVisible: false,\n        disabled: false,\n        inputName: \"\",\n        options: [\n          {\n            value: \"ART\",\n            label: \"Art(艺术)\",\n          },\n          {\n            value: \"GAME\",\n            label: \"Game(游戏)\",\n          },\n          {\n            value: \"FASHION\",\n            label: \"Fashion(时尚)\",\n          },\n          {\n            value: \"MUSIC\",\n            label: \"Music(音乐)\",\n          },\n          {\n            value: \"OTHER\",\n            label: \"Other(其他)\",\n          },\n        ],\n        inputType: \"\",\n        active: 1,\n      };\n    },\n    mounted() {},\n    methods: {\n      async DeployMintNFTContract() {\n        const MintNFTContractABI = JSON.parse(``);\n        const contract = new web3.eth.Contract(MintNFTContractABI);\n        const bytecode = \"\";\n        var _this = this;\n        let NewContractAddress = await contract\n          .deploy({\n            data: bytecode,\n            arguments: [this.inputName, this.inputType],\n          })\n          .send({\n            from: this.$store.state.currentAddress,\n          });\n        let NewContract = await new _this.$store.state.Web3.eth.Contract(\n          MintNFTContractABI,\n          NewContractAddress._address\n        );\n        console.log(NewContract);\n        console.log(NewContract._address);\n        return NewContract;\n      },\n      async CreateToken(contract, tokenURI) {\n        await contract.methods.createToken(tokenURI).send({\n          from: this.$store.state.currentAddress,\n        });\n\n        //   await contract.methods.tokenURI(1).call(async (err, result) => {\n        // \tconsole.log(\"im tokenurl\"+ result);\n        //     return result;\n        //   });\n      },\n      async savetoIPFS() {\n        console.log(this.$refs.pictureUpload.uploadFiles);\n        const httpGateway = \"http://127.0.0.1:8080\";\n        try {\n          if (this.$refs.pictureUpload.uploadFiles.length != 0) {\n            //ipfs的add方法是将东西添加到ipfs网络上\n            let results = await this.$store.state.ipfs.add(\n              this.$refs.pictureUpload.uploadFiles[0].raw\n            );\n            console.log(this.$refs.pictureUpload.uploadFiles[0].raw);\n            let hash1 = results.path;\n            console.log(hash1);\n            var img_href = `${httpGateway}/ipfs/${hash1}`;\n            console.log(img_href);\n            return img_href;\n          }\n        } catch (err) {\n          console.error(err);\n        }\n      },\n      async NFTtoChain() {\n        let MintNFTContract = await this.DeployMintNFTContract();\n        console.log(`okMINT:${MintNFTContract}`);\n        let GETIPFSURI = await this.savetoIPFS();\n        console.log(`okURI:${GETIPFSURI}`);\n        if (GETIPFSURI != null) {\n          await this.CreateToken(MintNFTContract, GETIPFSURI);\n          await this.$notify({\n            title: \"创造\",\n            message: `Create Success !`,\n            position: \"top-left\",\n          });\n          var that = this;\n        }\n        return;\n      },\n      handleRemove(file) {\n        let uploadFiles = this.$refs.pictureUpload.uploadFiles;\n        for (var i = 0; i < uploadFiles.length; i++) {\n          if (uploadFiles[i][\"url\"] == file.url) {\n            uploadFiles.splice(i, 1);\n          }\n        }\n      },\n      test() {\n        savetoIPFS(this.$refs.pictureUpload.uploadFiles)\n      }\n    },\n  };\n</script>\n\n<style lang=\"scss\">\n.imageUpLoad {\n  width: 100%;\n  & div:first-child {\n    position: relative;\n    overflow: hidden;\n    height: 330px;\n  }\n  & .el-upload-list--picture-card .el-upload-list__item {\n    width: 305px;\n    height: 305px;\n  }\n  & .el-upload-list--picture-card .el-upload-list__item-actions {\n    height: 100%;\n  }\n  & .el-upload--picture-card {\n    padding: 105px;\n    height: 305px;\n    width: 305px;\n    background-color: rgba(255, 255, 255, 0);\n    border: 3px dashed var(--Dark--);\n    border-radius: 20px;\n    transition: all 0.3s ease-in-out;\n  }\n}\n.select {\n  height: 90px;\n  width: 400px;\n  & .el-input__inner {\n    height: 60px;\n    margin-top: 2%;\n    background-color: var(--White--) !important;\n    border: 2px solid var(--Dark--);\n    border-radius: 15px;\n    width: 300px;\n    color: var(--Dark--);\n    font-weight: 800;\n    transition: all 0.3s ease-in-out;\n  }\n}\n.selectBox {\n  padding-top: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n<style lang=\"scss\" scoped>\n.NFTImageSelectBox {\n  width: 76%;\n  text-align: left;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  transition: all 0.3s ease-in-out;\n}\n\n.MainWindow {\n  width: 100%;\n  border-radius: 40px;\n  background-color: var(--White--);\n  transition: all 0.3s ease-in-out;\n  margin-top: 5%;\n}\n\n.ImitTitle {\n  font-size: 53px;\n  padding: 20px;\n\n  width: 76%;\n  margin-top: 2%;\n  font-weight: 800;\n  font-family: Arial, Helvetica, sans-serif;\n  font-family: \"TESLA\";\n  color: var(--Dark--);\n  transition: all 0.3s ease-in-out;\n}\n.tipfiled1 {\n  width: 76%;\n  font-size: 15px;\n  color: rgb(163, 162, 162);\n  margin-bottom: 1.6%;\n  font-weight: 800;\n  transition: all 0.3s ease-in-out;\n}\n.tipfiled2 {\n  width: 76%;\n  font-size: 22px;\n  font-weight: 800;\n\n  color: var(--Dark--);\n  margin-bottom: 2%;\n  transition: all 0.3s ease-in-out;\n}\n.sumbitBox {\n  text-align: left;\n  margin-top: 5%;\n  margin-bottom: 6%;\n  & .el-button {\n    background-color: rgba(255, 255, 255, 0);\n    color: var(--Dark--);\n    padding: 16px 100px 16px 100px;\n    border: 2px solid var(--Dark--);\n    font-size: 25px;\n    border-radius: 15px;\n    transition: all 0.3s ease-in-out;\n    font-weight: 800;\n    font-family: \"Transformers_Movie\";\n  }\n  & .el-button--primary:focus,\n  .el-button--primary:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    color: #fff;\n    transition: all 0.3s ease-in-out;\n  }\n}\n.unLoginImitTitle {\n  width: 100%;\n  padding: 300px;\n  font-size: 55px;\n  margin-top: 2%;\n  color: var(--Dark--);\n  transition: all 0.3s ease-in-out;\n  z-index: 2;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}