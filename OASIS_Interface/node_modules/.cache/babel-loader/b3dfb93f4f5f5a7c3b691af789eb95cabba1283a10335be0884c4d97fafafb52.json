{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js';\nimport parseDuration from 'parse-duration';\nimport { logger } from '@libp2p/logger';\nimport HTTP from 'ipfs-utils/src/http.js';\nimport mergeOpts from 'merge-options';\nimport { toUrlString } from 'ipfs-core-utils/to-url-string';\nimport getAgent from 'ipfs-core-utils/agent';\nconst log = logger('ipfs-http-client:lib:error-handler');\nconst merge = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http';\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost';\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001';\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url;\n  /** @type {Options} */\n  let opts = {};\n  let agent;\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options));\n  } else if (options instanceof URL) {\n    url = options;\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url));\n    opts = options;\n  } else if (options.url instanceof URL) {\n    url = options.url;\n    opts = options;\n  } else {\n    opts = options || {};\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '');\n    const host = (opts.host || DEFAULT_HOST).split(':')[0];\n    const port = opts.port || DEFAULT_PORT;\n    url = new URL(`${protocol}://${host}:${port}`);\n  }\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath;\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0';\n  }\n  if (isNode) {\n    const Agent = getAgent(url);\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    });\n  }\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  };\n};\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async response => {\n  let msg;\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json();\n      log(data);\n      msg = data.Message || data.message;\n    } else {\n      msg = await response.text();\n    }\n  } catch ( /** @type {any} */err) {\n    log('Failed to parse error response', err);\n    // Failed to extract/parse error message from response\n    msg = err.message;\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response);\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError();\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError();\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError();\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg;\n  }\n  throw error;\n};\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g;\n\n/**\n * @param {string} str\n */\nconst kebabCase = str => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase();\n  });\n};\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = value => {\n  return typeof value === 'string' ? parseDuration(value) : value;\n};\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor(options = {}) {\n    const opts = normalizeOptions(options);\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: search => {\n        const out = new URLSearchParams();\n        for (const [key, value] of search) {\n          if (value !== 'undefined' && value !== 'null' && key !== 'signal') {\n            out.append(kebabCase(key), value);\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value);\n          }\n        }\n        return out;\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    });\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get;\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put;\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete;\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options;\n    const fetch = this.fetch;\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`;\n      }\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }));\n    };\n  }\n}\nexport const HTTPError = HTTP.HTTPError;","map":{"version":3,"names":["isMultiaddr","isBrowser","isWebWorker","isNode","parseDuration","logger","HTTP","mergeOpts","toUrlString","getAgent","log","merge","bind","ignoreUndefined","DEFAULT_PROTOCOL","location","protocol","DEFAULT_HOST","hostname","DEFAULT_PORT","port","normalizeOptions","options","url","opts","agent","URL","replace","host","split","apiPath","pathname","undefined","Agent","keepAlive","maxSockets","Number","errorHandler","response","msg","headers","get","startsWith","data","json","Message","message","text","err","error","HTTPError","includes","TimeoutError","KEBAB_REGEX","kebabCase","str","match","toLowerCase","parseTimeout","value","Client","constructor","timeout","base","handleError","transformSearchParams","search","out","URLSearchParams","key","append","isNaN","put","delete","fetch","resource","call","method"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/lib/core.js"],"sourcesContent":["\n/* eslint-env browser */\n\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport { isBrowser, isWebWorker, isNode } from 'ipfs-utils/src/env.js'\nimport parseDuration from 'parse-duration'\nimport { logger } from '@libp2p/logger'\nimport HTTP from 'ipfs-utils/src/http.js'\nimport mergeOpts from 'merge-options'\nimport { toUrlString } from 'ipfs-core-utils/to-url-string'\nimport getAgent from 'ipfs-core-utils/agent'\n\nconst log = logger('ipfs-http-client:lib:error-handler')\nconst merge = mergeOpts.bind({ ignoreUndefined: true })\n\nconst DEFAULT_PROTOCOL = isBrowser || isWebWorker ? location.protocol : 'http'\nconst DEFAULT_HOST = isBrowser || isWebWorker ? location.hostname : 'localhost'\nconst DEFAULT_PORT = isBrowser || isWebWorker ? location.port : '5001'\n\n/**\n * @typedef {import('ipfs-utils/src/types').HTTPOptions} HTTPOptions\n * @typedef {import('../types').Options} Options\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\n/**\n * @param {Options|URL|Multiaddr|string} [options]\n * @returns {Options}\n */\nconst normalizeOptions = (options = {}) => {\n  let url\n  /** @type {Options} */\n  let opts = {}\n  let agent\n\n  if (typeof options === 'string' || isMultiaddr(options)) {\n    url = new URL(toUrlString(options))\n  } else if (options instanceof URL) {\n    url = options\n  } else if (typeof options.url === 'string' || isMultiaddr(options.url)) {\n    url = new URL(toUrlString(options.url))\n    opts = options\n  } else if (options.url instanceof URL) {\n    url = options.url\n    opts = options\n  } else {\n    opts = options || {}\n\n    const protocol = (opts.protocol || DEFAULT_PROTOCOL).replace(':', '')\n    const host = (opts.host || DEFAULT_HOST).split(':')[0]\n    const port = (opts.port || DEFAULT_PORT)\n\n    url = new URL(`${protocol}://${host}:${port}`)\n  }\n\n  if (opts.apiPath) {\n    url.pathname = opts.apiPath\n  } else if (url.pathname === '/' || url.pathname === undefined) {\n    url.pathname = 'api/v0'\n  }\n\n  if (isNode) {\n    const Agent = getAgent(url)\n\n    agent = opts.agent || new Agent({\n      keepAlive: true,\n      // Similar to browsers which limit connections to six per host\n      maxSockets: 6\n    })\n  }\n\n  return {\n    ...opts,\n    host: url.host,\n    protocol: url.protocol.replace(':', ''),\n    port: Number(url.port),\n    apiPath: url.pathname,\n    url,\n    agent\n  }\n}\n\n/**\n * @param {Response} response\n */\nexport const errorHandler = async (response) => {\n  let msg\n\n  try {\n    if ((response.headers.get('Content-Type') || '').startsWith('application/json')) {\n      const data = await response.json()\n      log(data)\n      msg = data.Message || data.message\n    } else {\n      msg = await response.text()\n    }\n  } catch (/** @type {any} */ err) {\n    log('Failed to parse error response', err)\n    // Failed to extract/parse error message from response\n    msg = err.message\n  }\n\n  /** @type {Error} */\n  let error = new HTTP.HTTPError(response)\n\n  if (msg) {\n    // This is what rs-ipfs returns where there's a timeout\n    if (msg.includes('deadline has elapsed')) {\n      error = new HTTP.TimeoutError()\n    }\n\n    // This is what go-ipfs returns where there's a timeout\n    if (msg && msg.includes('context deadline exceeded')) {\n      error = new HTTP.TimeoutError()\n    }\n  }\n\n  // This also gets returned\n  if (msg && msg.includes('request timed out')) {\n    error = new HTTP.TimeoutError()\n  }\n\n  // If we managed to extract a message from the response, use it\n  if (msg) {\n    error.message = msg\n  }\n\n  throw error\n}\n\nconst KEBAB_REGEX = /[A-Z\\u00C0-\\u00D6\\u00D8-\\u00DE]/g\n\n/**\n * @param {string} str\n */\nconst kebabCase = (str) => {\n  return str.replace(KEBAB_REGEX, function (match) {\n    return '-' + match.toLowerCase()\n  })\n}\n\n/**\n * @param {string | number} value\n */\nconst parseTimeout = (value) => {\n  return typeof value === 'string' ? parseDuration(value) : value\n}\n\nexport class Client extends HTTP {\n  /**\n   * @param {Options|URL|Multiaddr|string} [options]\n   */\n  constructor (options = {}) {\n    const opts = normalizeOptions(options)\n\n    super({\n      timeout: parseTimeout(opts.timeout || 0) || undefined,\n      headers: opts.headers,\n      base: `${opts.url}`,\n      handleError: errorHandler,\n      transformSearchParams: (search) => {\n        const out = new URLSearchParams()\n\n        for (const [key, value] of search) {\n          if (\n            value !== 'undefined' &&\n            value !== 'null' &&\n            key !== 'signal'\n          ) {\n            out.append(kebabCase(key), value)\n          }\n\n          // @ts-expect-error server timeouts are strings\n          if (key === 'timeout' && !isNaN(value)) {\n            out.append(kebabCase(key), value)\n          }\n        }\n\n        return out\n      },\n      // @ts-expect-error this can be a https agent or a http agent\n      agent: opts.agent\n    })\n\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.get\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.put\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.delete\n    // @ts-expect-error - cannot delete no-optional fields\n    delete this.options\n\n    const fetch = this.fetch\n\n    /**\n     * @param {string | Request} resource\n     * @param {HTTPOptions} options\n     */\n    this.fetch = (resource, options = {}) => {\n      if (typeof resource === 'string' && !resource.startsWith('/')) {\n        resource = `${opts.url}/${resource}`\n      }\n\n      return fetch.call(this, resource, merge(options, {\n        method: 'POST'\n      }))\n    }\n  }\n}\n\nexport const HTTPError = HTTP.HTTPError\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}