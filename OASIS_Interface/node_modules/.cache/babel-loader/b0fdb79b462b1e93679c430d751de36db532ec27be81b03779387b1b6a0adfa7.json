{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { handshake } from 'it-handshake';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { PROTOCOL_ID } from './constants.js';\nimport * as multistream from './multistream.js';\nconst log = logger('libp2p:mss:handle');\nexport async function handle(stream, protocols, options) {\n  protocols = Array.isArray(protocols) ? protocols : [protocols];\n  const {\n    writer,\n    reader,\n    rest,\n    stream: shakeStream\n  } = handshake(stream);\n  while (true) {\n    const protocol = await multistream.readString(reader, options);\n    log.trace('read \"%s\"', protocol);\n    if (protocol === PROTOCOL_ID) {\n      log.trace('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n      multistream.write(writer, uint8ArrayFromString(PROTOCOL_ID), options);\n      continue;\n    }\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, uint8ArrayFromString(protocol), options);\n      log.trace('respond with \"%s\" for \"%s\"', protocol, protocol);\n      rest();\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new Uint8ArrayList(...protocols.map(p => multistream.encode(uint8ArrayFromString(p)))), options);\n      // multistream.writeAll(writer, protocols.map(p => uint8ArrayFromString(p)))\n      log.trace('respond with \"%s\" for %s', protocols, protocol);\n      continue;\n    }\n    multistream.write(writer, uint8ArrayFromString('na'), options);\n    log('respond with \"na\" for \"%s\"', protocol);\n  }\n}","map":{"version":3,"names":["logger","handshake","Uint8ArrayList","fromString","uint8ArrayFromString","PROTOCOL_ID","multistream","log","handle","stream","protocols","options","Array","isArray","writer","reader","rest","shakeStream","protocol","readString","trace","write","includes","map","p","encode"],"sources":["../../src/handle.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,OAAO,KAAKC,WAAW,MAAM,kBAAkB;AAI/C,MAAMC,GAAG,GAAGP,MAAM,CAAC,mBAAmB,CAAC;AAkDvC,OAAO,eAAeQ,MAAMA,CAAEC,MAAW,EAAEC,SAA4B,EAAEC,OAA+B;EACtGD,SAAS,GAAGE,KAAK,CAACC,OAAO,CAACH,SAAS,CAAC,GAAGA,SAAS,GAAG,CAACA,SAAS,CAAC;EAC9D,MAAM;IAAEI,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEP,MAAM,EAAEQ;EAAW,CAAE,GAAGhB,SAAS,CAACQ,MAAM,CAAC;EAEvE,OAAO,IAAI,EAAE;IACX,MAAMS,QAAQ,GAAG,MAAMZ,WAAW,CAACa,UAAU,CAACJ,MAAM,EAAEJ,OAAO,CAAC;IAC9DJ,GAAG,CAACa,KAAK,CAAC,WAAW,EAAEF,QAAQ,CAAC;IAEhC,IAAIA,QAAQ,KAAKb,WAAW,EAAE;MAC5BE,GAAG,CAACa,KAAK,CAAC,4BAA4B,EAAEf,WAAW,EAAEa,QAAQ,CAAC;MAC9DZ,WAAW,CAACe,KAAK,CAACP,MAAM,EAAEV,oBAAoB,CAACC,WAAW,CAAC,EAAEM,OAAO,CAAC;MACrE;;IAGF,IAAID,SAAS,CAACY,QAAQ,CAACJ,QAAQ,CAAC,EAAE;MAChCZ,WAAW,CAACe,KAAK,CAACP,MAAM,EAAEV,oBAAoB,CAACc,QAAQ,CAAC,EAAEP,OAAO,CAAC;MAClEJ,GAAG,CAACa,KAAK,CAAC,4BAA4B,EAAEF,QAAQ,EAAEA,QAAQ,CAAC;MAC3DF,IAAI,EAAE;MACN,OAAO;QAAEP,MAAM,EAAEQ,WAAW;QAAEC;MAAQ,CAAE;;IAG1C,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACrB;MACAZ,WAAW,CAACe,KAAK,CAACP,MAAM,EAAE,IAAIZ,cAAc,CAAC,GAAGQ,SAAS,CAACa,GAAG,CAACC,CAAC,IAAIlB,WAAW,CAACmB,MAAM,CAACrB,oBAAoB,CAACoB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEb,OAAO,CAAC;MAC1H;MACAJ,GAAG,CAACa,KAAK,CAAC,0BAA0B,EAAEV,SAAS,EAAEQ,QAAQ,CAAC;MAC1D;;IAGFZ,WAAW,CAACe,KAAK,CAACP,MAAM,EAAEV,oBAAoB,CAAC,IAAI,CAAC,EAAEO,OAAO,CAAC;IAC9DJ,GAAG,CAAC,4BAA4B,EAAEW,QAAQ,CAAC;;AAE/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}