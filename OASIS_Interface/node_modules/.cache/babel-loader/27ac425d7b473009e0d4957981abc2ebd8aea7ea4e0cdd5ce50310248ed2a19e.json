{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { pushableV } from 'it-pushable';\nimport { abortableSource } from 'abortable-iterator';\nimport { encode } from './encode.js';\nimport { Decoder } from './decode.js';\nimport { MessageTypes, MessageTypeNames } from './message-types.js';\nimport { createStream } from './stream.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays';\nimport { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { anySignal } from 'any-signal';\nconst log = logger('libp2p:mplex');\nconst MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION = 1024;\nconst MAX_STREAM_BUFFER_SIZE = 1024 * 1024 * 4; // 4MB\nconst DISCONNECT_THRESHOLD = 5;\nfunction printMessage(msg) {\n  const output = {\n    ...msg,\n    type: `${MessageTypeNames[msg.type]} (${msg.type})`\n  };\n  if (msg.type === MessageTypes.NEW_STREAM) {\n    output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray());\n  }\n  if (msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) {\n    output.data = uint8ArrayToString(msg.data instanceof Uint8Array ? msg.data : msg.data.subarray(), 'base16');\n  }\n  return output;\n}\nexport class MplexStreamMuxer {\n  constructor(init) {\n    this.protocol = '/mplex/6.7.0';\n    init = init ?? {};\n    this._streamId = 0;\n    this._streams = {\n      /**\n       * Stream to ids map\n       */\n      initiators: new Map(),\n      /**\n       * Stream to ids map\n       */\n      receivers: new Map()\n    };\n    this._init = init;\n    /**\n     * An iterable sink\n     */\n    this.sink = this._createSink();\n    /**\n     * An iterable source\n     */\n    const source = this._createSource();\n    this._source = source;\n    this.source = source;\n    /**\n     * Close controller\n     */\n    this.closeController = new AbortController();\n    this.rateLimiter = new RateLimiterMemory({\n      points: init.disconnectThreshold ?? DISCONNECT_THRESHOLD,\n      duration: 1\n    });\n  }\n  /**\n   * Returns a Map of streams and their ids\n   */\n  get streams() {\n    // Inbound and Outbound streams may have the same ids, so we need to make those unique\n    const streams = [];\n    for (const stream of this._streams.initiators.values()) {\n      streams.push(stream);\n    }\n    for (const stream of this._streams.receivers.values()) {\n      streams.push(stream);\n    }\n    return streams;\n  }\n  /**\n   * Initiate a new stream with the given name. If no name is\n   * provided, the id of the stream will be used.\n   */\n  newStream(name) {\n    if (this.closeController.signal.aborted) {\n      throw new Error('Muxer already closed');\n    }\n    const id = this._streamId++;\n    name = name == null ? id.toString() : name.toString();\n    const registry = this._streams.initiators;\n    return this._newStream({\n      id,\n      name,\n      type: 'initiator',\n      registry\n    });\n  }\n  /**\n   * Close or abort all tracked streams and stop the muxer\n   */\n  close(err) {\n    if (this.closeController.signal.aborted) return;\n    if (err != null) {\n      this.streams.forEach(s => {\n        s.abort(err);\n      });\n    } else {\n      this.streams.forEach(s => {\n        s.close();\n      });\n    }\n    this.closeController.abort();\n  }\n  /**\n   * Called whenever an inbound stream is created\n   */\n  _newReceiverStream(options) {\n    const {\n      id,\n      name\n    } = options;\n    const registry = this._streams.receivers;\n    return this._newStream({\n      id,\n      name,\n      type: 'receiver',\n      registry\n    });\n  }\n  _newStream(options) {\n    const {\n      id,\n      name,\n      type,\n      registry\n    } = options;\n    log('new %s stream %s', type, id);\n    if (type === 'initiator' && this._streams.initiators.size === (this._init.maxOutboundStreams ?? MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION)) {\n      throw new CodeError('Too many outbound streams open', 'ERR_TOO_MANY_OUTBOUND_STREAMS');\n    }\n    if (registry.has(id)) {\n      throw new Error(`${type} stream ${id} already exists!`);\n    }\n    const send = msg => {\n      if (log.enabled) {\n        log.trace('%s stream %s send', type, id, printMessage(msg));\n      }\n      this._source.push(msg);\n    };\n    const onEnd = () => {\n      log('%s stream with id %s and protocol %s ended', type, id, stream.stat.protocol);\n      registry.delete(id);\n      if (this._init.onStreamEnd != null) {\n        this._init.onStreamEnd(stream);\n      }\n    };\n    const stream = createStream({\n      id,\n      name,\n      send,\n      type,\n      onEnd,\n      maxMsgSize: this._init.maxMsgSize\n    });\n    registry.set(id, stream);\n    return stream;\n  }\n  /**\n   * Creates a sink with an abortable source. Incoming messages will\n   * also have their size restricted. All messages will be varint decoded.\n   */\n  _createSink() {\n    const sink = async source => {\n      const signal = anySignal([this.closeController.signal, this._init.signal]);\n      try {\n        source = abortableSource(source, signal);\n        const decoder = new Decoder(this._init.maxMsgSize, this._init.maxUnprocessedMessageQueueSize);\n        for await (const chunk of source) {\n          for (const msg of decoder.write(chunk)) {\n            await this._handleIncoming(msg);\n          }\n        }\n        this._source.end();\n      } catch (err) {\n        log('error in sink', err);\n        this._source.end(err); // End the source with an error\n      } finally {\n        signal.clear();\n      }\n    };\n    return sink;\n  }\n  /**\n   * Creates a source that restricts outgoing message sizes\n   * and varint encodes them\n   */\n  _createSource() {\n    const onEnd = err => {\n      this.close(err);\n    };\n    const source = pushableV({\n      objectMode: true,\n      onEnd\n    });\n    return Object.assign(encode(source, this._init.minSendBytes), {\n      push: source.push,\n      end: source.end,\n      return: source.return\n    });\n  }\n  async _handleIncoming(message) {\n    const {\n      id,\n      type\n    } = message;\n    if (log.enabled) {\n      log.trace('incoming message', printMessage(message));\n    }\n    // Create a new stream?\n    if (message.type === MessageTypes.NEW_STREAM) {\n      if (this._streams.receivers.size === (this._init.maxInboundStreams ?? MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION)) {\n        log('too many inbound streams open');\n        // not going to allow this stream, send the reset message manually\n        // instead of setting it up just to tear it down\n        this._source.push({\n          id,\n          type: MessageTypes.RESET_RECEIVER\n        });\n        // if we've hit our stream limit, and the remote keeps trying to open\n        // more new streams, if they are doing this very quickly maybe they\n        // are attacking us and we should close the connection\n        try {\n          await this.rateLimiter.consume('new-stream', 1);\n        } catch {\n          log('rate limit hit when opening too many new streams over the inbound stream limit - closing remote connection');\n          // since there's no backpressure in mplex, the only thing we can really do to protect ourselves is close the connection\n          this._source.end(new Error('Too many open streams'));\n          return;\n        }\n        return;\n      }\n      const stream = this._newReceiverStream({\n        id,\n        name: uint8ArrayToString(message.data instanceof Uint8Array ? message.data : message.data.subarray())\n      });\n      if (this._init.onIncomingStream != null) {\n        this._init.onIncomingStream(stream);\n      }\n      return;\n    }\n    const list = (type & 1) === 1 ? this._streams.initiators : this._streams.receivers;\n    const stream = list.get(id);\n    if (stream == null) {\n      log('missing stream %s for message type %s', id, MessageTypeNames[type]);\n      return;\n    }\n    const maxBufferSize = this._init.maxStreamBufferSize ?? MAX_STREAM_BUFFER_SIZE;\n    switch (type) {\n      case MessageTypes.MESSAGE_INITIATOR:\n      case MessageTypes.MESSAGE_RECEIVER:\n        if (stream.sourceReadableLength() > maxBufferSize) {\n          // Stream buffer has got too large, reset the stream\n          this._source.push({\n            id: message.id,\n            type: type === MessageTypes.MESSAGE_INITIATOR ? MessageTypes.RESET_RECEIVER : MessageTypes.RESET_INITIATOR\n          });\n          // Inform the stream consumer they are not fast enough\n          const error = new CodeError('Input buffer full - increase Mplex maxBufferSize to accommodate slow consumers', 'ERR_STREAM_INPUT_BUFFER_FULL');\n          stream.abort(error);\n          return;\n        }\n        // We got data from the remote, push it into our local stream\n        stream.sourcePush(message.data);\n        break;\n      case MessageTypes.CLOSE_INITIATOR:\n      case MessageTypes.CLOSE_RECEIVER:\n        // We should expect no more data from the remote, stop reading\n        stream.closeRead();\n        break;\n      case MessageTypes.RESET_INITIATOR:\n      case MessageTypes.RESET_RECEIVER:\n        // Stop reading and writing to the stream immediately\n        stream.reset();\n        break;\n      default:\n        log('unknown message type %s', type);\n    }\n  }\n}","map":{"version":3,"names":["pushableV","abortableSource","encode","Decoder","MessageTypes","MessageTypeNames","createStream","toString","uint8ArrayToString","logger","CodeError","RateLimiterMemory","anySignal","log","MAX_STREAMS_INBOUND_STREAMS_PER_CONNECTION","MAX_STREAMS_OUTBOUND_STREAMS_PER_CONNECTION","MAX_STREAM_BUFFER_SIZE","DISCONNECT_THRESHOLD","printMessage","msg","output","type","NEW_STREAM","data","Uint8Array","subarray","MESSAGE_INITIATOR","MESSAGE_RECEIVER","MplexStreamMuxer","constructor","init","protocol","_streamId","_streams","initiators","Map","receivers","_init","sink","_createSink","source","_createSource","_source","closeController","AbortController","rateLimiter","points","disconnectThreshold","duration","streams","stream","values","push","newStream","name","signal","aborted","Error","id","registry","_newStream","close","err","forEach","s","abort","_newReceiverStream","options","size","maxOutboundStreams","has","send","enabled","trace","onEnd","stat","delete","onStreamEnd","maxMsgSize","set","decoder","maxUnprocessedMessageQueueSize","chunk","write","_handleIncoming","end","clear","objectMode","Object","assign","minSendBytes","return","message","maxInboundStreams","RESET_RECEIVER","consume","onIncomingStream","list","get","maxBufferSize","maxStreamBufferSize","sourceReadableLength","RESET_INITIATOR","error","sourcePush","CLOSE_INITIATOR","CLOSE_RECEIVER","closeRead","reset"],"sources":["../../src/mplex.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}