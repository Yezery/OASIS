{"ast":null,"code":"import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { resolvePath } from '../../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { PinTypes } from 'ipfs-repo/pin-types';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll({\n  repo,\n  codecs\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function* rmAll(source, _options = {}) {\n    const release = await repo.gcLock.readLock();\n    try {\n      // verify that each hash can be unpinned\n      for await (const {\n        path,\n        recursive\n      } of normaliseInput(source)) {\n        const {\n          cid\n        } = await resolvePath(repo, codecs, path);\n        const {\n          pinned,\n          reason\n        } = await repo.pins.isPinnedWithType(cid, PinTypes.all);\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`);\n        }\n        switch (reason) {\n          case PinTypes.recursive:\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`);\n            }\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n          case PinTypes.direct:\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`);\n        }\n      }\n    } finally {\n      release();\n    }\n  }\n  return withTimeoutOption(rmAll);\n}","map":{"version":3,"names":["normaliseInput","resolvePath","withTimeoutOption","PinTypes","createRmAll","repo","codecs","rmAll","source","_options","release","gcLock","readLock","path","recursive","cid","pinned","reason","pins","isPinnedWithType","all","Error","unpin","direct"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/pin/rm-all.js"],"sourcesContent":["import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,sCAAsC;AACrE,SAASC,WAAW,QAAQ,gBAAgB;AAC5C,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,QAAQ,QAAQ,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAE;EAAEC,IAAI;EAAEC;AAAO,CAAC,EAAE;EAC7C;AACF;AACA;EACE,gBAAiBC,KAAKA,CAAEC,MAAM,EAAEC,QAAQ,GAAG,CAAC,CAAC,EAAE;IAC7C,MAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAM,CAACC,QAAQ,CAAC,CAAC;IAE5C,IAAI;MACF;MACA,WAAW,MAAM;QAAEC,IAAI;QAAEC;MAAU,CAAC,IAAId,cAAc,CAACQ,MAAM,CAAC,EAAE;QAC9D,MAAM;UAAEO;QAAI,CAAC,GAAG,MAAMd,WAAW,CAACI,IAAI,EAAEC,MAAM,EAAEO,IAAI,CAAC;QACrD,MAAM;UAAEG,MAAM;UAAEC;QAAO,CAAC,GAAG,MAAMZ,IAAI,CAACa,IAAI,CAACC,gBAAgB,CAACJ,GAAG,EAAEZ,QAAQ,CAACiB,GAAG,CAAC;QAE9E,IAAI,CAACJ,MAAM,EAAE;UACX,MAAM,IAAIK,KAAK,CAAE,GAAEN,GAAI,gBAAe,CAAC;QACzC;QAEA,QAAQE,MAAM;UACZ,KAAMd,QAAQ,CAACW,SAAS;YACtB,IAAI,CAACA,SAAS,EAAE;cACd,MAAM,IAAIO,KAAK,CAAE,GAAEN,GAAI,wBAAuB,CAAC;YACjD;YAEA,MAAMV,IAAI,CAACa,IAAI,CAACI,KAAK,CAACP,GAAG,CAAC;YAE1B,MAAMA,GAAG;YAET;UACF,KAAMZ,QAAQ,CAACoB,MAAM;YACnB,MAAMlB,IAAI,CAACa,IAAI,CAACI,KAAK,CAACP,GAAG,CAAC;YAE1B,MAAMA,GAAG;YAET;UACF;YACE,MAAM,IAAIM,KAAK,CAAE,GAAEN,GAAI,+BAA8BE,MAAO,EAAC,CAAC;QAClE;MACF;IACF,CAAC,SAAS;MACRP,OAAO,CAAC,CAAC;IACX;EACF;EAEA,OAAOR,iBAAiB,CAACK,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}