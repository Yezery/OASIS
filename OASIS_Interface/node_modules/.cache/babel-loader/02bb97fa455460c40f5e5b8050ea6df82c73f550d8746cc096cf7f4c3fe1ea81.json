{"ast":null,"code":"import { sha256 } from 'multiformats/hashes/sha2';\nimport { msgId } from '@libp2p/pubsub/utils';\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport function msgIdFnStrictSign(msg) {\n  if (msg.type !== 'signed') {\n    throw new Error('expected signed message type');\n  }\n  // Should never happen\n  if (msg.sequenceNumber == null) throw Error('missing seqno field');\n  // TODO: Should use .from here or key?\n  return msgId(msg.from.toBytes(), msg.sequenceNumber);\n}\n/**\n * Generate a message id, based on message `data`\n */\nexport async function msgIdFnStrictNoSign(msg) {\n  return await sha256.encode(msg.data);\n}","map":{"version":3,"names":["sha256","msgId","msgIdFnStrictSign","msg","type","Error","sequenceNumber","from","toBytes","msgIdFnStrictNoSign","encode","data"],"sources":["../../../src/utils/msgIdFn.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,0BAA0B;AAEjD,SAASC,KAAK,QAAQ,sBAAsB;AAE5C;;;AAGA,OAAM,SAAUC,iBAAiBA,CAACC,GAAY;EAC5C,IAAIA,GAAG,CAACC,IAAI,KAAK,QAAQ,EAAE;IACzB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;;EAEjD;EACA,IAAIF,GAAG,CAACG,cAAc,IAAI,IAAI,EAAE,MAAMD,KAAK,CAAC,qBAAqB,CAAC;EAElE;EACA,OAAOJ,KAAK,CAACE,GAAG,CAACI,IAAI,CAACC,OAAO,EAAE,EAAEL,GAAG,CAACG,cAAc,CAAC;AACtD;AAEA;;;AAGA,OAAO,eAAeG,mBAAmBA,CAACN,GAAY;EACpD,OAAO,MAAMH,MAAM,CAACU,MAAM,CAACP,GAAG,CAACQ,IAAI,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}