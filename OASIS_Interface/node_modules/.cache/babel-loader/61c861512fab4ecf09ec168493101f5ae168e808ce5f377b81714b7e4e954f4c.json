{"ast":null,"code":"import { decode } from '@ipld/dag-pb';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent(options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n  return yieldHamtDirectoryContent;\n};\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function* listDirectory(node, path, resolve, depth, blockstore, options) {\n  const links = node.Links;\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null;\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options);\n      yield result.entry;\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash);\n      node = decode(block);\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file;\n      }\n    }\n  }\n}\nexport default hamtShardedDirectoryContent;","map":{"version":3,"names":["decode","hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldHamtDirectoryContent","options","listDirectory","links","Links","link","name","Name","substring","result","Hash","entry","block","get","file"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"sourcesContent":["import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,cAAc;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,2BAA2B,GAAGA,CAACC,GAAG,EAAEC,IAAI,EAAEC,MAAM,EAAEC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,KAAK;EAC3F;AACF;AACA;AACA;EACE,SAASC,yBAAyBA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAChD,OAAOC,aAAa,CAACR,IAAI,EAAEE,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEE,OAAO,CAAC;EACvE;EAEA,OAAOD,yBAAyB;AAClC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAiBE,aAAaA,CAAER,IAAI,EAAEE,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEE,OAAO,EAAE;EAC/E,MAAME,KAAK,GAAGT,IAAI,CAACU,KAAK;EAExB,KAAK,MAAMC,IAAI,IAAIF,KAAK,EAAE;IACxB,MAAMG,IAAI,GAAGD,IAAI,CAACE,IAAI,IAAI,IAAI,GAAGF,IAAI,CAACE,IAAI,CAACC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAE9D,IAAIF,IAAI,EAAE;MACR,MAAMG,MAAM,GAAG,MAAMZ,OAAO,CAACQ,IAAI,CAACK,IAAI,EAAEJ,IAAI,EAAG,GAAEV,IAAK,IAAGU,IAAK,EAAC,EAAE,EAAE,EAAER,KAAK,GAAG,CAAC,EAAEC,UAAU,EAAEE,OAAO,CAAC;MAEpG,MAAMQ,MAAM,CAACE,KAAK;IACpB,CAAC,MAAM;MACL;MACA,MAAMC,KAAK,GAAG,MAAMb,UAAU,CAACc,GAAG,CAACR,IAAI,CAACK,IAAI,CAAC;MAC7ChB,IAAI,GAAGH,MAAM,CAACqB,KAAK,CAAC;MAEpB,WAAW,MAAME,IAAI,IAAIZ,aAAa,CAACR,IAAI,EAAEE,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,UAAU,EAAEE,OAAO,CAAC,EAAE;QACvF,MAAMa,IAAI;MACZ;IACF;EACF;AACF;AAEA,eAAetB,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}