{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { bytes as binary, CID } from './index.js';\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js';\nfunction readonly({\n  enumerable = true,\n  configurable = false\n} = {}) {\n  return {\n    enumerable,\n    configurable,\n    writable: false\n  };\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<[string, CID]>}\n */\nfunction* linksWithin(path, value) {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index];\n        const cid = CID.asCID(element);\n        if (cid) {\n          yield [elementPath.join('/'), cid];\n        } else if (typeof element === 'object') {\n          yield* links(element, elementPath);\n        }\n      }\n    } else {\n      const cid = CID.asCID(value);\n      if (cid) {\n        yield [path.join('/'), cid];\n      } else {\n        yield* links(value, path);\n      }\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nfunction* links(source, base) {\n  if (source == null || source instanceof Uint8Array) {\n    return;\n  }\n  const cid = CID.asCID(source);\n  if (cid) {\n    yield [base.join('/'), cid];\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */[...base, key];\n    yield* linksWithin(path, value);\n  }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<string>}\n */\nfunction* treeWithin(path, value) {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index];\n      yield elementPath.join('/');\n      if (typeof element === 'object' && !CID.asCID(element)) {\n        yield* tree(element, elementPath);\n      }\n    }\n  } else {\n    yield* tree(value, path);\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<string>}\n */\nfunction* tree(source, base) {\n  if (source == null || typeof source !== 'object') {\n    return;\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */[...base, key];\n    yield path.join('/');\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      yield* treeWithin(path, value);\n    }\n  }\n}\n\n/**\n *\n * @template T\n * @param {T} source\n * @param {string[]} path\n * @returns {API.BlockCursorView<unknown>}\n */\nfunction get(source, path) {\n  let node = /** @type {Record<string, any>} */source;\n  for (const [index, key] of path.entries()) {\n    node = node[key];\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`);\n    }\n    const cid = CID.asCID(node);\n    if (cid) {\n      return {\n        value: cid,\n        remaining: path.slice(index + 1).join('/')\n      };\n    }\n  }\n  return {\n    value: node\n  };\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} C - multicodec code corresponding to codec used to encode the block\n * @template {number} A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @implements {API.BlockView<T, C, A, V>}\n */\nclass Block {\n  /**\n   * @param {object} options\n   * @param {CID<T, C, A, V>} options.cid\n   * @param {API.ByteView<T>} options.bytes\n   * @param {T} options.value\n   */\n  constructor({\n    cid,\n    bytes,\n    value\n  }) {\n    if (!cid || !bytes || typeof value === 'undefined') {\n      throw new Error('Missing required argument');\n    }\n    this.cid = cid;\n    this.bytes = bytes;\n    this.value = value;\n    this.asBlock = this;\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    });\n  }\n  links() {\n    return links(this.value, []);\n  }\n  tree() {\n    return tree(this.value, []);\n  }\n\n  /**\n   *\n   * @param {string} [path]\n   * @returns {API.BlockCursorView<unknown>}\n   */\n  get(path = '/') {\n    return get(this.value, path.split('/').filter(Boolean));\n  }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {T} options.value\n * @param {API.BlockEncoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function encode({\n  value,\n  codec,\n  hasher\n}) {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"');\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher');\n  const bytes = codec.encode(value);\n  const hash = await hasher.digest(bytes);\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function decode({\n  bytes,\n  codec,\n  hasher\n}) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"');\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash);\n  return new Block({\n    value,\n    bytes,\n    cid\n  });\n}\n\n/**\n * @typedef {object} RequiredCreateOptions\n * @property {CID} options.cid\n */\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {{ cid: API.Link<T, Code, Alg, V>, value:T, codec?: API.BlockDecoder<Code, T>, bytes: API.ByteView<T> }|{cid:API.Link<T, Code, Alg, V>, bytes:API.ByteView<T>, value?:void, codec:API.BlockDecoder<Code, T>}} options\n * @returns {API.BlockView<T, Code, Alg, V>}\n */\nfunction createUnsafe({\n  bytes,\n  cid,\n  value: maybeValue,\n  codec\n}) {\n  const value = maybeValue !== undefined ? maybeValue : codec && codec.decode(bytes);\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"');\n  return new Block({\n    // eslint-disable-next-line object-shorthand\n    cid: /** @type {CID<T, Code, Alg, V>} */cid,\n    bytes,\n    value\n  });\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {object} options\n * @param {API.Link<T, Code, Alg, V>} options.cid\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg, V>>}\n */\nasync function create({\n  bytes,\n  cid,\n  hasher,\n  codec\n}) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"');\n  if (!hasher) throw new Error('Missing required argument \"hasher\"');\n  const value = codec.decode(bytes);\n  const hash = await hasher.digest(bytes);\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes');\n  }\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  });\n}\nexport { encode, decode, create, createUnsafe, Block };","map":{"version":3,"names":["bytes","binary","CID","API","readonly","enumerable","configurable","writable","linksWithin","path","value","Array","isArray","index","element","entries","elementPath","cid","asCID","join","links","source","base","Uint8Array","key","Object","treeWithin","tree","get","node","Error","slice","map","part","JSON","stringify","remaining","Block","constructor","asBlock","defineProperties","split","filter","Boolean","encode","codec","hasher","hash","digest","create","code","decode","createUnsafe","maybeValue","undefined","equals","multihash"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/multiformats@11.0.2/node_modules/multiformats/src/block.js"],"sourcesContent":["import { bytes as binary, CID } from './index.js'\n// Linter can see that API is used in types.\n// eslint-disable-next-line\nimport * as API from './interface.js'\n\nfunction readonly ({ enumerable = true, configurable = false } = {}) {\n  return { enumerable, configurable, writable: false }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<[string, CID]>}\n */\nfunction * linksWithin (path, value) {\n  if (value != null && typeof value === 'object') {\n    if (Array.isArray(value)) {\n      for (const [index, element] of value.entries()) {\n        const elementPath = [...path, index]\n        const cid = CID.asCID(element)\n        if (cid) {\n          yield [elementPath.join('/'), cid]\n        } else if (typeof element === 'object') {\n          yield * links(element, elementPath)\n        }\n      }\n    } else {\n      const cid = CID.asCID(value)\n      if (cid) {\n        yield [path.join('/'), cid]\n      } else {\n        yield * links(value, path)\n      }\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<[string, CID]>}\n */\nfunction * links (source, base) {\n  if (source == null || source instanceof Uint8Array) {\n    return\n  }\n  const cid = CID.asCID(source)\n  if (cid) {\n    yield [base.join('/'), cid]\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield * linksWithin(path, value)\n  }\n}\n\n/**\n * @param {[string|number, string]} path\n * @param {any} value\n * @returns {Iterable<string>}\n */\nfunction * treeWithin (path, value) {\n  if (Array.isArray(value)) {\n    for (const [index, element] of value.entries()) {\n      const elementPath = [...path, index]\n      yield elementPath.join('/')\n      if (typeof element === 'object' && !CID.asCID(element)) {\n        yield * tree(element, elementPath)\n      }\n    }\n  } else {\n    yield * tree(value, path)\n  }\n}\n\n/**\n * @template T\n * @param {T} source\n * @param {Array<string|number>} base\n * @returns {Iterable<string>}\n */\nfunction * tree (source, base) {\n  if (source == null || typeof source !== 'object') {\n    return\n  }\n  for (const [key, value] of Object.entries(source)) {\n    const path = /** @type {[string|number, string]} */ ([...base, key])\n    yield path.join('/')\n    if (value != null && !(value instanceof Uint8Array) && typeof value === 'object' && !CID.asCID(value)) {\n      yield * treeWithin(path, value)\n    }\n  }\n}\n\n/**\n *\n * @template T\n * @param {T} source\n * @param {string[]} path\n * @returns {API.BlockCursorView<unknown>}\n */\nfunction get (source, path) {\n  let node = /** @type {Record<string, any>} */(source)\n  for (const [index, key] of path.entries()) {\n    node = node[key]\n    if (node == null) {\n      throw new Error(`Object has no property at ${path.slice(0, index + 1).map(part => `[${JSON.stringify(part)}]`).join('')}`)\n    }\n    const cid = CID.asCID(node)\n    if (cid) {\n      return { value: cid, remaining: path.slice(index + 1).join('/') }\n    }\n  }\n  return { value: node }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} C - multicodec code corresponding to codec used to encode the block\n * @template {number} A - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @implements {API.BlockView<T, C, A, V>}\n */\nclass Block {\n  /**\n   * @param {object} options\n   * @param {CID<T, C, A, V>} options.cid\n   * @param {API.ByteView<T>} options.bytes\n   * @param {T} options.value\n   */\n  constructor ({ cid, bytes, value }) {\n    if (!cid || !bytes || typeof value === 'undefined') { throw new Error('Missing required argument') }\n\n    this.cid = cid\n    this.bytes = bytes\n    this.value = value\n    this.asBlock = this\n\n    // Mark all the properties immutable\n    Object.defineProperties(this, {\n      cid: readonly(),\n      bytes: readonly(),\n      value: readonly(),\n      asBlock: readonly()\n    })\n  }\n\n  links () {\n    return links(this.value, [])\n  }\n\n  tree () {\n    return tree(this.value, [])\n  }\n\n  /**\n   *\n   * @param {string} [path]\n   * @returns {API.BlockCursorView<unknown>}\n   */\n  get (path = '/') {\n    return get(this.value, path.split('/').filter(Boolean))\n  }\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {T} options.value\n * @param {API.BlockEncoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function encode ({ value, codec, hasher }) {\n  if (typeof value === 'undefined') throw new Error('Missing required argument \"value\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const bytes = codec.encode(value)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(\n    1,\n    codec.code,\n    hash\n  )\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @param {object} options\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg>>}\n */\nasync function decode ({ bytes, codec, hasher }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!codec || !hasher) throw new Error('Missing required argument: codec or hasher')\n\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  /** @type {CID<T, Code, Alg, 1>} */\n  const cid = CID.create(1, codec.code, hash)\n\n  return new Block({ value, bytes, cid })\n}\n\n/**\n * @typedef {object} RequiredCreateOptions\n * @property {CID} options.cid\n */\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {{ cid: API.Link<T, Code, Alg, V>, value:T, codec?: API.BlockDecoder<Code, T>, bytes: API.ByteView<T> }|{cid:API.Link<T, Code, Alg, V>, bytes:API.ByteView<T>, value?:void, codec:API.BlockDecoder<Code, T>}} options\n * @returns {API.BlockView<T, Code, Alg, V>}\n */\nfunction createUnsafe ({ bytes, cid, value: maybeValue, codec }) {\n  const value = maybeValue !== undefined\n    ? maybeValue\n    : (codec && codec.decode(bytes))\n\n  if (value === undefined) throw new Error('Missing required argument, must either provide \"value\" or \"codec\"')\n\n  return new Block({\n    // eslint-disable-next-line object-shorthand\n    cid: /** @type {CID<T, Code, Alg, V>} */ (cid),\n    bytes,\n    value\n  })\n}\n\n/**\n * @template {unknown} T - Logical type of the data encoded in the block\n * @template {number} Code - multicodec code corresponding to codec used to encode the block\n * @template {number} Alg - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template {API.Version} V - CID version\n * @param {object} options\n * @param {API.Link<T, Code, Alg, V>} options.cid\n * @param {API.ByteView<T>} options.bytes\n * @param {API.BlockDecoder<Code, T>} options.codec\n * @param {API.MultihashHasher<Alg>} options.hasher\n * @returns {Promise<API.BlockView<T, Code, Alg, V>>}\n */\nasync function create ({ bytes, cid, hasher, codec }) {\n  if (!bytes) throw new Error('Missing required argument \"bytes\"')\n  if (!hasher) throw new Error('Missing required argument \"hasher\"')\n  const value = codec.decode(bytes)\n  const hash = await hasher.digest(bytes)\n  if (!binary.equals(cid.multihash.bytes, hash.bytes)) {\n    throw new Error('CID hash does not match bytes')\n  }\n\n  return createUnsafe({\n    bytes,\n    cid,\n    value,\n    codec\n  })\n}\n\nexport { encode, decode, create, createUnsafe, Block }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}