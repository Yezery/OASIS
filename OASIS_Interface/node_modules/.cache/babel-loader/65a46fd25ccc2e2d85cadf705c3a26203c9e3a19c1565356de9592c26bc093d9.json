{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader,\n  $Writer = $protobuf.Writer,\n  $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\nexport const PeerRecord = $root.PeerRecord = (() => {\n  /**\n   * Properties of a PeerRecord.\n   * @exports IPeerRecord\n   * @interface IPeerRecord\n   * @property {Uint8Array|null} [peerId] PeerRecord peerId\n   * @property {number|null} [seq] PeerRecord seq\n   * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n   */\n\n  /**\n   * Constructs a new PeerRecord.\n   * @exports PeerRecord\n   * @classdesc Represents a PeerRecord.\n   * @implements IPeerRecord\n   * @constructor\n   * @param {IPeerRecord=} [p] Properties to set\n   */\n  function PeerRecord(p) {\n    this.addresses = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n\n  /**\n   * PeerRecord peerId.\n   * @member {Uint8Array} peerId\n   * @memberof PeerRecord\n   * @instance\n   */\n  PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n  /**\n   * PeerRecord seq.\n   * @member {number} seq\n   * @memberof PeerRecord\n   * @instance\n   */\n  PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n\n  /**\n   * PeerRecord addresses.\n   * @member {Array.<PeerRecord.IAddressInfo>} addresses\n   * @memberof PeerRecord\n   * @instance\n   */\n  PeerRecord.prototype.addresses = $util.emptyArray;\n\n  /**\n   * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n   * @function encode\n   * @memberof PeerRecord\n   * @static\n   * @param {IPeerRecord} m PeerRecord message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n  PeerRecord.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\")) w.uint32(10).bytes(m.peerId);\n    if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\")) w.uint32(16).uint64(m.seq);\n    if (m.addresses != null && m.addresses.length) {\n      for (var i = 0; i < m.addresses.length; ++i) $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n    }\n    return w;\n  };\n\n  /**\n   * Decodes a PeerRecord message from the specified reader or buffer.\n   * @function decode\n   * @memberof PeerRecord\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PeerRecord} PeerRecord\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n  PeerRecord.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n      m = new $root.PeerRecord();\n    while (r.pos < c) {\n      var t = r.uint32();\n      switch (t >>> 3) {\n        case 1:\n          m.peerId = r.bytes();\n          break;\n        case 2:\n          m.seq = r.uint64();\n          break;\n        case 3:\n          if (!(m.addresses && m.addresses.length)) m.addresses = [];\n          m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n          break;\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PeerRecord\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PeerRecord} PeerRecord\n   */\n  PeerRecord.fromObject = function fromObject(d) {\n    if (d instanceof $root.PeerRecord) return d;\n    var m = new $root.PeerRecord();\n    if (d.peerId != null) {\n      if (typeof d.peerId === \"string\") $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);else if (d.peerId.length) m.peerId = d.peerId;\n    }\n    if (d.seq != null) {\n      if ($util.Long) (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;else if (typeof d.seq === \"string\") m.seq = parseInt(d.seq, 10);else if (typeof d.seq === \"number\") m.seq = d.seq;else if (typeof d.seq === \"object\") m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n    }\n    if (d.addresses) {\n      if (!Array.isArray(d.addresses)) throw TypeError(\".PeerRecord.addresses: array expected\");\n      m.addresses = [];\n      for (var i = 0; i < d.addresses.length; ++i) {\n        if (typeof d.addresses[i] !== \"object\") throw TypeError(\".PeerRecord.addresses: object expected\");\n        m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n      }\n    }\n    return m;\n  };\n\n  /**\n   * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PeerRecord\n   * @static\n   * @param {PeerRecord} m PeerRecord\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n  PeerRecord.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n    if (o.arrays || o.defaults) {\n      d.addresses = [];\n    }\n    if (o.defaults) {\n      if (o.bytes === String) d.peerId = \"\";else {\n        d.peerId = [];\n        if (o.bytes !== Array) d.peerId = $util.newBuffer(d.peerId);\n      }\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.seq = o.longs === String ? \"0\" : 0;\n    }\n    if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n      d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n    }\n    if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n      if (typeof m.seq === \"number\") d.seq = o.longs === String ? String(m.seq) : m.seq;else d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n    }\n    if (m.addresses && m.addresses.length) {\n      d.addresses = [];\n      for (var j = 0; j < m.addresses.length; ++j) {\n        d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n      }\n    }\n    return d;\n  };\n\n  /**\n   * Converts this PeerRecord to JSON.\n   * @function toJSON\n   * @memberof PeerRecord\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n  PeerRecord.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n  PeerRecord.AddressInfo = function () {\n    /**\n     * Properties of an AddressInfo.\n     * @memberof PeerRecord\n     * @interface IAddressInfo\n     * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n     */\n\n    /**\n     * Constructs a new AddressInfo.\n     * @memberof PeerRecord\n     * @classdesc Represents an AddressInfo.\n     * @implements IAddressInfo\n     * @constructor\n     * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n     */\n    function AddressInfo(p) {\n      if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * AddressInfo multiaddr.\n     * @member {Uint8Array} multiaddr\n     * @memberof PeerRecord.AddressInfo\n     * @instance\n     */\n    AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n    /**\n     * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    AddressInfo.encode = function encode(m, w) {\n      if (!w) w = $Writer.create();\n      if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\")) w.uint32(10).bytes(m.multiaddr);\n      return w;\n    };\n\n    /**\n     * Decodes an AddressInfo message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord.AddressInfo} AddressInfo\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    AddressInfo.decode = function decode(r, l) {\n      if (!(r instanceof $Reader)) r = $Reader.create(r);\n      var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.PeerRecord.AddressInfo();\n      while (r.pos < c) {\n        var t = r.uint32();\n        switch (t >>> 3) {\n          case 1:\n            m.multiaddr = r.bytes();\n            break;\n          default:\n            r.skipType(t & 7);\n            break;\n        }\n      }\n      return m;\n    };\n\n    /**\n     * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord.AddressInfo} AddressInfo\n     */\n    AddressInfo.fromObject = function fromObject(d) {\n      if (d instanceof $root.PeerRecord.AddressInfo) return d;\n      var m = new $root.PeerRecord.AddressInfo();\n      if (d.multiaddr != null) {\n        if (typeof d.multiaddr === \"string\") $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);else if (d.multiaddr.length) m.multiaddr = d.multiaddr;\n      }\n      return m;\n    };\n\n    /**\n     * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord.AddressInfo\n     * @static\n     * @param {PeerRecord.AddressInfo} m AddressInfo\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    AddressInfo.toObject = function toObject(m, o) {\n      if (!o) o = {};\n      var d = {};\n      if (o.defaults) {\n        if (o.bytes === String) d.multiaddr = \"\";else {\n          d.multiaddr = [];\n          if (o.bytes !== Array) d.multiaddr = $util.newBuffer(d.multiaddr);\n        }\n      }\n      if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n        d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n      }\n      return d;\n    };\n\n    /**\n     * Converts this AddressInfo to JSON.\n     * @function toJSON\n     * @memberof PeerRecord.AddressInfo\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    AddressInfo.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    return AddressInfo;\n  }();\n  return PeerRecord;\n})();\nexport { $root as default };","map":{"version":3,"names":["$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","PeerRecord","p","addresses","ks","Object","keys","i","length","prototype","peerId","newBuffer","seq","Long","fromBits","emptyArray","encode","m","w","create","hasOwnProperty","call","uint32","bytes","uint64","AddressInfo","fork","ldelim","decode","r","l","c","undefined","len","pos","t","push","skipType","fromObject","d","base64","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","Array","isArray","TypeError","toObject","o","arrays","defaults","String","n","longs","toString","Number","slice","j","toJSON","constructor","toJSONOptions","multiaddr","default"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-12/pb/peer-record.js"],"sourcesContent":["/*eslint-disable*/\nimport $protobuf from \"protobufjs/minimal.js\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const PeerRecord = $root.PeerRecord = (() => {\n\n    /**\n     * Properties of a PeerRecord.\n     * @exports IPeerRecord\n     * @interface IPeerRecord\n     * @property {Uint8Array|null} [peerId] PeerRecord peerId\n     * @property {number|null} [seq] PeerRecord seq\n     * @property {Array.<PeerRecord.IAddressInfo>|null} [addresses] PeerRecord addresses\n     */\n\n    /**\n     * Constructs a new PeerRecord.\n     * @exports PeerRecord\n     * @classdesc Represents a PeerRecord.\n     * @implements IPeerRecord\n     * @constructor\n     * @param {IPeerRecord=} [p] Properties to set\n     */\n    function PeerRecord(p) {\n        this.addresses = [];\n        if (p)\n            for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                if (p[ks[i]] != null)\n                    this[ks[i]] = p[ks[i]];\n    }\n\n    /**\n     * PeerRecord peerId.\n     * @member {Uint8Array} peerId\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.peerId = $util.newBuffer([]);\n\n    /**\n     * PeerRecord seq.\n     * @member {number} seq\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.seq = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PeerRecord addresses.\n     * @member {Array.<PeerRecord.IAddressInfo>} addresses\n     * @memberof PeerRecord\n     * @instance\n     */\n    PeerRecord.prototype.addresses = $util.emptyArray;\n\n    /**\n     * Encodes the specified PeerRecord message. Does not implicitly {@link PeerRecord.verify|verify} messages.\n     * @function encode\n     * @memberof PeerRecord\n     * @static\n     * @param {IPeerRecord} m PeerRecord message or plain object to encode\n     * @param {$protobuf.Writer} [w] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PeerRecord.encode = function encode(m, w) {\n        if (!w)\n            w = $Writer.create();\n        if (m.peerId != null && Object.hasOwnProperty.call(m, \"peerId\"))\n            w.uint32(10).bytes(m.peerId);\n        if (m.seq != null && Object.hasOwnProperty.call(m, \"seq\"))\n            w.uint32(16).uint64(m.seq);\n        if (m.addresses != null && m.addresses.length) {\n            for (var i = 0; i < m.addresses.length; ++i)\n                $root.PeerRecord.AddressInfo.encode(m.addresses[i], w.uint32(26).fork()).ldelim();\n        }\n        return w;\n    };\n\n    /**\n     * Decodes a PeerRecord message from the specified reader or buffer.\n     * @function decode\n     * @memberof PeerRecord\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n     * @param {number} [l] Message length if known beforehand\n     * @returns {PeerRecord} PeerRecord\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PeerRecord.decode = function decode(r, l) {\n        if (!(r instanceof $Reader))\n            r = $Reader.create(r);\n        var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord();\n        while (r.pos < c) {\n            var t = r.uint32();\n            switch (t >>> 3) {\n            case 1:\n                m.peerId = r.bytes();\n                break;\n            case 2:\n                m.seq = r.uint64();\n                break;\n            case 3:\n                if (!(m.addresses && m.addresses.length))\n                    m.addresses = [];\n                m.addresses.push($root.PeerRecord.AddressInfo.decode(r, r.uint32()));\n                break;\n            default:\n                r.skipType(t & 7);\n                break;\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a PeerRecord message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PeerRecord\n     * @static\n     * @param {Object.<string,*>} d Plain object\n     * @returns {PeerRecord} PeerRecord\n     */\n    PeerRecord.fromObject = function fromObject(d) {\n        if (d instanceof $root.PeerRecord)\n            return d;\n        var m = new $root.PeerRecord();\n        if (d.peerId != null) {\n            if (typeof d.peerId === \"string\")\n                $util.base64.decode(d.peerId, m.peerId = $util.newBuffer($util.base64.length(d.peerId)), 0);\n            else if (d.peerId.length)\n                m.peerId = d.peerId;\n        }\n        if (d.seq != null) {\n            if ($util.Long)\n                (m.seq = $util.Long.fromValue(d.seq)).unsigned = true;\n            else if (typeof d.seq === \"string\")\n                m.seq = parseInt(d.seq, 10);\n            else if (typeof d.seq === \"number\")\n                m.seq = d.seq;\n            else if (typeof d.seq === \"object\")\n                m.seq = new $util.LongBits(d.seq.low >>> 0, d.seq.high >>> 0).toNumber(true);\n        }\n        if (d.addresses) {\n            if (!Array.isArray(d.addresses))\n                throw TypeError(\".PeerRecord.addresses: array expected\");\n            m.addresses = [];\n            for (var i = 0; i < d.addresses.length; ++i) {\n                if (typeof d.addresses[i] !== \"object\")\n                    throw TypeError(\".PeerRecord.addresses: object expected\");\n                m.addresses[i] = $root.PeerRecord.AddressInfo.fromObject(d.addresses[i]);\n            }\n        }\n        return m;\n    };\n\n    /**\n     * Creates a plain object from a PeerRecord message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PeerRecord\n     * @static\n     * @param {PeerRecord} m PeerRecord\n     * @param {$protobuf.IConversionOptions} [o] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PeerRecord.toObject = function toObject(m, o) {\n        if (!o)\n            o = {};\n        var d = {};\n        if (o.arrays || o.defaults) {\n            d.addresses = [];\n        }\n        if (o.defaults) {\n            if (o.bytes === String)\n                d.peerId = \"\";\n            else {\n                d.peerId = [];\n                if (o.bytes !== Array)\n                    d.peerId = $util.newBuffer(d.peerId);\n            }\n            if ($util.Long) {\n                var n = new $util.Long(0, 0, true);\n                d.seq = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n            } else\n                d.seq = o.longs === String ? \"0\" : 0;\n        }\n        if (m.peerId != null && m.hasOwnProperty(\"peerId\")) {\n            d.peerId = o.bytes === String ? $util.base64.encode(m.peerId, 0, m.peerId.length) : o.bytes === Array ? Array.prototype.slice.call(m.peerId) : m.peerId;\n        }\n        if (m.seq != null && m.hasOwnProperty(\"seq\")) {\n            if (typeof m.seq === \"number\")\n                d.seq = o.longs === String ? String(m.seq) : m.seq;\n            else\n                d.seq = o.longs === String ? $util.Long.prototype.toString.call(m.seq) : o.longs === Number ? new $util.LongBits(m.seq.low >>> 0, m.seq.high >>> 0).toNumber(true) : m.seq;\n        }\n        if (m.addresses && m.addresses.length) {\n            d.addresses = [];\n            for (var j = 0; j < m.addresses.length; ++j) {\n                d.addresses[j] = $root.PeerRecord.AddressInfo.toObject(m.addresses[j], o);\n            }\n        }\n        return d;\n    };\n\n    /**\n     * Converts this PeerRecord to JSON.\n     * @function toJSON\n     * @memberof PeerRecord\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PeerRecord.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    PeerRecord.AddressInfo = (function() {\n\n        /**\n         * Properties of an AddressInfo.\n         * @memberof PeerRecord\n         * @interface IAddressInfo\n         * @property {Uint8Array|null} [multiaddr] AddressInfo multiaddr\n         */\n\n        /**\n         * Constructs a new AddressInfo.\n         * @memberof PeerRecord\n         * @classdesc Represents an AddressInfo.\n         * @implements IAddressInfo\n         * @constructor\n         * @param {PeerRecord.IAddressInfo=} [p] Properties to set\n         */\n        function AddressInfo(p) {\n            if (p)\n                for (var ks = Object.keys(p), i = 0; i < ks.length; ++i)\n                    if (p[ks[i]] != null)\n                        this[ks[i]] = p[ks[i]];\n        }\n\n        /**\n         * AddressInfo multiaddr.\n         * @member {Uint8Array} multiaddr\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         */\n        AddressInfo.prototype.multiaddr = $util.newBuffer([]);\n\n        /**\n         * Encodes the specified AddressInfo message. Does not implicitly {@link PeerRecord.AddressInfo.verify|verify} messages.\n         * @function encode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.IAddressInfo} m AddressInfo message or plain object to encode\n         * @param {$protobuf.Writer} [w] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AddressInfo.encode = function encode(m, w) {\n            if (!w)\n                w = $Writer.create();\n            if (m.multiaddr != null && Object.hasOwnProperty.call(m, \"multiaddr\"))\n                w.uint32(10).bytes(m.multiaddr);\n            return w;\n        };\n\n        /**\n         * Decodes an AddressInfo message from the specified reader or buffer.\n         * @function decode\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n         * @param {number} [l] Message length if known beforehand\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AddressInfo.decode = function decode(r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new $root.PeerRecord.AddressInfo();\n            while (r.pos < c) {\n                var t = r.uint32();\n                switch (t >>> 3) {\n                case 1:\n                    m.multiaddr = r.bytes();\n                    break;\n                default:\n                    r.skipType(t & 7);\n                    break;\n                }\n            }\n            return m;\n        };\n\n        /**\n         * Creates an AddressInfo message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {Object.<string,*>} d Plain object\n         * @returns {PeerRecord.AddressInfo} AddressInfo\n         */\n        AddressInfo.fromObject = function fromObject(d) {\n            if (d instanceof $root.PeerRecord.AddressInfo)\n                return d;\n            var m = new $root.PeerRecord.AddressInfo();\n            if (d.multiaddr != null) {\n                if (typeof d.multiaddr === \"string\")\n                    $util.base64.decode(d.multiaddr, m.multiaddr = $util.newBuffer($util.base64.length(d.multiaddr)), 0);\n                else if (d.multiaddr.length)\n                    m.multiaddr = d.multiaddr;\n            }\n            return m;\n        };\n\n        /**\n         * Creates a plain object from an AddressInfo message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof PeerRecord.AddressInfo\n         * @static\n         * @param {PeerRecord.AddressInfo} m AddressInfo\n         * @param {$protobuf.IConversionOptions} [o] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AddressInfo.toObject = function toObject(m, o) {\n            if (!o)\n                o = {};\n            var d = {};\n            if (o.defaults) {\n                if (o.bytes === String)\n                    d.multiaddr = \"\";\n                else {\n                    d.multiaddr = [];\n                    if (o.bytes !== Array)\n                        d.multiaddr = $util.newBuffer(d.multiaddr);\n                }\n            }\n            if (m.multiaddr != null && m.hasOwnProperty(\"multiaddr\")) {\n                d.multiaddr = o.bytes === String ? $util.base64.encode(m.multiaddr, 0, m.multiaddr.length) : o.bytes === Array ? Array.prototype.slice.call(m.multiaddr) : m.multiaddr;\n            }\n            return d;\n        };\n\n        /**\n         * Converts this AddressInfo to JSON.\n         * @function toJSON\n         * @memberof PeerRecord.AddressInfo\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AddressInfo.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return AddressInfo;\n    })();\n\n    return PeerRecord;\n})();\n\nexport { $root as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}