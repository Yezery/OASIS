{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport { isBytes, isReadableStream, isBlob } from './utils.js';\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent(input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input);\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n\n    /** @type {any} value */\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0));\n    }\n    peekable.push(value);\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n  return uint8ArrayFromString(chunk.toString());\n}","map":{"version":3,"names":["errCode","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","thing","normaliseContent","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","Uint8Array","push","Number","isInteger","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/files/normalise-content.js"],"sourcesContent":["import errCode from 'err-code'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport blobToIt from 'blob-to-it'\nimport itPeekable from 'it-peekable'\nimport all from 'it-all'\nimport map from 'it-map'\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js'\n\n/**\n * @template T\n * @param {T} thing\n */\nasync function * toAsyncIterable (thing) {\n  yield thing\n}\n\n/**\n * @param {import('ipfs-core-types/src/utils').ToContent} input\n */\nexport async function normaliseContent (input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input))\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()))\n  }\n\n  // Blob\n  if (isBlob(input)) {\n    return blobToIt(input)\n  }\n\n  // Browser stream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // (Async)Iterator<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input)\n\n    /** @type {any} value */\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      return toAsyncIterable(new Uint8Array(0))\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)))\n    }\n\n    // (Async)Iterable<Bytes|String>\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes)\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n */\nfunction toBytes (chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk)\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk)\n  }\n\n  return uint8ArrayFromString(chunk.toString())\n}\n"],"mappings":";;;;AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,OAAOC,iBAAiB,MAAM,8BAA8B;AAC5D,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,aAAa;AACpC,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,GAAG,MAAM,QAAQ;AACxB,SACEC,OAAO,EACPC,gBAAgB,EAChBC,MAAM,QACD,YAAY;;AAEnB;AACA;AACA;AACA;AACA,gBAAiBC,eAAeA,CAAEC,KAAK,EAAE;EACvC,MAAMA,KAAK;AACb;;AAEA;AACA;AACA;AACA,OAAO,eAAeC,gBAAgBA,CAAEC,KAAK,EAAE;EAC7C;EACA,IAAIN,OAAO,CAACM,KAAK,CAAC,EAAE;IAClB,OAAOH,eAAe,CAACI,OAAO,CAACD,KAAK,CAAC,CAAC;EACxC;EAEA,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYE,MAAM,EAAE;IACxD,OAAOL,eAAe,CAACI,OAAO,CAACD,KAAK,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnD;;EAEA;EACA,IAAIP,MAAM,CAACI,KAAK,CAAC,EAAE;IACjB,OAAOV,QAAQ,CAACU,KAAK,CAAC;EACxB;;EAEA;EACA,IAAIL,gBAAgB,CAACK,KAAK,CAAC,EAAE;IAC3BA,KAAK,GAAGX,iBAAiB,CAACW,KAAK,CAAC;EAClC;;EAEA;EACA,IAAII,MAAM,CAACC,QAAQ,IAAIL,KAAK,IAAII,MAAM,CAACE,aAAa,IAAIN,KAAK,EAAE;IAC7D;IACA,MAAMO,QAAQ,GAAGhB,UAAU,CAACS,KAAK,CAAC;;IAElC;IACA,MAAM;MAAEQ,KAAK;MAAEC;IAAK,CAAC,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAE7C,IAAID,IAAI,EAAE;MACR;MACA,OAAOZ,eAAe,CAAC,IAAIc,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3C;IAEAJ,QAAQ,CAACK,IAAI,CAACJ,KAAK,CAAC;;IAEpB;IACA,IAAIK,MAAM,CAACC,SAAS,CAACN,KAAK,CAAC,EAAE;MAC3B,OAAOX,eAAe,CAACc,UAAU,CAACI,IAAI,CAAC,MAAMvB,GAAG,CAACe,QAAQ,CAAC,CAAC,CAAC;IAC9D;;IAEA;IACA,IAAIb,OAAO,CAACc,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,YAAYN,MAAM,EAAE;MAC1E,OAAOT,GAAG,CAACc,QAAQ,EAAEN,OAAO,CAAC;IAC/B;EACF;EAEA,MAAMf,OAAO,CAAC,IAAI8B,KAAK,CAAE,qBAAoBhB,KAAM,EAAC,CAAC,EAAE,sBAAsB,CAAC;AAChF;;AAEA;AACA;AACA;AACA,SAASC,OAAOA,CAAEgB,KAAK,EAAE;EACvB,IAAIA,KAAK,YAAYN,UAAU,EAAE;IAC/B,OAAOM,KAAK;EACd;EAEA,IAAIC,WAAW,CAACC,MAAM,CAACF,KAAK,CAAC,EAAE;IAC7B,OAAO,IAAIN,UAAU,CAACM,KAAK,CAACG,MAAM,EAAEH,KAAK,CAACI,UAAU,EAAEJ,KAAK,CAACK,UAAU,CAAC;EACzE;EAEA,IAAIL,KAAK,YAAYC,WAAW,EAAE;IAChC,OAAO,IAAIP,UAAU,CAACM,KAAK,CAAC;EAC9B;EAEA,IAAIM,KAAK,CAACC,OAAO,CAACP,KAAK,CAAC,EAAE;IACxB,OAAON,UAAU,CAACI,IAAI,CAACE,KAAK,CAAC;EAC/B;EAEA,OAAO7B,oBAAoB,CAAC6B,KAAK,CAACd,QAAQ,CAAC,CAAC,CAAC;AAC/C"},"metadata":{},"sourceType":"module","externalDependencies":[]}