{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst log = logger('ipfs-http-client:pubsub:subscribe');\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure(api => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe(topic, handler, options = {}) {\n      // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal);\n\n      /** @type {(value?: any) => void} */\n      let done;\n      /** @type {(error: Error) => void} */\n      let fail;\n      const result = new Promise((resolve, reject) => {\n        done = resolve;\n        fail = reject;\n      });\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000);\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      }).catch(err => {\n        // Initial subscribe fail, ensure we clean up\n        subsTracker.unsubscribe(topic, handler);\n        fail(err);\n      }).then(response => {\n        clearTimeout(ffWorkaround);\n        if (!response) {\n          // if there was no response, the subscribe failed\n          return;\n        }\n        readMessages(response, {\n          onMessage: message => {\n            if (!handler) {\n              return;\n            }\n            if (typeof handler === 'function') {\n              handler(message);\n              return;\n            }\n            if (typeof handler.handleEvent === 'function') {\n              handler.handleEvent(message);\n            }\n          },\n          onEnd: () => subsTracker.unsubscribe(topic, handler),\n          onError: options.onError\n        });\n        done();\n      });\n      return result;\n    }\n    return subscribe;\n  })(options);\n};\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages(response, {\n  onMessage,\n  onEnd,\n  onError\n}) {\n  onError = onError || log;\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue;\n        }\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          });\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          });\n        }\n      } catch ( /** @type {any} */err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`;\n        onError(err, false, msg); // Not fatal\n      }\n    }\n  } catch ( /** @type {any} */err) {\n    if (!isAbortError(err)) {\n      onError(err, true); // Fatal\n    }\n  } finally {\n    onEnd();\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true;\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":{"version":3,"names":["logger","configure","toUrlSearchParams","textToUrlSafeRpc","rpcToText","rpcToBytes","rpcToBigInt","peerIdFromString","log","createSubscribe","options","subsTracker","api","subscribe","topic","handler","signal","done","fail","result","Promise","resolve","reject","ffWorkaround","setTimeout","post","searchParams","arg","headers","catch","err","unsubscribe","then","response","clearTimeout","readMessages","onMessage","message","handleEvent","onEnd","onError","msg","ndjson","from","seqno","type","data","sequenceNumber","topicIDs","key","signature","isAbortError","error","name"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/pubsub/subscribe.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { textToUrlSafeRpc, rpcToText, rpcToBytes, rpcToBigInt } from '../lib/http-rpc-wire-format.js'\nimport { peerIdFromString } from '@libp2p/peer-id'\nconst log = logger('ipfs-http-client:pubsub:subscribe')\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('@libp2p/interface-pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker').SubscriptionTracker} subsTracker\n */\nexport const createSubscribe = (options, subsTracker) => {\n  return configure((api) => {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    async function subscribe (topic, handler, options = {}) { // eslint-disable-line require-await\n      options.signal = subsTracker.subscribe(topic, handler, options.signal)\n\n      /** @type {(value?: any) => void} */\n      let done\n      /** @type {(error: Error) => void} */\n      let fail\n\n      const result = new Promise((resolve, reject) => {\n        done = resolve\n        fail = reject\n      })\n\n      // In Firefox, the initial call to fetch does not resolve until some data\n      // is received. If this doesn't happen within 1 second assume success\n      const ffWorkaround = setTimeout(() => done(), 1000)\n\n      // Do this async to not block Firefox\n      api.post('pubsub/sub', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          arg: textToUrlSafeRpc(topic),\n          ...options\n        }),\n        headers: options.headers\n      })\n        .catch((err) => {\n          // Initial subscribe fail, ensure we clean up\n          subsTracker.unsubscribe(topic, handler)\n\n          fail(err)\n        })\n        .then((response) => {\n          clearTimeout(ffWorkaround)\n\n          if (!response) {\n            // if there was no response, the subscribe failed\n            return\n          }\n\n          readMessages(response, {\n            onMessage: (message) => {\n              if (!handler) {\n                return\n              }\n\n              if (typeof handler === 'function') {\n                handler(message)\n                return\n              }\n\n              if (typeof handler.handleEvent === 'function') {\n                handler.handleEvent(message)\n              }\n            },\n            onEnd: () => subsTracker.unsubscribe(topic, handler),\n            onError: options.onError\n          })\n\n          done()\n        })\n\n      return result\n    }\n    return subscribe\n  })(options)\n}\n\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\nasync function readMessages (response, { onMessage, onEnd, onError }) {\n  onError = onError || log\n\n  try {\n    for await (const msg of response.ndjson()) {\n      try {\n        if (!msg.from) {\n          continue\n        }\n\n        if (msg.from != null && msg.seqno != null) {\n          onMessage({\n            type: 'signed',\n            from: peerIdFromString(msg.from),\n            data: rpcToBytes(msg.data),\n            sequenceNumber: rpcToBigInt(msg.seqno),\n            topic: rpcToText(msg.topicIDs[0]),\n            key: rpcToBytes(msg.key ?? 'u'),\n            signature: rpcToBytes(msg.signature ?? 'u')\n          })\n        } else {\n          onMessage({\n            type: 'unsigned',\n            data: rpcToBytes(msg.data),\n            topic: rpcToText(msg.topicIDs[0])\n          })\n        }\n      } catch (/** @type {any} */ err) {\n        err.message = `Failed to parse pubsub message: ${err.message}`\n        onError(err, false, msg) // Not fatal\n      }\n    }\n  } catch (/** @type {any} */ err) {\n    if (!isAbortError(err)) {\n      onError(err, true) // Fatal\n    }\n  } finally {\n    onEnd()\n  }\n}\n\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\nconst isAbortError = error => {\n  switch (error.type) {\n    case 'aborted':\n      return true\n    // It is `abort` in Electron instead of `aborted`\n    case 'abort':\n      return true\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError'\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}