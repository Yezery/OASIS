{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(name, op, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return ({\n    inputs,\n    attrs,\n    backend\n  }) => {\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"names":["util","assertNotComplex","unaryKernelFunc","name","op","dtype","inputs","attrs","backend","x","Error","cpuBackend","values","data","get","dataId","xSize","sizeFromShape","shape","$dtype","newValues","getArrayFromDType","i","makeTensorInfo","unaryKernelFuncFromImpl","unaryImpl"],"sources":["../../../../../../tfjs-backend-cpu/src/utils/unary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAuDA,IAAI,QAAO,uBAAuB;AAGzF,SAAQC,gBAAgB,QAAO,aAAa;AAI5C;;;;;;;;AAQA,OAAM,SAAUC,eAAeA,CAC3BC,IAAY,EAAEC,EAAwB,EAAEC,KAAgB;EAC1D,OAAO,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IAClC,MAAM;MAACC;IAAC,CAAC,GAAGH,MAAqB;IACjCL,gBAAgB,CAACQ,CAAC,EAAEN,IAAI,CAAC;IACzB,IAAIM,CAAC,CAACJ,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,QAAQ,EAAE;MAC9C,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;;IAGzE,MAAMC,UAAU,GAAGH,OAAyB;IAC5C,MAAMI,MAAM,GAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAACL,CAAC,CAACM,MAAM,CAAC,CAACH,MAAoB;IACjE,MAAMI,KAAK,GAAGhB,IAAI,CAACiB,aAAa,CAACR,CAAC,CAACS,KAAK,CAAC;IACzC,MAAMC,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAAK;IAC/B,MAAMe,SAAS,GAAGpB,IAAI,CAACqB,iBAAiB,CAACF,MAAM,EAAEH,KAAK,CAAC;IACvD,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,KAAK,EAAE,EAAEM,CAAC,EAAE;MAC9BF,SAAS,CAACE,CAAC,CAAC,GAAGlB,EAAE,CAACQ,MAAM,CAACU,CAAC,CAAC,EAAEf,KAAK,CAAC;;IAErC,OAAOI,UAAU,CAACY,cAAc,CAACd,CAAC,CAACS,KAAK,EAAEC,MAAM,EAAEC,SAAS,CAAC;EAC9D,CAAC;AACH;AAEA;;;;;;;;;AASA,OAAM,SAAUI,uBAAuBA,CACnCrB,IAAY,EAAEsB,SAA0B,EAAEpB,KAAgB;EAC5D,OAAO,CAAC;IAACC,MAAM;IAAEC,KAAK;IAAEC;EAAO,CAAC,KAAI;IAClC,MAAM;MAACC;IAAC,CAAC,GAAGH,MAAqB;IACjCL,gBAAgB,CAACQ,CAAC,EAAEN,IAAI,CAAC;IACzB,IAAIM,CAAC,CAACJ,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,QAAQ,EAAE;MAC9C,MAAM,IAAIK,KAAK,CAAC,sDAAsD,CAAC;;IAGzE,MAAMC,UAAU,GAAGH,OAAyB;IAC5C,MAAMI,MAAM,GAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAACL,CAAC,CAACM,MAAM,CAAC,CAACH,MAAoB;IACjE,MAAMO,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAAK;IAC/B,MAAMe,SAAS,GAAGK,SAAS,CAACb,MAAM,EAAEO,MAAM,EAAEZ,KAAK,CAAC;IAClD,OAAOI,UAAU,CAACY,cAAc,CAACd,CAAC,CAACS,KAAK,EAAEC,MAAM,EAAEC,SAAS,CAAC;EAC9D,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}