{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers({\n  network\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers(options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    if (options.verbose) {\n      const peers = [];\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        };\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = []; // TODO: get this from libp2p\n        }\n\n        peers.push(peer);\n      }\n      return peers;\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map();\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      };\n      peers.set(connection.remotePeer.toString(), peer);\n    }\n    return Array.from(peers.values());\n  }\n  return withTimeoutOption(peers);\n}","map":{"version":3,"names":["withTimeoutOption","createPeers","network","peers","options","libp2p","use","verbose","connection","getConnections","peer","addr","remoteAddr","remotePeer","direction","stat","muxer","multiplexer","latency","streams","push","Map","set","toString","Array","from","values"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/swarm/peers.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (options.verbose) {\n      const peers = []\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n\n      return peers\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map()\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      }\n\n      peers.set(connection.remotePeer.toString(), peer)\n    }\n\n    return Array.from(peers.values())\n  }\n\n  return withTimeoutOption(peers)\n}\n"],"mappings":";AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAE;EAAEC;AAAQ,CAAC,EAAE;EACxC;AACF;AACA;EACE,eAAeC,KAAKA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAClC,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAMH,OAAO,CAACI,GAAG,CAACF,OAAO,CAAC;IAE7C,IAAIA,OAAO,CAACG,OAAO,EAAE;MACnB,MAAMJ,KAAK,GAAG,EAAE;MAChB,KAAK,MAAMK,UAAU,IAAIH,MAAM,CAACI,cAAc,CAAC,CAAC,EAAE;QAChD;QACA,MAAMC,IAAI,GAAG;UACXC,IAAI,EAAEH,UAAU,CAACI,UAAU;UAC3BF,IAAI,EAAEF,UAAU,CAACK;QACnB,CAAC;QAED,IAAIT,OAAO,CAACG,OAAO,IAAIH,OAAO,CAACU,SAAS,EAAE;UACxCJ,IAAI,CAACI,SAAS,GAAGN,UAAU,CAACO,IAAI,CAACD,SAAS;QAC5C;QAEA,IAAIV,OAAO,CAACG,OAAO,EAAE;UACnBG,IAAI,CAACM,KAAK,GAAGR,UAAU,CAACO,IAAI,CAACE,WAAW;UACxCP,IAAI,CAACQ,OAAO,GAAG,KAAK;UACpBR,IAAI,CAACS,OAAO,GAAG,EAAE,EAAC;QACpB;;QAEAhB,KAAK,CAACiB,IAAI,CAACV,IAAI,CAAC;MAClB;MAEA,OAAOP,KAAK;IACd;;IAEA;IACA,MAAMA,KAAK,GAAG,IAAIkB,GAAG,CAAC,CAAC;IAEvB,KAAK,MAAMb,UAAU,IAAIH,MAAM,CAACI,cAAc,CAAC,CAAC,EAAE;MAChD;MACA,MAAMC,IAAI,GAAG;QACXC,IAAI,EAAEH,UAAU,CAACI,UAAU;QAC3BF,IAAI,EAAEF,UAAU,CAACK;MACnB,CAAC;MAEDV,KAAK,CAACmB,GAAG,CAACd,UAAU,CAACK,UAAU,CAACU,QAAQ,CAAC,CAAC,EAAEb,IAAI,CAAC;IACnD;IAEA,OAAOc,KAAK,CAACC,IAAI,CAACtB,KAAK,CAACuB,MAAM,CAAC,CAAC,CAAC;EACnC;EAEA,OAAO1B,iBAAiB,CAACG,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}