{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;\n    if (inputParam.type === 'tensor') {\n      return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n      return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ? data[0] : util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n  const [nodeName, index] = parseNodeName(name);\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(name, tensorsMap, context) {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(inputName, context) {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index, outputName];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\nexport function parseNodeName(name) {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\nexport function split(arr, size) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(node, tensorMap, context) {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = pad[i * 2];\n      explicitPadding[i][1] = pad[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor) {\n  return tensor.kept ? tensor : clone(tensor);\n}","map":{"version":3,"names":["clone","util","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","inputIndexStart","undefined","start","end","inputIndexEnd","type","getTensor","inputNames","inputs","slice","map","name","tensor","data","dataSync","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","nodeName","index","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","inputName","outputName","parts","split","length","Number","arr","size","res","i","push","getPadding","pad","explicitPadding","cloneTensor","kept"],"sources":["../../../../../../../tfjs-converter/src/operations/executors/utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number, string] {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index, outputName\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number, string] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}