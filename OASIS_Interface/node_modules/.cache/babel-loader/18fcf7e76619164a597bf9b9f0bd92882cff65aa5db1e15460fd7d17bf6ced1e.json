{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport mergeOpts from 'merge-options';\nimport { isTest } from 'ipfs-utils/src/env.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { initAssets } from 'ipfs-core-config/init-assets';\nimport { AlreadyInitializedError } from '../errors.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createDns } from './dns.js';\nimport { createIsOnline } from './is-online.js';\nimport { createResolve } from './resolve.js';\nimport { PinAPI } from './pin/index.js';\nimport { IPNSAPI } from './ipns.js';\nimport { NameAPI } from './name/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createLocal } from './refs/local.js';\nimport { BitswapAPI } from './bitswap/index.js';\nimport { BootstrapAPI } from './bootstrap/index.js';\nimport { BlockAPI } from './block/index.js';\nimport { RootAPI } from './root.js';\nimport { createVersion } from './version.js';\nimport { createId } from './id.js';\nimport { createConfig } from './config/index.js';\nimport { DagAPI } from './dag/index.js';\nimport { createPreloader } from '../preload.js';\nimport { createMfsPreloader } from '../mfs-preload.js';\nimport { createFiles } from './files/index.js';\nimport { KeyAPI } from './key/index.js';\nimport { ObjectAPI } from './object/index.js';\nimport { RepoAPI } from './repo/index.js';\nimport { StatsAPI } from './stats/index.js';\nimport { Storage } from './storage.js';\nimport { Network } from './network.js';\nimport { Service } from '../utils/service.js';\nimport { SwarmAPI } from './swarm/index.js';\nimport { createPing } from './ping.js';\nimport { createDht } from './dht.js';\nimport { createPubsub } from './pubsub.js';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport { Multibases } from 'ipfs-core-utils/multibases';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs');\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000;\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor({\n    print,\n    storage,\n    codecs,\n    options\n  }) {\n    const {\n      peerId,\n      repo,\n      keychain\n    } = storage;\n    const network = Service.create(Network);\n    const preload = createPreloader(options.preload);\n    const dns = createDns();\n    const isOnline = createIsOnline({\n      network\n    });\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options);\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new PinAPI({\n      repo,\n      codecs\n    });\n    const block = new BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload,\n      repo\n    });\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    });\n    const resolve = createResolve({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload\n    });\n    const refs = Object.assign(createRefs({\n      repo,\n      codecs,\n      resolve,\n      preload\n    }), {\n      local: createLocal({\n        repo: storage.repo\n      })\n    });\n    const {\n      add,\n      addAll,\n      cat,\n      get,\n      ls\n    } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    });\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    });\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    });\n    this.dht = createDht({\n      network,\n      repo,\n      peerId\n    });\n    this.pubsub = createPubsub({\n      network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createId({\n      network,\n      peerId\n    });\n    this.version = createVersion({\n      repo\n    });\n    this.bitswap = new BitswapAPI({\n      network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo\n    });\n    this.config = createConfig({\n      repo\n    });\n    this.ping = createPing({\n      network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain\n    });\n    this.object = new ObjectAPI({\n      preload,\n      codecs,\n      repo\n    });\n    this.repo = new RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo,\n      network\n    });\n    this.swarm = new SwarmAPI({\n      network\n    });\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n    });\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n    const notImplementedIter = async function* () {\n      throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n    }; // eslint-disable-line require-yield\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init() {\n    // eslint-disable-line require-await\n    throw new AlreadyInitializedError();\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async ipfs => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({\n      type: 'directory'\n    }).marshal(),\n    Links: []\n  });\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n\n/**\n * @param {Options} options\n */\nexport async function create(options = {}) {\n  options = mergeOptions(getDefaultOptions(), options);\n  const initOptions = options.init || {};\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log;\n  log('creating repo');\n  const storage = await Storage.start(print, multicodecs, options);\n  log('getting repo config');\n  const config = await storage.repo.config.getAll();\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: {\n      ...options,\n      config\n    }\n  });\n  log('starting preload');\n  await ipfs.preload.start();\n  log('starting storage');\n  ipfs.ipns.startOffline(storage);\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs);\n    log('adding default assets');\n    await initAssets({\n      addAll: ipfs.addAll,\n      print\n    });\n    log('initializing IPNS keyspace');\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY');\n    }\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT);\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      });\n    } finally {\n      timeoutController.clear();\n    }\n  }\n  if (options.start !== false) {\n    log('starting node');\n    await ipfs.start();\n  }\n  return ipfs;\n}","map":{"version":3,"names":["mergeOpts","isTest","logger","errCode","UnixFS","dagPB","dagCBOR","dagJSON","dagJOSE","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","fromString","uint8ArrayFromString","TimeoutController","createStart","createStop","createDns","createIsOnline","createResolve","PinAPI","IPNSAPI","NameAPI","createRefs","createLocal","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersion","createId","createConfig","DagAPI","createPreloader","createMfsPreloader","createFiles","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPing","createDht","createPubsub","Multicodecs","Multihashes","Multibases","mergeOptions","bind","ignoreUndefined","log","IPNS_INIT_KEYSPACE_TIMEOUT","IPFS","constructor","print","storage","options","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","add","addAll","cat","get","ls","EXPERIMENTAL","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","init","addEmptyDir","ipfs","buf","encode","Data","type","marshal","Links","cid","put","mhtype","format","getDefaultOptions","enabled","addresses","initOptions","code","decode","blockCodecs","concat","codec","multicodecs","loadCodec","silent","console","getAll","startOffline","isNew","emptyRepo","publicKey","timeoutController","initializeKeyspace","signal","clear"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/index.js"],"sourcesContent":["import mergeOpts from 'merge-options'\nimport { isTest } from 'ipfs-utils/src/env.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { initAssets } from 'ipfs-core-config/init-assets'\nimport { AlreadyInitializedError } from '../errors.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { createStart } from './start.js'\n\nimport { createStop } from './stop.js'\nimport { createDns } from './dns.js'\nimport { createIsOnline } from './is-online.js'\nimport { createResolve } from './resolve.js'\nimport { PinAPI } from './pin/index.js'\nimport { IPNSAPI } from './ipns.js'\nimport { NameAPI } from './name/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createLocal } from './refs/local.js'\nimport { BitswapAPI } from './bitswap/index.js'\nimport { BootstrapAPI } from './bootstrap/index.js'\nimport { BlockAPI } from './block/index.js'\nimport { RootAPI } from './root.js'\nimport { createVersion } from './version.js'\nimport { createId } from './id.js'\nimport { createConfig } from './config/index.js'\nimport { DagAPI } from './dag/index.js'\nimport { createPreloader } from '../preload.js'\nimport { createMfsPreloader } from '../mfs-preload.js'\nimport { createFiles } from './files/index.js'\nimport { KeyAPI } from './key/index.js'\nimport { ObjectAPI } from './object/index.js'\nimport { RepoAPI } from './repo/index.js'\nimport { StatsAPI } from './stats/index.js'\nimport { Storage } from './storage.js'\nimport { Network } from './network.js'\nimport { Service } from '../utils/service.js'\nimport { SwarmAPI } from './swarm/index.js'\nimport { createPing } from './ping.js'\nimport { createDht } from './dht.js'\nimport { createPubsub } from './pubsub.js'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport { Multibases } from 'ipfs-core-utils/multibases'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs')\n\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloader(options.preload)\n\n    const dns = createDns()\n    const isOnline = createIsOnline({ network })\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolve({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefs({ repo, codecs, resolve, preload }), {\n      local: createLocal({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    })\n\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    })\n\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDht({ network, repo, peerId })\n    this.pubsub = createPubsub({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createId({ network, peerId })\n    this.version = createVersion({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfig({ repo })\n    this.ping = createPing({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\n/**\n * @param {Options} options\n */\nexport async function create (options = {}) {\n  options = mergeOptions(getDefaultOptions(), options)\n  const initOptions = options.init || {}\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  log('creating repo')\n  const storage = await Storage.start(print, multicodecs, options)\n\n  log('getting repo config')\n  const config = await storage.repo.config.getAll()\n\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options, config }\n  })\n\n  log('starting preload')\n  await ipfs.preload.start()\n\n  log('starting storage')\n  ipfs.ipns.startOffline(storage)\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs)\n\n    log('adding default assets')\n    await initAssets({ addAll: ipfs.addAll, print })\n\n    log('initializing IPNS keyspace')\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT)\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      })\n    } finally {\n      timeoutController.clear()\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node')\n    await ipfs.start()\n  }\n\n  return ipfs\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}