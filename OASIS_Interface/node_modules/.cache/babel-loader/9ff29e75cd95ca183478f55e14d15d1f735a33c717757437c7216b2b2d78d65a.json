{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { sendToGPT } from \"@/api/axios/gpt\"\nimport { parseTime } from \"@/utils/Time\";\nexport default {\n  data() {\n    return {\n      user: {},\n      isCollapse: false,\n      users: [],\n      chatUser: \"\",\n      text: \"\",\n      messages: [],\n      contents: {},\n      showName: false,\n      isEnter: false\n    };\n  },\n  components: {},\n  mounted() {},\n  methods: {\n    // 更新弹窗位置\n    upDatePosition() {\n      this.$nextTick(() => {\n        this.$refs.popoverRef.updatePopper();\n      });\n    },\n    OpenAndClose() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$refs.logo.classList.add(\"animate__swing\");\n        this.$refs.logo2.classList.add(\"animate__swing\");\n        this.$refs.Menu.style = \"width:150px;\";\n        this.showName = true;\n        this.isEnter = true;\n      } else {\n        this.$refs.logo.classList.remove(\"animate__swing\");\n        this.$refs.logo2.classList.remove(\"animate__swing\");\n        this.$refs.Menu.style = \"width:65px;\";\n        this.showName = false;\n        this.isEnter = false;\n      }\n    },\n    GETHashAvatar(UserAddress) {\n      return \"data:image/png;base64,\" + new this.Identicon(UserAddress, 120).toString();\n    },\n    send(opt) {\n      if (!this.text) {\n        this.$notify({\n          title: \"输入不能为空\",\n          type: \"warning\",\n          position: \"bottom-left\"\n        });\n      } else {\n        let message = {\n          from: this.user.username,\n          to: this.chatUser,\n          message: this.text\n        };\n        if (opt == 1) {\n          if (typeof WebSocket == \"undefined\") {\n            console.log(\"您的浏览器不支持WebSocket\");\n          } else {\n            console.log(\"您的浏览器支持WebSocket\");\n            // 组装待发送的消息 json\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n\n            this.$store.state.userSocket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n            // 由服务端进行转发\n            this.messages.push({\n              user: this.user.username,\n              text: this.text\n            });\n\n            // 构建消息内容，本人消息\n            this.createContent(null, this.$store.state.currentAddress, this.text);\n            this.text = \"\";\n          }\n        } else {\n          this.sendToGPT(JSON.stringify(message));\n        }\n      }\n    },\n    async sendToGPT() {\n      // var data =  \n      //     {\n      //       role: \"user\",\n      //       content: `${this.text}`,\n      //     }\n      let message = {\n        from: this.user.username,\n        to: this.chatUser,\n        message: this.text\n      };\n      this.createContent(null, this.$store.state.currentAddress, this.text);\n      console.log(this.$store.state.userSocket);\n      try {\n        this.$store.state.userSocket.send(JSON.stringify(message));\n        // await sendToGPT(data).then(re => {\n        //   // let result=JSON.parse(re.data.data)\n        //   // this.createContent(result.choices[0].message.role,null,result.choices[0].message.content)\n        //   console.log(re);\n        // })\n\n        this.text = \"\";\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    // 键盘回车事件\n    handleKeyCode(event) {\n      if (event.keyCode == 13) {\n        if (!event.metaKey) {\n          event.preventDefault();\n          this.send();\n        } else {\n          this.text = this.text + \"\\n\";\n        }\n      } else {\n        if (!event.metaKey) {\n          event.preventDefault();\n          this.send();\n        } else {\n          this.text = this.text + \"\\n\";\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {\n      let content;\n      let html;\n      content = this.contents[this.chatUser || remoteUser] || \"\";\n      // 当前用户消息\n      if (nowUser) {\n        html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n      } else if (remoteUser) {\n        html = `\n                              <div class=\"MessageBox_remoteUser\">\n                                <span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span>\n                                <div class=\"Message rightMessage\">\n                                  ${text}\n                                </div>\n                              </div>\n                            `;\n      }\n      content += html;\n      this.$set(this.contents, this.chatUser, content);\n      this.$nextTick(() => {\n        let msg = document.getElementById(\"CHAT\");\n        msg.scrollTop = msg.scrollHeight;\n      });\n    }\n  }\n};","map":{"version":3,"names":["parseTime","data","user","isCollapse","users","chatUser","text","messages","contents","showName","isEnter","components","mounted","methods","upDatePosition","$nextTick","$refs","popoverRef","updatePopper","OpenAndClose","isOpen","logo","classList","add","logo2","Menu","style","remove","GETHashAvatar","UserAddress","Identicon","toString","send","opt","$notify","title","type","position","message","from","username","to","WebSocket","console","log","$store","state","userSocket","JSON","stringify","push","createContent","currentAddress","sendToGPT","error","handleKeyCode","event","keyCode","metaKey","preventDefault","remoteUser","nowUser","content","html","Date","$set","msg","document","getElementById","scrollTop","scrollHeight"],"sources":["src/views/leftMenu/oasisChat.vue"],"sourcesContent":["<template>\n  <div class=\"Menu\" ref=\"Menu\" :class=\"{'isEnter':isEnter}\" @mouseenter=\"OpenAndClose\" @mouseleave=\"OpenAndClose\">\n    <div class=\"logobox\">\n      <div class=\"logo animate__animated\">\n        <router-link :to=\"{ name: 'MarketShop' }\">\n          <div style=\"display: inline; font-size: 25px\" class=\"animate__animated\" ref=\"logo\">\n            OAS\n          </div>\n          <div style=\"display: inline;  font-size: 25px\" class=\"animate__animated\" ref=\"logo2\">\n            <img src=\"../../assets/webAssets/s1.png\" alt=\"\" width=\"22px\" height=\"22px\">S\n          </div>\n        </router-link>\n      </div>\n    </div>\n\n    <template>\n      <!-- <div\n        v-for=\"otherUser in users\"\n        :key=\"otherUser.username\"\n        class=\"chat\"\n      >\n        <el-popover\n          placement=\"right\"\n          width=\"309px\"\n          trigger=\"click\"\n          popper-class=\"monitor-yt-popover\"\n        >\n          <div\n            class=\"ChatPeople animate__animated animate__fadeInRight\"\n            slot=\"reference\"\n            @click=\"chatUser = otherUser.username\"\n          >\n            <div class=\"ChatWindow\">\n              <img\n                :src=\"GETHashAvatar(otherUser.username)\"\n                width=\"50px\"\n                height=\"50px\"\n                alt=\"\"\n                style=\"object-fit: contain\"\n              >\n            </div>\n            <span class=\"friendname animate__animated animate__fadeInRight\">{{ otherUser.username.slice(0, 3) + \"...\" + otherUser.username.slice(39) }}</span>\n          </div>\n          <div\n            style=\"\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n            \"\n          >\n            <div\n              class=\"ChatWindowBox\"\n              style=\"width: 329px; height: 520px\"\n            >\n              <el-container>\n                <el-header>\n                  <div class=\"topBox\">\n                    <div\n                      style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \"\n                    >\n                      <span\n                        class=\"el-avatar el-avatar--circle\"\n                        style=\"height: 48px; width: 48px\"\n                        v-if=\"chatUser != ''\"\n                      >\n                        <img\n                          :src=\"GETHashAvatar(otherUser.username)\"\n                          style=\"object-fit: contain\"\n                        >\n                      </span>\n                    </div>\n                    <div style=\"flex: 7; text-align: left; height: 48px\">\n                      <div style=\"margin-left: 5px\">\n                        <div class=\"ChatUserName\">\n                          {{ chatUser.slice(0, 5) + \"...\" + chatUser.slice(37) }}\n                        </div>\n                        <div\n                          style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \"\n                          v-if=\"chatUser != ''\"\n                        >\n                          <i class=\"el-icon-loading\" /> Chatting...\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </el-header>\n\n                <el-main>\n                  <div\n                    style=\"height: 355px; overflow: auto\"\n                    id=\"CHAT\"\n                    v-html=\"contents[chatUser]\"\n                  />\n                </el-main>\n                <el-footer>\n                  <div class=\"inputer\">\n                    <input\n                      type=\"textarea\"\n                      autofocus=\"true\"\n                      v-model=\"text\"\n                      class=\"inputarea\"\n                      @keydown.enter.prevent=\"handleKeyCode($event)\"\n                    >\n                    <button @click=\"send\">\n                      <i\n                        class=\"el-icon-arrow-up\"\n                        style=\"font-size: 30px;cursor: pointer;\"\n                      />\n                    </button>\n                  </div>\n                </el-footer>\n              </el-container>\n            </div>\n          </div>\n        </el-popover>\n      </div> -->\n      <div class=\"chatGPT\">\n        <el-popover placement=\"right\" width=\"309px\" trigger=\"click\" popper-class=\"monitor-yt-popover\">\n          <div class=\"ChatPeople animate__animated animate__fadeInRight\" slot=\"reference\">\n            <div class=\"ChatWindow\">\n              <img src=\"@/assets/webAssets/MetaMask.png\" width=\"50px\" height=\"50px\" alt=\"\" style=\"object-fit: contain\">\n            </div>\n            <span class=\"friendname animate__animated animate__fadeInRight\" v-show=\"showName\">OasisGPT</span>\n          </div>\n          <div style=\"\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n            \">\n            <div class=\"ChatWindowBox\" style=\"width: 329px; height: 520px\">\n              <el-container>\n                <el-header>\n                  <div class=\"topBox\">\n                    <div style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \">\n                      <span class=\"el-avatar el-avatar--circle\" style=\"height: 48px; width: 48px\" v-if=\"chatUser != ''\">\n                        <img src=\"@/assets/webAssets/MetaMask.png\" style=\"object-fit: contain\">\n                      </span>\n                    </div>\n                    <div style=\"flex: 7; text-align: left; height: 48px\">\n                      <div style=\"margin-left: 5px\">\n                        <div class=\"ChatUserName\">\n                          <!-- {{ chatUser.slice(0, 5) + \"...\" + chatUser.slice(37) }} -->\n                        </div>\n                        <div style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \">\n                          <!-- v-if=\"chatUser != ''\" -->\n                          <i class=\"el-icon-loading\" /> Chatting...\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </el-header>\n\n                <el-main>\n                  <div style=\"height: 355px; overflow: auto\" id=\"CHAT\" v-html=\"contents[chatUser]\" />\n                </el-main>\n                <el-footer>\n                  <div class=\"inputer\">\n                    <input type=\"textarea\" autofocus=\"true\" v-model=\"text\" class=\"inputarea\" @keydown.enter.prevent=\"send(1)\">\n                    <button @click=\"send(2)\">\n                      <i class=\"el-icon-arrow-up\" style=\"font-size: 30px;cursor: pointer;\" />\n                    </button>\n                  </div>\n                </el-footer>\n              </el-container>\n            </div>\n          </div>\n        </el-popover>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script>\n// import { sendToGPT } from \"@/api/axios/gpt\"\n  import { parseTime } from \"@/utils/Time\";\n  export default {\n    data() {\n      return {\n        user: {},\n        isCollapse: false,\n        users: [],\n        chatUser: \"\",\n        text: \"\",\n        messages: [],\n        contents: {},\n        showName: false,\n        isEnter: false,\n      };\n    },\n    components: {},\n    mounted() {\n    },\n    methods: {\n      // 更新弹窗位置\n      upDatePosition() {\n        this.$nextTick(() => {\n          this.$refs.popoverRef.updatePopper();\n        });\n      },\n      OpenAndClose() {\n        this.isOpen = !this.isOpen;\n        if (this.isOpen) {\n          this.$refs.logo.classList.add(\"animate__swing\");\n          this.$refs.logo2.classList.add(\"animate__swing\");\n          this.$refs.Menu.style = \"width:150px;\";\n          this.showName = true;\n          this.isEnter = true;\n        } else {\n          this.$refs.logo.classList.remove(\"animate__swing\");\n          this.$refs.logo2.classList.remove(\"animate__swing\");\n          this.$refs.Menu.style = \"width:65px;\";\n          this.showName = false;\n          this.isEnter = false;\n        }\n      },\n      GETHashAvatar(UserAddress) {\n        return (\n          \"data:image/png;base64,\" +\n          new this.Identicon(UserAddress, 120).toString()\n        );\n      },\n      send(opt) {\n        if (!this.text) {\n          this.$notify({\n            title: \"输入不能为空\",\n            type: \"warning\",\n            position: \"bottom-left\",\n          });\n        } else {\n          let message = {\n              from: this.user.username,\n              to: this.chatUser,\n              message: this.text,\n            };\n          if (opt == 1) {\n            if (typeof WebSocket == \"undefined\") {\n            console.log(\"您的浏览器不支持WebSocket\");\n          } else {\n            console.log(\"您的浏览器支持WebSocket\");\n            // 组装待发送的消息 json\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n            \n\n            this.$store.state.userSocket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n            // 由服务端进行转发\n            this.messages.push({\n              user: this.user.username,\n              text: this.text,\n            });\n\n            // 构建消息内容，本人消息\n            this.createContent(null, this.$store.state.currentAddress, this.text);\n            this.text = \"\";\n          }\n          } else {\n            this.sendToGPT(JSON.stringify(message));\n          }\n          \n        }\n      },\n      async sendToGPT() {\n        // var data =  \n        //     {\n        //       role: \"user\",\n        //       content: `${this.text}`,\n        //     }\n        let message = {\n              from: this.user.username,\n              to: this.chatUser,\n              message: this.text,\n            };\n        this.createContent(null, this.$store.state.currentAddress, this.text);\n        console.log(this.$store.state.userSocket);\n        try {\n          this.$store.state.userSocket.send(JSON.stringify(message)); \n          // await sendToGPT(data).then(re => {\n          //   // let result=JSON.parse(re.data.data)\n          //   // this.createContent(result.choices[0].message.role,null,result.choices[0].message.content)\n          //   console.log(re);\n          // })\n            \n        this.text = \"\";\n        } catch (error) {\n          console.log(error);\n        }\n       \n      },\n      // 键盘回车事件\n      handleKeyCode(event) {\n        if (event.keyCode == 13) {\n          if (!event.metaKey) {\n            event.preventDefault();\n            this.send();\n          } else {\n            this.text = this.text + \"\\n\";\n          }\n        } else {\n          if (!event.metaKey) {\n            event.preventDefault();\n            this.send()\n          } else {\n            this.text = this.text + \"\\n\";\n          }\n        }\n      },\n      createContent(remoteUser, nowUser, text) {\n        let content;\n        let html;\n        content = this.contents[this.chatUser || remoteUser] || \"\";\n        // 当前用户消息\n        if (nowUser) {\n          html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(\n            Date(),\n            \"hh:mm:ss\"\n          )}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n        } else if (remoteUser) {\n          html = `\n                              <div class=\"MessageBox_remoteUser\">\n                                <span class=\"currentTime\">${parseTime(\n                                  Date(),\n                                  \"hh:mm:ss\"\n                                )}</span>\n                                <div class=\"Message rightMessage\">\n                                  ${text}\n                                </div>\n                              </div>\n                            `;\n        }\n        content += html;\n        this.$set(this.contents, this.chatUser, content);\n        this.$nextTick(() => {\n          let msg = document.getElementById(\"CHAT\");\n          msg.scrollTop = msg.scrollHeight;\n        });\n      },\n\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/leftMenu/oasisChat.scss\";\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}