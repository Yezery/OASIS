{"ast":null,"code":"import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nimport { getToken, setMnemonic, checkUserExist, setAuthenticationMetaInformation, forgetMnemonic, resetMnemonic } from \"@/api/axios/user\";\nimport CryptoJS from \"crypto-js\";\nexport default {\n  data() {\n    return {\n      //****聊天栏******//\n      isOpen: false,\n      UserImageList: [],\n      avatar: \"\",\n      //*********************//\n      //方法\n      echartChange: null,\n      //连接钱包\n      user: {\n        encryptedPassword: \"\"\n      },\n      changeingAccount: false,\n      anmiate1: true,\n      animate2: false,\n      animate3: false,\n      animate4: false,\n      animate5: false,\n      EmpowerSignForm: {\n        sp1: \"\",\n        sp2: \"\",\n        sp3: \"\"\n      },\n      isGetToken: false,\n      CopyTips: \"点击复制\",\n      CopySuccess: \"复制成功！\",\n      isCopy: false,\n      isRepeatClick: true,\n      newMnemonic: \"\",\n      isUnlocked: false\n    };\n  },\n  async mounted() {},\n  methods: {\n    async backPassword() {\n      this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n      forgetMnemonic(this.EmpowerSignForm).then(re => {\n        if (re.data.data) {\n          this.animate5 = true;\n          this.animate4 = false;\n          this.$notify({\n            title: \"密保正确\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n        } else {\n          this.$notify({\n            title: \"密保错误\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      });\n    },\n    async resetMnemonic() {\n      this.EmpowerSignForm.newMnemonic = CryptoJS.SHA256(this.newMnemonic).toString();\n      this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n      await checkUserExist(this.EmpowerSignForm).then(re => {\n        if (re.data.data == this.EmpowerSignForm.encryptedPassword) {\n          this.$notify({\n            title: \"不能与旧密码重复\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n          return;\n        } else {\n          resetMnemonic(this.EmpowerSignForm).then(re => {\n            if (re.data.data == null) {\n              this.$notify.error({\n                title: \"系统异常\",\n                position: \"top-left\",\n                offset: 200\n              });\n            }\n            this.$notify({\n              title: \"🎉 重设成功\",\n              position: \"top-left\",\n              offset: 200\n            });\n            this.animate2 = true;\n            this.animate5 = false;\n          });\n        }\n      });\n    },\n    giveChatInitToWalletConnect() {\n      console.log(\"聊天栏正初始化.......\");\n      this.$refs.ChatMemu.init();\n    },\n    setEchartChange(data) {\n      this.echartChange = data;\n      console.log(this.echartChange);\n    },\n    Copy() {\n      navigator.clipboard.writeText(this.$store.state.currentAddress).then(() => {\n        this.isCopy = true;\n        setTimeout(() => {\n          this.isCopy = false;\n        }, 3000);\n      });\n    },\n    GETHashAvatar() {\n      if (this.$store.state.isconnect) {\n        this.avatar = \"data:image/png;base64,\" + new this.Identicon(this.$store.state.currentAddress, 120).toString();\n        this.$refs.avatar.width = 60;\n        this.$refs.avatar.height = 60;\n      } else {\n        this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n        this.$refs.avatar.width = 40;\n        this.$refs.avatar.height = 40;\n      }\n    }\n  }\n};","map":{"version":3,"names":["postOwnerContractList","getToken","setMnemonic","checkUserExist","setAuthenticationMetaInformation","forgetMnemonic","resetMnemonic","CryptoJS","data","isOpen","UserImageList","avatar","echartChange","user","encryptedPassword","changeingAccount","anmiate1","animate2","animate3","animate4","animate5","EmpowerSignForm","sp1","sp2","sp3","isGetToken","CopyTips","CopySuccess","isCopy","isRepeatClick","newMnemonic","isUnlocked","mounted","methods","backPassword","userAddress","$store","state","currentAddress","then","re","$notify","title","type","position","offset","SHA256","toString","error","giveChatInitToWalletConnect","console","log","$refs","ChatMemu","init","setEchartChange","Copy","navigator","clipboard","writeText","setTimeout","GETHashAvatar","isconnect","Identicon","width","height","require"],"sources":["src/views/bar/walletConnect.vue"],"sourcesContent":["<template>\n  <div class=\"Walletbox\">\n    <div\n      class=\"WalletInnerBox\"\n      @click.stop=\"Copy\"\n    >\n      <span\n        class=\"avatarBox\"\n        @click=\"openEmpower\"\n      >\n        <img\n          class=\"avatar\"\n          :src=\"$store.state.avatar\"\n          alt=\"\"\n          ref=\"avatar\"\n          slot=\"reference\"\n        >\n      </span>\n      <!-- <span class=\"address\">{{ \n        $store.state.currentAddress==\"\"?\"MetaMask is not connected\":`${this.$store.state.currentAddress.slice(\n          0,\n          5\n        )}...${this.$store.state.currentAddress.slice(-5)}`\n      }}\n      </span> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nimport {\n    getToken,\n    setMnemonic,\n    checkUserExist,\n    setAuthenticationMetaInformation,\n    forgetMnemonic,\n    resetMnemonic,\n  } from \"@/api/axios/user\";\n  import CryptoJS from \"crypto-js\";\n  export default {\n    data() {\n      return {\n        //****聊天栏******//\n        isOpen: false,\n        UserImageList: [],\n        avatar: \"\",\n        //*********************//\n        //方法\n        echartChange: null,\n        //连接钱包\n        user: {\n          encryptedPassword: \"\",\n        },\n        changeingAccount: false,\n        anmiate1: true,\n        animate2: false,\n        animate3: false,\n        animate4: false,\n        animate5: false,\n        EmpowerSignForm: {\n          sp1: \"\",\n          sp2: \"\",\n          sp3: \"\",\n        },\n        isGetToken: false,\n        CopyTips: \"点击复制\",\n        CopySuccess: \"复制成功！\",\n        isCopy: false,\n        isRepeatClick: true,\n        newMnemonic: \"\",\n        isUnlocked: false,\n      };\n  },\n  async mounted() {\n\n    },\n  methods: {\n\n\n\n      async backPassword() {\n        this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n        forgetMnemonic(this.EmpowerSignForm).then((re) => {\n          if (re.data.data) {\n            this.animate5 = true;\n            this.animate4 = false;\n            this.$notify({\n              title: \"密保正确\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          } else {\n            this.$notify({\n              title: \"密保错误\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        });\n      },\n      async resetMnemonic() {\n        this.EmpowerSignForm.newMnemonic = CryptoJS.SHA256(\n          this.newMnemonic\n        ).toString();\n        this.EmpowerSignForm.userAddress = this.$store.state.currentAddress;\n        await checkUserExist(this.EmpowerSignForm).then((re) => {\n          if (re.data.data == this.EmpowerSignForm.encryptedPassword) {\n            this.$notify({\n              title: \"不能与旧密码重复\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            return;\n          } else {\n            resetMnemonic(this.EmpowerSignForm).then((re) => {\n              if (re.data.data == null) {\n                this.$notify.error({\n                  title: \"系统异常\",\n                  position: \"top-left\",\n                  offset: 200,\n                });\n              }\n              this.$notify({\n                title: \"🎉 重设成功\",\n                position: \"top-left\",\n                offset: 200,\n              });\n              this.animate2 = true;\n              this.animate5 = false;\n            });\n          }\n        });\n      },\n\n      giveChatInitToWalletConnect() {\n        console.log(\"聊天栏正初始化.......\");\n        this.$refs.ChatMemu.init();\n      },\n      \n      setEchartChange(data) {\n        this.echartChange = data;\n        console.log(this.echartChange);\n      },\n\n      Copy() {\n        navigator.clipboard\n          .writeText(this.$store.state.currentAddress)\n          .then(() => {\n            this.isCopy = true;\n            setTimeout(() => {\n              this.isCopy = false;\n            }, 3000);\n          });\n      },\n      GETHashAvatar() {\n        if (this.$store.state.isconnect) {\n          this.avatar =\n            \"data:image/png;base64,\" +\n            new this.Identicon(this.$store.state.currentAddress, 120).toString();\n          this.$refs.avatar.width = 60;\n          this.$refs.avatar.height = 60;\n        } else {\n          this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n          this.$refs.avatar.width = 40;\n          this.$refs.avatar.height = 40;\n        }\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/topMenu/walletConnect.scss\";\n\n.MetaMaskAvatar {\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.BOX {\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.address {\n  margin-left: 5%;\n  color: var(--Dark--);\n  font-weight: 800;\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  border-radius: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(238, 238, 238, 0.1);\n    transition: all 0.3s ease-in-out;\n  }\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}