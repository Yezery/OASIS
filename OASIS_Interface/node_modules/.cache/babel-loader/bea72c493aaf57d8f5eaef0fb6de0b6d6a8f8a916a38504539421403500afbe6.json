{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers';\nimport * as Constants from './constants.js';\nimport { AGENT_VERSION } from './identify/consts.js';\nimport * as RelayConstants from './circuit/constants.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { codes, messages } from './errors.js';\nimport errCode from 'err-code';\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe';\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: multiaddrs => multiaddrs\n  },\n  connectionManager: {\n    maxConnections: 300,\n    minConnections: 50,\n    autoDial: true,\n    autoDialInterval: 10000,\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  connectionGater: {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  nat: {\n    enabled: true,\n    ttl: 7200,\n    keepAlive: true\n  },\n  relay: {\n    enabled: true,\n    advertise: {\n      bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n      enabled: false,\n      ttl: RelayConstants.ADVERTISE_TTL\n    },\n    hop: {\n      enabled: false,\n      active: false,\n      timeout: 30000\n    },\n    autoRelay: {\n      enabled: false,\n      maxListeners: 2\n    }\n  },\n  identify: {\n    protocolPrefix: 'ipfs',\n    host: {\n      agentVersion: AGENT_VERSION\n    },\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1\n  },\n  ping: {\n    protocolPrefix: 'ipfs',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  },\n  fetch: {\n    protocolPrefix: 'libp2p',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  }\n};\nexport function validateConfig(opts) {\n  const resultingOptions = mergeOptions(DefaultConfig, opts);\n  if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n    throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED);\n  }\n  if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n    throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);\n  }\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) {\n    // eslint-disable-line no-undef\n    throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED);\n  }\n  // Append user agent version to default AGENT_VERSION depending on the environment\n  if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n    if (isNode || isElectronMain) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`;\n    } else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`;\n    }\n  }\n  return resultingOptions;\n}","map":{"version":3,"names":["mergeOptions","dnsaddrResolver","Constants","AGENT_VERSION","RelayConstants","publicAddressesFirst","FaultTolerance","codes","messages","errCode","isNode","isBrowser","isWebWorker","isElectronMain","isElectronRenderer","isReactNative","DefaultConfig","addresses","listen","announce","noAnnounce","announceFilter","multiaddrs","connectionManager","maxConnections","minConnections","autoDial","autoDialInterval","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","inboundUpgradeTimeout","INBOUND_UPGRADE_TIMEOUT","resolvers","dnsaddr","addressSorter","connectionGater","transportManager","faultTolerance","FATAL_ALL","peerRouting","refreshManager","enabled","interval","bootDelay","nat","ttl","keepAlive","relay","advertise","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","hop","active","timeout","autoRelay","maxListeners","identify","protocolPrefix","host","agentVersion","maxInboundStreams","maxOutboundStreams","maxPushIncomingStreams","maxPushOutgoingStreams","ping","fetch","validateConfig","opts","resultingOptions","transports","length","Error","ERR_TRANSPORTS_REQUIRED","connectionEncryption","CONN_ENCRYPTION_REQUIRED","connectionProtector","globalThis","process","env","LIBP2P_FORCE_PNET","ERR_PROTECTOR_REQUIRED","version","navigator","userAgent"],"sources":["../../src/config.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}