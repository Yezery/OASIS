{"ast":null,"code":"import { Service } from '../utils/service.js';\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart({\n  network,\n  preload,\n  peerId,\n  keychain,\n  repo,\n  ipns,\n  mfsPreload,\n  print,\n  hashers,\n  options\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const {\n      libp2p\n    } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    });\n    await Promise.all([ipns.startOnline({\n      keychain,\n      libp2p,\n      peerId,\n      repo\n    }), preload.start(), mfsPreload.start()]);\n  };\n  return start;\n}","map":{"version":3,"names":["Service","createStart","network","preload","peerId","keychain","repo","ipns","mfsPreload","print","hashers","options","start","libp2p","Promise","all","startOnline"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/start.js"],"sourcesContent":["import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,qBAAqB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAAE;EAAEC,OAAO;EAAEC,OAAO;EAAEC,MAAM;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,IAAI;EAAEC,UAAU;EAAEC,KAAK;EAAEC,OAAO;EAAEC;AAAQ,CAAC,EAAE;EACpH;AACF;AACA;EACE,MAAMC,KAAK,GAAG,MAAAA,CAAA,KAAY;IACxB,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAMb,OAAO,CAACY,KAAK,CAACV,OAAO,EAAE;MAC9CE,MAAM;MACNE,IAAI;MACJG,KAAK;MACLC,OAAO;MACPC;IACF,CAAC,CAAC;IAEF,MAAMG,OAAO,CAACC,GAAG,CAAC,CAChBR,IAAI,CAACS,WAAW,CAAC;MAAEX,QAAQ;MAAEQ,MAAM;MAAET,MAAM;MAAEE;IAAK,CAAC,CAAC,EACpDH,OAAO,CAACS,KAAK,CAAC,CAAC,EACfJ,UAAU,CAACI,KAAK,CAAC,CAAC,CACnB,CAAC;EACJ,CAAC;EAED,OAAOA,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}