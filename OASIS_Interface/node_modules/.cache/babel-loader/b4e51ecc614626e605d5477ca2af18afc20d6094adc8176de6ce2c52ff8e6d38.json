{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor(props, options) {\n    super(props, options);\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {};\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n\n  /**\n   * @param {string} name\n   */\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n  directChildrenCount() {\n    return this.childCount();\n  }\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n\n    /** @type {PBNode} */\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce(\n    /**\n     * @param {number} acc\n     * @param {PBLink} curr\n     */\n    (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n}\nexport default DirFlat;","map":{"version":3,"names":["encode","prepare","UnixFS","Dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","Promise","resolve","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","block","children","links","entry","push","Name","Tsize","Hash","unixfs","type","mtime","mode","node","Data","marshal","Links","buffer","reduce","acc","curr","path"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/dir-flat.js"],"sourcesContent":["import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {}\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return Promise.resolve(this._children[name])\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  async * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        })\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    /** @type {PBNode} */\n    const node = { Data: unixfs.marshal(), Links: links }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce(\n      /**\n       * @param {number} acc\n       * @param {PBLink} curr\n       */\n      (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize),\n      0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    }\n  }\n}\n\nexport default DirFlat\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}