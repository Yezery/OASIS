{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { BaseBlockstore } from 'blockstore-core';\nimport merge from 'it-merge';\nimport { pushable } from 'it-pushable';\nimport filter from 'it-filter';\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport class BlockStorage extends BaseBlockstore {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor(blockstore, bitswap) {\n    super();\n    this.child = blockstore;\n    this.bitswap = bitswap;\n  }\n  open() {\n    return this.child.open();\n  }\n  close() {\n    return this.child.close();\n  }\n  unwrap() {\n    return this.child;\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put(cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return;\n    }\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options);\n    } else {\n      await this.child.put(cid, block, options);\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async *putMany(blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({\n      key\n    }) => {\n      return !(await this.has(key));\n    });\n    if (this.bitswap.isStarted()) {\n      yield* this.bitswap.putMany(missingBlocks, options);\n    } else {\n      yield* this.child.putMany(missingBlocks, options);\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get(cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options);\n    } else {\n      return this.child.get(cid, options);\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async *getMany(cids, options = {}) {\n    const getFromBitswap = pushable({\n      objectMode: true\n    });\n    const getFromChild = pushable({\n      objectMode: true\n    });\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid);\n        } else {\n          getFromChild.push(cid);\n        }\n      }\n      getFromBitswap.end();\n      getFromChild.end();\n    });\n    yield* merge(this.bitswap.getMany(getFromBitswap, options), this.child.getMany(getFromChild, options));\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete(cid, options) {\n    await this.child.delete(cid, options);\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async *deleteMany(cids, options) {\n    yield* this.child.deleteMany(cids, options);\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has(cid, options = {}) {\n    return this.child.has(cid, options);\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async *query(q, options = {}) {\n    yield* this.child.query(q, options);\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async *queryKeys(q, options = {}) {\n    yield* this.child.queryKeys(q, options);\n  }\n}","map":{"version":3,"names":["BaseBlockstore","merge","pushable","filter","BlockStorage","constructor","blockstore","bitswap","child","open","close","unwrap","put","cid","block","options","has","isStarted","putMany","blocks","missingBlocks","key","get","getMany","cids","getFromBitswap","objectMode","getFromChild","Promise","resolve","then","push","end","delete","deleteMany","query","q","queryKeys"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/block-storage.js"],"sourcesContent":["import { BaseBlockstore } from 'blockstore-core'\nimport merge from 'it-merge'\nimport { pushable } from 'it-pushable'\nimport filter from 'it-filter'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/block').RmOptions} RmOptions\n */\n\n/**\n * BlockStorage is a hybrid block datastore. It stores data in a local\n * datastore and may retrieve data from a remote Exchange.\n * It uses an internal `datastore.Datastore` instance to store values.\n *\n * @implements {Blockstore}\n */\nexport class BlockStorage extends BaseBlockstore {\n  /**\n   * Create a new BlockStorage\n   *\n   * @param {Blockstore} blockstore\n   * @param {Bitswap} bitswap\n   */\n  constructor (blockstore, bitswap) {\n    super()\n\n    this.child = blockstore\n    this.bitswap = bitswap\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  unwrap () {\n    return this.child\n  }\n\n  /**\n   * Put a block to the underlying datastore\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @param {AbortOptions} [options]\n   */\n  async put (cid, block, options = {}) {\n    if (await this.has(cid)) {\n      return\n    }\n\n    if (this.bitswap.isStarted()) {\n      await this.bitswap.put(cid, block, options)\n    } else {\n      await this.child.put(cid, block, options)\n    }\n  }\n\n  /**\n   * Put a multiple blocks to the underlying datastore\n   *\n   * @param {AsyncIterable<{ key: CID, value: Uint8Array }> | Iterable<{ key: CID, value: Uint8Array }>} blocks\n   * @param {AbortOptions} [options]\n   */\n  async * putMany (blocks, options = {}) {\n    const missingBlocks = filter(blocks, async ({ key }) => { return !(await this.has(key)) })\n\n    if (this.bitswap.isStarted()) {\n      yield * this.bitswap.putMany(missingBlocks, options)\n    } else {\n      yield * this.child.putMany(missingBlocks, options)\n    }\n  }\n\n  /**\n   * Get a block by cid\n   *\n   * @param {CID} cid\n   * @param {AbortOptions} [options]\n   */\n  async get (cid, options = {}) {\n    if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n      return this.bitswap.get(cid, options)\n    } else {\n      return this.child.get(cid, options)\n    }\n  }\n\n  /**\n   * Get multiple blocks back from an array of cids\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {AbortOptions} [options]\n   */\n  async * getMany (cids, options = {}) {\n    const getFromBitswap = pushable({ objectMode: true })\n    const getFromChild = pushable({ objectMode: true })\n\n    Promise.resolve().then(async () => {\n      for await (const cid of cids) {\n        if (!(await this.has(cid)) && this.bitswap.isStarted()) {\n          getFromBitswap.push(cid)\n        } else {\n          getFromChild.push(cid)\n        }\n      }\n\n      getFromBitswap.end()\n      getFromChild.end()\n    })\n\n    yield * merge(\n      this.bitswap.getMany(getFromBitswap, options),\n      this.child.getMany(getFromChild, options)\n    )\n  }\n\n  /**\n   * Delete a block from the blockstore\n   *\n   * @param {CID} cid\n   * @param {RmOptions} [options]\n   */\n  async delete (cid, options) {\n    await this.child.delete(cid, options)\n  }\n\n  /**\n   * Delete multiple blocks from the blockstore\n   *\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {RmOptions} [options]\n   */\n  async * deleteMany (cids, options) {\n    yield * this.child.deleteMany(cids, options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {AbortOptions} options\n   */\n  async has (cid, options = {}) {\n    return this.child.has(cid, options)\n  }\n\n  /**\n   * @param {Query} q\n   * @param {AbortOptions} options\n   */\n  async * query (q, options = {}) {\n    yield * this.child.query(q, options)\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {AbortOptions} options\n   */\n  async * queryKeys (q, options = {}) {\n    yield * this.child.queryKeys(q, options)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}