{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport map from 'it-map';\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = fsEntry => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  };\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode;\n    output.mtime = fsEntry.unixfs.mtime;\n  }\n  return output;\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function* mfsLs(path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options);\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks);\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield* map(fsEntry.content(options), toOutput);\n      return;\n    }\n\n    // single file/node\n    yield toOutput(fsEntry);\n  }\n  return withTimeoutOption(mfsLs);\n}","map":{"version":3,"names":["exporter","toMfsPath","withTimeoutOption","map","toOutput","fsEntry","output","cid","name","type","size","mode","unixfs","mtime","createLs","context","mfsLs","path","options","mfsPath","repo","blocks","content"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/ls.js"],"sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport map from 'it-map'\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {import('ipfs-core-types/src/files').MFSEntry} MFSEntry\n */\n\n/**\n * @param {import('ipfs-unixfs-exporter').UnixFSEntry} fsEntry\n */\nconst toOutput = (fsEntry) => {\n  /** @type {MFSEntry} */\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type: fsEntry.type === 'directory' ? 'directory' : 'file',\n    size: fsEntry.size\n  }\n\n  if (fsEntry.type === 'file' || fsEntry.type === 'directory') {\n    output.mode = fsEntry.unixfs.mode\n    output.mtime = fsEntry.unixfs.mtime\n  }\n\n  return output\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createLs (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"ls\"]}\n   */\n  async function * mfsLs (path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options)\n    const fsEntry = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n    // directory, perhaps sharded\n    if (fsEntry.type === 'directory') {\n      yield * map(fsEntry.content(options), toOutput)\n\n      return\n    }\n\n    // single file/node\n    yield toOutput(fsEntry)\n  }\n\n  return withTimeoutOption(mfsLs)\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,SAAS,QAAQ,wBAAwB;AAClD,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,OAAOC,GAAG,MAAM,QAAQ;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,QAAQ,GAAIC,OAAO,IAAK;EAC5B;EACA,MAAMC,MAAM,GAAG;IACbC,GAAG,EAAEF,OAAO,CAACE,GAAG;IAChBC,IAAI,EAAEH,OAAO,CAACG,IAAI;IAClBC,IAAI,EAAEJ,OAAO,CAACI,IAAI,KAAK,WAAW,GAAG,WAAW,GAAG,MAAM;IACzDC,IAAI,EAAEL,OAAO,CAACK;EAChB,CAAC;EAED,IAAIL,OAAO,CAACI,IAAI,KAAK,MAAM,IAAIJ,OAAO,CAACI,IAAI,KAAK,WAAW,EAAE;IAC3DH,MAAM,CAACK,IAAI,GAAGN,OAAO,CAACO,MAAM,CAACD,IAAI;IACjCL,MAAM,CAACO,KAAK,GAAGR,OAAO,CAACO,MAAM,CAACC,KAAK;EACrC;EAEA,OAAOP,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA,OAAO,SAASQ,QAAQA,CAAEC,OAAO,EAAE;EACjC;AACF;AACA;EACE,gBAAiBC,KAAKA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC1C,MAAMC,OAAO,GAAG,MAAMlB,SAAS,CAACc,OAAO,EAAEE,IAAI,EAAEC,OAAO,CAAC;IACvD,MAAMb,OAAO,GAAG,MAAML,QAAQ,CAACmB,OAAO,CAACA,OAAO,EAAEJ,OAAO,CAACK,IAAI,CAACC,MAAM,CAAC;;IAEpE;IACA,IAAIhB,OAAO,CAACI,IAAI,KAAK,WAAW,EAAE;MAChC,OAAQN,GAAG,CAACE,OAAO,CAACiB,OAAO,CAACJ,OAAO,CAAC,EAAEd,QAAQ,CAAC;MAE/C;IACF;;IAEA;IACA,MAAMA,QAAQ,CAACC,OAAO,CAAC;EACzB;EAEA,OAAOH,iBAAiB,CAACc,KAAK,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}