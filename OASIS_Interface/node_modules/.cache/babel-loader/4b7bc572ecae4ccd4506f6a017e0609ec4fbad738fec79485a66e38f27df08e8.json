{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { objectToCamel } from './lib/object-to-camel.js';\nimport { configure } from './lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from './lib/to-url-search-params.js';\nimport { abortSignal } from './lib/abort-signal.js';\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure(api => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function* addAll(source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const {\n      headers,\n      body,\n      total,\n      parts\n    } = await multipartRequest(source, controller, options.headers);\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function' ? createProgressHandler(total, parts, options.progress) : [undefined, undefined];\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    });\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file);\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file);\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name);\n      }\n    }\n  }\n  return addAll;\n});\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) => parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined];\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0;\n  const count = parts.length;\n  return ({\n    loaded,\n    total\n  }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size);\n    while (index < count) {\n      const {\n        start,\n        end,\n        name\n      } = parts[index];\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name);\n        break;\n        // If passed current part range report final byte for the chunk and\n        // move to next one.\n      } else {\n        progress(end - start, name);\n        index += 1;\n      }\n    }\n  };\n};\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface({\n  name,\n  hash,\n  size,\n  mode,\n  mtime,\n  mtimeNsecs\n}) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  };\n  if (mode != null) {\n    output.mode = parseInt(mode, 8);\n  }\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    };\n  }\n  return output;\n}","map":{"version":3,"names":["CID","objectToCamel","configure","multipartRequest","toUrlSearchParams","abortSignal","createAddAll","api","addAll","source","options","controller","AbortController","signal","headers","body","total","parts","progressFn","onUploadProgress","progress","createProgressHandler","undefined","res","post","searchParams","Boolean","file","ndjson","hash","toCoreInterface","bytes","name","createOnUploadProgress","size","index","count","length","loaded","position","Math","floor","start","end","mode","mtime","mtimeNsecs","output","path","cid","parse","parseInt","secs","nsecs"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/add-all.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { objectToCamel } from './lib/object-to-camel.js'\nimport { configure } from './lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from './lib/to-url-search-params.js'\nimport { abortSignal } from './lib/abort-signal.js'\n\n/**\n * @typedef {import('ipfs-utils/src/types').ProgressFn} IPFSUtilsHttpUploadProgressFn\n * @typedef {import('ipfs-core-types/src/root').AddProgressFn} IPFSCoreAddProgressFn\n * @typedef {import('./types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/root').API<HTTPClientExtraOptions>} RootAPI\n * @typedef {import('ipfs-core-types/src/root').AddResult} AddResult\n */\n\nexport const createAddAll = configure((api) => {\n  /**\n   * @type {RootAPI[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n    const { headers, body, total, parts } =\n      await multipartRequest(source, controller, options.headers)\n\n    // In browser response body only starts streaming once upload is\n    // complete, at which point all the progress updates are invalid. If\n    // length of the content is computable we can interpret progress from\n    // `{ total, loaded}` passed to `onUploadProgress` and `multipart.total`\n    // in which case we disable progress updates to be written out.\n    const [progressFn, onUploadProgress] = typeof options.progress === 'function'\n      ? createProgressHandler(total, parts, options.progress)\n      : [undefined, undefined]\n\n    const res = await api.post('add', {\n      searchParams: toUrlSearchParams({\n        'stream-channels': true,\n        ...options,\n        progress: Boolean(progressFn)\n      }),\n      onUploadProgress,\n      signal,\n      headers,\n      body\n    })\n\n    for await (let file of res.ndjson()) {\n      file = objectToCamel(file)\n\n      if (file.hash !== undefined) {\n        yield toCoreInterface(file)\n      } else if (progressFn) {\n        progressFn(file.bytes || 0, file.name)\n      }\n    }\n  }\n  return addAll\n})\n\n/**\n * Returns simple progress callback when content length isn't computable or a\n * progress event handler that calculates progress from upload progress events.\n *\n * @param {number} total\n * @param {{name:string, start:number, end:number}[]|null} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {[IPFSCoreAddProgressFn|undefined, IPFSUtilsHttpUploadProgressFn|undefined]}\n */\nconst createProgressHandler = (total, parts, progress) =>\n  parts ? [undefined, createOnUploadProgress(total, parts, progress)] : [progress, undefined]\n\n/**\n * Creates a progress handler that interpolates progress from upload progress\n * events and total size of the content that is added.\n *\n * @param {number} size - actual content size\n * @param {{name:string, start:number, end:number}[]} parts\n * @param {IPFSCoreAddProgressFn} progress\n * @returns {IPFSUtilsHttpUploadProgressFn}\n */\nconst createOnUploadProgress = (size, parts, progress) => {\n  let index = 0\n  const count = parts.length\n  return ({ loaded, total }) => {\n    // Derive position from the current progress.\n    const position = Math.floor(loaded / total * size)\n    while (index < count) {\n      const { start, end, name } = parts[index]\n      // If within current part range report progress and break the loop\n      if (position < end) {\n        progress(position - start, name)\n        break\n      // If passed current part range report final byte for the chunk and\n      // move to next one.\n      } else {\n        progress(end - start, name)\n        index += 1\n      }\n    }\n  }\n}\n\n/**\n * @param {object} input\n * @param {string} input.name\n * @param {string} input.hash\n * @param {string} input.size\n * @param {string} [input.mode]\n * @param {number} [input.mtime]\n * @param {number} [input.mtimeNsecs]\n */\nfunction toCoreInterface ({ name, hash, size, mode, mtime, mtimeNsecs }) {\n  /** @type {AddResult} */\n  const output = {\n    path: name,\n    cid: CID.parse(hash),\n    size: parseInt(size)\n  }\n\n  if (mode != null) {\n    output.mode = parseInt(mode, 8)\n  }\n\n  if (mtime != null) {\n    output.mtime = {\n      secs: mtime,\n      nsecs: mtimeNsecs || 0\n    }\n  }\n\n  return output\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}