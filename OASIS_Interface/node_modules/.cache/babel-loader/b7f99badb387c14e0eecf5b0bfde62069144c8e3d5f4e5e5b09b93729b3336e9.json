{"ast":null,"code":"import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\nconst defaultAddressFilter = addrs => addrs;\nexport class DefaultAddressManager extends EventEmitter {\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor(components, init) {\n    super();\n    const {\n      listen = [],\n      announce = []\n    } = init;\n    this.components = components;\n    this.listen = listen.map(ma => ma.toString());\n    this.announce = new Set(announce.map(ma => ma.toString()));\n    this.observed = new Set();\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n  }\n  /**\n   * Get peer listen multiaddrs\n   */\n  getListenAddrs() {\n    return Array.from(this.listen).map(a => multiaddr(a));\n  }\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAnnounceAddrs() {\n    return Array.from(this.announce).map(a => multiaddr(a));\n  }\n  /**\n   * Get observed multiaddrs\n   */\n  getObservedAddrs() {\n    return Array.from(this.observed).map(a => multiaddr(a));\n  }\n  /**\n   * Add peer observed addresses\n   * Signal that we have confidence an observed multiaddr is publicly dialable -\n   * this will make it appear in the output of getAddresses()\n   */\n  confirmObservedAddr(addr) {}\n  /**\n   * Signal that we do not have confidence an observed multiaddr is publicly dialable -\n   * this will remove it from the output of getObservedAddrs()\n   */\n  removeObservedAddr(addr) {}\n  /**\n   * Add peer observed addresses\n   */\n  addObservedAddr(addr) {\n    let ma = multiaddr(addr);\n    const remotePeer = ma.getPeerId();\n    // strip our peer id if it has been passed\n    if (remotePeer != null) {\n      const remotePeerId = peerIdFromString(remotePeer);\n      // use same encoding for comparison\n      if (remotePeerId.equals(this.components.peerId)) {\n        ma = ma.decapsulate(multiaddr(`/p2p/${this.components.peerId.toString()}`));\n      }\n    }\n    const addrString = ma.toString();\n    // do not trigger the change:addresses event if we already know about this address\n    if (this.observed.has(addrString)) {\n      return;\n    }\n    this.observed.add(addrString);\n    this.dispatchEvent(new CustomEvent('change:addresses'));\n  }\n  getAddresses() {\n    let addrs = this.getAnnounceAddrs().map(ma => ma.toString());\n    if (addrs.length === 0) {\n      // no configured announce addrs, add configured listen addresses\n      addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());\n    }\n    addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString()));\n    // dedupe multiaddrs\n    const addrSet = new Set(addrs);\n    // Create advertising list\n    return this.announceFilter(Array.from(addrSet).map(str => multiaddr(str))).map(ma => {\n      // do not append our peer id to a path multiaddr as it will become invalid\n      if (ma.protos().pop()?.path === true) {\n        return ma;\n      }\n      if (ma.getPeerId() === this.components.peerId.toString()) {\n        return ma;\n      }\n      return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n    });\n  }\n}","map":{"version":3,"names":["CustomEvent","EventEmitter","multiaddr","peerIdFromString","defaultAddressFilter","addrs","DefaultAddressManager","constructor","components","init","listen","announce","map","ma","toString","Set","observed","announceFilter","getListenAddrs","Array","from","a","getAnnounceAddrs","getObservedAddrs","confirmObservedAddr","addr","removeObservedAddr","addObservedAddr","remotePeer","getPeerId","remotePeerId","equals","peerId","decapsulate","addrString","has","add","dispatchEvent","getAddresses","length","transportManager","getAddrs","concat","addrSet","str","protos","pop","path","encapsulate"],"sources":["../../../src/address-manager/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}