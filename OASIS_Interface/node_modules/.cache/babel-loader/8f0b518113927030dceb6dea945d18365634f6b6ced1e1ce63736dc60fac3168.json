{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { validateAddrs } from './utils.js';\nconst log = logger('libp2p:circuit:stop');\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop(options) {\n  const {\n    connection,\n    request,\n    streamHandler\n  } = options;\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    log.error('invalid stop request via peer %p %o', connection.remotePeer, err);\n    return;\n  }\n  // The request is valid\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n}\n/**\n * Creates a STOP request\n */\nexport async function stop(options) {\n  const {\n    connection,\n    request,\n    signal\n  } = options;\n  const stream = await connection.newStream(RELAY_CODEC, {\n    signal\n  });\n  log('starting stop request to %p', connection.remotePeer);\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n  if (response == null) {\n    streamHandler.close();\n    return;\n  }\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %p was successful', connection.remotePeer);\n    return streamHandler.rest();\n  }\n  log('stop request failed with code %d', response.code);\n  streamHandler.close();\n}","map":{"version":3,"names":["logger","CircuitRelay","CircuitPB","RELAY_CODEC","StreamHandler","validateAddrs","log","handleStop","options","connection","request","streamHandler","err","error","remotePeer","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","signal","stream","newStream","response","read","close"],"sources":["../../../../src/circuit/circuit/stop.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,YAAY,IAAIC,SAAS,QAAQ,gBAAgB;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,aAAa,QAAQ,YAAY;AAM1C,MAAMC,GAAG,GAAGN,MAAM,CAAC,qBAAqB,CAAC;AAQzC;;;AAGA,OAAM,SAAUO,UAAUA,CAAEC,OAA0B;EACpD,MAAM;IACJC,UAAU;IACVC,OAAO;IACPC;EAAa,CACd,GAAGH,OAAO;EAEX;EACA,IAAI;IACFH,aAAa,CAACK,OAAO,EAAEC,aAAa,CAAC;GACtC,CAAC,OAAOC,GAAQ,EAAE;IACjBN,GAAG,CAACO,KAAK,CAAC,qCAAqC,EAAEJ,UAAU,CAACK,UAAU,EAAEF,GAAG,CAAC;IAC5E;;EAGF;EACAN,GAAG,CAAC,uBAAuB,CAAC;EAC5BK,aAAa,CAACI,KAAK,CAAC;IAClBC,IAAI,EAAEd,SAAS,CAACe,IAAI,CAACC,MAAM;IAC3BC,IAAI,EAAEjB,SAAS,CAACkB,MAAM,CAACC;GACxB,CAAC;EAEF,OAAOV,aAAa,CAACW,IAAI,EAAE;AAC7B;AAOA;;;AAGA,OAAO,eAAeC,IAAIA,CAAEf,OAAoB;EAC9C,MAAM;IACJC,UAAU;IACVC,OAAO;IACPc;EAAM,CACP,GAAGhB,OAAO;EAEX,MAAMiB,MAAM,GAAG,MAAMhB,UAAU,CAACiB,SAAS,CAACvB,WAAW,EAAE;IACrDqB;GACD,CAAC;EACFlB,GAAG,CAAC,6BAA6B,EAAEG,UAAU,CAACK,UAAU,CAAC;EACzD,MAAMH,aAAa,GAAG,IAAIP,aAAa,CAAC;IAAEqB;EAAM,CAAE,CAAC;EAEnDd,aAAa,CAACI,KAAK,CAACL,OAAO,CAAC;EAC5B,MAAMiB,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAI,EAAE;EAE3C,IAAID,QAAQ,IAAI,IAAI,EAAE;IACpBhB,aAAa,CAACkB,KAAK,EAAE;IACrB;;EAGF,IAAIF,QAAQ,CAACR,IAAI,KAAKjB,SAAS,CAACkB,MAAM,CAACC,OAAO,EAAE;IAC9Cf,GAAG,CAAC,mCAAmC,EAAEG,UAAU,CAACK,UAAU,CAAC;IAC/D,OAAOH,aAAa,CAACW,IAAI,EAAE;;EAG7BhB,GAAG,CAAC,kCAAkC,EAAEqB,QAAQ,CAACR,IAAI,CAAC;EACtDR,aAAa,CAACkB,KAAK,EAAE;AACvB"},"metadata":{},"sourceType":"module","externalDependencies":[]}