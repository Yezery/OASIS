{"ast":null,"code":"import PQueue from 'p-queue';\nimport pTimeout from 'p-timeout';\nimport impl from './node.js';\nconst mutexes = {};\nlet implementation;\nasync function createReleaseable(queue, options) {\n  let res;\n  const p = new Promise(resolve => {\n    res = resolve;\n  });\n  void queue.add(async () => await pTimeout((async () => {\n    return await new Promise(resolve => {\n      res(() => {\n        resolve();\n      });\n    });\n  })(), {\n    milliseconds: options.timeout\n  }));\n  return await p;\n}\nconst createMutex = (name, options) => {\n  if (implementation.isWorker === true) {\n    return {\n      readLock: implementation.readLock(name, options),\n      writeLock: implementation.writeLock(name, options)\n    };\n  }\n  const masterQueue = new PQueue({\n    concurrency: 1\n  });\n  let readQueue;\n  return {\n    async readLock() {\n      // If there's already a read queue, just add the task to it\n      if (readQueue != null) {\n        return await createReleaseable(readQueue, options);\n      }\n      // Create a new read queue\n      readQueue = new PQueue({\n        concurrency: options.concurrency,\n        autoStart: false\n      });\n      const localReadQueue = readQueue;\n      // Add the task to the read queue\n      const readPromise = createReleaseable(readQueue, options);\n      void masterQueue.add(async () => {\n        // Start the task only once the master queue has completed processing\n        // any previous tasks\n        localReadQueue.start();\n        // Once all the tasks in the read queue have completed, remove it so\n        // that the next read lock will occur after any write locks that were\n        // started in the interim\n        return await localReadQueue.onIdle().then(() => {\n          if (readQueue === localReadQueue) {\n            readQueue = null;\n          }\n        });\n      });\n      return await readPromise;\n    },\n    async writeLock() {\n      // Remove the read queue reference, so that any later read locks will be\n      // added to a new queue that starts after this write lock has been\n      // released\n      readQueue = null;\n      return await createReleaseable(masterQueue, options);\n    }\n  };\n};\nconst defaultOptions = {\n  name: 'lock',\n  concurrency: Infinity,\n  timeout: 84600000,\n  singleProcess: false\n};\nexport default function createMortice(options) {\n  const opts = Object.assign({}, defaultOptions, options);\n  if (implementation == null) {\n    implementation = impl(opts);\n    if (implementation.isWorker !== true) {\n      // we are master, set up worker requests\n      implementation.addEventListener('requestReadLock', event => {\n        if (mutexes[event.data.name] == null) {\n          return;\n        }\n        void mutexes[event.data.name].readLock().then(async release => await event.data.handler().finally(() => release()));\n      });\n      implementation.addEventListener('requestWriteLock', async event => {\n        if (mutexes[event.data.name] == null) {\n          return;\n        }\n        void mutexes[event.data.name].writeLock().then(async release => await event.data.handler().finally(() => release()));\n      });\n    }\n  }\n  if (mutexes[opts.name] == null) {\n    mutexes[opts.name] = createMutex(opts.name, opts);\n  }\n  return mutexes[opts.name];\n}","map":{"version":3,"names":["PQueue","pTimeout","impl","mutexes","implementation","createReleaseable","queue","options","res","p","Promise","resolve","add","milliseconds","timeout","createMutex","name","isWorker","readLock","writeLock","masterQueue","concurrency","readQueue","autoStart","localReadQueue","readPromise","start","onIdle","then","defaultOptions","Infinity","singleProcess","createMortice","opts","Object","assign","addEventListener","event","data","release","handler","finally"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}