{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createMkdir } from './mkdir.js';\nimport { createStat } from './stat.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { updateTree } from './utils/update-tree.js';\nimport { updateMfsRoot } from './utils/update-mfs-root.js';\nimport { addLink } from './utils/add-link.js';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport mergeOpts from 'merge-options';\nimport { toTrail } from './utils/to-trail.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs:mfs:cp');\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n};\n\n/**\n * @param {MfsContext} context\n */\nexport function createCp(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"cp\"]}\n   */\n  async function mfsCp(from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts);\n    if (!Array.isArray(from)) {\n      from = [from];\n    }\n    const sources = await Promise.all(from.map(( /** @type {CID | string} */path) => toMfsPath(context, path, options)));\n    let destination = await toMfsPath(context, to, options);\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS');\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists);\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS');\n    }\n    const destinationIsDirectory = isDirectory(destination);\n    if (destination.exists) {\n      log('Destination exists');\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS');\n      }\n    } else {\n      log('Destination does not exist');\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n        }\n        await createMkdir(context)(destination.path, options);\n        destination = await toMfsPath(context, destination.path, options);\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`;\n        try {\n          await createStat(context)(parentFolder, options);\n        } catch ( /** @type {any} */err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err;\n          }\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS');\n          }\n          await createMkdir(context)(parentFolder, options);\n          destination = await toMfsPath(context, destination.path, options);\n        }\n      }\n    }\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory;\n    const trail = await toTrail(context, destinationPath);\n    if (sources.length === 1) {\n      const source = sources.pop();\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS');\n      }\n      const destinationName = destinationIsDirectory ? source.name : destination.name;\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`);\n      return copyToFile(context, source, destinationName, trail, options);\n    }\n    log('Multiple sources, wrapping in a directory');\n    return copyToDirectory(context, sources, destination, trail, options);\n  }\n  return withTimeoutOption(mfsCp);\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = destination => {\n  return destination.unixfs && destination.unixfs.type && destination.unixfs.type.includes('directory');\n};\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop();\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS');\n  }\n  parent = await addSourceToParent(context, source, destination, parent, options);\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent);\n  const newRootCid = await updateTree(context, destinationTrail, options);\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options);\n};\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i];\n    destination = await addSourceToParent(context, source, source.name, destination, options);\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination;\n  const newRootCid = await updateTree(context, destinationTrail, options);\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options);\n};\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid);\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  });\n  parent.node = node;\n  parent.cid = cid;\n  parent.size = size;\n  return parent;\n};","map":{"version":3,"names":["createMkdir","createStat","logger","errCode","updateTree","updateMfsRoot","addLink","toMfsPath","mergeOpts","toTrail","withTimeoutOption","mergeOptions","bind","ignoreUndefined","log","defaultOptions","parents","flush","hashAlg","cidVersion","shardSplitThreshold","createCp","context","mfsCp","from","to","opts","options","Array","isArray","sources","Promise","all","map","path","destination","length","Error","missing","find","source","exists","destinationIsDirectory","isDirectory","parts","parentFolder","slice","join","err","code","destinationPath","mfsPath","mfsDirectory","trail","pop","destinationName","name","copyToFile","copyToDirectory","unixfs","type","includes","destinationTrail","parent","addSourceToParent","push","newRootCid","i","childName","sourceBlock","repo","blocks","get","cid","node","size","parentCid"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/cp.js"],"sourcesContent":["import { createMkdir } from './mkdir.js'\nimport { createStat } from './stat.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport { addLink } from './utils/add-link.js'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport mergeOpts from 'merge-options'\nimport { toTrail } from './utils/to-trail.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:cp')\n\n/**\n * @typedef {import('@ipld/dag-pb').PBNode} DAGNode\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').Mtime} Mtime\n * @typedef {import('./utils/to-mfs-path').MfsPath} MfsPath\n * @typedef {import('./utils/to-trail').MfsTrail} MfsTrail\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {string} hashAlg\n * @property {CIDVersion} cidVersion\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  hashAlg: 'sha2-256',\n  cidVersion: 0,\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createCp (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"cp\"]}\n   */\n  async function mfsCp (from, to, opts = {}) {\n    /** @type {DefaultOptions} */\n    const options = mergeOptions(defaultOptions, opts)\n\n    if (!Array.isArray(from)) {\n      from = [from]\n    }\n\n    const sources = await Promise.all(\n      from.map((/** @type {CID | string} */ path) => toMfsPath(context, path, options))\n    )\n    let destination = await toMfsPath(context, to, options)\n\n    if (!sources.length || !destination) {\n      throw errCode(new Error('Please supply at least one source'), 'ERR_INVALID_PARAMS')\n    }\n\n    // make sure all sources exist\n    const missing = sources.find(source => !source.exists)\n\n    if (missing) {\n      throw errCode(new Error(`${missing.path} does not exist`), 'ERR_INVALID_PARAMS')\n    }\n\n    const destinationIsDirectory = isDirectory(destination)\n\n    if (destination.exists) {\n      log('Destination exists')\n\n      if (sources.length === 1 && !destinationIsDirectory) {\n        throw errCode(new Error('directory already has entry by that name'), 'ERR_ALREADY_EXISTS')\n      }\n    } else {\n      log('Destination does not exist')\n\n      if (sources.length > 1) {\n        // copying multiple files to one location, destination will be a directory\n        if (!options.parents) {\n          throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n        }\n\n        await createMkdir(context)(destination.path, options)\n        destination = await toMfsPath(context, destination.path, options)\n      } else if (destination.parts.length > 1) {\n        // copying to a folder, create it if necessary\n        const parentFolder = `/${destination.parts.slice(0, -1).join('/')}`\n\n        try {\n          await createStat(context)(parentFolder, options)\n        } catch (/** @type {any} */ err) {\n          if (err.code !== 'ERR_NOT_FOUND') {\n            throw err\n          }\n\n          if (!options.parents) {\n            throw errCode(new Error('destination did not exist, pass -p to create intermediate directories'), 'ERR_INVALID_PARAMS')\n          }\n\n          await createMkdir(context)(parentFolder, options)\n          destination = await toMfsPath(context, destination.path, options)\n        }\n      }\n    }\n\n    const destinationPath = isDirectory(destination) ? destination.mfsPath : destination.mfsDirectory\n    const trail = await toTrail(context, destinationPath)\n\n    if (sources.length === 1) {\n      const source = sources.pop()\n\n      if (!source) {\n        throw errCode(new Error('could not find source'), 'ERR_INVALID_PARAMS')\n      }\n\n      const destinationName = destinationIsDirectory ? source.name : destination.name\n\n      log(`Only one source, copying to destination ${destinationIsDirectory ? 'directory' : 'file'} ${destinationName}`)\n\n      return copyToFile(context, source, destinationName, trail, options)\n    }\n\n    log('Multiple sources, wrapping in a directory')\n    return copyToDirectory(context, sources, destination, trail, options)\n  }\n\n  return withTimeoutOption(mfsCp)\n}\n\n/**\n * @param {*} destination\n */\nconst isDirectory = (destination) => {\n  return destination.unixfs &&\n    destination.unixfs.type &&\n    destination.unixfs.type.includes('directory')\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToFile = async (context, source, destination, destinationTrail, options) => {\n  let parent = destinationTrail.pop()\n\n  if (!parent) {\n    throw errCode(new Error('destination had no parent'), 'ERR_INVALID_PARAMS')\n  }\n\n  parent = await addSourceToParent(context, source, destination, parent, options)\n\n  // update the tree with the new containing directory\n  destinationTrail.push(parent)\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath[]} sources\n * @param {*} destination\n * @param {MfsTrail[]} destinationTrail\n * @param {DefaultOptions} options\n */\nconst copyToDirectory = async (context, sources, destination, destinationTrail, options) => {\n  // copy all the sources to the destination\n  for (let i = 0; i < sources.length; i++) {\n    const source = sources[i]\n\n    destination = await addSourceToParent(context, source, source.name, destination, options)\n  }\n\n  // update the tree with the new containing directory\n  destinationTrail[destinationTrail.length - 1] = destination\n\n  const newRootCid = await updateTree(context, destinationTrail, options)\n\n  // Update the MFS record with the new CID for the root of the tree\n  await updateMfsRoot(context, newRootCid, options)\n}\n\n/**\n * @param {MfsContext} context\n * @param {MfsPath} source\n * @param {string} childName\n * @param {*} parent\n * @param {DefaultOptions} options\n * @returns {Promise<MfsTrail>}\n */\nconst addSourceToParent = async (context, source, childName, parent, options) => {\n  const sourceBlock = await context.repo.blocks.get(source.cid)\n  const {\n    node,\n    cid,\n    size\n  } = await addLink(context, {\n    parentCid: parent.cid,\n    size: sourceBlock.length,\n    cid: source.cid,\n    name: childName,\n    hashAlg: options.hashAlg,\n    cidVersion: options.cidVersion,\n    flush: options.flush,\n    shardSplitThreshold: options.shardSplitThreshold\n  })\n\n  parent.node = node\n  parent.cid = cid\n  parent.size = size\n\n  return parent\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}