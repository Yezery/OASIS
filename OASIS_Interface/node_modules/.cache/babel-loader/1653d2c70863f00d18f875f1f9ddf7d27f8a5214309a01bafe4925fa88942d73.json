{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { randomBytes } from '@libp2p/crypto';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { RPC } from '../message/rpc.js';\nimport { PublishConfigType, ValidateError } from '../types.js';\nimport { StrictSign, StrictNoSign } from '@libp2p/interface-pubsub';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport const SignPrefix = uint8ArrayFromString('libp2p-pubsub:');\nexport async function buildRawMessage(publishConfig, topic, originalData, transformedData) {\n  switch (publishConfig.type) {\n    case PublishConfigType.Signing:\n      {\n        const rpcMsg = {\n          from: publishConfig.author.toBytes(),\n          data: transformedData,\n          seqno: randomBytes(8),\n          topic,\n          signature: undefined,\n          key: undefined // Exclude key field for signing\n        };\n        // Get the message in bytes, and prepend with the pubsub prefix\n        // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n        const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsg).finish()]);\n        rpcMsg.signature = await publishConfig.privateKey.sign(bytes);\n        rpcMsg.key = publishConfig.key;\n        const msg = {\n          type: 'signed',\n          from: publishConfig.author,\n          data: originalData,\n          sequenceNumber: BigInt(`0x${uint8ArrayToString(rpcMsg.seqno, 'base16')}`),\n          topic,\n          signature: rpcMsg.signature,\n          key: rpcMsg.key\n        };\n        return {\n          raw: rpcMsg,\n          msg: msg\n        };\n      }\n    case PublishConfigType.Anonymous:\n      {\n        return {\n          raw: {\n            from: undefined,\n            data: transformedData,\n            seqno: undefined,\n            topic,\n            signature: undefined,\n            key: undefined\n          },\n          msg: {\n            type: 'unsigned',\n            data: originalData,\n            topic\n          }\n        };\n      }\n  }\n}\nexport async function validateToRawMessage(signaturePolicy, msg) {\n  // If strict-sign, verify all\n  // If anonymous (no-sign), ensure no preven\n  switch (signaturePolicy) {\n    case StrictNoSign:\n      if (msg.signature != null) return {\n        valid: false,\n        error: ValidateError.SignaturePresent\n      };\n      if (msg.seqno != null) return {\n        valid: false,\n        error: ValidateError.SeqnoPresent\n      };\n      if (msg.key != null) return {\n        valid: false,\n        error: ValidateError.FromPresent\n      };\n      return {\n        valid: true,\n        message: {\n          type: 'unsigned',\n          topic: msg.topic,\n          data: msg.data ?? new Uint8Array(0)\n        }\n      };\n    case StrictSign:\n      {\n        // Verify seqno\n        if (msg.seqno == null) return {\n          valid: false,\n          error: ValidateError.InvalidSeqno\n        };\n        if (msg.seqno.length !== 8) {\n          return {\n            valid: false,\n            error: ValidateError.InvalidSeqno\n          };\n        }\n        if (msg.signature == null) return {\n          valid: false,\n          error: ValidateError.InvalidSignature\n        };\n        if (msg.from == null) return {\n          valid: false,\n          error: ValidateError.InvalidPeerId\n        };\n        let fromPeerId;\n        try {\n          // TODO: Fix PeerId types\n          fromPeerId = peerIdFromBytes(msg.from);\n        } catch (e) {\n          return {\n            valid: false,\n            error: ValidateError.InvalidPeerId\n          };\n        }\n        // - check from defined\n        // - transform source to PeerId\n        // - parse signature\n        // - get .key, else from source\n        // - check key == source if present\n        // - verify sig\n        let publicKey;\n        if (msg.key) {\n          publicKey = unmarshalPublicKey(msg.key);\n          // TODO: Should `fromPeerId.pubKey` be optional?\n          if (fromPeerId.publicKey !== undefined && !uint8ArrayEquals(publicKey.bytes, fromPeerId.publicKey)) {\n            return {\n              valid: false,\n              error: ValidateError.InvalidPeerId\n            };\n          }\n        } else {\n          if (fromPeerId.publicKey == null) {\n            return {\n              valid: false,\n              error: ValidateError.InvalidPeerId\n            };\n          }\n          publicKey = unmarshalPublicKey(fromPeerId.publicKey);\n        }\n        const rpcMsgPreSign = {\n          from: msg.from,\n          data: msg.data,\n          seqno: msg.seqno,\n          topic: msg.topic,\n          signature: undefined,\n          key: undefined // Exclude key field for signing\n        };\n        // Get the message in bytes, and prepend with the pubsub prefix\n        // the signature is over the bytes \"libp2p-pubsub:<protobuf-message>\"\n        const bytes = uint8ArrayConcat([SignPrefix, RPC.Message.encode(rpcMsgPreSign).finish()]);\n        if (!(await publicKey.verify(bytes, msg.signature))) {\n          return {\n            valid: false,\n            error: ValidateError.InvalidSignature\n          };\n        }\n        return {\n          valid: true,\n          message: {\n            type: 'signed',\n            from: fromPeerId,\n            data: msg.data ?? new Uint8Array(0),\n            sequenceNumber: BigInt(`0x${uint8ArrayToString(msg.seqno, 'base16')}`),\n            topic: msg.topic,\n            signature: msg.signature,\n            key: msg.key ?? marshalPublicKey(publicKey)\n          }\n        };\n      }\n  }\n}","map":{"version":3,"names":["concat","uint8ArrayConcat","fromString","uint8ArrayFromString","marshalPublicKey","unmarshalPublicKey","randomBytes","peerIdFromBytes","equals","uint8ArrayEquals","RPC","PublishConfigType","ValidateError","StrictSign","StrictNoSign","toString","uint8ArrayToString","SignPrefix","buildRawMessage","publishConfig","topic","originalData","transformedData","type","Signing","rpcMsg","from","author","toBytes","data","seqno","signature","undefined","key","bytes","Message","encode","finish","privateKey","sign","msg","sequenceNumber","BigInt","raw","Anonymous","validateToRawMessage","signaturePolicy","valid","error","SignaturePresent","SeqnoPresent","FromPresent","message","Uint8Array","InvalidSeqno","length","InvalidSignature","InvalidPeerId","fromPeerId","e","publicKey","rpcMsgPreSign","verify"],"sources":["../../../src/utils/buildRawMessage.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}