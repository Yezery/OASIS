{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Queue from 'p-queue';\nimport { xor } from 'uint8arrays/xor';\nimport { toString } from 'uint8arrays/to-string';\nimport defer from 'p-defer';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { convertPeerId, convertBuffer } from '../utils.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { queryErrorEvent } from './events.js';\nconst MAX_XOR = BigInt('0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF');\n/**\n * Walks a path through the DHT, calling the passed query function for\n * every peer encountered that we have not seen before\n */\nexport async function* queryPath(options) {\n  const {\n    key,\n    startingPeer,\n    ourPeerId,\n    signal,\n    query,\n    alpha,\n    pathIndex,\n    numPaths,\n    cleanUp,\n    queryFuncTimeout,\n    log,\n    peersSeen\n  } = options;\n  // Only ALPHA node/value lookups are allowed at any given time for each process\n  // https://github.com/libp2p/specs/tree/master/kad-dht#alpha-concurrency-parameter-%CE%B1\n  const queue = new Queue({\n    concurrency: alpha\n  });\n  // perform lookups on kadId, not the actual value\n  const kadId = await convertBuffer(key);\n  /**\n   * Adds the passed peer to the query queue if it's not us and no\n   * other path has passed through this peer\n   */\n  function queryPeer(peer, peerKadId) {\n    if (peer == null) {\n      return;\n    }\n    peersSeen.add(peer);\n    const peerXor = BigInt('0x' + toString(xor(peerKadId, kadId), 'base16'));\n    queue.add(async () => {\n      let timeout;\n      const signals = [signal];\n      if (queryFuncTimeout != null) {\n        timeout = new TimeoutController(queryFuncTimeout);\n        signals.push(timeout.signal);\n      }\n      const compoundSignal = anySignal(signals);\n      try {\n        for await (const event of query({\n          key,\n          peer,\n          signal: compoundSignal,\n          pathIndex,\n          numPaths\n        })) {\n          if (compoundSignal.aborted) {\n            return;\n          }\n          // if there are closer peers and the query has not completed, continue the query\n          if (event.name === 'PEER_RESPONSE') {\n            for (const closerPeer of event.closer) {\n              if (peersSeen.has(closerPeer.id)) {\n                // eslint-disable-line max-depth\n                log('already seen %p in query', closerPeer.id);\n                continue;\n              }\n              if (ourPeerId.equals(closerPeer.id)) {\n                // eslint-disable-line max-depth\n                log('not querying ourselves');\n                continue;\n              }\n              const closerPeerKadId = await convertPeerId(closerPeer.id);\n              const closerPeerXor = BigInt('0x' + toString(xor(closerPeerKadId, kadId), 'base16'));\n              // only continue query if closer peer is actually closer\n              if (closerPeerXor > peerXor) {\n                // eslint-disable-line max-depth\n                log('skipping %p as they are not closer to %b than %p', closerPeer.id, key, peer);\n                continue;\n              }\n              log('querying closer peer %p', closerPeer.id);\n              queryPeer(closerPeer.id, closerPeerKadId);\n            }\n          }\n          // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n          queue.emit('completed', event);\n        }\n        timeout?.clear();\n      } catch (err) {\n        if (signal.aborted) {\n          // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n          queue.emit('error', err);\n        } else {\n          // TODO: we have upgraded to p-queue@7, this should no longer be necessary\n          queue.emit('completed', queryErrorEvent({\n            from: peer,\n            error: err\n          }));\n        }\n      } finally {\n        timeout?.clear();\n      }\n    }, {\n      // use xor value as the queue priority - closer peers should execute first\n      // subtract it from MAX_XOR because higher priority values execute sooner\n      // @ts-expect-error this is supposed to be a Number but it's ok to use BigInts\n      // as long as all priorities are BigInts since we won't mix BigInts and Number\n      // values in arithmetic operations\n      priority: MAX_XOR - peerXor\n    }).catch(err => {\n      log.error(err);\n    });\n  }\n  // begin the query with the starting peer\n  queryPeer(startingPeer, await convertPeerId(startingPeer));\n  // yield results as they come in\n  yield* toGenerator(queue, signal, cleanUp, log);\n}\nasync function* toGenerator(queue, signal, cleanUp, log) {\n  let deferred = defer();\n  let running = true;\n  const results = [];\n  const cleanup = () => {\n    if (!running) {\n      return;\n    }\n    log('clean up queue, results %d, queue size %d, pending tasks %d', results.length, queue.size, queue.pending);\n    running = false;\n    queue.clear();\n    results.splice(0, results.length);\n  };\n  queue.on('completed', result => {\n    results.push(result);\n    deferred.resolve();\n  });\n  queue.on('error', err => {\n    log('queue error', err);\n    cleanup();\n    deferred.reject(err);\n  });\n  queue.on('idle', () => {\n    log('queue idle');\n    running = false;\n    deferred.resolve();\n  });\n  // clear the queue and throw if the query is aborted\n  signal.addEventListener('abort', () => {\n    log('abort queue');\n    const wasRunning = running;\n    cleanup();\n    if (wasRunning) {\n      deferred.reject(new CodeError('Query aborted', 'ERR_QUERY_ABORTED'));\n    }\n  });\n  // the user broke out of the loop early, ensure we resolve the deferred result\n  // promise and clear the queue of any remaining jobs\n  cleanUp.addEventListener('cleanup', () => {\n    cleanup();\n    deferred.resolve();\n  });\n  while (running) {\n    // eslint-disable-line no-unmodified-loop-condition\n    await deferred.promise;\n    deferred = defer();\n    // yield all available results\n    while (results.length > 0) {\n      const result = results.shift();\n      if (result != null) {\n        yield result;\n      }\n    }\n  }\n  // yield any remaining results\n  yield* results;\n}","map":{"version":3,"names":["Queue","xor","toString","defer","CodeError","convertPeerId","convertBuffer","TimeoutController","anySignal","queryErrorEvent","MAX_XOR","BigInt","queryPath","options","key","startingPeer","ourPeerId","signal","query","alpha","pathIndex","numPaths","cleanUp","queryFuncTimeout","log","peersSeen","queue","concurrency","kadId","queryPeer","peer","peerKadId","add","peerXor","timeout","signals","push","compoundSignal","event","aborted","name","closerPeer","closer","has","id","equals","closerPeerKadId","closerPeerXor","emit","clear","err","from","error","priority","catch","toGenerator","deferred","running","results","cleanup","length","size","pending","splice","on","result","resolve","reject","addEventListener","wasRunning","promise","shift"],"sources":["../../../src/query/query-path.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}