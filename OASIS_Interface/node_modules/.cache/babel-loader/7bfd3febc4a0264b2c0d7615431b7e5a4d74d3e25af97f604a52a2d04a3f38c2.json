{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js';\nconst log = logger('ipfs:repo:gc');\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc({\n  repo,\n  hashers\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function* gc(options = {}) {\n    const start = Date.now();\n    let mfsRootCid;\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options);\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid);\n      yield* repo.gc();\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid);\n      }\n    }\n    log(`Complete (${Date.now() - start}ms)`);\n  }\n  return withTimeoutOption(gc);\n}","map":{"version":3,"names":["logger","withTimeoutOption","loadMfsRoot","log","createGc","repo","hashers","gc","options","start","Date","now","mfsRootCid","pins","pinRecursively","unpin"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/repo/gc.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,WAAW,QAAQ,iCAAiC;AAE7D,MAAMC,GAAG,GAAGH,MAAM,CAAC,cAAc,CAAC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,QAAQA,CAAE;EAAEC,IAAI;EAAEC;AAAQ,CAAC,EAAE;EAC3C;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACxB,IAAIC,UAAU;IAEd,IAAI;MACFA,UAAU,GAAG,MAAMV,WAAW,CAAC;QAC7BG,IAAI;QACJC;MACF,CAAC,EAAEE,OAAO,CAAC;;MAEX;MACA,MAAMH,IAAI,CAACQ,IAAI,CAACC,cAAc,CAACF,UAAU,CAAC;MAE1C,OAAQP,IAAI,CAACE,EAAE,CAAC,CAAC;IACnB,CAAC,SAAS;MACR;MACA,IAAIK,UAAU,EAAE;QACd,MAAMP,IAAI,CAACQ,IAAI,CAACE,KAAK,CAACH,UAAU,CAAC;MACnC;IACF;IAEAT,GAAG,CAAE,aAAYO,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGF,KAAM,KAAI,CAAC;EAC3C;EAEA,OAAOR,iBAAiB,CAACM,EAAE,CAAC;AAC9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}