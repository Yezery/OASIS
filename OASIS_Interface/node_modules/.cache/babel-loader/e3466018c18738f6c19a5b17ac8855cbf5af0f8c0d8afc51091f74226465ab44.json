{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat({\n  network\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat(options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap;\n    const snapshot = bitswap.stat().snapshot;\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    };\n  }\n  return withTimeoutOption(stat);\n}","map":{"version":3,"names":["withTimeoutOption","createStat","network","stat","options","bitswap","use","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","BigInt","wantlist","Array","from","getWantlist","map","e","cid","peers","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/bitswap/stat.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAUA,CAAE;EAAEC;AAAQ,CAAC,EAAE;EACvC;AACF;AACA;EACE,eAAeC,IAAIA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC;IACA,MAAMC,OAAO,GAAG,CAAC,MAAMH,OAAO,CAACI,GAAG,CAACF,OAAO,CAAC,EAAEC,OAAO;IACpD,MAAME,QAAQ,GAAGF,OAAO,CAACF,IAAI,CAAC,CAAC,CAACI,QAAQ;IAExC,OAAO;MACLC,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAoB,CAACC,QAAQ,CAAC,CAAC,CAAC;MACjEC,cAAc,EAAEC,MAAM,CAACN,QAAQ,CAACK,cAAc,CAACD,QAAQ,CAAC,CAAC,CAAC;MAC1DG,QAAQ,EAAEC,KAAK,CAACC,IAAI,CAACX,OAAO,CAACY,WAAW,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIA,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC;MAC9DC,KAAK,EAAEhB,OAAO,CAACgB,KAAK,CAAC,CAAC;MACtBC,eAAe,EAAET,MAAM,CAACN,QAAQ,CAACe,eAAe,CAACX,QAAQ,CAAC,CAAC,CAAC;MAC5DY,eAAe,EAAEV,MAAM,CAACN,QAAQ,CAACgB,eAAe,CAACZ,QAAQ,CAAC,CAAC,CAAC;MAC5Da,YAAY,EAAEX,MAAM,CAACN,QAAQ,CAACiB,YAAY,CAACb,QAAQ,CAAC,CAAC,CAAC;MACtDc,UAAU,EAAEZ,MAAM,CAACN,QAAQ,CAACkB,UAAU,CAACd,QAAQ,CAAC,CAAC,CAAC;MAClDe,QAAQ,EAAEb,MAAM,CAACN,QAAQ,CAACmB,QAAQ,CAACf,QAAQ,CAAC,CAAC;IAC/C,CAAC;EACH;EAEA,OAAOX,iBAAiB,CAACG,IAAI,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}