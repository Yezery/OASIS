{"ast":null,"code":"import { getToken, setMnemonic, checkUserExist } from \"@/api/axios/user\";\nimport CryptoJS from \"crypto-js\";\nexport default {\n  props: {\n    walletConnect: {\n      type: Function,\n      default: null\n    }\n  },\n  data() {\n    return {\n      //****Èí±ÂåÖËøûÊé•ÂºπÂá∫Ê°Ü******//\n      MetaMaskTipsIsShow: false,\n      Tips2: \"MetaMaskÊó†Ê≥ïËøûÊé• \",\n      isDisable: false,\n      //*********************//\n      //********Web3********//\n      web3: null,\n      contract: null,\n      toAddress: \"\",\n      value: \"\",\n      re: \"\",\n      avatar: \"\",\n      //*********************//\n      CopyTips: \"ÁÇπÂáªÂ§çÂà∂\",\n      CopySuccess: \"Â§çÂà∂ÊàêÂäüÔºÅ\",\n      isCopy: false,\n      isRepeatClick: true,\n      password: \"\"\n    };\n  },\n  mounted() {\n    if (window.ethereum != undefined) {\n      window.ethereum.on(\"accountsChanged\", () => {\n        this.connectWallet();\n      });\n    }\n  },\n  methods: {\n    Copy() {\n      navigator.clipboard.writeText(this.$store.state.currentAddress).then(() => {\n        this.isCopy = true;\n        setTimeout(() => {\n          this.isCopy = false;\n        }, 3000);\n      });\n    },\n    GETHashAvatar() {\n      if (this.$store.state.isconnect) {\n        this.avatar = \"data:image/png;base64,\" + new this.Identicon(this.$store.state.currentAddress, 120).toString();\n        this.$refs.avatar.width = 60;\n        this.$refs.avatar.height = 60;\n      } else {\n        this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n        this.$refs.avatar.width = 40;\n        this.$refs.avatar.height = 40;\n      }\n    },\n    MMCTDis() {\n      this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n      this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n      setTimeout(() => {\n        this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n      }, 750);\n    },\n    async connectWallet() {\n      if (this.isRepeatClick) {\n        this.isRepeatClick = false;\n        try {\n          // ËØ∑Ê±ÇÁî®Êà∑ÊéàÊùÉ\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          }).then(async handleAccountsChanged => {\n            this.$store.commit(\"connection\", true);\n            this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n            this.$store.commit(\"setcurrentAddress\", handleAccountsChanged[0]);\n          }).catch(error => {\n            this.$store.commit(\"connection\", false);\n            if (error.code === 4001) {\n              // EIP-1193 userRejectedRequest error\n              console.log(\"Please connect to MetaMask.\");\n            } else {\n              console.error(error);\n            }\n          });\n          // var isExist = false\n          //   if (re.data==\"\") {\n          //     alert(\"Ë¥¶Êà∑Ê≤°ÊúâÊ≥®ÂÜå\")\n          //     this.password = prompt(\"ÈÜíÂØÜÁ†Å\");\n          //     this.password = CryptoJS.SHA256(this.password).toString();\n          //     await setMnemonic().then(re => {\n          //       console.log(re);\n          //     })\n          //     await getToken(user).then((re) => {\n          //     console.log(re);\n          //     localStorage.setItem(\"token\", re.data.data);\n          //   })\n          //   } else {\n          //     this.password = prompt(\"ÂØÜÁ†Å\");\n          //     this.password = CryptoJS.SHA256(this.password).toString();\n          //     console.log(this.password);\n          //     await getToken(user).then((re) => {\n          //     console.log(re);\n          //     localStorage.setItem(\"token\", re.data.data);\n          //   });\n          // localStorage.getItem(\"token\");\n          //   }\n          var user = {\n            userAddress: this.$store.state.currentAddress,\n            encryptedPassword: CryptoJS.SHA256(this.password).toString()\n          };\n          await checkUserExist(user).then(async re => {\n            if (re.data.data == \"\") {\n              alert(\"Ë¥¶Êà∑Ê≤°ÊúâÊ≥®ÂÜå\");\n              this.password = prompt(\"ÈÜíÂØÜÁ†Å\");\n              console.log(user);\n              await setMnemonic(user).then(re => {\n                console.log(re);\n              });\n            } else {\n              this.password = prompt(\"ÂØÜÁ†Å\");\n            }\n          });\n          await getToken(user).then(async re => {\n            await localStorage.clear();\n            if (re.data.data == \"\") {\n              alert(\"ÂØÜÁ†ÅÈîôËØØ\");\n            } else {\n              localStorage.setItem(\"token\", re.data.data);\n            }\n          });\n          await this.walletConnect();\n          await this.$notify({\n            title: \"üéâ ËøûÊé•ÊàêÂäü\",\n            position: \"top-left\",\n            offset: 200\n          });\n        } catch (error) {\n          console.error(error);\n          this.$notify.error({\n            title: \"ËøûÊé•Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      } else {\n        this.$notify({\n          title: \"Â∑≤ÁªèÊúâËøûÊé•ËØ∑ÂãøÊìç‰ΩúÈ¢ëÁπÅ\",\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n      setTimeout(() => {\n        this.isRepeatClick = true;\n      }, 5000);\n    }\n  }\n};","map":{"version":3,"names":["getToken","setMnemonic","checkUserExist","CryptoJS","props","walletConnect","type","Function","default","data","MetaMaskTipsIsShow","Tips2","isDisable","web3","contract","toAddress","value","re","avatar","CopyTips","CopySuccess","isCopy","isRepeatClick","password","mounted","window","ethereum","undefined","on","connectWallet","methods","Copy","navigator","clipboard","writeText","$store","state","currentAddress","then","setTimeout","GETHashAvatar","isconnect","Identicon","toString","$refs","width","height","require","MMCTDis","MMCT","classList","remove","add","request","method","handleAccountsChanged","commit","catch","error","code","console","log","user","userAddress","encryptedPassword","SHA256","alert","prompt","localStorage","clear","setItem","$notify","title","position","offset"],"sources":["src/views/user/WalletConnect.vue"],"sourcesContent":["<template>\n  <div class=\"Walletbox\">\n    <div class=\"WalletInnerBox\" @click.stop=\"Copy\">\n      <span class=\"avatarBox\">\n        <img class=\"avatar\" :src=\"$store.state.avatar\" alt=\"\" ref=\"avatar\" slot=\"reference\" @click.stop=\"connectWallet\">\n      </span>\n      <span class=\"address\">{{ \n        $store.state.currentAddress==\"\"?\"MetaMask is not connected\":`${this.$store.state.currentAddress.slice(\n          0,\n          5\n        )}...${this.$store.state.currentAddress.slice(-5)}`\n      }}\n      </span>\n    </div>\n    <div />\n  </div>\n</template>\n\n<script>\n  import { getToken, setMnemonic, checkUserExist } from \"@/api/axios/user\";\n\n  import CryptoJS from \"crypto-js\";\n  export default {\n    props: {\n      walletConnect: {\n        type: Function,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        //****Èí±ÂåÖËøûÊé•ÂºπÂá∫Ê°Ü******//\n        MetaMaskTipsIsShow: false,\n        Tips2: \"MetaMaskÊó†Ê≥ïËøûÊé• \",\n        isDisable: false,\n        //*********************//\n        //********Web3********//\n        web3: null,\n        contract: null,\n        toAddress: \"\",\n        value: \"\",\n        re: \"\",\n        avatar: \"\",\n        //*********************//\n        CopyTips: \"ÁÇπÂáªÂ§çÂà∂\",\n        CopySuccess: \"Â§çÂà∂ÊàêÂäüÔºÅ\",\n        isCopy: false,\n        isRepeatClick: true,\n        password: \"\",\n      };\n    },\n    mounted() {\n      if (window.ethereum != undefined) {\n        window.ethereum.on(\"accountsChanged\", () => {\n          this.connectWallet()\n        } );\n      }\n    },\n    methods: {\n      Copy() {\n        navigator.clipboard\n          .writeText(this.$store.state.currentAddress)\n          .then(() => {\n            this.isCopy = true;\n            setTimeout(() => {\n              this.isCopy = false;\n            }, 3000);\n          });\n      },\n      GETHashAvatar() {\n        if (this.$store.state.isconnect) {\n          this.avatar =\n            \"data:image/png;base64,\" +\n            new this.Identicon(this.$store.state.currentAddress, 120).toString();\n          this.$refs.avatar.width = 60;\n          this.$refs.avatar.height = 60;\n        } else {\n          this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n          this.$refs.avatar.width = 40;\n          this.$refs.avatar.height = 40;\n        }\n      },\n      MMCTDis() {\n        this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n        this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n        setTimeout(() => {\n          this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n        }, 750);\n      },\n\n      async connectWallet() {\n        if (this.isRepeatClick) {\n          this.isRepeatClick = false;\n          try {\n            // ËØ∑Ê±ÇÁî®Êà∑ÊéàÊùÉ\n            await window.ethereum\n              .request({ method: \"eth_requestAccounts\" })\n              .then(async (handleAccountsChanged) => {\n                this.$store.commit(\"connection\", true);\n                this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n                this.$store.commit(\"setcurrentAddress\", handleAccountsChanged[0]);\n              })\n              .catch((error) => {\n                this.$store.commit(\"connection\", false);\n                if (error.code === 4001) {\n                  // EIP-1193 userRejectedRequest error\n                  console.log(\"Please connect to MetaMask.\");\n                } else {\n                  console.error(error);\n                }\n              });\n            // var isExist = false\n            //   if (re.data==\"\") {\n            //     alert(\"Ë¥¶Êà∑Ê≤°ÊúâÊ≥®ÂÜå\")\n            //     this.password = prompt(\"ÈÜíÂØÜÁ†Å\");\n            //     this.password = CryptoJS.SHA256(this.password).toString();\n            //     await setMnemonic().then(re => {\n            //       console.log(re);\n            //     })\n            //     await getToken(user).then((re) => {\n            //     console.log(re);\n            //     localStorage.setItem(\"token\", re.data.data);\n            //   })\n            //   } else {\n            //     this.password = prompt(\"ÂØÜÁ†Å\");\n            //     this.password = CryptoJS.SHA256(this.password).toString();\n            //     console.log(this.password);\n            //     await getToken(user).then((re) => {\n            //     console.log(re);\n            //     localStorage.setItem(\"token\", re.data.data);\n            //   });\n            // localStorage.getItem(\"token\");\n            //   }\n            var user = {\n              userAddress: this.$store.state.currentAddress,\n              encryptedPassword:CryptoJS.SHA256(this.password).toString(),\n            };\n            await checkUserExist(user).then(async (re) => {\n              if (re.data.data == \"\") {\n                alert(\"Ë¥¶Êà∑Ê≤°ÊúâÊ≥®ÂÜå\");\n                this.password = prompt(\"ÈÜíÂØÜÁ†Å\");\n                console.log(user);\n                await setMnemonic(user).then((re) => {\n                  console.log(re);\n                });\n              } else {\n                this.password = prompt(\"ÂØÜÁ†Å\");\n              }\n            });\n            \n            await getToken(user).then(async(re) => {\n                await localStorage.clear();\n                  if (re.data.data==\"\") {\n                    alert(\"ÂØÜÁ†ÅÈîôËØØ\")\n                  } else {\n                    localStorage.setItem(\"token\", re.data.data);\n                  }\n                });\n            \n           \n            await this.walletConnect();\n            await this.$notify({\n              title: \"üéâ ËøûÊé•ÊàêÂäü\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          } catch (error) {\n            console.error(error);\n            this.$notify.error({\n              title: \"ËøûÊé•Â§±Ë¥•\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        } else {\n          this.$notify({\n            title: \"Â∑≤ÁªèÊúâËøûÊé•ËØ∑ÂãøÊìç‰ΩúÈ¢ëÁπÅ\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n        setTimeout(() => {\n          this.isRepeatClick = true;\n        }, 5000);\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\">\n/* ÂÖ®Â±ÄÈÄöÁü•Ê†∑Âºè */\n.el-notification {\n  border: none !important;\n  padding-top: 2%;\n  padding-bottom: 2%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 20px;\n  .el-notification__title {\n    font-size: 1vw;\n    font-weight: 500;\n  }\n}\n::-webkit-scrollbar {\n  width: 6px;\n  height: 8px;\n  display: none;\n  background-color: transparent;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #ccc;\n  border-radius: 25px;\n}\n</style>\n<style lang=\"scss\" scoped>\n.Walletbox {\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.avatar {\n  object-fit: fill;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n  float: right;\n}\n.avatarBox {\n  overflow: hidden;\n  border-radius: 50%;\n  width: 38px;\n  height: 38px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 10%;\n  border: 2px solid var(--border-green--);\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    border: 2px solid var(--border-green--);\n    box-shadow: 0 0 20px var(--border-green--);\n    transition: all 0.3s ease-in-out;\n  }\n}\n.MetaMaskAvatar {\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.BOX {\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.WalletInnerBox {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n.address {\n  margin-left: 5%;\n  color: var(--Dark--);\n  font-weight: 800;\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  border-radius: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(238, 238, 238, 0.1);\n    transition: all 0.3s ease-in-out;\n  }\n}\n/* MetaMaskÂºπÂá∫Ê°Ü */\n.MetaMaskConnectionTip {\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n  position: absolute;\n  width: 350px;\n  height: 300px;\n  background-color: var(--White--);\n  color: var(--Dark--);\n  top: 50%;\n  left: 50%;\n  z-index: 100;\n  transform: translate(-50%, -50%);\n  border-radius: 20px;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.MetaMaskTipsBtn {\n  border: 0px solid;\n  background-color: white;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  border-radius: 7px;\n  padding-top: 5%;\n  padding-bottom: 5%;\n  padding-left: 22%;\n  padding-right: 22%;\n  font-size: 13px;\n  font-weight: 500;\n}\n.MetaMaskTipsBtn:hover {\n  background-color: rgb(252, 251, 251);\n}\n.MetaMaskTips {\n  font-size: 17px;\n  font-weight: 500;\n  margin-top: 25%;\n}\n/* ÈÅÆÁΩ©Â±Ç */\n.Mask {\n  z-index: 100;\n  position: fixed !important;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}