{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        const n = getParamValue('n', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        let inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [tfOps.concat(inputs, axis)];\n      }\n    case 'Gather':\n      {\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n      }\n    case 'GatherV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const batchDims = getParamValue('batchDims', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n      }\n    case 'Reverse':\n      {\n        const dims = getParamValue('dims', node, tensorMap, context);\n        const axis = [];\n        for (let i = 0; i < dims.length; i++) {\n          if (dims[i]) {\n            axis.push(i);\n          }\n        }\n        const input = getParamValue('x', node, tensorMap, context);\n        return [tfOps.reverse(input, axis)];\n      }\n    case 'ReverseV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        return [tfOps.reverse(input, axis)];\n      }\n    case 'Slice':\n      {\n        // tslint:disable-next-line:no-any\n        const begin = getParamValue('begin', node, tensorMap, context);\n        // tslint:disable-next-line:no-any\n        const size = getParamValue('size', node, tensorMap, context);\n        return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n    case 'StridedSlice':\n      {\n        const begin = getParamValue('begin', node, tensorMap, context);\n        const end = getParamValue('end', node, tensorMap, context);\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const beginMask = getParamValue('beginMask', node, tensorMap, context);\n        const endMask = getParamValue('endMask', node, tensorMap, context);\n        const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n    case 'Pack':\n      {\n        return tidy(() => {\n          const axis = getParamValue('axis', node, tensorMap, context);\n          const tensors = getParamValue('tensors', node, tensorMap, context);\n          // Reshape the tensors to the first tensor's shape if they don't\n          // match.\n          const shape = tensors[0].shape;\n          const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n          const mapped = tensors.map(tensor => {\n            const sameShape = util.arraysEqual(tensor.shape, shape);\n            if (!sameShape && !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n            return sameShape ? tensor : tfOps.reshape(tensor, shape);\n          });\n          return [tfOps.stack(mapped, axis)];\n        });\n      }\n    case 'Unpack':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        return tfOps.unstack(tensor, axis);\n      }\n    case 'Tile':\n      {\n        const reps = getParamValue('reps', node, tensorMap, context);\n        return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n    case 'Split':\n    case 'SplitV':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return tfOps.split(tensor, numOrSizeSplits, axis);\n      }\n    case 'ScatterNd':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const shape = getParamValue('shape', node, tensorMap, context);\n        return [tfOps.scatterND(indices, values, shape)];\n      }\n    case 'GatherNd':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gatherND(x, indices)];\n      }\n    case 'SparseToDense':\n      {\n        const indices = getParamValue('sparseIndices', node, tensorMap, context);\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'slice_join';","map":{"version":3,"names":["tidy","util","tfOps","getParamValue","executeOp","node","tensorMap","context","op","n","axis","inputs","slice","concat","input","indices","gather","cast","batchDims","dims","i","length","push","reverse","begin","size","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tensor","stridedSlice","tensors","shape","squeezedShape","squeeze","mapped","map","sameShape","arraysEqual","Error","reshape","stack","unstack","reps","tile","numOrSizeSplits","split","values","scatterND","x","gatherND","sparseValues","defaultValue","sparseToDense","dtype","TypeError","CATEGORY"],"sources":["../../../../../../../tfjs-converter/src/operations/executors/slice_join_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor1D, tidy, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n          const n = getParamValue('n', node, tensorMap, context) as number;\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          let inputs =\n              getParamValue('tensors', node, tensorMap, context) as Tensor[];\n          inputs = inputs.slice(0, n);\n          return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const batchDims =\n              getParamValue('batchDims', node, tensorMap, context) as number;\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          return [tfOps.gather(\n              input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n          const dims =\n              getParamValue('dims', node, tensorMap, context) as boolean[];\n          const axis = [];\n          for (let i = 0; i < dims.length; i++) {\n            if (dims[i]) {\n              axis.push(i);\n            }\n          }\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const input = getParamValue('x', node, tensorMap, context) as Tensor;\n          return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n          // tslint:disable-next-line:no-any\n          const begin = getParamValue('begin', node, tensorMap, context) as any;\n          // tslint:disable-next-line:no-any\n          const size = getParamValue('size', node, tensorMap, context) as any;\n          return [tfOps.slice(\n              getParamValue('x', node, tensorMap, context) as Tensor, begin,\n              size)];\n        }\n        case 'StridedSlice': {\n          const begin =\n              getParamValue('begin', node, tensorMap, context) as number[];\n          const end =\n              getParamValue('end', node, tensorMap, context) as number[];\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const beginMask =\n              getParamValue('beginMask', node, tensorMap, context) as number;\n          const endMask =\n              getParamValue('endMask', node, tensorMap, context) as number;\n          const ellipsisMask =\n              getParamValue('ellipsisMask', node, tensorMap, context) as number;\n          const newAxisMask =\n              getParamValue('newAxisMask', node, tensorMap, context) as number;\n          const shrinkAxisMask =\n              getParamValue('shrinkAxisMask', node, tensorMap, context) as\n              number;\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return [tfOps.stridedSlice(\n              tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n              newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n          return tidy(() => {\n            const axis =\n                getParamValue('axis', node, tensorMap, context) as number;\n            const tensors =\n                getParamValue('tensors', node, tensorMap, context) as Tensor[];\n            // Reshape the tensors to the first tensor's shape if they don't\n            // match.\n            const shape = tensors[0].shape;\n            const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n            const mapped = tensors.map(tensor => {\n              const sameShape = util.arraysEqual(tensor.shape, shape);\n              if (!sameShape &&\n                  !util.arraysEqual(\n                      tfOps.squeeze(tensor).shape, squeezedShape)) {\n                throw new Error('the input tensors shape does not match');\n              }\n              return sameShape ? tensor : tfOps.reshape(tensor, shape);\n            });\n            return [tfOps.stack(mapped, axis)];\n          });\n        }\n        case 'Unpack': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const tensor =\n              getParamValue('tensor', node, tensorMap, context) as Tensor;\n          return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n          const reps =\n              getParamValue('reps', node, tensorMap, context) as number[];\n          return [tfOps.tile(\n              getParamValue('x', node, tensorMap, context) as Tensor, reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const numOrSizeSplits =\n              getParamValue('numOrSizeSplits', node, tensorMap, context) as\n                  number |\n              number[];\n          const tensor = getParamValue('x', node, tensorMap, context) as Tensor;\n\n          return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          const values =\n              getParamValue('values', node, tensorMap, context) as Tensor;\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor;\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor;\n          return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n          const indices =\n              getParamValue('sparseIndices', node, tensorMap, context) as\n              Tensor;\n          const shape =\n              getParamValue('outputShape', node, tensorMap, context) as\n              number[];\n          const sparseValues =\n              getParamValue('sparseValues', node, tensorMap, context) as Tensor;\n          const defaultValue =\n              getParamValue('defaultValue', node, tensorMap, context) as Scalar;\n          return [tfOps.sparseToDense(\n              indices, sparseValues, shape,\n              sparseValues.dtype === defaultValue.dtype ?\n                  defaultValue :\n                  tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'slice_join';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}