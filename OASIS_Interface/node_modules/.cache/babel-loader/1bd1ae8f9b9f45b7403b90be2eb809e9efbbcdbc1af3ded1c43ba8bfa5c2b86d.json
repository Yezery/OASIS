{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { exporter } from './exporter.js';\nimport * as keysProtobuf from './keys.js';\nimport * as crypto from './secp256k1.js';\nexport class Secp256k1PublicKey {\n  constructor(key) {\n    _defineProperty(this, \"_key\", void 0);\n    crypto.validatePublicKey(key);\n    this._key = key;\n  }\n  async verify(data, sig) {\n    return crypto.hashAndVerify(this._key, sig, data);\n  }\n  marshal() {\n    return crypto.compressPublicKey(this._key);\n  }\n  get bytes() {\n    return keysProtobuf.PublicKey.encode({\n      Type: keysProtobuf.KeyType.Secp256k1,\n      Data: this.marshal()\n    }).subarray();\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n}\nexport class Secp256k1PrivateKey {\n  constructor(key, publicKey) {\n    _defineProperty(this, \"_key\", void 0);\n    _defineProperty(this, \"_publicKey\", void 0);\n    this._key = key;\n    this._publicKey = publicKey ?? crypto.computePublicKey(key);\n    crypto.validatePrivateKey(this._key);\n    crypto.validatePublicKey(this._publicKey);\n  }\n  async sign(message) {\n    return crypto.hashAndSign(this._key, message);\n  }\n  get public() {\n    return new Secp256k1PublicKey(this._publicKey);\n  }\n  marshal() {\n    return this._key;\n  }\n  get bytes() {\n    return keysProtobuf.PrivateKey.encode({\n      Type: keysProtobuf.KeyType.Secp256k1,\n      Data: this.marshal()\n    }).subarray();\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   */\n  async id() {\n    const hash = await this.public.hash();\n    return uint8ArrayToString(hash, 'base58btc');\n  }\n  /**\n   * Exports the key into a password protected `format`\n   */\n  async export(password, format = 'libp2p-key') {\n    if (format === 'libp2p-key') {\n      return exporter(this.bytes, password);\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n    }\n  }\n}\nexport function unmarshalSecp256k1PrivateKey(bytes) {\n  return new Secp256k1PrivateKey(bytes);\n}\nexport function unmarshalSecp256k1PublicKey(bytes) {\n  return new Secp256k1PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n  const privateKeyBytes = crypto.generateKey();\n  return new Secp256k1PrivateKey(privateKeyBytes);\n}","map":{"version":3,"names":["CodeError","sha256","equals","uint8ArrayEquals","toString","uint8ArrayToString","exporter","keysProtobuf","crypto","Secp256k1PublicKey","constructor","key","_defineProperty","validatePublicKey","_key","verify","data","sig","hashAndVerify","marshal","compressPublicKey","bytes","PublicKey","encode","Type","KeyType","Secp256k1","Data","subarray","hash","digest","Secp256k1PrivateKey","publicKey","_publicKey","computePublicKey","validatePrivateKey","sign","message","hashAndSign","public","PrivateKey","id","export","password","format","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","generateKeyPair","privateKeyBytes","generateKey"],"sources":["../../../src/keys/secp256k1-class.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}