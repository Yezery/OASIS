{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport drain from 'it-drain';\nimport filter from 'it-filter';\nimport take from 'it-take';\nimport all from 'it-all';\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return async function* () {\n    const values = await all(iterable);\n    yield* values.sort(sorter);\n  }();\n};\n\n/**\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\nexport class BaseBlockstore {\n  /**\n   * @returns {Promise<void>}\n   */\n  open() {\n    return Promise.reject(new Error('.open is not implemented'));\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close() {\n    return Promise.reject(new Error('.close is not implemented'));\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put(key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'));\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get(key, options) {\n    return Promise.reject(new Error('.get is not implemented'));\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has(key, options) {\n    return Promise.reject(new Error('.has is not implemented'));\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete(key, options) {\n    return Promise.reject(new Error('.delete is not implemented'));\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async *putMany(source, options = {}) {\n    for await (const {\n      key,\n      value\n    } of source) {\n      await this.put(key, value, options);\n      yield {\n        key,\n        value\n      };\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async *getMany(source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options);\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  async *deleteMany(source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options);\n      yield key;\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch() {\n    /** @type {Pair[]} */\n    let puts = [];\n    /** @type {CID[]} */\n    let dels = [];\n    return {\n      put(key, value) {\n        puts.push({\n          key,\n          value\n        });\n      },\n      delete(key) {\n        dels.push(key);\n      },\n      commit: async options => {\n        await drain(this.putMany(puts, options));\n        puts = [];\n        await drain(this.deleteMany(dels, options));\n        dels = [];\n      }\n    };\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async *_all(q, options) {\n    throw new Error('._all is not implemented');\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n  async *_allKeys(q, options) {\n    throw new Error('._allKeys is not implemented');\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query(q, options) {\n    let it = this._all(q, options);\n    if (q.prefix != null) {\n      it = filter(it, ( /** @type {Pair} */e) => e.key.toString().startsWith(q.prefix || ''));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= (q.offset || 0));\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys(q, options) {\n    let it = this._allKeys(q, options);\n    if (q.prefix != null) {\n      it = filter(it, ( /** @type {CID} */cid) => cid.toString().startsWith(q.prefix || ''));\n    }\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it);\n    }\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it);\n    }\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >= /** @type {number} */q.offset);\n    }\n    if (q.limit != null) {\n      it = take(it, q.limit);\n    }\n    return it;\n  }\n}","map":{"version":3,"names":["drain","filter","take","all","sortAll","iterable","sorter","values","sort","BaseBlockstore","open","Promise","reject","Error","close","put","key","val","options","get","has","delete","putMany","source","value","getMany","deleteMany","batch","puts","dels","push","commit","_all","q","_allKeys","query","it","prefix","e","toString","startsWith","Array","isArray","filters","reduce","f","orders","offset","i","limit","queryKeys","cid"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/blockstore-core@3.0.0/node_modules/blockstore-core/src/base.js"],"sourcesContent":["import drain from 'it-drain'\nimport filter from 'it-filter'\nimport take from 'it-take'\nimport all from 'it-all'\n\n/**\n * Collect all values from the iterable and sort them using\n * the passed sorter function\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(a: T, b: T) => -1 | 0 | 1} sorter\n * @returns {AsyncIterable<T>}\n */\nconst sortAll = (iterable, sorter) => {\n  return (async function * () {\n    const values = await all(iterable)\n    yield * values.sort(sorter)\n  })()\n}\n\n/**\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Batch} Batch\n *\n * @typedef {import('multiformats').CID} CID\n */\n\n/**\n * @template O\n * @typedef {import('interface-store').AwaitIterable<O>} AwaitIterable\n */\n\n/**\n * @implements {Blockstore}\n */\nexport class BaseBlockstore {\n  /**\n   * @returns {Promise<void>}\n   */\n  open () {\n    return Promise.reject(new Error('.open is not implemented'))\n  }\n\n  /**\n   * @returns {Promise<void>}\n   */\n  close () {\n    return Promise.reject(new Error('.close is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  put (key, val, options) {\n    return Promise.reject(new Error('.put is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<Uint8Array>}\n   */\n  get (key, options) {\n    return Promise.reject(new Error('.get is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<boolean>}\n   */\n  has (key, options) {\n    return Promise.reject(new Error('.has is not implemented'))\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Options} [options]\n   * @returns {Promise<void>}\n   */\n  delete (key, options) {\n    return Promise.reject(new Error('.delete is not implemented'))\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    for await (const { key, value } of source) {\n      await this.put(key, value, options)\n      yield { key, value }\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    for await (const key of source) {\n      yield this.get(key, options)\n    }\n  }\n\n  /**\n   * @param {AwaitIterable<CID>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  async * deleteMany (source, options = {}) {\n    for await (const key of source) {\n      await this.delete(key, options)\n      yield key\n    }\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    /** @type {Pair[]} */\n    let puts = []\n    /** @type {CID[]} */\n    let dels = []\n\n    return {\n      put (key, value) {\n        puts.push({ key, value })\n      },\n\n      delete (key) {\n        dels.push(key)\n      },\n      commit: async (options) => {\n        await drain(this.putMany(puts, options))\n        puts = []\n        await drain(this.deleteMany(dels, options))\n        dels = []\n      }\n    }\n  }\n\n  /**\n   * Extending classes should override `query` or implement this method\n   *\n   * @param {Query} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _all (q, options) {\n    throw new Error('._all is not implemented')\n  }\n\n  /**\n   * Extending classes should override `queryKeys` or implement this method\n   *\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   * @returns {AsyncIterable<CID>}\n   */\n  // eslint-disable-next-line require-yield\n  async * _allKeys (q, options) {\n    throw new Error('._allKeys is not implemented')\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    let it = this._all(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {Pair} */ e) =>\n        e.key.toString().startsWith(q.prefix || '')\n      )\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= (q.offset || 0))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    let it = this._allKeys(q, options)\n\n    if (q.prefix != null) {\n      it = filter(it, (/** @type {CID} */ cid) => cid.toString().startsWith(q.prefix || ''))\n    }\n\n    if (Array.isArray(q.filters)) {\n      it = q.filters.reduce((it, f) => filter(it, f), it)\n    }\n\n    if (Array.isArray(q.orders)) {\n      it = q.orders.reduce((it, f) => sortAll(it, f), it)\n    }\n\n    if (q.offset != null) {\n      let i = 0\n      it = filter(it, () => i++ >= /** @type {number} */ (q.offset))\n    }\n\n    if (q.limit != null) {\n      it = take(it, q.limit)\n    }\n\n    return it\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}