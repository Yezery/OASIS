{"ast":null,"code":"import { validatePeerScoreParams } from './peer-score-params.js';\nimport { computeScore } from './compute-score.js';\nimport { MessageDeliveries, DeliveryRecordStatus } from './message-deliveries.js';\nimport { logger } from '@libp2p/logger';\nimport { RejectReason } from '../types.js';\nimport { MapDef } from '../utils/set.js';\nconst log = logger('libp2p:gossipsub:score');\nexport class PeerScore {\n  constructor(params, metrics, opts) {\n    this.params = params;\n    this.metrics = metrics;\n    /**\n     * Per-peer stats for score calculation\n     */\n    this.peerStats = new Map();\n    /**\n     * IP colocation tracking; maps IP => set of peers.\n     */\n    this.peerIPs = new MapDef(() => new Set());\n    /**\n     * Cache score up to decayInterval if topic stats are unchanged.\n     */\n    this.scoreCache = new Map();\n    /**\n     * Recent message delivery timing/participants\n     */\n    this.deliveryRecords = new MessageDeliveries();\n    validatePeerScoreParams(params);\n    this.scoreCacheValidityMs = opts.scoreCacheValidityMs;\n    this.computeScore = opts.computeScore ?? computeScore;\n  }\n  get size() {\n    return this.peerStats.size;\n  }\n  /**\n   * Start PeerScore instance\n   */\n  start() {\n    if (this._backgroundInterval) {\n      log('Peer score already running');\n      return;\n    }\n    this._backgroundInterval = setInterval(() => this.background(), this.params.decayInterval);\n    log('started');\n  }\n  /**\n   * Stop PeerScore instance\n   */\n  stop() {\n    if (!this._backgroundInterval) {\n      log('Peer score already stopped');\n      return;\n    }\n    clearInterval(this._backgroundInterval);\n    delete this._backgroundInterval;\n    this.peerIPs.clear();\n    this.peerStats.clear();\n    this.deliveryRecords.clear();\n    log('stopped');\n  }\n  /**\n   * Periodic maintenance\n   */\n  background() {\n    this.refreshScores();\n    this.deliveryRecords.gc();\n  }\n  dumpPeerScoreStats() {\n    return Object.fromEntries(Array.from(this.peerStats.entries()).map(([peer, stats]) => [peer, stats]));\n  }\n  /**\n   * Decays scores, and purges score records for disconnected peers once their expiry has elapsed.\n   */\n  refreshScores() {\n    const now = Date.now();\n    const decayToZero = this.params.decayToZero;\n    this.peerStats.forEach((pstats, id) => {\n      if (!pstats.connected) {\n        // has the retention period expired?\n        if (now > pstats.expire) {\n          // yes, throw it away (but clean up the IP tracking first)\n          this.removeIPsForPeer(id, pstats.knownIPs);\n          this.peerStats.delete(id);\n          this.scoreCache.delete(id);\n        }\n        // we don't decay retained scores, as the peer is not active.\n        // this way the peer cannot reset a negative score by simply disconnecting and reconnecting,\n        // unless the retention period has elapsed.\n        // similarly, a well behaved peer does not lose its score by getting disconnected.\n        return;\n      }\n      Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n        const tparams = this.params.topics[topic];\n        if (tparams === undefined) {\n          // we are not scoring this topic\n          // should be unreachable, we only add scored topics to pstats\n          return;\n        }\n        // decay counters\n        tstats.firstMessageDeliveries *= tparams.firstMessageDeliveriesDecay;\n        if (tstats.firstMessageDeliveries < decayToZero) {\n          tstats.firstMessageDeliveries = 0;\n        }\n        tstats.meshMessageDeliveries *= tparams.meshMessageDeliveriesDecay;\n        if (tstats.meshMessageDeliveries < decayToZero) {\n          tstats.meshMessageDeliveries = 0;\n        }\n        tstats.meshFailurePenalty *= tparams.meshFailurePenaltyDecay;\n        if (tstats.meshFailurePenalty < decayToZero) {\n          tstats.meshFailurePenalty = 0;\n        }\n        tstats.invalidMessageDeliveries *= tparams.invalidMessageDeliveriesDecay;\n        if (tstats.invalidMessageDeliveries < decayToZero) {\n          tstats.invalidMessageDeliveries = 0;\n        }\n        // update mesh time and activate mesh message delivery parameter if need be\n        if (tstats.inMesh) {\n          tstats.meshTime = now - tstats.graftTime;\n          if (tstats.meshTime > tparams.meshMessageDeliveriesActivation) {\n            tstats.meshMessageDeliveriesActive = true;\n          }\n        }\n      });\n      // decay P7 counter\n      pstats.behaviourPenalty *= this.params.behaviourPenaltyDecay;\n      if (pstats.behaviourPenalty < decayToZero) {\n        pstats.behaviourPenalty = 0;\n      }\n    });\n  }\n  /**\n   * Return the score for a peer\n   */\n  score(id) {\n    this.metrics?.scoreFnCalls.inc();\n    const pstats = this.peerStats.get(id);\n    if (!pstats) {\n      return 0;\n    }\n    const now = Date.now();\n    const cacheEntry = this.scoreCache.get(id);\n    // Found cached score within validity period\n    if (cacheEntry && cacheEntry.cacheUntil > now) {\n      return cacheEntry.score;\n    }\n    this.metrics?.scoreFnRuns.inc();\n    const score = this.computeScore(id, pstats, this.params, this.peerIPs);\n    const cacheUntil = now + this.scoreCacheValidityMs;\n    if (cacheEntry) {\n      this.metrics?.scoreCachedDelta.observe(Math.abs(score - cacheEntry.score));\n      cacheEntry.score = score;\n      cacheEntry.cacheUntil = cacheUntil;\n    } else {\n      this.scoreCache.set(id, {\n        score,\n        cacheUntil\n      });\n    }\n    return score;\n  }\n  /**\n   * Apply a behavioural penalty to a peer\n   */\n  addPenalty(id, penalty, penaltyLabel) {\n    const pstats = this.peerStats.get(id);\n    if (pstats) {\n      pstats.behaviourPenalty += penalty;\n      this.metrics?.onScorePenalty(penaltyLabel);\n    }\n  }\n  addPeer(id) {\n    // create peer stats (not including topic stats for each topic to be scored)\n    // topic stats will be added as needed\n    const pstats = {\n      connected: true,\n      expire: 0,\n      topics: {},\n      knownIPs: new Set(),\n      behaviourPenalty: 0\n    };\n    this.peerStats.set(id, pstats);\n  }\n  /** Adds a new IP to a peer, if the peer is not known the update is ignored */\n  addIP(id, ip) {\n    const pstats = this.peerStats.get(id);\n    if (pstats) {\n      pstats.knownIPs.add(ip);\n    }\n    this.peerIPs.getOrDefault(ip).add(id);\n  }\n  /** Remove peer association with IP */\n  removeIP(id, ip) {\n    const pstats = this.peerStats.get(id);\n    if (pstats) {\n      pstats.knownIPs.delete(ip);\n    }\n    const peersWithIP = this.peerIPs.get(ip);\n    if (peersWithIP) {\n      peersWithIP.delete(id);\n      if (peersWithIP.size === 0) {\n        this.peerIPs.delete(ip);\n      }\n    }\n  }\n  removePeer(id) {\n    const pstats = this.peerStats.get(id);\n    if (!pstats) {\n      return;\n    }\n    // decide whether to retain the score; this currently only retains non-positive scores\n    // to dissuade attacks on the score function.\n    if (this.score(id) > 0) {\n      this.removeIPsForPeer(id, pstats.knownIPs);\n      this.peerStats.delete(id);\n      return;\n    }\n    // furthermore, when we decide to retain the score, the firstMessageDelivery counters are\n    // reset to 0 and mesh delivery penalties applied.\n    Object.entries(pstats.topics).forEach(([topic, tstats]) => {\n      tstats.firstMessageDeliveries = 0;\n      const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n      if (tstats.inMesh && tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n        const deficit = threshold - tstats.meshMessageDeliveries;\n        tstats.meshFailurePenalty += deficit * deficit;\n      }\n      tstats.inMesh = false;\n      tstats.meshMessageDeliveriesActive = false;\n    });\n    pstats.connected = false;\n    pstats.expire = Date.now() + this.params.retainScore;\n  }\n  /** Handles scoring functionality as a peer GRAFTs to a topic. */\n  graft(id, topic) {\n    const pstats = this.peerStats.get(id);\n    if (pstats) {\n      const tstats = this.getPtopicStats(pstats, topic);\n      if (tstats) {\n        // if we are scoring the topic, update the mesh status.\n        tstats.inMesh = true;\n        tstats.graftTime = Date.now();\n        tstats.meshTime = 0;\n        tstats.meshMessageDeliveriesActive = false;\n      }\n    }\n  }\n  /** Handles scoring functionality as a peer PRUNEs from a topic. */\n  prune(id, topic) {\n    const pstats = this.peerStats.get(id);\n    if (pstats) {\n      const tstats = this.getPtopicStats(pstats, topic);\n      if (tstats) {\n        // sticky mesh delivery rate failure penalty\n        const threshold = this.params.topics[topic].meshMessageDeliveriesThreshold;\n        if (tstats.meshMessageDeliveriesActive && tstats.meshMessageDeliveries < threshold) {\n          const deficit = threshold - tstats.meshMessageDeliveries;\n          tstats.meshFailurePenalty += deficit * deficit;\n        }\n        tstats.meshMessageDeliveriesActive = false;\n        tstats.inMesh = false;\n        // TODO: Consider clearing score cache on important penalties\n        // this.scoreCache.delete(id)\n      }\n    }\n  }\n\n  validateMessage(msgIdStr) {\n    this.deliveryRecords.ensureRecord(msgIdStr);\n  }\n  deliverMessage(from, msgIdStr, topic) {\n    this.markFirstMessageDelivery(from, topic);\n    const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n    const now = Date.now();\n    // defensive check that this is the first delivery trace -- delivery status should be unknown\n    if (drec.status !== DeliveryRecordStatus.unknown) {\n      log('unexpected delivery: message from %s was first seen %s ago and has delivery status %s', from, now - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n      return;\n    }\n    // mark the message as valid and reward mesh peers that have already forwarded it to us\n    drec.status = DeliveryRecordStatus.valid;\n    drec.validated = now;\n    drec.peers.forEach(p => {\n      // this check is to make sure a peer can't send us a message twice and get a double count\n      // if it is a first delivery.\n      if (p !== from.toString()) {\n        this.markDuplicateMessageDelivery(p, topic);\n      }\n    });\n  }\n  /**\n   * Similar to `rejectMessage` except does not require the message id or reason for an invalid message.\n   */\n  rejectInvalidMessage(from, topic) {\n    this.markInvalidMessageDelivery(from, topic);\n  }\n  rejectMessage(from, msgIdStr, topic, reason) {\n    switch (reason) {\n      // these messages are not tracked, but the peer is penalized as they are invalid\n      case RejectReason.Error:\n        this.markInvalidMessageDelivery(from, topic);\n        return;\n      // we ignore those messages, so do nothing.\n      case RejectReason.Blacklisted:\n        return;\n      // the rest are handled after record creation\n    }\n\n    const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n    // defensive check that this is the first rejection -- delivery status should be unknown\n    if (drec.status !== DeliveryRecordStatus.unknown) {\n      log('unexpected rejection: message from %s was first seen %s ago and has delivery status %d', from, Date.now() - drec.firstSeen, DeliveryRecordStatus[drec.status]);\n      return;\n    }\n    if (reason === RejectReason.Ignore) {\n      // we were explicitly instructed by the validator to ignore the message but not penalize the peer\n      drec.status = DeliveryRecordStatus.ignored;\n      drec.peers.clear();\n      return;\n    }\n    // mark the message as invalid and penalize peers that have already forwarded it.\n    drec.status = DeliveryRecordStatus.invalid;\n    this.markInvalidMessageDelivery(from, topic);\n    drec.peers.forEach(p => {\n      this.markInvalidMessageDelivery(p, topic);\n    });\n    // release the delivery time tracking map to free some memory early\n    drec.peers.clear();\n  }\n  duplicateMessage(from, msgIdStr, topic) {\n    const drec = this.deliveryRecords.ensureRecord(msgIdStr);\n    if (drec.peers.has(from)) {\n      // we have already seen this duplicate\n      return;\n    }\n    switch (drec.status) {\n      case DeliveryRecordStatus.unknown:\n        // the message is being validated; track the peer delivery and wait for\n        // the Deliver/Reject/Ignore notification.\n        drec.peers.add(from);\n        break;\n      case DeliveryRecordStatus.valid:\n        // mark the peer delivery time to only count a duplicate delivery once.\n        drec.peers.add(from);\n        this.markDuplicateMessageDelivery(from, topic, drec.validated);\n        break;\n      case DeliveryRecordStatus.invalid:\n        // we no longer track delivery time\n        this.markInvalidMessageDelivery(from, topic);\n        break;\n      case DeliveryRecordStatus.ignored:\n        // the message was ignored; do nothing (we don't know if it was valid)\n        break;\n    }\n  }\n  /**\n   * Increments the \"invalid message deliveries\" counter for all scored topics the message is published in.\n   */\n  markInvalidMessageDelivery(from, topic) {\n    const pstats = this.peerStats.get(from);\n    if (pstats) {\n      const tstats = this.getPtopicStats(pstats, topic);\n      if (tstats) {\n        tstats.invalidMessageDeliveries += 1;\n      }\n    }\n  }\n  /**\n   * Increments the \"first message deliveries\" counter for all scored topics the message is published in,\n   * as well as the \"mesh message deliveries\" counter, if the peer is in the mesh for the topic.\n   * Messages already known (with the seenCache) are counted with markDuplicateMessageDelivery()\n   */\n  markFirstMessageDelivery(from, topic) {\n    const pstats = this.peerStats.get(from);\n    if (pstats) {\n      const tstats = this.getPtopicStats(pstats, topic);\n      if (tstats) {\n        let cap = this.params.topics[topic].firstMessageDeliveriesCap;\n        tstats.firstMessageDeliveries = Math.min(cap, tstats.firstMessageDeliveries + 1);\n        if (tstats.inMesh) {\n          cap = this.params.topics[topic].meshMessageDeliveriesCap;\n          tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n        }\n      }\n    }\n  }\n  /**\n   * Increments the \"mesh message deliveries\" counter for messages we've seen before,\n   * as long the message was received within the P3 window.\n   */\n  markDuplicateMessageDelivery(from, topic, validatedTime) {\n    const pstats = this.peerStats.get(from);\n    if (pstats) {\n      const now = validatedTime !== undefined ? Date.now() : 0;\n      const tstats = this.getPtopicStats(pstats, topic);\n      if (tstats && tstats.inMesh) {\n        const tparams = this.params.topics[topic];\n        // check against the mesh delivery window -- if the validated time is passed as 0, then\n        // the message was received before we finished validation and thus falls within the mesh\n        // delivery window.\n        if (validatedTime !== undefined) {\n          const deliveryDelayMs = now - validatedTime;\n          const isLateDelivery = deliveryDelayMs > tparams.meshMessageDeliveriesWindow;\n          this.metrics?.onDuplicateMsgDelivery(topic, deliveryDelayMs, isLateDelivery);\n          if (isLateDelivery) {\n            return;\n          }\n        }\n        const cap = tparams.meshMessageDeliveriesCap;\n        tstats.meshMessageDeliveries = Math.min(cap, tstats.meshMessageDeliveries + 1);\n      }\n    }\n  }\n  /**\n   * Removes an IP list from the tracking list for a peer.\n   */\n  removeIPsForPeer(id, ipsToRemove) {\n    for (const ipToRemove of ipsToRemove) {\n      const peerSet = this.peerIPs.get(ipToRemove);\n      if (peerSet) {\n        peerSet.delete(id);\n        if (peerSet.size === 0) {\n          this.peerIPs.delete(ipToRemove);\n        }\n      }\n    }\n  }\n  /**\n   * Returns topic stats if they exist, otherwise if the supplied parameters score the\n   * topic, inserts the default stats and returns a reference to those. If neither apply, returns None.\n   */\n  getPtopicStats(pstats, topic) {\n    let topicStats = pstats.topics[topic];\n    if (topicStats !== undefined) {\n      return topicStats;\n    }\n    if (this.params.topics[topic] !== undefined) {\n      topicStats = {\n        inMesh: false,\n        graftTime: 0,\n        meshTime: 0,\n        firstMessageDeliveries: 0,\n        meshMessageDeliveries: 0,\n        meshMessageDeliveriesActive: false,\n        meshFailurePenalty: 0,\n        invalidMessageDeliveries: 0\n      };\n      pstats.topics[topic] = topicStats;\n      return topicStats;\n    }\n    return null;\n  }\n}","map":{"version":3,"names":["validatePeerScoreParams","computeScore","MessageDeliveries","DeliveryRecordStatus","logger","RejectReason","MapDef","log","PeerScore","constructor","params","metrics","opts","peerStats","Map","peerIPs","Set","scoreCache","deliveryRecords","scoreCacheValidityMs","size","start","_backgroundInterval","setInterval","background","decayInterval","stop","clearInterval","clear","refreshScores","gc","dumpPeerScoreStats","Object","fromEntries","Array","from","entries","map","peer","stats","now","Date","decayToZero","forEach","pstats","id","connected","expire","removeIPsForPeer","knownIPs","delete","topics","topic","tstats","tparams","undefined","firstMessageDeliveries","firstMessageDeliveriesDecay","meshMessageDeliveries","meshMessageDeliveriesDecay","meshFailurePenalty","meshFailurePenaltyDecay","invalidMessageDeliveries","invalidMessageDeliveriesDecay","inMesh","meshTime","graftTime","meshMessageDeliveriesActivation","meshMessageDeliveriesActive","behaviourPenalty","behaviourPenaltyDecay","score","scoreFnCalls","inc","get","cacheEntry","cacheUntil","scoreFnRuns","scoreCachedDelta","observe","Math","abs","set","addPenalty","penalty","penaltyLabel","onScorePenalty","addPeer","addIP","ip","add","getOrDefault","removeIP","peersWithIP","removePeer","threshold","meshMessageDeliveriesThreshold","deficit","retainScore","graft","getPtopicStats","prune","validateMessage","msgIdStr","ensureRecord","deliverMessage","markFirstMessageDelivery","drec","status","unknown","firstSeen","valid","validated","peers","p","toString","markDuplicateMessageDelivery","rejectInvalidMessage","markInvalidMessageDelivery","rejectMessage","reason","Error","Blacklisted","Ignore","ignored","invalid","duplicateMessage","has","cap","firstMessageDeliveriesCap","min","meshMessageDeliveriesCap","validatedTime","deliveryDelayMs","isLateDelivery","meshMessageDeliveriesWindow","onDuplicateMsgDelivery","ipsToRemove","ipToRemove","peerSet","topicStats"],"sources":["../../../src/score/peer-score.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}