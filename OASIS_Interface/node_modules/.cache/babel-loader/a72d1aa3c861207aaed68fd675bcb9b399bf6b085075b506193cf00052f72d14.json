{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport * as lp from 'it-length-prefixed';\nimport { handshake } from 'it-handshake';\nimport { CircuitRelay } from '../pb/index.js';\nconst log = logger('libp2p:circuit:stream-handler');\nexport class StreamHandler {\n  constructor(options) {\n    const {\n      stream,\n      maxLength = 4096\n    } = options;\n    this.stream = stream;\n    this.shake = handshake(this.stream);\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   */\n  async read() {\n    // @ts-expect-error FIXME is a source, needs to be a generator\n    const msg = await this.decoder.next();\n    if (msg.value != null) {\n      const value = CircuitRelay.decode(msg.value);\n      log('read message type', value.type);\n      return value;\n    }\n    log('read received no value, closing stream');\n    // End the stream, we didn't get data\n    this.close();\n  }\n  /**\n   * Encode and write array of buffers\n   */\n  write(msg) {\n    log('write message type %s', msg.type);\n    this.shake.write(lp.encode.single(CircuitRelay.encode(msg)));\n  }\n  /**\n   * Return the handshake rest stream and invalidate handler\n   */\n  rest() {\n    this.shake.rest();\n    return this.shake.stream;\n  }\n  /**\n   * @param {CircuitRelay} msg - An unencoded CircuitRelay protobuf message\n   */\n  end(msg) {\n    this.write(msg);\n    this.close();\n  }\n  /**\n   * Close the stream\n   */\n  close() {\n    log('closing the stream');\n    void this.rest().sink([]).catch(err => {\n      log.error(err);\n    });\n  }\n}","map":{"version":3,"names":["logger","lp","handshake","CircuitRelay","log","StreamHandler","constructor","options","stream","maxLength","shake","decoder","decode","fromReader","reader","maxDataLength","read","msg","next","value","type","close","write","encode","single","rest","end","sink","catch","err","error"],"sources":["../../../../src/circuit/circuit/stream-handler.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAO,KAAKC,EAAE,MAAM,oBAAoB;AACxC,SAAoBC,SAAS,QAAQ,cAAc;AACnD,SAASC,YAAY,QAAQ,gBAAgB;AAK7C,MAAMC,GAAG,GAAGJ,MAAM,CAAC,+BAA+B,CAAC;AAcnD,OAAM,MAAOK,aAAa;EAKxBC,YAAaC,OAA6B;IACxC,MAAM;MAAEC,MAAM;MAAEC,SAAS,GAAG;IAAI,CAAE,GAAGF,OAAO;IAE5C,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,KAAK,GAAGR,SAAS,CAAC,IAAI,CAACM,MAAM,CAAC;IACnC,IAAI,CAACG,OAAO,GAAGV,EAAE,CAACW,MAAM,CAACC,UAAU,CAAC,IAAI,CAACH,KAAK,CAACI,MAAM,EAAE;MAAEC,aAAa,EAAEN;IAAS,CAAE,CAAC;EACtF;EAEA;;;EAGA,MAAMO,IAAIA,CAAA;IACR;IACA,MAAMC,GAAG,GAAG,MAAM,IAAI,CAACN,OAAO,CAACO,IAAI,EAAE;IAErC,IAAID,GAAG,CAACE,KAAK,IAAI,IAAI,EAAE;MACrB,MAAMA,KAAK,GAAGhB,YAAY,CAACS,MAAM,CAACK,GAAG,CAACE,KAAK,CAAC;MAC5Cf,GAAG,CAAC,mBAAmB,EAAEe,KAAK,CAACC,IAAI,CAAC;MACpC,OAAOD,KAAK;;IAGdf,GAAG,CAAC,wCAAwC,CAAC;IAC7C;IACA,IAAI,CAACiB,KAAK,EAAE;EACd;EAEA;;;EAGAC,KAAKA,CAAEL,GAAiB;IACtBb,GAAG,CAAC,uBAAuB,EAAEa,GAAG,CAACG,IAAI,CAAC;IACtC,IAAI,CAACV,KAAK,CAACY,KAAK,CAACrB,EAAE,CAACsB,MAAM,CAACC,MAAM,CAACrB,YAAY,CAACoB,MAAM,CAACN,GAAG,CAAC,CAAC,CAAC;EAC9D;EAEA;;;EAGAQ,IAAIA,CAAA;IACF,IAAI,CAACf,KAAK,CAACe,IAAI,EAAE;IACjB,OAAO,IAAI,CAACf,KAAK,CAACF,MAAM;EAC1B;EAEA;;;EAGAkB,GAAGA,CAAET,GAAiB;IACpB,IAAI,CAACK,KAAK,CAACL,GAAG,CAAC;IACf,IAAI,CAACI,KAAK,EAAE;EACd;EAEA;;;EAGAA,KAAKA,CAAA;IACHjB,GAAG,CAAC,oBAAoB,CAAC;IACzB,KAAK,IAAI,CAACqB,IAAI,EAAE,CAACE,IAAI,CAAC,EAAE,CAAC,CAACC,KAAK,CAACC,GAAG,IAAG;MACpCzB,GAAG,CAAC0B,KAAK,CAACD,GAAG,CAAC;IAChB,CAAC,CAAC;EACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}