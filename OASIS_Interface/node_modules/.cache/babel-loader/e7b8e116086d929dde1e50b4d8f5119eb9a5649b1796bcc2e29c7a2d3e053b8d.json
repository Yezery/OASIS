{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport { Ledger } from './ledger.js';\nimport { RequestQueue } from './req-queue.js';\nimport { TaskMerger } from './task-merger.js';\nimport { logger } from '../utils/index.js';\nimport { trackedMap } from '@libp2p/tracked-map';\n\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType;\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024;\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor(peerId, blockstore, network, stats, libp2p, opts = {}) {\n    this._log = logger(peerId, 'engine');\n    this.blockstore = blockstore;\n    this.network = network;\n    this._stats = stats;\n    this._opts = this._processOpts(opts);\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    });\n    this._running = false;\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger);\n  }\n\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts(opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    };\n  }\n  _scheduleProcessTasks() {\n    setTimeout(() => {\n      this._processTasks();\n    });\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks() {\n    if (!this._running) {\n      return;\n    }\n    const {\n      peerId,\n      tasks,\n      pendingSize\n    } = this._requestQueue.popTasks(this._opts.targetMessageSize);\n    if (tasks.length === 0) {\n      return;\n    }\n\n    // Create a new message\n    const msg = new Message(false);\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize);\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = [];\n    const blockTasks = new Map();\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic);\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid);\n          blockTasks.set(task.topic, task.data);\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid);\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid);\n      }\n    }\n    const blocks = await this._getBlocks(blockCids);\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic);\n      const blk = blocks.get(topic);\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk);\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid);\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks);\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks();\n      return;\n    }\n    try {\n      // Send the message\n      peerId && (await this.network.sendMessage(peerId, msg));\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block);\n      }\n    } catch (err) {\n      this._log.error(err);\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks);\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks();\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n  wantlistForPeer(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n    return ledger ? ledger.wantlist.sortedEntries() : new Map();\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n    if (!ledger) {\n      return null;\n    }\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    };\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers() {\n    return Array.from(this.ledgerMap.values()).map(l => l.partner);\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks(blocks) {\n    if (!blocks.length) {\n      return;\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid);\n        if (!want) {\n          continue;\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length;\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n        let entrySize = blockSize;\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid);\n        }\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }]);\n      }\n    }\n    this._scheduleProcessTasks();\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived(peerId, msg) {\n    const ledger = this._findOrCreate(peerId);\n    if (msg.empty) {\n      return;\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist();\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger);\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks();\n      return;\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = [];\n    /** @type {BitswapMessageEntry[]} */\n    const wants = [];\n    msg.wantlist.forEach(entry => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid);\n        cancels.push(entry.cid);\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType);\n        wants.push(entry);\n      }\n    });\n    this._cancelWants(peerId, cancels);\n    await this._addWants(peerId, wants);\n    this._scheduleProcessTasks();\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants(peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId);\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants(peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));\n    const tasks = [];\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc);\n      const blockSize = blockSizes.get(id);\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          });\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize;\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid);\n        }\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        });\n      }\n      this._requestQueue.pushTasks(peerId, tasks);\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock(wantType, blockSize) {\n    return wantType === WantType.Block || blockSize <= this._opts.maxSizeReplaceHasWithBlock;\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes(cids) {\n    const blocks = await this._getBlocks(cids);\n    return new Map([...blocks].map(([k, v]) => [k, v.length]));\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks(cids) {\n    const res = new Map();\n    await Promise.all(cids.map(async cid => {\n      try {\n        const block = await this.blockstore.get(cid);\n        res.set(cid.toString(base58btc), block);\n      } catch ( /** @type {any} */e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e);\n        }\n      }\n    }));\n    return res;\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting(blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length);\n      ledger.receivedBytes(block.length);\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent(peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId);\n    ledger.sentBytes(block.length);\n    ledger.wantlist.remove(cid);\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent;\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv;\n  }\n\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n  peerDisconnected(peerId) {\n    this.ledgerMap.delete(peerId.toString());\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n    if (ledger) {\n      return ledger;\n    }\n    const l = new Ledger(peerId);\n    this.ledgerMap.set(peerIdStr, l);\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1);\n    }\n    return l;\n  }\n  start() {\n    this._running = true;\n  }\n  stop() {\n    this._running = false;\n  }\n}","map":{"version":3,"names":["CID","base58btc","BitswapMessage","Message","Wantlist","Ledger","RequestQueue","TaskMerger","logger","trackedMap","WantType","TARGET_MESSAGE_SIZE","MAX_SIZE_REPLACE_HAS_WITH_BLOCK","DecisionEngine","constructor","peerId","blockstore","network","stats","libp2p","opts","_log","_stats","_opts","_processOpts","ledgerMap","name","metrics","_running","_requestQueue","maxSizeReplaceHasWithBlock","targetMessageSize","_scheduleProcessTasks","setTimeout","_processTasks","tasks","pendingSize","popTasks","length","msg","setPendingBytes","blockCids","blockTasks","Map","task","cid","parse","topic","data","haveBlock","isWantBlock","push","set","addHave","addDontHave","blocks","_getBlocks","taskData","blk","get","addBlock","sendDontHave","empty","tasksDone","sendMessage","cidStr","block","entries","messageSent","err","error","wantlistForPeer","peerIdStr","toString","ledger","wantlist","sortedEntries","ledgerForPeer","peer","partner","value","debtRatio","sent","accounting","bytesSent","recv","bytesRecv","exchanged","exchangeCount","peers","Array","from","values","map","l","receivedBlocks","want","wantlistContains","blockSize","_sendAsBlock","wantType","entrySize","blockPresenceSize","pushTasks","priority","size","messageReceived","_findOrCreate","full","_updateBlockAccounting","cancels","wants","forEach","entry","cancel","cancelWant","_cancelWants","_addWants","cids","c","remove","blockSizes","_getBlockSizes","w","id","Block","k","v","res","Promise","all","e","code","blocksMap","receivedBytes","sentBytes","numBytesSentTo","numBytesReceivedFrom","peerDisconnected","delete","start","stop"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-bitswap@15.0.2/node_modules/ipfs-bitswap/src/decision-engine/index.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport { Ledger } from './ledger.js'\nimport { RequestQueue } from './req-queue.js'\nimport { TaskMerger } from './task-merger.js'\nimport { logger } from '../utils/index.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\n\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor (peerId, blockstore, network, stats, libp2p, opts = {}) {\n    this._log = logger(peerId, 'engine')\n    this.blockstore = blockstore\n    this.network = network\n    this._stats = stats\n    this._opts = this._processOpts(opts)\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    })\n    this._running = false\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger)\n  }\n\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts (opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    }\n  }\n\n  _scheduleProcessTasks () {\n    setTimeout(() => {\n      this._processTasks()\n    })\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks () {\n    if (!this._running) {\n      return\n    }\n\n    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)\n\n    if (tasks.length === 0) {\n      return\n    }\n\n    // Create a new message\n    const msg = new Message(false)\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize)\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = []\n    const blockTasks = new Map()\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic)\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid)\n          blockTasks.set(task.topic, task.data)\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid)\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid)\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids)\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic)\n      const blk = blocks.get(topic)\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk)\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid)\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks()\n\n      return\n    }\n\n    try {\n      // Send the message\n      peerId && await this.network.sendMessage(peerId, msg)\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block)\n      }\n    } catch (err) {\n      this._log.error(err)\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n  wantlistForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    return ledger ? ledger.wantlist.sortedEntries() : new Map()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n\n    const ledger = this.ledgerMap.get(peerIdStr)\n\n    if (!ledger) {\n      return null\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers () {\n    return Array.from(this.ledgerMap.values()).map((l) => l.partner)\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks (blocks) {\n    if (!blocks.length) {\n      return\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid)\n\n        if (!want) {\n          continue\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }])\n      }\n    }\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived (peerId, msg) {\n    const ledger = this._findOrCreate(peerId)\n\n    if (msg.empty) {\n      return\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist()\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger)\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks()\n      return\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = []\n    /** @type {BitswapMessageEntry[]} */\n    const wants = []\n    msg.wantlist.forEach((entry) => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid)\n        cancels.push(entry.cid)\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType)\n        wants.push(entry)\n      }\n    })\n\n    this._cancelWants(peerId, cancels)\n    await this._addWants(peerId, wants)\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants (peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants (peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))\n\n    const tasks = []\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc)\n      const blockSize = blockSizes.get(id)\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          })\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        })\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks)\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock (wantType, blockSize) {\n    return wantType === WantType.Block ||\n      blockSize <= this._opts.maxSizeReplaceHasWithBlock\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes (cids) {\n    const blocks = await this._getBlocks(cids)\n    return new Map([...blocks].map(([k, v]) => [k, v.length]))\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks (cids) {\n    const res = new Map()\n    await Promise.all(cids.map(async (cid) => {\n      try {\n        const block = await this.blockstore.get(cid)\n        res.set(cid.toString(base58btc), block)\n      } catch (/** @type {any} */ e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e)\n        }\n      }\n    }))\n    return res\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting (blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length)\n      ledger.receivedBytes(block.length)\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent (peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId)\n    ledger.sentBytes(block.length)\n    ledger.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv\n  }\n\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n  peerDisconnected (peerId) {\n    this.ledgerMap.delete(peerId.toString())\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    if (ledger) {\n      return ledger\n    }\n\n    const l = new Ledger(peerId)\n\n    this.ledgerMap.set(peerIdStr, l)\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1)\n    }\n\n    return l\n  }\n\n  start () {\n    this._running = true\n  }\n\n  stop () {\n    this._running = false\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,2BAA2B;AACrD,SAASC,cAAc,IAAIC,OAAO,QAAQ,qBAAqB;AAC/D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,SAASC,UAAU,QAAQ,qBAAqB;;AAEhD;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,GAAGP,OAAO,CAACO,QAAQ;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,EAAE,GAAG,IAAI;;AAErC;AACA;AACA;AACA;AACA;AACA,MAAMC,+BAA+B,GAAG,IAAI;AAE5C,OAAO,MAAMC,cAAc,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,WAAWA,CAAEC,MAAM,EAAEC,UAAU,EAAEC,OAAO,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IAClE,IAAI,CAACC,IAAI,GAAGb,MAAM,CAACO,MAAM,EAAE,QAAQ,CAAC;IACpC,IAAI,CAACC,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACK,MAAM,GAAGJ,KAAK;IACnB,IAAI,CAACK,KAAK,GAAG,IAAI,CAACC,YAAY,CAACJ,IAAI,CAAC;;IAEpC;IACA;IACA,IAAI,CAACK,SAAS,GAAGhB,UAAU,CAAC;MAC1BiB,IAAI,EAAE,yBAAyB;MAC/BC,OAAO,EAAER,MAAM,CAACQ;IAClB,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,GAAG,KAAK;;IAErB;IACA,IAAI,CAACC,aAAa,GAAG,IAAIvB,YAAY,CAACC,UAAU,CAAC;EACnD;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiB,YAAYA,CAAEJ,IAAI,EAAE;IAClB,OAAO;MACLU,0BAA0B,EAAElB,+BAA+B;MAC3DmB,iBAAiB,EAAEpB,mBAAmB;MACtC,GAAGS;IACL,CAAC;EACH;EAEAY,qBAAqBA,CAAA,EAAI;IACvBC,UAAU,CAAC,MAAM;MACf,IAAI,CAACC,aAAa,CAAC,CAAC;IACtB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACE,MAAMA,aAAaA,CAAA,EAAI;IACrB,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAClB;IACF;IAEA,MAAM;MAAEb,MAAM;MAAEoB,KAAK;MAAEC;IAAY,CAAC,GAAG,IAAI,CAACP,aAAa,CAACQ,QAAQ,CAAC,IAAI,CAACd,KAAK,CAACQ,iBAAiB,CAAC;IAEhG,IAAII,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;MACtB;IACF;;IAEA;IACA,MAAMC,GAAG,GAAG,IAAIpC,OAAO,CAAC,KAAK,CAAC;;IAE9B;IACAoC,GAAG,CAACC,eAAe,CAACJ,WAAW,CAAC;;IAEhC;IACA,MAAMK,SAAS,GAAG,EAAE;IACpB,MAAMC,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC5B,KAAK,MAAMC,IAAI,IAAIT,KAAK,EAAE;MACxB,MAAMU,GAAG,GAAG7C,GAAG,CAAC8C,KAAK,CAACF,IAAI,CAACG,KAAK,CAAC;MACjC,IAAIH,IAAI,CAACI,IAAI,CAACC,SAAS,EAAE;QACvB,IAAIL,IAAI,CAACI,IAAI,CAACE,WAAW,EAAE;UACzBT,SAAS,CAACU,IAAI,CAACN,GAAG,CAAC;UACnBH,UAAU,CAACU,GAAG,CAACR,IAAI,CAACG,KAAK,EAAEH,IAAI,CAACI,IAAI,CAAC;QACvC,CAAC,MAAM;UACL;UACAT,GAAG,CAACc,OAAO,CAACR,GAAG,CAAC;QAClB;MACF,CAAC,MAAM;QACL;QACAN,GAAG,CAACe,WAAW,CAACT,GAAG,CAAC;MACtB;IACF;IAEA,MAAMU,MAAM,GAAG,MAAM,IAAI,CAACC,UAAU,CAACf,SAAS,CAAC;IAC/C,KAAK,MAAM,CAACM,KAAK,EAAEU,QAAQ,CAAC,IAAIf,UAAU,EAAE;MAC1C,MAAMG,GAAG,GAAG7C,GAAG,CAAC8C,KAAK,CAACC,KAAK,CAAC;MAC5B,MAAMW,GAAG,GAAGH,MAAM,CAACI,GAAG,CAACZ,KAAK,CAAC;MAC7B;MACA,IAAIW,GAAG,EAAE;QACP;QACAnB,GAAG,CAACqB,QAAQ,CAACf,GAAG,EAAEa,GAAG,CAAC;MACxB,CAAC,MAAM;QACL;QACA;QACA,IAAID,QAAQ,CAACI,YAAY,EAAE;UACzBtB,GAAG,CAACe,WAAW,CAACT,GAAG,CAAC;QACtB;MACF;IACF;;IAEA;IACA,IAAIN,GAAG,CAACuB,KAAK,EAAE;MACb/C,MAAM,IAAI,IAAI,CAACc,aAAa,CAACkC,SAAS,CAAChD,MAAM,EAAEoB,KAAK,CAAC;;MAErD;MACA,IAAI,CAACH,qBAAqB,CAAC,CAAC;MAE5B;IACF;IAEA,IAAI;MACF;MACAjB,MAAM,KAAI,MAAM,IAAI,CAACE,OAAO,CAAC+C,WAAW,CAACjD,MAAM,EAAEwB,GAAG,CAAC;;MAErD;MACA,KAAK,MAAM,CAAC0B,MAAM,EAAEC,KAAK,CAAC,IAAIX,MAAM,CAACY,OAAO,CAAC,CAAC,EAAE;QAC9CpD,MAAM,IAAI,IAAI,CAACqD,WAAW,CAACrD,MAAM,EAAEf,GAAG,CAAC8C,KAAK,CAACmB,MAAM,CAAC,EAAEC,KAAK,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOG,GAAG,EAAE;MACZ,IAAI,CAAChD,IAAI,CAACiD,KAAK,CAACD,GAAG,CAAC;IACtB;;IAEA;IACAtD,MAAM,IAAI,IAAI,CAACc,aAAa,CAACkC,SAAS,CAAChD,MAAM,EAAEoB,KAAK,CAAC;;IAErD;IACA,IAAI,CAACH,qBAAqB,CAAC,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;EACEuC,eAAeA,CAAExD,MAAM,EAAE;IACvB,MAAMyD,SAAS,GAAGzD,MAAM,CAAC0D,QAAQ,CAAC,CAAC;IACnC,MAAMC,MAAM,GAAG,IAAI,CAACjD,SAAS,CAACkC,GAAG,CAACa,SAAS,CAAC;IAC5C,OAAOE,MAAM,GAAGA,MAAM,CAACC,QAAQ,CAACC,aAAa,CAAC,CAAC,GAAG,IAAIjC,GAAG,CAAC,CAAC;EAC7D;;EAEA;AACF;AACA;EACEkC,aAAaA,CAAE9D,MAAM,EAAE;IACrB,MAAMyD,SAAS,GAAGzD,MAAM,CAAC0D,QAAQ,CAAC,CAAC;IAEnC,MAAMC,MAAM,GAAG,IAAI,CAACjD,SAAS,CAACkC,GAAG,CAACa,SAAS,CAAC;IAE5C,IAAI,CAACE,MAAM,EAAE;MACX,OAAO,IAAI;IACb;IAEA,OAAO;MACLI,IAAI,EAAEJ,MAAM,CAACK,OAAO;MACpBC,KAAK,EAAEN,MAAM,CAACO,SAAS,CAAC,CAAC;MACzBC,IAAI,EAAER,MAAM,CAACS,UAAU,CAACC,SAAS;MACjCC,IAAI,EAAEX,MAAM,CAACS,UAAU,CAACG,SAAS;MACjCC,SAAS,EAAEb,MAAM,CAACc;IACpB,CAAC;EACH;;EAEA;AACF;AACA;EACEC,KAAKA,CAAA,EAAI;IACP,OAAOC,KAAK,CAACC,IAAI,CAAC,IAAI,CAAClE,SAAS,CAACmE,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACf,OAAO,CAAC;EAClE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgB,cAAcA,CAAExC,MAAM,EAAE;IACtB,IAAI,CAACA,MAAM,CAACjB,MAAM,EAAE;MAClB;IACF;;IAEA;IACA,KAAK,MAAMoC,MAAM,IAAI,IAAI,CAACjD,SAAS,CAACmE,MAAM,CAAC,CAAC,EAAE;MAC5C,KAAK,MAAM1B,KAAK,IAAIX,MAAM,EAAE;QAC1B;QACA,MAAMyC,IAAI,GAAGtB,MAAM,CAACuB,gBAAgB,CAAC/B,KAAK,CAACrB,GAAG,CAAC;QAE/C,IAAI,CAACmD,IAAI,EAAE;UACT;QACF;;QAEA;QACA;QACA,MAAME,SAAS,GAAGhC,KAAK,CAAClB,IAAI,CAACV,MAAM;QACnC,MAAMY,WAAW,GAAG,IAAI,CAACiD,YAAY,CAACH,IAAI,CAACI,QAAQ,EAAEF,SAAS,CAAC;QAE/D,IAAIG,SAAS,GAAGH,SAAS;QACzB,IAAI,CAAChD,WAAW,EAAE;UAChBmD,SAAS,GAAGlG,OAAO,CAACmG,iBAAiB,CAACN,IAAI,CAACnD,GAAG,CAAC;QACjD;QAEA,IAAI,CAAChB,aAAa,CAAC0E,SAAS,CAAC7B,MAAM,CAACK,OAAO,EAAE,CAAC;UAC5ChC,KAAK,EAAEiD,IAAI,CAACnD,GAAG,CAAC4B,QAAQ,CAACxE,SAAS,CAAC;UACnCuG,QAAQ,EAAER,IAAI,CAACQ,QAAQ;UACvBC,IAAI,EAAEJ,SAAS;UACfrD,IAAI,EAAE;YACJkD,SAAS;YACThD,WAAW;YACXD,SAAS,EAAE,IAAI;YACfY,YAAY,EAAE;UAChB;QACF,CAAC,CAAC,CAAC;MACL;IACF;IAEA,IAAI,CAAC7B,qBAAqB,CAAC,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAM0E,eAAeA,CAAE3F,MAAM,EAAEwB,GAAG,EAAE;IAClC,MAAMmC,MAAM,GAAG,IAAI,CAACiC,aAAa,CAAC5F,MAAM,CAAC;IAEzC,IAAIwB,GAAG,CAACuB,KAAK,EAAE;MACb;IACF;;IAEA;IACA,IAAIvB,GAAG,CAACqE,IAAI,EAAE;MACZlC,MAAM,CAACC,QAAQ,GAAG,IAAIvE,QAAQ,CAAC,CAAC;IAClC;;IAEA;IACA,IAAI,CAACyG,sBAAsB,CAACtE,GAAG,CAACgB,MAAM,EAAEmB,MAAM,CAAC;IAE/C,IAAInC,GAAG,CAACoC,QAAQ,CAAC8B,IAAI,KAAK,CAAC,EAAE;MAC3B,IAAI,CAACzE,qBAAqB,CAAC,CAAC;MAC5B;IACF;;IAEA;IACA;IACA,MAAM8E,OAAO,GAAG,EAAE;IAClB;IACA,MAAMC,KAAK,GAAG,EAAE;IAChBxE,GAAG,CAACoC,QAAQ,CAACqC,OAAO,CAAEC,KAAK,IAAK;MAC9B,IAAIA,KAAK,CAACC,MAAM,EAAE;QAChBxC,MAAM,CAACyC,UAAU,CAACF,KAAK,CAACpE,GAAG,CAAC;QAC5BiE,OAAO,CAAC3D,IAAI,CAAC8D,KAAK,CAACpE,GAAG,CAAC;MACzB,CAAC,MAAM;QACL6B,MAAM,CAACqC,KAAK,CAACE,KAAK,CAACpE,GAAG,EAAEoE,KAAK,CAACT,QAAQ,EAAES,KAAK,CAACb,QAAQ,CAAC;QACvDW,KAAK,CAAC5D,IAAI,CAAC8D,KAAK,CAAC;MACnB;IACF,CAAC,CAAC;IAEF,IAAI,CAACG,YAAY,CAACrG,MAAM,EAAE+F,OAAO,CAAC;IAClC,MAAM,IAAI,CAACO,SAAS,CAACtG,MAAM,EAAEgG,KAAK,CAAC;IAEnC,IAAI,CAAC/E,qBAAqB,CAAC,CAAC;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoF,YAAYA,CAAErG,MAAM,EAAEuG,IAAI,EAAE;IAC1B,KAAK,MAAMC,CAAC,IAAID,IAAI,EAAE;MACpB,IAAI,CAACzF,aAAa,CAAC2F,MAAM,CAACD,CAAC,CAAC9C,QAAQ,CAACxE,SAAS,CAAC,EAAEc,MAAM,CAAC;IAC1D;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACE,MAAMsG,SAASA,CAAEtG,MAAM,EAAEgG,KAAK,EAAE;IAC9B;IACA,MAAMU,UAAU,GAAG,MAAM,IAAI,CAACC,cAAc,CAACX,KAAK,CAAClB,GAAG,CAAC8B,CAAC,IAAIA,CAAC,CAAC9E,GAAG,CAAC,CAAC;IAEnE,MAAMV,KAAK,GAAG,EAAE;IAChB,KAAK,MAAM6D,IAAI,IAAIe,KAAK,EAAE;MACxB,MAAMa,EAAE,GAAG5B,IAAI,CAACnD,GAAG,CAAC4B,QAAQ,CAACxE,SAAS,CAAC;MACvC,MAAMiG,SAAS,GAAGuB,UAAU,CAAC9D,GAAG,CAACiE,EAAE,CAAC;;MAEpC;MACA,IAAI1B,SAAS,IAAI,IAAI,EAAE;QACrB;QACA,IAAIF,IAAI,CAACnC,YAAY,EAAE;UACrB1B,KAAK,CAACgB,IAAI,CAAC;YACTJ,KAAK,EAAE6E,EAAE;YACTpB,QAAQ,EAAER,IAAI,CAACQ,QAAQ;YACvBC,IAAI,EAAEtG,OAAO,CAACmG,iBAAiB,CAACN,IAAI,CAACnD,GAAG,CAAC;YACzCG,IAAI,EAAE;cACJE,WAAW,EAAE8C,IAAI,CAACI,QAAQ,KAAK1F,QAAQ,CAACmH,KAAK;cAC7C3B,SAAS,EAAE,CAAC;cACZjD,SAAS,EAAE,KAAK;cAChBY,YAAY,EAAEmC,IAAI,CAACnC;YACrB;UACF,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACL;;QAEA;QACA;QACA,MAAMX,WAAW,GAAG,IAAI,CAACiD,YAAY,CAACH,IAAI,CAACI,QAAQ,EAAEF,SAAS,CAAC;;QAE/D;QACA;QACA;QACA;QACA,IAAIG,SAAS,GAAGH,SAAS;QACzB,IAAI,CAAChD,WAAW,EAAE;UAChBmD,SAAS,GAAGlG,OAAO,CAACmG,iBAAiB,CAACN,IAAI,CAACnD,GAAG,CAAC;QACjD;QAEAV,KAAK,CAACgB,IAAI,CAAC;UACTJ,KAAK,EAAE6E,EAAE;UACTpB,QAAQ,EAAER,IAAI,CAACQ,QAAQ;UACvBC,IAAI,EAAEJ,SAAS;UACfrD,IAAI,EAAE;YACJE,WAAW;YACXgD,SAAS;YACTjD,SAAS,EAAE,IAAI;YACfY,YAAY,EAAEmC,IAAI,CAACnC;UACrB;QACF,CAAC,CAAC;MACJ;MAEA,IAAI,CAAChC,aAAa,CAAC0E,SAAS,CAACxF,MAAM,EAAEoB,KAAK,CAAC;IAC7C;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEgE,YAAYA,CAAEC,QAAQ,EAAEF,SAAS,EAAE;IACjC,OAAOE,QAAQ,KAAK1F,QAAQ,CAACmH,KAAK,IAChC3B,SAAS,IAAI,IAAI,CAAC3E,KAAK,CAACO,0BAA0B;EACtD;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAM4F,cAAcA,CAAEJ,IAAI,EAAE;IAC1B,MAAM/D,MAAM,GAAG,MAAM,IAAI,CAACC,UAAU,CAAC8D,IAAI,CAAC;IAC1C,OAAO,IAAI3E,GAAG,CAAC,CAAC,GAAGY,MAAM,CAAC,CAACsC,GAAG,CAAC,CAAC,CAACiC,CAAC,EAAEC,CAAC,CAAC,KAAK,CAACD,CAAC,EAAEC,CAAC,CAACzF,MAAM,CAAC,CAAC,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMkB,UAAUA,CAAE8D,IAAI,EAAE;IACtB,MAAMU,GAAG,GAAG,IAAIrF,GAAG,CAAC,CAAC;IACrB,MAAMsF,OAAO,CAACC,GAAG,CAACZ,IAAI,CAACzB,GAAG,CAAC,MAAOhD,GAAG,IAAK;MACxC,IAAI;QACF,MAAMqB,KAAK,GAAG,MAAM,IAAI,CAAClD,UAAU,CAAC2C,GAAG,CAACd,GAAG,CAAC;QAC5CmF,GAAG,CAAC5E,GAAG,CAACP,GAAG,CAAC4B,QAAQ,CAACxE,SAAS,CAAC,EAAEiE,KAAK,CAAC;MACzC,CAAC,CAAC,QAAO,kBAAmBiE,CAAC,EAAE;QAC7B,IAAIA,CAAC,CAACC,IAAI,KAAK,eAAe,EAAE;UAC9B,IAAI,CAAC/G,IAAI,CAACiD,KAAK,CAAC,uCAAuC,EAAEzB,GAAG,EAAEsF,CAAC,CAAC;QAClE;MACF;IACF,CAAC,CAAC,CAAC;IACH,OAAOH,GAAG;EACZ;;EAEA;AACF;AACA;AACA;AACA;EACEnB,sBAAsBA,CAAEwB,SAAS,EAAE3D,MAAM,EAAE;IACzC,KAAK,MAAMR,KAAK,IAAImE,SAAS,CAACzC,MAAM,CAAC,CAAC,EAAE;MACtC,IAAI,CAACvE,IAAI,CAAC,sBAAsB,EAAE6C,KAAK,CAAC5B,MAAM,CAAC;MAC/CoC,MAAM,CAAC4D,aAAa,CAACpE,KAAK,CAAC5B,MAAM,CAAC;IACpC;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE8B,WAAWA,CAAErD,MAAM,EAAE8B,GAAG,EAAEqB,KAAK,EAAE;IAC/B,MAAMQ,MAAM,GAAG,IAAI,CAACiC,aAAa,CAAC5F,MAAM,CAAC;IACzC2D,MAAM,CAAC6D,SAAS,CAACrE,KAAK,CAAC5B,MAAM,CAAC;IAC9BoC,MAAM,CAACC,QAAQ,CAAC6C,MAAM,CAAC3E,GAAG,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;EACE2F,cAAcA,CAAEzH,MAAM,EAAE;IACtB,OAAO,IAAI,CAAC4F,aAAa,CAAC5F,MAAM,CAAC,CAACoE,UAAU,CAACC,SAAS;EACxD;;EAEA;AACF;AACA;AACA;;EAEEqD,oBAAoBA,CAAE1H,MAAM,EAAE;IAC5B,OAAO,IAAI,CAAC4F,aAAa,CAAC5F,MAAM,CAAC,CAACoE,UAAU,CAACG,SAAS;EACxD;;EAEA;AACF;AACA;AACA;EACEoD,gBAAgBA,CAAE3H,MAAM,EAAE;IACxB,IAAI,CAACU,SAAS,CAACkH,MAAM,CAAC5H,MAAM,CAAC0D,QAAQ,CAAC,CAAC,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;EACEkC,aAAaA,CAAE5F,MAAM,EAAE;IACrB,MAAMyD,SAAS,GAAGzD,MAAM,CAAC0D,QAAQ,CAAC,CAAC;IACnC,MAAMC,MAAM,GAAG,IAAI,CAACjD,SAAS,CAACkC,GAAG,CAACa,SAAS,CAAC;IAC5C,IAAIE,MAAM,EAAE;MACV,OAAOA,MAAM;IACf;IAEA,MAAMoB,CAAC,GAAG,IAAIzF,MAAM,CAACU,MAAM,CAAC;IAE5B,IAAI,CAACU,SAAS,CAAC2B,GAAG,CAACoB,SAAS,EAAEsB,CAAC,CAAC;IAChC,IAAI,IAAI,CAACxE,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAAC6B,IAAI,CAACqB,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC;IAC7C;IAEA,OAAOsB,CAAC;EACV;EAEA8C,KAAKA,CAAA,EAAI;IACP,IAAI,CAAChH,QAAQ,GAAG,IAAI;EACtB;EAEAiH,IAAIA,CAAA,EAAI;IACN,IAAI,CAACjH,QAAQ,GAAG,KAAK;EACvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}