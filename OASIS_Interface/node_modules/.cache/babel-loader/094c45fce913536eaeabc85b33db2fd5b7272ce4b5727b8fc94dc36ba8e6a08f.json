{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nlet socket;\nimport axios from 'axios';\nimport { sendToGPT } from \"@/api/axios/gpt\";\nimport { newWebSocket } from \"@/utils/webStocket\";\nimport { parseTime } from \"@/utils/Time\";\nexport default {\n  data() {\n    return {\n      user: {},\n      isCollapse: false,\n      users: [],\n      messages: [],\n      chatUser: \"\",\n      text: \"\",\n      contents: {},\n      showName: false,\n      isEnter: false,\n      isFinish: false,\n      haveMessage: false,\n      isChatGPT: false,\n      source: null\n    };\n  },\n  components: {},\n  mounted() {\n    this.chatUser = \"GPT\";\n    this.createContent(\"GPT\", null, \"你好！我是OASIS GPT，可以向我咨询有关这个系统的信息。\");\n    this.$store.commit(\"\", this.init);\n  },\n  methods: {\n    // 更新弹窗位置\n    upDatePosition() {\n      this.$nextTick(() => {\n        this.$refs.popoverRef.updatePopper();\n      });\n    },\n    isShowGPTChat(opt) {\n      if (opt == 1) {\n        this.chatUser = \"GPT\";\n        this.isChatGPT = true;\n        this.haveMessage = false;\n        this.OpenAndClose();\n      } else {\n        this.chatUser = \"\";\n        this.isChatGPT = false;\n        this.OpenAndClose();\n      }\n    },\n    stopGPT() {\n      this.isFinish = false;\n      this.source.cancel('用户取消');\n      this.source = null;\n    },\n    OpenAndClose() {\n      this.isOpen = !this.isOpen;\n      if (this.isOpen) {\n        this.$refs.logo.classList.add(\"animate__swing\");\n        this.$refs.logo2.classList.add(\"animate__swing\");\n        this.$refs.Menu.style = \"width:400px;\";\n        this.showName = true;\n        this.isEnter = true;\n      } else {\n        this.$refs.logo.classList.remove(\"animate__swing\");\n        this.$refs.logo2.classList.remove(\"animate__swing\");\n        this.$refs.Menu.style = \"width:65px;\";\n        this.$refs.ChatWindow.style = \"transform:0;\";\n        this.isChatGPT = false;\n        this.showName = false;\n        this.isEnter = false;\n      }\n    },\n    GETHashAvatar(UserAddress) {\n      return \"data:image/png;base64,\" + new this.Identicon(UserAddress, 120).toString();\n    },\n    send(opt) {\n      if (!this.text) {\n        this.$notify({\n          title: \"输入不能为空\",\n          type: \"warning\",\n          position: \"top-left\"\n        });\n      } else {\n        if (opt == 1) {\n          if (typeof WebSocket == \"undefined\") {\n            console.log(\"您的浏览器不支持WebSocket\");\n          } else {\n            console.log(\"您的浏览器支持WebSocket\");\n            // 组装待发送的消息 json\n            // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n            let message = {\n              from: this.user.username,\n              to: this.chatUser,\n              message: this.text\n            };\n            socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n            // 由服务端进行转发\n            this.messages.push({\n              user: this.user.username,\n              text: this.text\n            });\n\n            // 构建消息内容，本人消息\n            this.createContent(null, this.$store.state.currentAddress, this.text);\n            this.text = \"\";\n          }\n        } else {\n          this.sendToGPT();\n        }\n      }\n    },\n    async sendToGPT() {\n      const text = this.text;\n      var data = {\n        role: \"user\",\n        content: text\n      };\n      this.text = \"\";\n      this.createContent(null, this.$store.state.currentAddress, text);\n      try {\n        this.isFinish = true;\n        const source = axios.CancelToken.source();\n        this.source = source;\n        await sendToGPT(data, source.token).then(re => {\n          let result = JSON.parse(re.data.data);\n          this.createContent(result.choices[0].message.role, null, result.choices[0].message.content);\n        });\n        this.haveMessage = true;\n        this.isFinish = false;\n      } catch (error) {\n        console.log(error);\n        this.isFinish = false;\n      }\n    },\n    // 键盘回车事件\n    handleKeyCode(event, opt) {\n      if (event.keyCode == 13 && event.shiftKey) {\n        this.$nextTick(() => {\n          setTimeout(() => {\n            const textarea = document.getElementById(\"scroll_text\");\n            textarea.scrollTop = textarea.scrollHeight;\n          }, 13);\n        });\n        this.text = this.text + \"\\n\";\n      } else {\n        if (event.keyCode == 13) {\n          this.send(opt);\n        }\n      }\n    },\n    createContent(remoteUser, nowUser, text) {\n      let html;\n      let content = this.contents[this.chatUser || remoteUser] || \"\";\n      // 当前用户消息\n      if (nowUser) {\n        html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n      } else if (remoteUser) {\n        html = `\n                   <div class=\"MessageBox_remoteUser\">\n                                                      \n                                                      <span class=\"currentTime\">${parseTime(Date(), \"hh:mm:ss\")}</span>\n                                                      <div class=\"Message rightMessage\">\n                                                        ${text}\n                                                      </div>\n                                                    </div>\n                                                  `;\n      }\n      content += html;\n      this.$set(this.contents, this.chatUser, content);\n      this.$nextTick(() => {\n        let msg = document.getElementById(\"CHAT\");\n        msg.scrollTop = msg.scrollHeight;\n      });\n    },\n    // typeText(text) {\n    //   const textElement = document.getElementById(\"text\");\n    //   let i = 0;\n    //   const typingInterval = setInterval(function () {\n    //     textElement.textContent += text[i];\n    //     i++;\n    //     if (i === text.length) {\n    //       clearInterval(typingInterval);\n    //     }\n    //   }, 50); // 控制打字速度\n    // },\n    // createContent(remoteUser, nowUser, text) {\n    //   let content;\n    //   let html;\n    //   content = this.contents[this.chatUser || remoteUser] || \"\";\n    //   // 当前用户消息\n    //   if (nowUser) {\n    //     html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(\n    //       Date(),\n    //       \"hh:mm:ss\"\n    //     )}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n    //   } else if (remoteUser) {\n    //     html = `\n    //    <div class=\"MessageBox_remoteUser\">\n\n    //                                       <span class=\"currentTime\">${parseTime(\n    //                                         Date(),\n    //                                         \"hh:mm:ss\"\n    //                                       )}</span>\n    //                                       <div class=\"Message rightMessage\">\n    //                                         ${text}\n    //                                       </div>\n    //                                     </div>\n    //                                   `;\n    //   }\n    //   content += html;\n    //   this.$set(this.contents, this.chatUser, content);\n    //   this.$nextTick(() => {\n    //     let msg = document.getElementById(\"CHAT\");\n    //     msg.scrollTop = msg.scrollHeight;\n    //   });\n    // },\n    //开启websocket事务\n    init() {\n      // 格式[\"username:admin\",\"username:admin2\"]\n      let object = {\n        username: this.$store.state.currentAddress\n      };\n      localStorage.setItem(\"user\", JSON.stringify(object));\n      this.user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n      let username = this.user.username;\n      let _this = this;\n      if (typeof WebSocket == \"undefined\") {\n        console.log(\"您的浏览器不支持WebSocket\");\n      } else {\n        console.log(\"您的浏览器支持WebSocket\");\n        if (socket != null) {\n          socket.close();\n          socket = null;\n        }\n        // 开启一个websocket服务\n        socket = newWebSocket(\"/OasisChat/\", username);\n\n        //打开事件\n        socket.onopen = function () {\n          console.log(\"websocket已打开\");\n        };\n        //  浏览器端收消息，获得从服务端发送过来的文本消息\n        socket.onmessage = function (msg) {\n          _this.$nextTick(() => {\n            console.log(\"收到数据====\" + msg.data);\n            let data = JSON.parse(msg.data);\n            if (data.users) {\n              _this.users = data.users.filter(user => user.username !== username);\n            } else {\n              if (data.from === _this.chatUser) {\n                _this.messages.push(data);\n                _this.createContent(data.from, null, data.message);\n              }\n            }\n          });\n        };\n        //关闭事件\n        socket.onclose = function () {\n          console.log(\"websocket已关闭\");\n        };\n        //发生了错误事件\n        socket.onerror = function () {\n          console.log(\"websocket发生了错误\");\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["socket","axios","sendToGPT","newWebSocket","parseTime","data","user","isCollapse","users","messages","chatUser","text","contents","showName","isEnter","isFinish","haveMessage","isChatGPT","source","components","mounted","createContent","$store","commit","init","methods","upDatePosition","$nextTick","$refs","popoverRef","updatePopper","isShowGPTChat","opt","OpenAndClose","stopGPT","cancel","isOpen","logo","classList","add","logo2","Menu","style","remove","ChatWindow","GETHashAvatar","UserAddress","Identicon","toString","send","$notify","title","type","position","WebSocket","console","log","message","from","username","to","JSON","stringify","push","state","currentAddress","role","content","CancelToken","token","then","re","result","parse","choices","error","handleKeyCode","event","keyCode","shiftKey","setTimeout","textarea","document","getElementById","scrollTop","scrollHeight","remoteUser","nowUser","html","Date","$set","msg","object","localStorage","setItem","getItem","_this","close","onopen","onmessage","filter","onclose","onerror"],"sources":["src/views/leftMenu/oasisChat.vue"],"sourcesContent":["<template>\n  <div class=\"Menu\" ref=\"Menu\" :class=\"{'isEnter':isEnter}\">\n    <div class=\"logobox\">\n      <div class=\"logo animate__animated\">\n        <router-link :to=\"{ name: 'MarketShop' }\">\n          <div style=\"display: inline; font-size: 25px\" class=\"animate__animated\" ref=\"logo\">\n            OAS\n          </div>\n          <div style=\"display: inline;  font-size: 25px\" class=\"animate__animated\" ref=\"logo2\">\n            <img src=\"../../assets/webAssets/s1.png\" alt=\"\" width=\"22px\" height=\"22px\">S\n          </div>\n        </router-link>\n      </div>\n    </div>\n    <div style=\"text-align: right;padding-top: 10px;padding-right: 10px;cursor: pointer;color: var(--Dark--);\" v-if=\"isChatGPT\" @click=\"OpenAndClose\"><i class=\"el-icon-d-arrow-left\"></i></div>\n    \n    <transition enter-active-class=\"animate__animated animate__fadeInRight\" leave-active-class=\"animate__animated animate__fadeOutRight\">\n      <div class=\"chatGPT\">\n        <div class=\"ChatAvatar animate__animated animate__fadeInRight\" @click=\"isShowGPTChat(1)\" >\n         \n          <div class=\"ChatAvatarBox\" ref=\"ChatWindow\" >\n            <el-badge is-dot :hidden=\"!haveMessage\" class=\"item\">\n            <svg  t=\"1697856532693\" class=\"GPTIcon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4653\" width=\"47\" height=\"47\">\n              <path class=\"icon-body\" :class=\"{'replying':isFinish}\" stroke-width=\"2\" d=\"M1024 512A512 512 0 1 1 0 512a512 512 0 0 1 1024 0z m-128 0q0-73.216-26.989714-141.385143-29.257143-73.874286-85.504-130.194286-56.246857-56.173714-130.194286-85.430857Q585.289143 128 512 128q-73.216 0-141.385143 26.989714-73.874286 29.257143-130.194286 85.504-56.173714 56.246857-85.430857 130.194286Q128 438.637714 128 512q0 73.216 26.989714 141.312 29.257143 73.947429 85.504 130.194286 56.246857 56.32 130.194286 85.577143 68.022857 26.916571 141.312 26.916571 73.216 0 141.312-26.989714 73.947429-29.257143 130.194286-85.504 56.32-56.246857 85.577143-130.194286 26.916571-68.022857 26.916571-141.312z\" p-id=\"4654\" fill=\"#13227a\"></path>\n              <path class=\"icon-eye\" stroke-width=\"2\" d=\"M292.571429 365.714286m73.142857 0l0 0q73.142857 0 73.142857 73.142857l0 146.285714q0 73.142857-73.142857 73.142857l0 0q-73.142857 0-73.142857-73.142857l0-146.285714q0-73.142857 73.142857-73.142857Z\" p-id=\"4655\"></path>\n              <path class=\"icon-eye\" stroke-width=\"2\" d=\"M585.142857 365.714286m73.142857 0l0 0q73.142857 0 73.142857 73.142857l0 146.285714q0 73.142857-73.142857 73.142857l0 0q-73.142857 0-73.142857-73.142857l0-146.285714q0-73.142857 73.142857-73.142857Z\" p-id=\"4656\"></path>\n            </svg>\n          </el-badge>\n          </div>\n\n        </div>\n        <transition enter-active-class=\"animate__animated animate__fadeInRight\" leave-active-class=\"animate__animated animate__fadeOutRight\">\n          <div class=\"ChatWindowBox\" v-show=\"isChatGPT\">\n            <el-container>\n              <el-main>\n\n                <div id=\"CHAT\" v-html=\"contents[chatUser]\"></div>\n                <div v-if=\"isFinish\" class=\"animate__animated animate__fadeInLeft\" style=\"text-align: right;width:100%\">\n                  <i class=\"el-icon-loading \" style=\"margin-right:15px\"/>\n                  <i class=\"el-icon-video-pause\" @click=\"stopGPT\" style=\"cursor: pointer;\"/>\n                </div>\n              </el-main>\n              <el-footer>\n                <div class=\"inputer\">\n                  <el-input class=\"input\" id=\"scroll_text\" @click=\"haveMessage = false;\"  resize=\"none\" type=\"textarea\" :disabled=\"isFinish\" v-model=\"text\" placeholder=\"问我任何问题 (Shift + Enter = 换行)\" @keydown.enter.native.prevent=\"handleKeyCode($event,2)\">\n                  </el-input>\n                </div>\n              </el-footer>\n            </el-container>\n          </div>\n        </transition>\n      </div>\n    </transition>\n    <transition enter-active-class=\"animate__animated animate__fadeInRight\" leave-active-class=\"animate__animated animate__fadeOutRight\">>\n    <div\n        v-for=\"otherUser in users\"\n        :key=\"otherUser.username\"\n        class=\"chat\"\n      >\n        <el-popover\n          placement=\"right\"\n          width=\"309px\"\n          trigger=\"click\"\n          popper-class=\"monitor-yt-popover\"\n        >\n          <div\n            class=\"ChatPeople animate__animated animate__fadeInRight\"\n            slot=\"reference\"\n            @click=\"chatUser = otherUser.username\"\n          >\n            <div class=\"ChatWindow\">\n              <img\n                :src=\"GETHashAvatar(otherUser.username)\"\n                width=\"50px\"\n                height=\"50px\"\n                alt=\"\"\n                style=\"object-fit: contain\"\n              >\n            </div>\n            <span class=\"friendname animate__animated animate__fadeInRight\">{{ otherUser.username.slice(0, 3) + \"...\" + otherUser.username.slice(39) }}</span>\n          </div>\n          <div\n            style=\"\n              display: flex;\n              flex-direction: column;\n              justify-content: center;\n              align-items: center;\n            \"\n          >\n            <div\n              class=\"ChatWindowBox\"\n              style=\"width: 329px; height: 520px\"\n            >\n              <el-container>\n                <el-header>\n                  <div class=\"topBox\">\n                    <div\n                      style=\"\n                        flex: 1;\n                        justify-content: center;\n                        align-items: center;\n                        display: flex;\n                      \"\n                    >\n                      <span\n                        class=\"el-avatar el-avatar--circle\"\n                        style=\"height: 48px; width: 48px\"\n                        v-if=\"chatUser != ''\"\n                      >\n                        <img\n                          :src=\"GETHashAvatar(otherUser.username)\"\n                          style=\"object-fit: contain\"\n                        >\n                      </span>\n                    </div>\n                    <div style=\"flex: 7; text-align: left; height: 48px\">\n                      <div style=\"margin-left: 5px\">\n                        <div class=\"ChatUserName\">\n                          {{ chatUser.slice(0, 5) + \"...\" + chatUser.slice(37) }}\n                        </div>\n                        <div\n                          style=\"\n                            font-size: 12px;\n                            color: limegreen;\n                            margin-left: 5px;\n                            font-weight: 600;\n                            font-size: 14px;\n                          \"\n                          v-if=\"chatUser != ''\"\n                        >\n                          <i class=\"el-icon-loading\" /> Chatting...\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </el-header>\n\n                <el-main>\n                  <div\n                    style=\"height: 355px; overflow: auto\"\n                    id=\"CHAT\"\n                    v-html=\"contents[chatUser]\"\n                  />\n                </el-main>\n                <el-footer>\n                  <div class=\"inputer\">\n                    <input\n                      type=\"textarea\"\n                      autofocus=\"true\"\n                      v-model=\"text\"\n                      class=\"inputarea\"\n                      @keydown.enter.prevent=\"handleKeyCode($event)\"\n                    >\n                    <button @click=\"send\">\n                      <i\n                        class=\"el-icon-arrow-up\"\n                        style=\"font-size: 30px;cursor: pointer;\"\n                      />\n                    </button>\n                  </div>\n                </el-footer>\n              </el-container>\n            </div>\n          </div>\n        </el-popover>\n      </div>\n\n    <el-popover\n          placement=\"right\"\n          trigger=\"click\"\n          popper-class=\"chatGPTep\"\n          :visible-arrow=\"false\"\n          offset=\"200\"\n        />\n    </transition>\n  </div>\n</template>\n\n<script>\nlet socket;\nimport axios from 'axios'\n  import { sendToGPT } from \"@/api/axios/gpt\";\n  import { newWebSocket } from \"@/utils/webStocket\";\n  import { parseTime } from \"@/utils/Time\";\n  export default {\n    data() {\n      return {\n        user: {},\n        isCollapse: false,\n        users: [],\n        messages: [],\n        chatUser: \"\",\n        text: \"\",\n        contents: {},\n        showName: false,\n        isEnter: false,\n\n        isFinish: false,\n        haveMessage:false,\n        isChatGPT: false,\n        source:null\n      };\n    },\n  components: {},\n    mounted() {\n      this.chatUser = \"GPT\";\n      this.createContent(\n        \"GPT\",\n        null,\n        \"你好！我是OASIS GPT，可以向我咨询有关这个系统的信息。\"\n      );\n      this.$store.commit(\"\",this.init)\n    },\n    methods: {\n      // 更新弹窗位置\n      upDatePosition() {\n        this.$nextTick(() => {\n          this.$refs.popoverRef.updatePopper();\n        });\n      },\n      isShowGPTChat(opt) {\n        if (opt == 1) {\n          this.chatUser = \"GPT\";\n          this.isChatGPT = true;\n          this.haveMessage = false;\n          this.OpenAndClose();\n        } else {\n          this.chatUser = \"\";\n          this.isChatGPT = false;\n          this.OpenAndClose();\n        }\n      },\n      stopGPT() {\n        this.isFinish = false;\n        this.source.cancel('用户取消')\n        this.source = null\n      },\n      OpenAndClose() {\n        this.isOpen = !this.isOpen;\n        if (this.isOpen) {\n          this.$refs.logo.classList.add(\"animate__swing\");\n          this.$refs.logo2.classList.add(\"animate__swing\");\n          this.$refs.Menu.style = \"width:400px;\";\n\n          this.showName = true;\n          this.isEnter = true;\n        } else {\n          this.$refs.logo.classList.remove(\"animate__swing\");\n          this.$refs.logo2.classList.remove(\"animate__swing\");\n          this.$refs.Menu.style = \"width:65px;\";\n          this.$refs.ChatWindow.style = \"transform:0;\";\n          this.isChatGPT = false;\n          this.showName = false;\n          this.isEnter = false;\n        }\n      },\n      GETHashAvatar(UserAddress) {\n        return (\n          \"data:image/png;base64,\" +\n          new this.Identicon(UserAddress, 120).toString()\n        );\n      },\n      send(opt) {\n        if (!this.text) {\n          this.$notify({\n            title: \"输入不能为空\",\n            type: \"warning\",\n            position: \"top-left\",\n          });\n        } else {\n          if (opt == 1) {\n            if (typeof WebSocket == \"undefined\") {\n              console.log(\"您的浏览器不支持WebSocket\");\n            } else {\n              console.log(\"您的浏览器支持WebSocket\");\n              // 组装待发送的消息 json\n              // {\"from\": \"zhang\", \"to\": \"admin\", \"text\": \"聊天文本\"}\n              let message = {\n                from: this.user.username,\n                to: this.chatUser,\n                message: this.text,\n              };\n\n              socket.send(JSON.stringify(message)); // 将组装好的json发送给服务端，\n\n              // 由服务端进行转发\n              this.messages.push({\n                user: this.user.username,\n                text: this.text,\n              });\n\n              // 构建消息内容，本人消息\n              this.createContent(\n                null,\n                this.$store.state.currentAddress,\n                this.text\n              );\n              this.text = \"\";\n            }\n          } else {\n            this.sendToGPT();\n          }\n        }\n      },\n      async sendToGPT() {\n        const text = this.text;\n        var data = {\n          role: \"user\",\n          content: text,\n        };\n        this.text = \"\";\n        this.createContent(null, this.$store.state.currentAddress, text);\n        try {\n          this.isFinish = true;\n          const source = axios.CancelToken.source()\n            this.source = source\n          await sendToGPT(data, source.token).then((re) => {\n            let result = JSON.parse(re.data.data);\n            this.createContent(\n              result.choices[0].message.role,\n              null,\n              result.choices[0].message.content\n            );\n          });\n          this.haveMessage= true\n          this.isFinish = false;\n        } catch (error) {\n          console.log(error);\n          this.isFinish = false;\n        }\n      },\n      // 键盘回车事件\n      handleKeyCode(event, opt) {\n        if (event.keyCode == 13 && event.shiftKey) {\n          this.$nextTick(() => {\n            setTimeout(() => {\n              const textarea = document.getElementById(\"scroll_text\");\n              textarea.scrollTop = textarea.scrollHeight;\n            }, 13);\n          });\n          this.text = this.text + \"\\n\";\n        } else {\n          if (event.keyCode == 13) {\n            this.send(opt);\n          }\n        }\n      },\n      createContent(remoteUser, nowUser, text) {\n        let html;\n        let content = this.contents[this.chatUser || remoteUser] || \"\";\n        // 当前用户消息\n        if (nowUser) {\n          html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(\n            Date(),\n            \"hh:mm:ss\"\n          )}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n        } else if (remoteUser) {\n          html = `\n                   <div class=\"MessageBox_remoteUser\">\n                                                      \n                                                      <span class=\"currentTime\">${parseTime(\n                                                        Date(),\n                                                        \"hh:mm:ss\"\n                                                      )}</span>\n                                                      <div class=\"Message rightMessage\">\n                                                        ${text}\n                                                      </div>\n                                                    </div>\n                                                  `;\n        }\n        content += html;\n        this.$set(this.contents, this.chatUser, content);\n        this.$nextTick(() => {\n          let msg = document.getElementById(\"CHAT\");\n          msg.scrollTop = msg.scrollHeight;\n        });\n      },\n      // typeText(text) {\n      //   const textElement = document.getElementById(\"text\");\n      //   let i = 0;\n      //   const typingInterval = setInterval(function () {\n      //     textElement.textContent += text[i];\n      //     i++;\n      //     if (i === text.length) {\n      //       clearInterval(typingInterval);\n      //     }\n      //   }, 50); // 控制打字速度\n      // },\n      // createContent(remoteUser, nowUser, text) {\n      //   let content;\n      //   let html;\n      //   content = this.contents[this.chatUser || remoteUser] || \"\";\n      //   // 当前用户消息\n      //   if (nowUser) {\n      //     html = `<div class=\"MessageBox_nowUser\"><span class=\"currentTime\">${parseTime(\n      //       Date(),\n      //       \"hh:mm:ss\"\n      //     )}</span><div class=\"Message leftMessage\">${text}</div></div>`;\n      //   } else if (remoteUser) {\n      //     html = `\n      //    <div class=\"MessageBox_remoteUser\">\n\n      //                                       <span class=\"currentTime\">${parseTime(\n      //                                         Date(),\n      //                                         \"hh:mm:ss\"\n      //                                       )}</span>\n      //                                       <div class=\"Message rightMessage\">\n      //                                         ${text}\n      //                                       </div>\n      //                                     </div>\n      //                                   `;\n      //   }\n      //   content += html;\n      //   this.$set(this.contents, this.chatUser, content);\n      //   this.$nextTick(() => {\n      //     let msg = document.getElementById(\"CHAT\");\n      //     msg.scrollTop = msg.scrollHeight;\n      //   });\n      // },\n      //开启websocket事务\n      init() {\n        // 格式[\"username:admin\",\"username:admin2\"]\n        let object = {\n          username: this.$store.state.currentAddress,\n        };\n        localStorage.setItem(\"user\", JSON.stringify(object));\n\n        this.user = localStorage.getItem(\"user\")\n          ? JSON.parse(localStorage.getItem(\"user\"))\n          : {};\n        let username = this.user.username;\n\n        let _this = this;\n\n        if (typeof WebSocket == \"undefined\") {\n          console.log(\"您的浏览器不支持WebSocket\");\n        } else {\n          console.log(\"您的浏览器支持WebSocket\");\n          if (socket != null) {\n            socket.close();\n            socket = null;\n          }\n          // 开启一个websocket服务\n          socket = newWebSocket(\"/OasisChat/\", username);\n\n          //打开事件\n          socket.onopen = function () {\n            console.log(\"websocket已打开\");\n          };\n          //  浏览器端收消息，获得从服务端发送过来的文本消息\n          socket.onmessage = function (msg) {\n            _this.$nextTick(() => {\n              console.log(\"收到数据====\" + msg.data);\n              let data = JSON.parse(msg.data);\n              if (data.users) {\n                _this.users = data.users.filter(\n                  (user) => user.username !== username\n                );\n              } else {\n                if (data.from === _this.chatUser) {\n                  _this.messages.push(data);\n                  _this.createContent(data.from, null, data.message);\n                }\n              }\n            });\n          };\n          //关闭事件\n          socket.onclose = function () {\n            console.log(\"websocket已关闭\");\n          };\n          //发生了错误事件\n          socket.onerror = function () {\n            console.log(\"websocket发生了错误\");\n          };\n        }\n      },\n    },\n  };\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/style/leftMenu/oasisChat.scss\";\n</style>\n<!-- <style lang=\"scss\" >\n.el-popover.chatGPTep{\n  background-color: var(--White--);\n  border-radius: 30px;\n  border: $globalBorder;\n  transition: all 0.3s ease-in-out;\n  \n  &:hover {\n    box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,\n      rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;\n    transition: all 0.3s ease-in-out;\n  }\n  .el-popover__title{\n    background-color: var(--White--);\n  }\n}\n</style> -->\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}