{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package chacha implements ChaCha stream cipher.\n */\nvar binary_1 = require(\"@stablelib/binary\");\nvar wipe_1 = require(\"@stablelib/wipe\");\n// Number of ChaCha rounds (ChaCha20).\nvar ROUNDS = 20;\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out, input, key) {\n  var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n  var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n  var j2 = 0x79622D32; // \"2-by\"\n  var j3 = 0x6B206574; // \"te k\"\n  var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];\n  var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];\n  var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];\n  var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];\n  var x0 = j0;\n  var x1 = j1;\n  var x2 = j2;\n  var x3 = j3;\n  var x4 = j4;\n  var x5 = j5;\n  var x6 = j6;\n  var x7 = j7;\n  var x8 = j8;\n  var x9 = j9;\n  var x10 = j10;\n  var x11 = j11;\n  var x12 = j12;\n  var x13 = j13;\n  var x14 = j14;\n  var x15 = j15;\n  for (var i = 0; i < ROUNDS; i += 2) {\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n  }\n  binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n  binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n  binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n  binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n  binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n  binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n  binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n  binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n  binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n  binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n  binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n  binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n  binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n  binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n  binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n  binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  // We only support 256-bit keys.\n  if (key.length !== 32) {\n    throw new Error(\"ChaCha: key size must be 32 bytes\");\n  }\n  if (dst.length < src.length) {\n    throw new Error(\"ChaCha: destination is shorter than source\");\n  }\n  var nc;\n  var counterLength;\n  if (nonceInplaceCounterLength === 0) {\n    if (nonce.length !== 8 && nonce.length !== 12) {\n      throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n    }\n    nc = new Uint8Array(16);\n    // First counterLength bytes of nc are counter, starting with zero.\n    counterLength = nc.length - nonce.length;\n    // Last bytes of nc after counterLength are nonce, set them.\n    nc.set(nonce, counterLength);\n  } else {\n    if (nonce.length !== 16) {\n      throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n    }\n    // This will update passed nonce with counter inplace.\n    nc = nonce;\n    counterLength = nonceInplaceCounterLength;\n  }\n  // Allocate temporary space for ChaCha block.\n  var block = new Uint8Array(64);\n  for (var i = 0; i < src.length; i += 64) {\n    // Generate a block.\n    core(block, nc, key);\n    // XOR block bytes with src into dst.\n    for (var j = i; j < i + 64 && j < src.length; j++) {\n      dst[j] = src[j] ^ block[j - i];\n    }\n    // Increment counter.\n    incrementCounter(nc, 0, counterLength);\n  }\n  // Cleanup temporary space.\n  wipe_1.wipe(block);\n  if (nonceInplaceCounterLength === 0) {\n    // Cleanup counter.\n    wipe_1.wipe(nc);\n  }\n  return dst;\n}\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\nexports.stream = stream;\nfunction incrementCounter(counter, pos, len) {\n  var carry = 1;\n  while (len--) {\n    carry = carry + (counter[pos] & 0xff) | 0;\n    counter[pos] = carry & 0xff;\n    carry >>>= 8;\n    pos++;\n  }\n  if (carry > 0) {\n    throw new Error(\"ChaCha: counter overflow\");\n  }\n}","map":{"version":3,"names":["require","binary_1","wipe_1","ROUNDS","core","out","input","key","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","i","writeUint32LE","streamXOR","nonce","src","dst","nonceInplaceCounterLength","length","Error","nc","counterLength","Uint8Array","set","block","j","incrementCounter","wipe","exports","stream","counter","pos","len","carry"],"sources":["../chacha.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}