{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { repoVersion } from 'ipfs-repo/constants';\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion({\n  repo\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version(options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options);\n    } catch ( /** @type {any} */err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n        return m.test(err.message);\n      });\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion;\n      }\n      throw err;\n    }\n    return repo.version.get();\n  }\n  return withTimeoutOption(version);\n}","map":{"version":3,"names":["withTimeoutOption","repoVersion","createVersion","repo","version","options","_checkInitialized","err","match","some","m","test","message","get"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/repo/version.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { repoVersion } from 'ipfs-repo/constants'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options)\n    } catch (/** @type {any} */ err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;AACvE,SAASC,WAAW,QAAQ,qBAAqB;;AAEjD;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAE;EAAEC;AAAK,CAAC,EAAE;EACvC;AACF;AACA;EACE,eAAeC,OAAOA,CAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACpC,IAAI;MACF;MACA,MAAMF,IAAI,CAACG,iBAAiB,CAACD,OAAO,CAAC;IACvC,CAAC,CAAC,QAAO,kBAAmBE,GAAG,EAAE;MAC/B;MACA,MAAMC,KAAK,GAAG,CACZ,yCAAyC,EACzC,QAAQ,EACR,6BAA6B,CAC9B,CAACC,IAAI,CAAEC,CAAC,IAAK;QACZ,OAAOA,CAAC,CAACC,IAAI,CAACJ,GAAG,CAACK,OAAO,CAAC;MAC5B,CAAC,CAAC;MACF,IAAIJ,KAAK,EAAE;QACT;QACA,OAAOP,WAAW;MACpB;MACA,MAAMM,GAAG;IACX;IAEA,OAAOJ,IAAI,CAACC,OAAO,CAACS,GAAG,CAAC,CAAC;EAC3B;EAEA,OAAOb,iBAAiB,CAACI,OAAO,CAAC;AACnC"},"metadata":{},"sourceType":"module","externalDependencies":[]}