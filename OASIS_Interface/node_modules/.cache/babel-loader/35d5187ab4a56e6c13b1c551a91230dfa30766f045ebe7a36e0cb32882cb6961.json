{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(inputShape, filterShape, strides, pad, dataFormat = 'NHWC', dilations) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape = [...filterShape, inputChannels];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n  return computeConv2DInfo(inputShape, $filterShape, strides, dilations, pad, null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\nexport function computePool2DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'channelsLast') {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n  let filterShape;\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  return computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, false, dataFormat);\n}\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(inShape, filterSize, strides, dilations, pad, roundingMode, dataFormat = 'NDHWC') {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n  let filterShape;\n  let $dataFormat;\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape = [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  return computeConv3DInfo(inShape, filterShape, strides, dilations, pad, false, $dataFormat, roundingMode);\n}\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(inShape, filterShape, strides, dilations, pad, roundingMode, depthwise = false, dataFormat = 'channelsLast') {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outHeight,\n    outWidth\n  } = getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight, effectiveFilterWidth, roundingMode, dataFormat);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(inShape, filterShape, strides, dilations, pad, depthwise = false, dataFormat = 'channelsLast', roundingMode) {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] = [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n  const [filterDepth, filterHeight, filterWidth,, filterChannels] = filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] = parse3TupleParam(dilations);\n  const effectiveFilterDepth = getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight = getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth = getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  } = get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth, roundingMode);\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n  let outShape;\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\nfunction computeOutputShape2D(inShape, fieldSize, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputRows, outputCols];\n}\nfunction computeOutputShape4D(inShape, fieldSize, outChannels, stride, zeroPad, roundingMode) {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n  const outputDepths = round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows = round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols = round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\nexport function computeDefaultPad(inputShape, fieldSize, stride, dilation = 1) {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor((inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\nfunction parseTupleParam(param) {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param;\n}\nfunction parse3TupleParam(param) {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize, dilation) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\nfunction getPadAndOutInfo(pad, inHeight, inWidth, strideHeight, strideWidth, filterHeight, filterWidth, roundingMode, dataFormat) {\n  let padInfo;\n  let outHeight;\n  let outWidth;\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape2D([inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight = Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth = Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      type: 'VALID'\n    };\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = top === 0 && bottom === 0 && left === 0 && right === 0 ? 'VALID' : 'EXPLICIT';\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      type: padType\n    };\n    outHeight = round((inHeight - filterHeight + top + bottom) / strideHeight + 1, roundingMode);\n    outWidth = round((inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {\n    padInfo,\n    outHeight,\n    outWidth\n  };\n}\nfunction get3DPadAndOutInfo(pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth, filterDepth, filterHeight, filterWidth, roundingMode) {\n  let padInfo;\n  let outDepth;\n  let outHeight;\n  let outWidth;\n  if (typeof pad === 'number') {\n    const padType = pad === 0 ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D([inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad, roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight = (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {\n      top,\n      bottom,\n      left,\n      right,\n      front,\n      back,\n      type: 'SAME'\n    };\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {\n    padInfo,\n    outDepth,\n    outHeight,\n    outWidth\n  };\n}\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value, roundingMode) {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\nexport function tupleValuesAreOne(param) {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\nexport function eitherStridesOrDilationsAreOne(strides, dilations) {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat) {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(opDesc, pad, dimRoundingMode) {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(`Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(util.isInt(pad), () => `Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      pad.forEach(p => {\n        p.forEach(v => {\n          util.assert(util.isInt(v), () => `Error in ${opDesc}: pad must be an integer when using ` + `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}","map":{"version":3,"names":["util","computeDilation2DInfo","inputShape","filterShape","strides","pad","dataFormat","dilations","inputChannels","$filterShape","$dataFormat","convertConv2DDataFormat","computeConv2DInfo","computePool2DInfo","inShape","filterSize","roundingMode","filterHeight","filterWidth","parseTupleParam","Error","computePool3DInfo","filterDepth","parse3TupleParam","computeConv3DInfo","depthwise","batchSize","inHeight","inWidth","inChannels","filterChannels","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","getEffectiveFilterSize","effectiveFilterWidth","padInfo","outHeight","outWidth","getPadAndOutInfo","outChannels","outShape","inDepth","strideDepth","dilationDepth","effectiveFilterDepth","outDepth","get3DPadAndOutInfo","computeOutputShape2D","fieldSize","stride","zeroPad","computeDefaultPad","inputRows","inputCols","outputRows","round","outputCols","computeOutputShape4D","inputDepth","outputDepths","dilation","effectiveFieldSize","Math","floor","param","length","padType","top","bottom","left","right","type","ceil","padAlongHeight","max","padAlongWidth","front","back","padAlongDepth","value","trunc","tupleValuesAreOne","dimA","dimB","dimC","eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode","opDesc","dimRoundingMode","assert","isInt","forEach","p","v"],"sources":["../../../../../../tfjs-core/src/ops/conv_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\ntype PadType = 'SAME'|'VALID'|'NUMBER'|'EXPLICIT';\n\n// For NHWC should be in the following form:\n//  [[0, 0], [pad_top,pad_bottom], [pad_left, pad_right], [0, 0]]\n// For NCHW should be in the following form:\n//  [[0, 0], [0, 0], [pad_top,pad_bottom], [pad_left, pad_right]]\n// Reference: https://www.tensorflow.org/api_docs/python/tf/nn/conv2d\nexport type ExplicitPadding =\n    [[number, number], [number, number], [number, number], [number, number]];\n\nexport type PadInfo = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  type: PadType\n};\n\nexport type PadInfo3D = {\n  top: number,\n  left: number,\n  right: number,\n  bottom: number,\n  front: number,\n  back: number,\n  type: PadType\n};\n\n/**\n * Information about the forward pass of a convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv2DInfo = {\n  batchSize: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideHeight: number,\n  strideWidth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo,\n  inShape: [number, number, number, number],\n  outShape: [number, number, number, number],\n  filterShape: [number, number, number, number]\n};\n\n/**\n *\n * @param inputShape Input tensor shape is of the following dimensions:\n *     `[batch, height, width, inChannels]`.\n * @param filterShape The filter shape is of the following dimensions:\n *     `[filterHeight, filterWidth, depth]`.\n * @param strides The strides of the sliding window for each dimension of the\n *     input tensor: `[strideHeight, strideWidth]`.\n *     If `strides` is a single number,\n *     then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1*1x1.\n *    - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat The data format of the input and output data.\n *     Defaults to 'NHWC'.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`.\n *     Defaults to `[1, 1]`. If `dilations` is a single number, then\n *     `dilationHeight == dilationWidth`.\n */\nexport function computeDilation2DInfo(\n    inputShape: [number, number, number, number],\n    filterShape: [number, number, number], strides: number|[number, number],\n    pad: 'same'|'valid'|number, dataFormat: 'NHWC' = 'NHWC',\n    dilations: number|[number, number]) {\n  // `computerConv2DInfo` require filterShape to be in the dimension of:\n  // `[filterHeight, filterWidth, depth, outDepth]`, dilation2d doesn't have\n  // outDepth, it should have the same depth as the input.\n  // Input shape: [batch, height, width, inChannels]\n  const inputChannels = inputShape[3];\n  const $filterShape =\n      [...filterShape, inputChannels] as [number, number, number, number];\n  const $dataFormat = convertConv2DDataFormat(dataFormat);\n\n  return computeConv2DInfo(\n      inputShape, $filterShape, strides, dilations, pad,\n      null /* roundingMode */, null /* depthWise */, $dataFormat);\n}\n\nexport function computePool2DInfo(\n    inShape: [number, number, number, number],\n    filterSize: [number, number]|number, strides: number|[number, number],\n    dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  const [filterHeight, filterWidth] = parseTupleParam(filterSize);\n\n  let filterShape: [number, number, number, number];\n  if (dataFormat === 'channelsLast') {\n    filterShape = [filterHeight, filterWidth, inShape[3], inShape[3]];\n  } else if (dataFormat === 'channelsFirst') {\n    filterShape = [filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv2DInfo(\n      inShape, filterShape, strides, dilations, pad, roundingMode, false,\n      dataFormat);\n}\n\n/**\n * Computes the information for a forward pass of a pooling3D operation.\n */\nexport function computePool3DInfo(\n    inShape: [number, number, number, number, number],\n    filterSize: number|[number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    roundingMode?: 'floor'|'round'|'ceil',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC'): Conv3DInfo {\n  const [filterDepth, filterHeight, filterWidth] = parse3TupleParam(filterSize);\n\n  let filterShape: [number, number, number, number, number];\n  let $dataFormat: 'channelsFirst'|'channelsLast';\n  if (dataFormat === 'NDHWC') {\n    $dataFormat = 'channelsLast';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[4], inShape[4]];\n  } else if (dataFormat === 'NCDHW') {\n    $dataFormat = 'channelsFirst';\n    filterShape =\n        [filterDepth, filterHeight, filterWidth, inShape[1], inShape[1]];\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  return computeConv3DInfo(\n      inShape, filterShape, strides, dilations, pad, false, $dataFormat,\n      roundingMode);\n}\n\n/**\n * Computes the information for a forward pass of a convolution/pooling\n * operation.\n */\nexport function computeConv2DInfo(\n    inShape: [number, number, number, number],\n    filterShape: [number, number, number, number],\n    strides: number|[number, number], dilations: number|[number, number],\n    pad: 'same'|'valid'|number|ExplicitPadding,\n    roundingMode?: 'floor'|'round'|'ceil', depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast'): Conv2DInfo {\n  let [batchSize, inHeight, inWidth, inChannels] = [-1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterHeight, filterWidth, , filterChannels] = filterShape;\n  const [strideHeight, strideWidth] = parseTupleParam(strides);\n  const [dilationHeight, dilationWidth] = parseTupleParam(dilations);\n\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outHeight, outWidth} = getPadAndOutInfo(\n      pad, inHeight, inWidth, strideHeight, strideWidth, effectiveFilterHeight,\n      effectiveFilterWidth, roundingMode, dataFormat);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inHeight,\n    inWidth,\n    inChannels,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\n/**\n * Information about the forward pass of a 3D convolution/pooling operation.\n * It includes input and output shape, strides, filter size and padding\n * information.\n */\nexport type Conv3DInfo = {\n  batchSize: number,\n  inDepth: number,\n  inHeight: number,\n  inWidth: number,\n  inChannels: number,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number,\n  outChannels: number,\n  dataFormat: 'channelsFirst'|'channelsLast',\n  strideDepth: number,\n  strideHeight: number,\n  strideWidth: number,\n  dilationDepth: number,\n  dilationHeight: number,\n  dilationWidth: number,\n  filterDepth: number,\n  filterHeight: number,\n  filterWidth: number,\n  effectiveFilterDepth: number,\n  effectiveFilterHeight: number,\n  effectiveFilterWidth: number,\n  padInfo: PadInfo3D,\n  inShape: [number, number, number, number, number],\n  outShape: [number, number, number, number, number],\n  filterShape: [number, number, number, number, number]\n};\n\n/**\n * Computes the information for a forward pass of a 3D convolution/pooling\n * operation.\n */\nexport function computeConv3DInfo(\n    inShape: [number, number, number, number, number],\n    filterShape: [number, number, number, number, number],\n    strides: number|[number, number, number],\n    dilations: number|[number, number, number], pad: 'same'|'valid'|number,\n    depthwise = false,\n    dataFormat: 'channelsFirst'|'channelsLast' = 'channelsLast',\n    roundingMode?: 'floor'|'round'|'ceil'): Conv3DInfo {\n  let [batchSize, inDepth, inHeight, inWidth, inChannels] =\n      [-1, -1, -1, -1, -1];\n  if (dataFormat === 'channelsLast') {\n    [batchSize, inDepth, inHeight, inWidth, inChannels] = inShape;\n  } else if (dataFormat === 'channelsFirst') {\n    [batchSize, inChannels, inDepth, inHeight, inWidth] = inShape;\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n\n  const [filterDepth, filterHeight, filterWidth, , filterChannels] =\n      filterShape;\n  const [strideDepth, strideHeight, strideWidth] = parse3TupleParam(strides);\n  const [dilationDepth, dilationHeight, dilationWidth] =\n      parse3TupleParam(dilations);\n\n  const effectiveFilterDepth =\n      getEffectiveFilterSize(filterDepth, dilationDepth);\n  const effectiveFilterHeight =\n      getEffectiveFilterSize(filterHeight, dilationHeight);\n  const effectiveFilterWidth =\n      getEffectiveFilterSize(filterWidth, dilationWidth);\n  const {padInfo, outDepth, outHeight, outWidth} = get3DPadAndOutInfo(\n      pad, inDepth, inHeight, inWidth, strideDepth, strideHeight, strideWidth,\n      effectiveFilterDepth, effectiveFilterHeight, effectiveFilterWidth,\n      roundingMode);\n\n  const outChannels = depthwise ? filterChannels * inChannels : filterChannels;\n\n  let outShape: [number, number, number, number, number];\n  if (dataFormat === 'channelsFirst') {\n    outShape = [batchSize, outChannels, outDepth, outHeight, outWidth];\n  } else if (dataFormat === 'channelsLast') {\n    outShape = [batchSize, outDepth, outHeight, outWidth, outChannels];\n  }\n\n  return {\n    batchSize,\n    dataFormat,\n    inDepth,\n    inHeight,\n    inWidth,\n    inChannels,\n    outDepth,\n    outHeight,\n    outWidth,\n    outChannels,\n    padInfo,\n    strideDepth,\n    strideHeight,\n    strideWidth,\n    filterDepth,\n    filterHeight,\n    filterWidth,\n    effectiveFilterDepth,\n    effectiveFilterHeight,\n    effectiveFilterWidth,\n    dilationDepth,\n    dilationHeight,\n    dilationWidth,\n    inShape,\n    outShape,\n    filterShape\n  };\n}\n\nfunction computeOutputShape2D(\n    inShape: [number, number], fieldSize: number, stride: number,\n    zeroPad?: number, roundingMode?: 'floor'|'round'|'ceil'): [number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputRows = inShape[0];\n  const inputCols = inShape[1];\n\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputRows, outputCols];\n}\n\nfunction computeOutputShape4D(\n    inShape: [number, number, number, number], fieldSize: number,\n    outChannels: number, stride: number, zeroPad?: number,\n    roundingMode?: 'floor'|'round'|'ceil'): [number, number, number, number] {\n  if (zeroPad == null) {\n    zeroPad = computeDefaultPad(inShape, fieldSize, stride);\n  }\n  const inputDepth = inShape[0];\n  const inputRows = inShape[1];\n  const inputCols = inShape[2];\n\n  const outputDepths =\n      round((inputDepth - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputRows =\n      round((inputRows - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n  const outputCols =\n      round((inputCols - fieldSize + 2 * zeroPad) / stride + 1, roundingMode);\n\n  return [outputDepths, outputRows, outputCols, outChannels];\n}\n\nexport function computeDefaultPad(\n    inputShape: [number, number]|[number, number, number, number],\n    fieldSize: number, stride: number, dilation = 1): number {\n  const effectiveFieldSize = getEffectiveFilterSize(fieldSize, dilation);\n  return Math.floor(\n      (inputShape[0] * (stride - 1) - stride + effectiveFieldSize) / 2);\n}\n\nfunction parseTupleParam(param: number|number[]): [number, number, number] {\n  if (typeof param === 'number') {\n    return [param, param, param];\n  }\n  if (param.length === 2) {\n    return [param[0], param[1], 1];\n  }\n  return param as [number, number, number];\n}\n\nfunction parse3TupleParam(param: number|[number, number, number]):\n    [number, number, number] {\n  return typeof param === 'number' ? [param, param, param] : param;\n}\n\n/* See https://www.tensorflow.org/api_docs/python/tf/nn/atrous_conv2d\n * Atrous convolution is equivalent to standard convolution with upsampled\n * filters with effective_filter_height =\n * filter_height + (filter_height - 1) * (dilation - 1)\n * and effective_filter_width =\n * filter_width + (filter_width - 1) * (dilation - 1),\n * produced by inserting dilation - 1 zeros along consecutive elements across\n * the filters' spatial dimensions.\n * When there is a dilation, this converts a filter dimension to the\n * effective filter dimension, so it can be used in a standard convolution.\n */\nfunction getEffectiveFilterSize(filterSize: number, dilation: number) {\n  if (dilation <= 1) {\n    return filterSize;\n  }\n\n  return filterSize + (filterSize - 1) * (dilation - 1);\n}\n\nfunction getPadAndOutInfo(\n    pad: 'same'|'valid'|number|ExplicitPadding, inHeight: number,\n    inWidth: number, strideHeight: number, strideWidth: number,\n    filterHeight: number, filterWidth: number,\n    roundingMode: 'floor'|'round'|'ceil',\n    dataFormat: 'channelsFirst'|\n    'channelsLast'): {padInfo: PadInfo, outHeight: number, outWidth: number} {\n  let padInfo: PadInfo;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {top: pad, bottom: pad, left: pad, right: pad, type: padType};\n    const outShape = computeOutputShape2D(\n        [inHeight, inWidth], filterHeight, strideHeight, pad, roundingMode);\n    outHeight = outShape[0];\n    outWidth = outShape[1];\n  } else if (pad === 'same') {\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongHeight =\n        Math.max(0, (outHeight - 1) * strideHeight + filterHeight - inHeight);\n    const padAlongWidth =\n        Math.max(0, (outWidth - 1) * strideWidth + filterWidth - inWidth);\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n    padInfo = {top, bottom, left, right, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {top: 0, bottom: 0, left: 0, right: 0, type: 'VALID'};\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else if (typeof pad === 'object') {\n    const top = dataFormat === 'channelsLast' ? pad[1][0] : pad[2][0];\n    const bottom = dataFormat === 'channelsLast' ? pad[1][1] : pad[2][1];\n    const left = dataFormat === 'channelsLast' ? pad[2][0] : pad[3][0];\n    const right = dataFormat === 'channelsLast' ? pad[2][1] : pad[3][1];\n    const padType = (top === 0 && bottom === 0 && left === 0 && right === 0) ?\n        'VALID' :\n        'EXPLICIT';\n    padInfo = {top, bottom, left, right, type: padType};\n    outHeight = round(\n        (inHeight - filterHeight + top + bottom) / strideHeight + 1,\n        roundingMode);\n    outWidth = round(\n        (inWidth - filterWidth + left + right) / strideWidth + 1, roundingMode);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outHeight, outWidth};\n}\n\nfunction get3DPadAndOutInfo(\n    pad: 'same'|'valid'|number, inDepth: number, inHeight: number,\n    inWidth: number, strideDepth: number, strideHeight: number,\n    strideWidth: number, filterDepth: number, filterHeight: number,\n    filterWidth: number, roundingMode?: 'floor'|'round'|'ceil'): {\n  padInfo: PadInfo3D,\n  outDepth: number,\n  outHeight: number,\n  outWidth: number\n} {\n  let padInfo: PadInfo3D;\n  let outDepth: number;\n  let outHeight: number;\n  let outWidth: number;\n\n  if (typeof pad === 'number') {\n    const padType = (pad === 0) ? 'VALID' : 'NUMBER';\n    padInfo = {\n      top: pad,\n      bottom: pad,\n      left: pad,\n      right: pad,\n      front: pad,\n      back: pad,\n      type: padType\n    };\n    const outShape = computeOutputShape4D(\n        [inDepth, inHeight, inWidth, 1], filterDepth, 1, strideDepth, pad,\n        roundingMode);\n    outDepth = outShape[0];\n    outHeight = outShape[1];\n    outWidth = outShape[2];\n  } else if (pad === 'same') {\n    outDepth = Math.ceil(inDepth / strideDepth);\n    outHeight = Math.ceil(inHeight / strideHeight);\n    outWidth = Math.ceil(inWidth / strideWidth);\n    const padAlongDepth = (outDepth - 1) * strideDepth + filterDepth - inDepth;\n    const padAlongHeight =\n        (outHeight - 1) * strideHeight + filterHeight - inHeight;\n    const padAlongWidth = (outWidth - 1) * strideWidth + filterWidth - inWidth;\n    const front = Math.floor(padAlongDepth / 2);\n    const back = padAlongDepth - front;\n    const top = Math.floor(padAlongHeight / 2);\n    const bottom = padAlongHeight - top;\n    const left = Math.floor(padAlongWidth / 2);\n    const right = padAlongWidth - left;\n\n    padInfo = {top, bottom, left, right, front, back, type: 'SAME'};\n  } else if (pad === 'valid') {\n    padInfo = {\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      front: 0,\n      back: 0,\n      type: 'VALID'\n    };\n    outDepth = Math.ceil((inDepth - filterDepth + 1) / strideDepth);\n    outHeight = Math.ceil((inHeight - filterHeight + 1) / strideHeight);\n    outWidth = Math.ceil((inWidth - filterWidth + 1) / strideWidth);\n  } else {\n    throw Error(`Unknown padding parameter: ${pad}`);\n  }\n  return {padInfo, outDepth, outHeight, outWidth};\n}\n\n/**\n * Rounds a value depending on the rounding mode\n * @param value\n * @param roundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction round(value: number, roundingMode?: 'floor'|'round'|'ceil') {\n  if (!roundingMode) {\n    return Math.trunc(value);\n  }\n  switch (roundingMode) {\n    case 'round':\n      // used for Caffe Conv\n      return Math.round(value);\n    case 'ceil':\n      // used for Caffe Pool\n      return Math.ceil(value);\n    case 'floor':\n      return Math.floor(value);\n    default:\n      throw new Error(`Unknown roundingMode ${roundingMode}`);\n  }\n}\n\nexport function tupleValuesAreOne(param: number|number[]): boolean {\n  const [dimA, dimB, dimC] = parseTupleParam(param);\n  return dimA === 1 && dimB === 1 && dimC === 1;\n}\n\nexport function eitherStridesOrDilationsAreOne(\n    strides: number|number[], dilations: number|number[]): boolean {\n  return tupleValuesAreOne(strides) || tupleValuesAreOne(dilations);\n}\n\n/**\n * Convert Conv2D dataFormat from 'NHWC'|'NCHW' to\n *    'channelsLast'|'channelsFirst'\n * @param dataFormat in 'NHWC'|'NCHW' mode\n * @return dataFormat in 'channelsLast'|'channelsFirst' mode\n * @throws unknown dataFormat\n */\nexport function convertConv2DDataFormat(dataFormat: 'NHWC'|'NCHW'):\n    'channelsLast'|'channelsFirst' {\n  if (dataFormat === 'NHWC') {\n    return 'channelsLast';\n  } else if (dataFormat === 'NCHW') {\n    return 'channelsFirst';\n  } else {\n    throw new Error(`Unknown dataFormat ${dataFormat}`);\n  }\n}\n\n/**\n * Check validity of pad when using dimRoundingMode.\n * @param opDesc A string of op description\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @throws unknown padding parameter\n */\nexport function checkPadOnDimRoundingMode(\n    opDesc: string, pad: 'valid'|'same'|number|ExplicitPadding,\n    dimRoundingMode?: 'floor'|'round'|'ceil') {\n  if (dimRoundingMode != null) {\n    if (typeof pad === 'string') {\n      throw Error(\n          `Error in ${opDesc}: pad must be an integer when using `  +\n          `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'number') {\n      util.assert(\n        util.isInt(pad),\n          () => `Error in ${opDesc}: pad must be an integer when using ` +\n              `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    } else if (typeof pad === 'object') {\n      (pad as ExplicitPadding).forEach(p => {p.forEach(v =>{\n        util.assert(\n          util.isInt(v),\n            () => `Error in ${opDesc}: pad must be an integer when using ` +\n                `dimRoundingMode ${dimRoundingMode} but got pad ${v}.`);\n        });\n      });\n    } else {\n      throw Error(`Error in ${opDesc}: Unknown padding parameter: ${pad}`);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}