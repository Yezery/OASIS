{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nimport * as dagCbor from '@ipld/dag-cbor';\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid);\n  const object = dagCbor.decode(block);\n  let subObject = object;\n  let subPath = path;\n  while (toResolve.length) {\n    const prop = toResolve[0];\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift();\n      subPath = `${subPath}/${prop}`;\n      const subObjectCid = CID.asCID(subObject[prop]);\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function* () {\n              yield object;\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        };\n      }\n      subObject = subObject[prop];\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP');\n    }\n  }\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function* () {\n        yield object;\n      }\n    }\n  };\n};\nexport default resolve;","map":{"version":3,"names":["CID","errCode","dagCbor","resolve","cid","name","path","toResolve","depth","blockstore","options","block","get","object","decode","subObject","subPath","length","prop","shift","subObjectCid","asCID","entry","type","node","size","content","next","Error"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-exporter@10.0.1/node_modules/ipfs-unixfs-exporter/src/resolvers/dag-cbor.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\nimport * as dagCbor from '@ipld/dag-cbor'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n */\n\n/**\n * @type {Resolver}\n */\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  const block = await blockstore.get(cid)\n  const object = dagCbor.decode(block)\n  let subObject = object\n  let subPath = path\n\n  while (toResolve.length) {\n    const prop = toResolve[0]\n\n    if (prop in subObject) {\n      // remove the bit of the path we have resolved\n      toResolve.shift()\n      subPath = `${subPath}/${prop}`\n\n      const subObjectCid = CID.asCID(subObject[prop])\n      if (subObjectCid) {\n        return {\n          entry: {\n            type: 'object',\n            name,\n            path,\n            cid,\n            node: block,\n            depth,\n            size: block.length,\n            content: async function * () {\n              yield object\n            }\n          },\n          next: {\n            cid: subObjectCid,\n            name: prop,\n            path: subPath,\n            toResolve\n          }\n        }\n      }\n\n      subObject = subObject[prop]\n    } else {\n      // cannot resolve further\n      throw errCode(new Error(`No property named ${prop} found in cbor node ${cid}`), 'ERR_NO_PROP')\n    }\n  }\n\n  return {\n    entry: {\n      type: 'object',\n      name,\n      path,\n      cid,\n      node: block,\n      depth,\n      size: block.length,\n      content: async function * () {\n        yield object\n      }\n    }\n  }\n}\n\nexport default resolve\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,OAAOC,OAAO,MAAM,UAAU;AAC9B,OAAO,KAAKC,OAAO,MAAM,gBAAgB;;AAEzC;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAEC,SAAS,EAAEJ,OAAO,EAAEK,KAAK,EAAEC,UAAU,EAAEC,OAAO,KAAK;EACzF,MAAMC,KAAK,GAAG,MAAMF,UAAU,CAACG,GAAG,CAACR,GAAG,CAAC;EACvC,MAAMS,MAAM,GAAGX,OAAO,CAACY,MAAM,CAACH,KAAK,CAAC;EACpC,IAAII,SAAS,GAAGF,MAAM;EACtB,IAAIG,OAAO,GAAGV,IAAI;EAElB,OAAOC,SAAS,CAACU,MAAM,EAAE;IACvB,MAAMC,IAAI,GAAGX,SAAS,CAAC,CAAC,CAAC;IAEzB,IAAIW,IAAI,IAAIH,SAAS,EAAE;MACrB;MACAR,SAAS,CAACY,KAAK,CAAC,CAAC;MACjBH,OAAO,GAAI,GAAEA,OAAQ,IAAGE,IAAK,EAAC;MAE9B,MAAME,YAAY,GAAGpB,GAAG,CAACqB,KAAK,CAACN,SAAS,CAACG,IAAI,CAAC,CAAC;MAC/C,IAAIE,YAAY,EAAE;QAChB,OAAO;UACLE,KAAK,EAAE;YACLC,IAAI,EAAE,QAAQ;YACdlB,IAAI;YACJC,IAAI;YACJF,GAAG;YACHoB,IAAI,EAAEb,KAAK;YACXH,KAAK;YACLiB,IAAI,EAAEd,KAAK,CAACM,MAAM;YAClBS,OAAO,EAAE,gBAAAA,CAAA,EAAoB;cAC3B,MAAMb,MAAM;YACd;UACF,CAAC;UACDc,IAAI,EAAE;YACJvB,GAAG,EAAEgB,YAAY;YACjBf,IAAI,EAAEa,IAAI;YACVZ,IAAI,EAAEU,OAAO;YACbT;UACF;QACF,CAAC;MACH;MAEAQ,SAAS,GAAGA,SAAS,CAACG,IAAI,CAAC;IAC7B,CAAC,MAAM;MACL;MACA,MAAMjB,OAAO,CAAC,IAAI2B,KAAK,CAAE,qBAAoBV,IAAK,uBAAsBd,GAAI,EAAC,CAAC,EAAE,aAAa,CAAC;IAChG;EACF;EAEA,OAAO;IACLkB,KAAK,EAAE;MACLC,IAAI,EAAE,QAAQ;MACdlB,IAAI;MACJC,IAAI;MACJF,GAAG;MACHoB,IAAI,EAAEb,KAAK;MACXH,KAAK;MACLiB,IAAI,EAAEd,KAAK,CAACM,MAAM;MAClBS,OAAO,EAAE,gBAAAA,CAAA,EAAoB;QAC3B,MAAMb,MAAM;MACd;IACF;EACF,CAAC;AACH,CAAC;AAED,eAAeV,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}