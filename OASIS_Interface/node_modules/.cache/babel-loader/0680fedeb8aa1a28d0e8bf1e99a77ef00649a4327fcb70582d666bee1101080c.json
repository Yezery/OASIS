{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { identity } from 'multiformats/hashes/identity';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport * as crypto from './ed25519.js';\nimport { exporter } from './exporter.js';\nimport * as pbm from './keys.js';\nexport class Ed25519PublicKey {\n  constructor(key) {\n    _defineProperty(this, \"_key\", void 0);\n    this._key = ensureKey(key, crypto.publicKeyLength);\n  }\n  async verify(data, sig) {\n    return crypto.hashAndVerify(this._key, sig, data);\n  }\n  marshal() {\n    return this._key;\n  }\n  get bytes() {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    }).subarray();\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n}\nexport class Ed25519PrivateKey {\n  // key       - 64 byte Uint8Array containing private key\n  // publicKey - 32 byte Uint8Array containing public key\n  constructor(key, publicKey) {\n    _defineProperty(this, \"_key\", void 0);\n    _defineProperty(this, \"_publicKey\", void 0);\n    this._key = ensureKey(key, crypto.privateKeyLength);\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength);\n  }\n  async sign(message) {\n    return crypto.hashAndSign(this._key, message);\n  }\n  get public() {\n    return new Ed25519PublicKey(this._publicKey);\n  }\n  marshal() {\n    return this._key;\n  }\n  get bytes() {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    }).subarray();\n  }\n  equals(key) {\n    return uint8ArrayEquals(this.bytes, key.bytes);\n  }\n  async hash() {\n    const {\n      bytes\n    } = await sha256.digest(this.bytes);\n    return bytes;\n  }\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the identity multihash containing its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @returns {Promise<string>}\n   */\n  async id() {\n    const encoding = identity.digest(this.public.bytes);\n    return base58btc.encode(encoding.bytes).substring(1);\n  }\n  /**\n   * Exports the key into a password protected `format`\n   */\n  async export(password, format = 'libp2p-key') {\n    if (format === 'libp2p-key') {\n      return exporter(this.bytes, password);\n    } else {\n      throw new CodeError(`export format '${format}' is not supported`, 'ERR_INVALID_EXPORT_FORMAT');\n    }\n  }\n}\nexport function unmarshalEd25519PrivateKey(bytes) {\n  // Try the old, redundant public key version\n  if (bytes.length > crypto.privateKeyLength) {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength);\n    const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n    const publicKeyBytes = bytes.subarray(crypto.privateKeyLength, bytes.length);\n    return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n  }\n  bytes = ensureKey(bytes, crypto.privateKeyLength);\n  const privateKeyBytes = bytes.subarray(0, crypto.privateKeyLength);\n  const publicKeyBytes = bytes.subarray(crypto.publicKeyLength);\n  return new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes);\n}\nexport function unmarshalEd25519PublicKey(bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength);\n  return new Ed25519PublicKey(bytes);\n}\nexport async function generateKeyPair() {\n  const {\n    privateKey,\n    publicKey\n  } = await crypto.generateKey();\n  return new Ed25519PrivateKey(privateKey, publicKey);\n}\nexport async function generateKeyPairFromSeed(seed) {\n  const {\n    privateKey,\n    publicKey\n  } = await crypto.generateKeyFromSeed(seed);\n  return new Ed25519PrivateKey(privateKey, publicKey);\n}\nfunction ensureKey(key, length) {\n  key = Uint8Array.from(key ?? []);\n  if (key.length !== length) {\n    throw new CodeError(`Key must be a Uint8Array of length ${length}, got ${key.length}`, 'ERR_INVALID_KEY_TYPE');\n  }\n  return key;\n}","map":{"version":3,"names":["CodeError","base58btc","identity","sha256","equals","uint8ArrayEquals","crypto","exporter","pbm","Ed25519PublicKey","constructor","key","_defineProperty","_key","ensureKey","publicKeyLength","verify","data","sig","hashAndVerify","marshal","bytes","PublicKey","encode","Type","KeyType","Ed25519","Data","subarray","hash","digest","Ed25519PrivateKey","publicKey","privateKeyLength","_publicKey","sign","message","hashAndSign","public","PrivateKey","id","encoding","substring","export","password","format","unmarshalEd25519PrivateKey","length","privateKeyBytes","publicKeyBytes","unmarshalEd25519PublicKey","generateKeyPair","privateKey","generateKey","generateKeyPairFromSeed","seed","generateKeyFromSeed","Uint8Array","from"],"sources":["../../../src/keys/ed25519-class.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}