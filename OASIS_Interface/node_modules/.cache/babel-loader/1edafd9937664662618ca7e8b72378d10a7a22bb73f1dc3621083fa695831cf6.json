{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n  // TODO(adarob, cais): Support quantization.\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec = {\n      name,\n      shape: t.shape,\n      dtype: t.dtype\n    };\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise(async resolve => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n  const tensorValues = await Promise.all(dataPromises);\n  return {\n    data: concatenateTypedArrays(tensorValues),\n    specs\n  };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(buffer, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n  let totalByteLength = 0;\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n  let totalByteLength = 0;\n  buffers.forEach(buffer => {\n    totalByteLength += buffer.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach(buffer => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n  const result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n  const modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n  return modelArtifacts;\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"names":["complex","tensor","sizeFromShape","DTYPE_VALUE_SIZE_MAP","NUM_BYTES_STRING_LENGTH","encodeWeights","tensors","group","specs","dataPromises","names","Array","isArray","map","name","Object","keys","i","length","t","dtype","Error","spec","shape","utf8bytes","Promise","resolve","vals","bytes","totalNumBytes","reduce","p","c","Uint8Array","offset","val","bytesOfLength","Uint32Array","buffer","set","push","data","tensorValues","all","concatenateTypedArrays","decodeWeights","out","float16Decode","size","values","quantization","quantizationSizeFactor","byteBuffer","slice","quantizedArray","Uint16Array","Float32Array","v","scale","min","undefined","getFloat16Decoder","Int32Array","Math","round","byteLength","dtypeFactor","real","image","realTensor","imageTensor","dispose","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","constructor","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","s","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","temp","basename","path","SEPARATOR","trim","endsWith","items","split","getModelJSONForModelArtifacts","artifacts","manifest","result","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","trainingConfig","getModelArtifactsForJSON","modelJSON","loadWeights","modelArtifacts","weightSpecs","weightData","getModelArtifactsInfoForJSON","ArrayBuffer","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","computeFloat16MantisaTable","convertMantissa","m","e","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","index","float16Bits","float32Bits"],"sources":["../../../../../../tfjs-core/src/io/io_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n    ]>): Promise<ModelArtifacts> {\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] =\n        await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}