{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { base64urlToBuffer } from '../util.js';\nimport webcrypto from '../webcrypto.js';\nconst bits = {\n  'P-256': 256,\n  'P-384': 384,\n  'P-521': 521\n};\nconst curveTypes = Object.keys(bits);\nconst names = curveTypes.join(' / ');\nexport async function generateEphmeralKeyPair(curve) {\n  if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n    throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n  }\n  const pair = await webcrypto.get().subtle.generateKey({\n    name: 'ECDH',\n    namedCurve: curve\n  }, true, ['deriveBits']);\n  // forcePrivate is used for testing only\n  const genSharedKey = async (theirPub, forcePrivate) => {\n    let privateKey;\n    if (forcePrivate != null) {\n      privateKey = await webcrypto.get().subtle.importKey('jwk', unmarshalPrivateKey(curve, forcePrivate), {\n        name: 'ECDH',\n        namedCurve: curve\n      }, false, ['deriveBits']);\n    } else {\n      privateKey = pair.privateKey;\n    }\n    const key = await webcrypto.get().subtle.importKey('jwk', unmarshalPublicKey(curve, theirPub), {\n      name: 'ECDH',\n      namedCurve: curve\n    }, false, []);\n    const buffer = await webcrypto.get().subtle.deriveBits({\n      name: 'ECDH',\n      // @ts-expect-error namedCurve is missing from the types\n      namedCurve: curve,\n      public: key\n    }, privateKey, bits[curve]);\n    return new Uint8Array(buffer, 0, buffer.byteLength);\n  };\n  const publicKey = await webcrypto.get().subtle.exportKey('jwk', pair.publicKey);\n  const ecdhKey = {\n    key: marshalPublicKey(publicKey),\n    genSharedKey\n  };\n  return ecdhKey;\n}\nconst curveLengths = {\n  'P-256': 32,\n  'P-384': 48,\n  'P-521': 66\n};\n// Marshal converts a jwk encoded ECDH public key into the\n// form specified in section 4.3.6 of ANSI X9.62. (This is the format\n// go-ipfs uses)\nfunction marshalPublicKey(jwk) {\n  if (jwk.crv == null || jwk.x == null || jwk.y == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n  }\n  if (jwk.crv !== 'P-256' && jwk.crv !== 'P-384' && jwk.crv !== 'P-521') {\n    throw new CodeError(`Unknown curve: ${jwk.crv}. Must be ${names}`, 'ERR_INVALID_CURVE');\n  }\n  const byteLen = curveLengths[jwk.crv];\n  return uint8ArrayConcat([Uint8Array.from([4]), base64urlToBuffer(jwk.x, byteLen), base64urlToBuffer(jwk.y, byteLen)], 1 + byteLen * 2);\n}\n// Unmarshal converts a point, serialized by Marshal, into an jwk encoded key\nfunction unmarshalPublicKey(curve, key) {\n  if (curve !== 'P-256' && curve !== 'P-384' && curve !== 'P-521') {\n    throw new CodeError(`Unknown curve: ${curve}. Must be ${names}`, 'ERR_INVALID_CURVE');\n  }\n  const byteLen = curveLengths[curve];\n  if (!uint8ArrayEquals(key.subarray(0, 1), Uint8Array.from([4]))) {\n    throw new CodeError('Cannot unmarshal public key - invalid key format', 'ERR_INVALID_KEY_FORMAT');\n  }\n  return {\n    kty: 'EC',\n    crv: curve,\n    x: uint8ArrayToString(key.subarray(1, byteLen + 1), 'base64url'),\n    y: uint8ArrayToString(key.subarray(1 + byteLen), 'base64url'),\n    ext: true\n  };\n}\nconst unmarshalPrivateKey = (curve, key) => ({\n  ...unmarshalPublicKey(curve, key.public),\n  d: uint8ArrayToString(key.private, 'base64url')\n});","map":{"version":3,"names":["CodeError","concat","uint8ArrayConcat","equals","uint8ArrayEquals","toString","uint8ArrayToString","base64urlToBuffer","webcrypto","bits","curveTypes","Object","keys","names","join","generateEphmeralKeyPair","curve","pair","get","subtle","generateKey","name","namedCurve","genSharedKey","theirPub","forcePrivate","privateKey","importKey","unmarshalPrivateKey","key","unmarshalPublicKey","buffer","deriveBits","public","Uint8Array","byteLength","publicKey","exportKey","ecdhKey","marshalPublicKey","curveLengths","jwk","crv","x","y","byteLen","from","subarray","kty","ext","d","private"],"sources":["../../../src/keys/ecdh-browser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}