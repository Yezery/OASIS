{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @packageDocumentation\n *\n * An implementation of a Multiaddr in JavaScript\n *\n * @example\n *\n * ```js\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/ip4/127.0.0.1/tcp/1234')\n * ```\n */\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar _DefaultMultiaddr_string, _DefaultMultiaddr_tuples, _DefaultMultiaddr_stringTuples, _a;\nimport * as codec from './codec.js';\nimport { getProtocol, names } from './protocols-table.js';\nimport varint from 'varint';\nimport { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errCode from 'err-code';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\nconst DNS_CODES = [getProtocol('dns').code, getProtocol('dns4').code, getProtocol('dns6').code, getProtocol('dnsaddr').code];\n/**\n * All configured {@link Resolver}s\n */\nexport const resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a Multiaddr from a node-friendly address object\n *\n * @example\n * ```js\n * import { fromNodeAddress } from '@multiformats/multiaddr'\n *\n * fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n */\nexport function fromNodeAddress(addr, transport) {\n  if (addr == null) {\n    throw new Error('requires node address object');\n  }\n  if (transport == null) {\n    throw new Error('requires transport protocol');\n  }\n  let ip;\n  let host = addr.address;\n  switch (addr.family) {\n    case 4:\n      ip = 'ip4';\n      break;\n    case 6:\n      ip = 'ip6';\n      if (host.includes('%')) {\n        const parts = host.split('%');\n        if (parts.length !== 2) {\n          throw Error('Multiple ip6 zones in multiaddr');\n        }\n        host = parts[0];\n        const zone = parts[1];\n        ip = `/ip6zone/${zone}/ip6`;\n      }\n      break;\n    default:\n      throw Error('Invalid addr family, should be 4 or 6.');\n  }\n  return new DefaultMultiaddr('/' + [ip, host, transport, addr.port].join('/'));\n}\n/**\n * Returns if something is a {@link Multiaddr} that is a resolvable name\n *\n * @example\n *\n * ```js\n * import { isName, multiaddr } from '@multiformats/multiaddr'\n *\n * isName(multiaddr('/ip4/127.0.0.1'))\n * // false\n * isName(multiaddr('/dns/ipfs.io'))\n * // true\n * ```\n */\nexport function isName(addr) {\n  if (!isMultiaddr(addr)) {\n    return false;\n  }\n  // if a part of the multiaddr is resolvable, then return true\n  return addr.protos().some(proto => proto.resolvable);\n}\n/**\n * Check if object is a {@link Multiaddr} instance\n *\n * @example\n *\n * ```js\n * import { isMultiaddr, multiaddr } from '@multiformats/multiaddr'\n *\n * isMultiaddr(5)\n * // false\n * isMultiaddr(multiaddr('/ip4/127.0.0.1'))\n * // true\n * ```\n */\nexport function isMultiaddr(value) {\n  return Boolean(value?.[symbol]);\n}\n/**\n * Creates a {@link Multiaddr} from a {@link MultiaddrInput}\n */\nclass DefaultMultiaddr {\n  constructor(addr) {\n    _DefaultMultiaddr_string.set(this, void 0);\n    _DefaultMultiaddr_tuples.set(this, void 0);\n    _DefaultMultiaddr_stringTuples.set(this, void 0);\n    this[_a] = true;\n    // default\n    if (addr == null) {\n      addr = '';\n    }\n    if (addr instanceof Uint8Array) {\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n      this.bytes = codec.fromString(addr);\n    } else if (isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  toString() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_string, codec.bytesToString(this.bytes), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_string, \"f\");\n  }\n  toJSON() {\n    return this.toString();\n  }\n  toOptions() {\n    let family;\n    let transport;\n    let host;\n    let port;\n    let zone = '';\n    const tcp = getProtocol('tcp');\n    const udp = getProtocol('udp');\n    const ip4 = getProtocol('ip4');\n    const ip6 = getProtocol('ip6');\n    const dns6 = getProtocol('dns6');\n    const ip6zone = getProtocol('ip6zone');\n    for (const [code, value] of this.stringTuples()) {\n      if (code === ip6zone.code) {\n        zone = `%${value ?? ''}`;\n      }\n      // default to https when protocol & port are omitted from DNS addrs\n      if (DNS_CODES.includes(code)) {\n        transport = tcp.name;\n        port = 443;\n        host = `${value ?? ''}${zone}`;\n        family = code === dns6.code ? 6 : 4;\n      }\n      if (code === tcp.code || code === udp.code) {\n        transport = getProtocol(code).name;\n        port = parseInt(value ?? '');\n      }\n      if (code === ip4.code || code === ip6.code) {\n        transport = getProtocol(code).name;\n        host = `${value ?? ''}${zone}`;\n        family = code === ip6.code ? 6 : 4;\n      }\n    }\n    if (family == null || transport == null || host == null || port == null) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6, dnsaddr}/{address}/{tcp, udp}/{port}\".');\n    }\n    const opts = {\n      family,\n      host,\n      transport,\n      port\n    };\n    return opts;\n  }\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, getProtocol(code)));\n  }\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes ?? 0;\n      const p = getProtocol(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n    return codes;\n  }\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  tuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_tuples, codec.bytesToTuples(this.bytes), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_tuples, \"f\");\n  }\n  stringTuples() {\n    if (__classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\") == null) {\n      __classPrivateFieldSet(this, _DefaultMultiaddr_stringTuples, codec.tuplesToStringTuples(this.tuples()), \"f\");\n    }\n    return __classPrivateFieldGet(this, _DefaultMultiaddr_stringTuples, \"f\");\n  }\n  encapsulate(addr) {\n    addr = new DefaultMultiaddr(addr);\n    return new DefaultMultiaddr(this.toString() + addr.toString());\n  }\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n    if (i < 0) {\n      throw new Error(`Address ${this.toString()} does not contain subaddress: ${addr.toString()}`);\n    }\n    return new DefaultMultiaddr(s.slice(0, i));\n  }\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new DefaultMultiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n    return this;\n  }\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === names.ipfs.code) {\n          return true;\n        }\n        return false;\n      });\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop();\n      if (tuple?.[1] != null) {\n        const peerIdStr = tuple[1];\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        }\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  getPath() {\n    let path = null;\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = getProtocol(tuple[0]);\n        if (proto.path === true) {\n          return true;\n        }\n        return false;\n      })[0][1];\n      if (path == null) {\n        path = null;\n      }\n    } catch {\n      path = null;\n    }\n    return path;\n  }\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  async resolve(options) {\n    const resolvableProto = this.protos().find(p => p.resolvable);\n    // Multiaddr is not resolvable?\n    if (resolvableProto == null) {\n      return [this];\n    }\n    const resolver = resolvers.get(resolvableProto.name);\n    if (resolver == null) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n    const addresses = await resolver(this, options);\n    return addresses.map(a => new DefaultMultiaddr(a));\n  }\n  nodeAddress() {\n    const options = this.toOptions();\n    if (options.transport !== 'tcp' && options.transport !== 'udp') {\n      throw new Error(`multiaddr must have a valid format - no protocol with name: \"${options.transport}\". Must have a valid transport protocol: \"{tcp, udp}\"`);\n    }\n    return {\n      family: options.family,\n      address: options.host,\n      port: options.port\n    };\n  }\n  isThinWaistAddress(addr) {\n    const protos = (addr ?? this).protos();\n    if (protos.length !== 2) {\n      return false;\n    }\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n    return true;\n  }\n  /**\n   * Returns Multiaddr as a human-readable string\n   * https://nodejs.org/api/util.html#utilinspectcustom\n   *\n   * @example\n   * ```js\n   * import { multiaddr } from '@multiformats/multiaddr'\n   *\n   * console.info(multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // 'Multiaddr(/ip4/127.0.0.1/tcp/4001)'\n   * ```\n   */\n  [(_DefaultMultiaddr_string = new WeakMap(), _DefaultMultiaddr_tuples = new WeakMap(), _DefaultMultiaddr_stringTuples = new WeakMap(), _a = symbol, inspect)]() {\n    return `Multiaddr(${codec.bytesToString(this.bytes)})`;\n  }\n}\n/**\n * A function that takes a {@link MultiaddrInput} and returns a {@link Multiaddr}\n *\n * @example\n * ```js\n * import { multiaddr } from '@libp2p/multiaddr'\n *\n * multiaddr('/ip4/127.0.0.1/tcp/4001')\n * // Multiaddr(/ip4/127.0.0.1/tcp/4001)\n * ```\n *\n * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n */\nexport function multiaddr(addr) {\n  return new DefaultMultiaddr(addr);\n}\nexport { getProtocol as protocols };","map":{"version":3,"names":["codec","getProtocol","names","varint","CID","base58btc","errCode","toString","uint8ArrayToString","equals","uint8ArrayEquals","inspect","Symbol","for","DNS_CODES","code","resolvers","Map","symbol","fromNodeAddress","addr","transport","Error","ip","host","address","family","includes","parts","split","length","zone","DefaultMultiaddr","port","join","isName","isMultiaddr","protos","some","proto","resolvable","value","Boolean","constructor","_DefaultMultiaddr_string","set","_DefaultMultiaddr_tuples","_DefaultMultiaddr_stringTuples","_a","Uint8Array","bytes","fromBytes","charAt","fromString","__classPrivateFieldGet","__classPrivateFieldSet","bytesToString","toJSON","toOptions","tcp","udp","ip4","ip6","dns6","ip6zone","stringTuples","name","parseInt","opts","protoCodes","map","Object","assign","codes","buf","i","decode","n","p","size","sizeForAddr","slice","push","protoNames","tuples","bytesToTuples","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","options","resolvableProto","find","resolver","get","addresses","a","nodeAddress","isThinWaistAddress","WeakMap","multiaddr","protocols"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}