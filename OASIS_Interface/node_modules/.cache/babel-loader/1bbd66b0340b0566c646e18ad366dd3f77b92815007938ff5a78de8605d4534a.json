{"ast":null,"code":"import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nexport default {\n  props: {\n    walletConnect: {\n      type: Function,\n      default: null\n    }\n  },\n  data() {\n    return {\n      //****钱包连接弹出框******//\n      MetaMaskTipsIsShow: false,\n      Tips2: \"MetaMask无法连接 \",\n      isDisable: false,\n      //*********************//\n      //********Web3********//\n      web3: null,\n      contract: null,\n      toAddress: \"\",\n      value: \"\",\n      re: \"\",\n      avatar: \"\",\n      //*********************//\n      CopyTips: \"点击复制\",\n      CopySuccess: \"复制成功！\",\n      isCopy: false,\n      isRepeatClick: true\n    };\n  },\n  mounted() {\n    if (window.ethereum != undefined) {\n      window.ethereum.on(\"accountsChanged\", this.connectWallet);\n      console.log(\"ok\");\n    }\n  },\n  methods: {\n    sendSignatureToServer() {\n      const messageToSign = \"Hello, World!\";\n      this.$store.state.Web3.eth.personal.sign(messageToSign, this.$store.state.currentAddress, (error, signature) => {\n        if (!error) {\n          const signatureData = {\n            signature: signature\n          };\n          console.log(signatureData);\n          // 发送签名到服务器端进行验证\n          // axios.post('/verify-signature', signatureData)\n          //   .then(response => {\n          //     // 处理服务器端的响应\n          //     console.log(response.data);\n          //   })\n          //   .catch(error => {\n          //     // 处理错误\n          //     console.error(error);\n          //   });\n        }\n      });\n    },\n\n    Copy() {\n      navigator.clipboard.writeText(this.$store.state.currentAddress).then(() => {\n        this.isCopy = true;\n        setTimeout(() => {\n          this.isCopy = false;\n        }, 3000);\n      });\n    },\n    GETHashAvatar() {\n      if (this.$store.state.isconnect) {\n        this.avatar = \"data:image/png;base64,\" + new this.Identicon(this.$store.state.currentAddress, 120).toString();\n        this.$refs.avatar.width = 60;\n        this.$refs.avatar.height = 60;\n      } else {\n        this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n        this.$refs.avatar.width = 40;\n        this.$refs.avatar.height = 40;\n      }\n    },\n    MMCTDis() {\n      this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n      this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n      setTimeout(() => {\n        this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n      }, 750);\n    },\n    async connectWallet() {\n      if (this.isRepeatClick) {\n        this.isRepeatClick = false;\n        try {\n          // 请求用户授权\n          await window.ethereum.request({\n            method: \"eth_requestAccounts\"\n          }).then(handleAccountsChanged => {\n            this.$store.commit(\"connection\", true);\n            this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n            this.$store.commit(\"setcurrentAddress\", handleAccountsChanged[0]);\n          }).catch(error => {\n            this.$store.commit(\"connection\", false);\n            if (error.code === 4001) {\n              // EIP-1193 userRejectedRequest error\n              console.log(\"Please connect to MetaMask.\");\n            } else {\n              console.error(error);\n            }\n          });\n          let currentAddress = {\n            ownerAddress: this.$store.state.currentAddress\n          };\n          // ====================\n          postOwnerContractList(currentAddress).then(re => {\n            this.$store.commit(\"setOwnerNFTList\", re.data.data);\n            this.accountNFTList = this.$store.state.ownerNFTList;\n          });\n          this.walletConnect();\n          this.$notify({\n            title: \"🎉 连接成功\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.sendSignatureToServer();\n        } catch (error) {\n          console.error(error);\n          this.$notify.error({\n            title: \"连接失败\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      } else {\n        this.$notify({\n          title: \"已经有连接请勿操作频繁\",\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n      setTimeout(() => {\n        this.isRepeatClick = true;\n      }, 5000);\n    }\n  }\n};","map":{"version":3,"names":["postOwnerContractList","props","walletConnect","type","Function","default","data","MetaMaskTipsIsShow","Tips2","isDisable","web3","contract","toAddress","value","re","avatar","CopyTips","CopySuccess","isCopy","isRepeatClick","mounted","window","ethereum","undefined","on","connectWallet","console","log","methods","sendSignatureToServer","messageToSign","$store","state","Web3","eth","personal","sign","currentAddress","error","signature","signatureData","Copy","navigator","clipboard","writeText","then","setTimeout","GETHashAvatar","isconnect","Identicon","toString","$refs","width","height","require","MMCTDis","MMCT","classList","remove","add","request","method","handleAccountsChanged","commit","catch","code","ownerAddress","accountNFTList","ownerNFTList","$notify","title","position","offset"],"sources":["src/views/user/WalletConnect.vue"],"sourcesContent":["<template>\n  <div class=\"Walletbox\">\n    <div\n      class=\"WalletInnerBox\"\n      @click.stop=\"Copy\"\n    >\n      <span class=\"avatarBox\">\n        <img\n          class=\"avatar\"\n          :src=\"$store.state.avatar\"\n          alt=\"\"\n          ref=\"avatar\"\n          slot=\"reference\"\n          @click.stop=\"connectWallet\"\n        >\n      </span>\n      <span\n        class=\"address\"\n      >{{ \n        $store.state.currentAddress==\"\"?\"MetaMask is not connected\":`${this.$store.state.currentAddress.slice(\n          0,\n          5\n        )}...${this.$store.state.currentAddress.slice(-5)}`\n      }}\n      </span>\n    </div>\n    <div />\n  </div>\n</template>\n\n<script>\n  import { postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\n  export default {\n    props: {\n      walletConnect: {\n        type: Function,\n        default: null,\n      },\n    },\n    data() {\n      return {\n        //****钱包连接弹出框******//\n        MetaMaskTipsIsShow: false,\n        Tips2: \"MetaMask无法连接 \",\n        isDisable: false,\n        //*********************//\n        //********Web3********//\n        web3: null,\n        contract: null,\n        toAddress: \"\",\n        value: \"\",\n        re: \"\",\n        avatar: \"\",\n        //*********************//\n        CopyTips: \"点击复制\",\n        CopySuccess: \"复制成功！\",\n        isCopy: false,\n        isRepeatClick:true\n      };\n    },\n    mounted() {\n      if (window.ethereum != undefined) {\n        window.ethereum.on(\"accountsChanged\", this.connectWallet);\n        console.log(\"ok\");\n\n        \n      }\n    },\n  methods: {\n    sendSignatureToServer() {\n    const messageToSign = \"Hello, World!\";\n\n    this.$store.state.Web3.eth.personal.sign(messageToSign, this.$store.state.currentAddress, (error, signature) => {\n      if (!error) {\n        const signatureData = {\n          signature: signature,\n        };\n        console.log(signatureData);\n        // 发送签名到服务器端进行验证\n        // axios.post('/verify-signature', signatureData)\n        //   .then(response => {\n        //     // 处理服务器端的响应\n        //     console.log(response.data);\n        //   })\n        //   .catch(error => {\n        //     // 处理错误\n        //     console.error(error);\n        //   });\n      }\n    });\n  },\n\n\n\n\n    \n      Copy() {\n        navigator.clipboard.writeText(this.$store.state.currentAddress).then(() => {\n          this.isCopy = true;\n          setTimeout(() => {\n            this.isCopy = false;\n          }, 3000);\n        });\n      },\n      GETHashAvatar() {\n        if (this.$store.state.isconnect) {\n          this.avatar =\n            \"data:image/png;base64,\" +\n            new this.Identicon(this.$store.state.currentAddress, 120).toString();\n          this.$refs.avatar.width = 60;\n          this.$refs.avatar.height = 60;\n        } else {\n          this.avatar = require(\"@/assets/webAssets/MetaMask.png\");\n          this.$refs.avatar.width = 40;\n          this.$refs.avatar.height = 40;\n        }\n      },\n      MMCTDis() {\n        this.$refs.MMCT.classList.remove(\"animate__fadeIn\");\n        this.$refs.MMCT.classList.add(\"animate__fadeOut\");\n        setTimeout(() => {\n          this.MetaMaskTipsIsShow = !this.MetaMaskTipsIsShow;\n        }, 750);\n      },\n      async connectWallet() {\n        if (this.isRepeatClick) {\n          this.isRepeatClick = false;\n          try {\n          // 请求用户授权\n          await window.ethereum.request({ method: \"eth_requestAccounts\" }).then((handleAccountsChanged) => {\n              this.$store.commit(\"connection\", true);\n              this.$store.commit(\"changeAvatar\", handleAccountsChanged[0]);\n              this.$store.commit(\"setcurrentAddress\", handleAccountsChanged[0]);\n            }).catch((error) => {\n              this.$store.commit(\"connection\", false);\n              if (error.code === 4001) {\n                // EIP-1193 userRejectedRequest error\n                console.log(\"Please connect to MetaMask.\");\n              } else {\n                console.error(error);\n              }\n            });\n          let currentAddress = {\n            ownerAddress: this.$store.state.currentAddress,\n          };\n          // ====================\n          postOwnerContractList(currentAddress).then((re) => {\n            this.$store.commit(\"setOwnerNFTList\", re.data.data);\n            this.accountNFTList = this.$store.state.ownerNFTList;\n          });\n            this.walletConnect();\n          this.$notify({\n            title: \"🎉 连接成功\",\n            position: \"top-left\",\n            offset: 200,\n          });     \n          this.sendSignatureToServer()\n        } catch (error) {\n          console.error(error);\n          this.$notify.error({\n            title: \"连接失败\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n        }else {\n          this.$notify({\n              title: \"已经有连接请勿操作频繁\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n        }\n          setTimeout(() => {\n            this.isRepeatClick = true;\n          }, 5000);\n   \n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\">\n/* 全局通知样式 */\n.el-notification {\n  border: none !important;\n  padding-top: 2%;\n  padding-bottom: 2%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 20px;\n  .el-notification__title {\n    font-size: 1vw;\n    font-weight: 500;\n  }\n}\n::-webkit-scrollbar {\n  width: 6px;\n  height: 8px;\n  display: none;\n  background-color: transparent;\n}\n::-webkit-scrollbar-thumb {\n  background-color: #ccc;\n  border-radius: 25px;\n}\n</style>\n<style lang=\"scss\" scoped>\n.Walletbox {\n  display: flex;\n  justify-content: flex-start;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n.avatar {\n  object-fit: fill;\n  width: 100%;\n  height: 100%;\n  background-color: white;\n  float: right;\n}\n.avatarBox {\n  overflow: hidden;\n  border-radius: 50%;\n  width: 38px;\n  height: 38px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: 10%;\n  border: 2px solid var(--border-green--);\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    border: 2px solid var(--border-green--);\n    box-shadow: 0 0 20px var(--border-green--);\n    transition: all 0.3s ease-in-out;\n  }\n}\n.MetaMaskAvatar {\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.BOX {\n  width: 100%;\n  height: 80px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.WalletInnerBox {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: flex-start;\n  align-items: center;\n  cursor: pointer;\n}\n.address {\n  margin-left: 5%;\n  color: var(--Dark--);\n  font-weight: 800;\n  font-size: 12px;\n  width: 50%;\n  text-align: center;\n  border-radius: 10px;\n  padding-top: 10px;\n  padding-bottom: 10px;\n  padding-left: 5px;\n  padding-right: 5px;\n  font-family: Arial, Helvetica, sans-serif;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    background-color: rgba(238, 238, 238, 0.1);\n    transition: all 0.3s ease-in-out;\n  }\n}\n/* MetaMask弹出框 */\n.MetaMaskConnectionTip {\n  font-family: Arial, Helvetica, sans-serif;\n  overflow: hidden;\n  position: absolute;\n  width: 350px;\n  height: 300px;\n  background-color: var(--White--);\n  color: var(--Dark--);\n  top: 50%;\n  left: 50%;\n  z-index: 100;\n  transform: translate(-50%, -50%);\n  border-radius: 20px;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.MetaMaskTipsBtn {\n  border: 0px solid;\n  background-color: white;\n  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n  border-radius: 7px;\n  padding-top: 5%;\n  padding-bottom: 5%;\n  padding-left: 22%;\n  padding-right: 22%;\n  font-size: 13px;\n  font-weight: 500;\n}\n.MetaMaskTipsBtn:hover {\n  background-color: rgb(252, 251, 251);\n}\n.MetaMaskTips {\n  font-size: 17px;\n  font-weight: 500;\n  margin-top: 25%;\n}\n/* 遮罩层 */\n.Mask {\n  z-index: 100;\n  position: fixed !important;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}