{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/* eslint max-nested-callbacks: [\"error\", 5] */\nimport { logger } from '@libp2p/logger';\nimport sanitize from 'sanitize-filename';\nimport mergeOptions from 'merge-options';\nimport { Key } from 'interface-datastore/key';\nimport { CMS } from './cms.js';\nimport errCode from 'err-code';\nimport { codes } from '../errors.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { generateKeyPair, importKey, unmarshalPrivateKey } from '@libp2p/crypto/keys';\nimport { pbkdf2, randomBytes } from '@libp2p/crypto';\nimport { peerIdFromKeys } from '@libp2p/peer-id';\nconst log = logger('libp2p:keychain');\nconst keyPrefix = '/pkcs8/';\nconst infoPrefix = '/info/';\nconst privates = new WeakMap();\n// NIST SP 800-132\nconst NIST = {\n  minKeyLength: 112 / 8,\n  minSaltLength: 128 / 8,\n  minIterationCount: 1000\n};\nconst defaultOptions = {\n  // See https://cryptosense.com/parametesr-choice-for-pbkdf2/\n  dek: {\n    keyLength: 512 / 8,\n    iterationCount: 10000,\n    salt: 'you should override this value with a crypto secure random number',\n    hash: 'sha2-512'\n  }\n};\nfunction validateKeyName(name) {\n  if (name == null) {\n    return false;\n  }\n  if (typeof name !== 'string') {\n    return false;\n  }\n  return name === sanitize(name.trim()) && name.length > 0;\n}\n/**\n * Throws an error after a delay\n *\n * This assumes than an error indicates that the keychain is under attack. Delay returning an\n * error to make brute force attacks harder.\n */\nasync function randomDelay() {\n  const min = 200;\n  const max = 1000;\n  const delay = Math.random() * (max - min) + min;\n  await new Promise(resolve => setTimeout(resolve, delay));\n}\n/**\n * Converts a key name into a datastore name\n */\nfunction DsName(name) {\n  return new Key(keyPrefix + name);\n}\n/**\n * Converts a key name into a datastore info name\n */\nfunction DsInfoName(name) {\n  return new Key(infoPrefix + name);\n}\n/**\n * Manages the lifecycle of a key. Keys are encrypted at rest using PKCS #8.\n *\n * A key in the store has two entries\n * - '/info/*key-name*', contains the KeyInfo for the key\n * - '/pkcs8/*key-name*', contains the PKCS #8 for the key\n *\n */\nexport class KeyChain {\n  /**\n   * Creates a new instance of a key chain\n   */\n  constructor(components, init) {\n    this.components = components;\n    this.init = mergeOptions(defaultOptions, init);\n    // Enforce NIST SP 800-132\n    if (this.init.pass != null && this.init.pass?.length < 20) {\n      throw new Error('pass must be least 20 characters');\n    }\n    if (this.init.dek?.keyLength != null && this.init.dek.keyLength < NIST.minKeyLength) {\n      throw new Error(`dek.keyLength must be least ${NIST.minKeyLength} bytes`);\n    }\n    if (this.init.dek?.salt?.length != null && this.init.dek.salt.length < NIST.minSaltLength) {\n      throw new Error(`dek.saltLength must be least ${NIST.minSaltLength} bytes`);\n    }\n    if (this.init.dek?.iterationCount != null && this.init.dek.iterationCount < NIST.minIterationCount) {\n      throw new Error(`dek.iterationCount must be least ${NIST.minIterationCount}`);\n    }\n    const dek = this.init.pass != null && this.init.dek?.salt != null ? pbkdf2(this.init.pass, this.init.dek?.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash) : '';\n    privates.set(this, {\n      dek\n    });\n    this.started = false;\n  }\n  isStarted() {\n    return this.started;\n  }\n  async start() {\n    const dsname = DsInfoName('self');\n    if (!(await this.components.datastore.has(dsname))) {\n      await this.importPeer('self', this.components.peerId);\n    }\n    this.started = true;\n  }\n  stop() {\n    this.started = false;\n  }\n  /**\n   * Gets an object that can encrypt/decrypt protected data\n   * using the Cryptographic Message Syntax (CMS).\n   *\n   * CMS describes an encapsulation syntax for data protection. It\n   * is used to digitally sign, digest, authenticate, or encrypt\n   * arbitrary message content\n   */\n  get cms() {\n    const cached = privates.get(this);\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const dek = cached.dek;\n    return new CMS(this, dek);\n  }\n  /**\n   * Generates the options for a keychain.  A random salt is produced.\n   *\n   * @returns {object}\n   */\n  static generateOptions() {\n    const options = Object.assign({}, defaultOptions);\n    const saltLength = Math.ceil(NIST.minSaltLength / 3) * 3; // no base64 padding\n    options.dek.salt = uint8ArrayToString(randomBytes(saltLength), 'base64');\n    return options;\n  }\n  /**\n   * Gets an object that can encrypt/decrypt protected data.\n   * The default options for a keychain.\n   *\n   * @returns {object}\n   */\n  static get options() {\n    return defaultOptions;\n  }\n  /**\n   * Create a new key.\n   *\n   * @param {string} name - The local key name; cannot already exist.\n   * @param {string} type - One of the key types; 'rsa'.\n   * @param {number} [size = 2048] - The key size in bits. Used for rsa keys only\n   */\n  async createKey(name, type, size = 2048) {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay();\n      throw errCode(new Error('Invalid key name'), codes.ERR_INVALID_KEY_NAME);\n    }\n    if (typeof type !== 'string') {\n      await randomDelay();\n      throw errCode(new Error('Invalid key type'), codes.ERR_INVALID_KEY_TYPE);\n    }\n    const dsname = DsName(name);\n    const exists = await this.components.datastore.has(dsname);\n    if (exists) {\n      await randomDelay();\n      throw errCode(new Error('Key name already exists'), codes.ERR_KEY_ALREADY_EXISTS);\n    }\n    switch (type.toLowerCase()) {\n      case 'rsa':\n        if (!Number.isSafeInteger(size) || size < 2048) {\n          await randomDelay();\n          throw errCode(new Error('Invalid RSA key size'), codes.ERR_INVALID_KEY_SIZE);\n        }\n        break;\n      default:\n        break;\n    }\n    let keyInfo;\n    try {\n      const keypair = await generateKeyPair(type, size);\n      const kid = await keypair.id();\n      const cached = privates.get(this);\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n      }\n      const dek = cached.dek;\n      const pem = await keypair.export(dek);\n      keyInfo = {\n        name: name,\n        id: kid\n      };\n      const batch = this.components.datastore.batch();\n      batch.put(dsname, uint8ArrayFromString(pem));\n      batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n      await batch.commit();\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n    return keyInfo;\n  }\n  /**\n   * List all the keys.\n   *\n   * @returns {Promise<KeyInfo[]>}\n   */\n  async listKeys() {\n    const query = {\n      prefix: infoPrefix\n    };\n    const info = [];\n    for await (const value of this.components.datastore.query(query)) {\n      info.push(JSON.parse(uint8ArrayToString(value.value)));\n    }\n    return info;\n  }\n  /**\n   * Find a key by it's id\n   */\n  async findKeyById(id) {\n    try {\n      const keys = await this.listKeys();\n      return keys.find(k => k.id === id);\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n  }\n  /**\n   * Find a key by it's name.\n   *\n   * @param {string} name - The local key name.\n   * @returns {Promise<KeyInfo>}\n   */\n  async findKeyByName(name) {\n    if (!validateKeyName(name)) {\n      await randomDelay();\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n    }\n    const dsname = DsInfoName(name);\n    try {\n      const res = await this.components.datastore.get(dsname);\n      return JSON.parse(uint8ArrayToString(res));\n    } catch (err) {\n      await randomDelay();\n      log.error(err);\n      throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n    }\n  }\n  /**\n   * Remove an existing key.\n   *\n   * @param {string} name - The local key name; must already exist.\n   * @returns {Promise<KeyInfo>}\n   */\n  async removeKey(name) {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n    }\n    const dsname = DsName(name);\n    const keyInfo = await this.findKeyByName(name);\n    const batch = this.components.datastore.batch();\n    batch.delete(dsname);\n    batch.delete(DsInfoName(name));\n    await batch.commit();\n    return keyInfo;\n  }\n  /**\n   * Rename a key\n   *\n   * @param {string} oldName - The old local key name; must already exist.\n   * @param {string} newName - The new local key name; must not already exist.\n   * @returns {Promise<KeyInfo>}\n   */\n  async renameKey(oldName, newName) {\n    if (!validateKeyName(oldName) || oldName === 'self') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid old key name '${oldName}'`), codes.ERR_OLD_KEY_NAME_INVALID);\n    }\n    if (!validateKeyName(newName) || newName === 'self') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid new key name '${newName}'`), codes.ERR_NEW_KEY_NAME_INVALID);\n    }\n    const oldDsname = DsName(oldName);\n    const newDsname = DsName(newName);\n    const oldInfoName = DsInfoName(oldName);\n    const newInfoName = DsInfoName(newName);\n    const exists = await this.components.datastore.has(newDsname);\n    if (exists) {\n      await randomDelay();\n      throw errCode(new Error(`Key '${newName}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n    }\n    try {\n      const pem = await this.components.datastore.get(oldDsname);\n      const res = await this.components.datastore.get(oldInfoName);\n      const keyInfo = JSON.parse(uint8ArrayToString(res));\n      keyInfo.name = newName;\n      const batch = this.components.datastore.batch();\n      batch.put(newDsname, pem);\n      batch.put(newInfoName, uint8ArrayFromString(JSON.stringify(keyInfo)));\n      batch.delete(oldDsname);\n      batch.delete(oldInfoName);\n      await batch.commit();\n      return keyInfo;\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n  }\n  /**\n   * Export an existing key as a PEM encrypted PKCS #8 string\n   */\n  async exportKey(name, password) {\n    if (!validateKeyName(name)) {\n      await randomDelay();\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n    }\n    if (password == null) {\n      await randomDelay();\n      throw errCode(new Error('Password is required'), codes.ERR_PASSWORD_REQUIRED);\n    }\n    const dsname = DsName(name);\n    try {\n      const res = await this.components.datastore.get(dsname);\n      const pem = uint8ArrayToString(res);\n      const cached = privates.get(this);\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n      }\n      const dek = cached.dek;\n      const privateKey = await importKey(pem, dek);\n      return await privateKey.export(password);\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n  }\n  /**\n   * Export an existing key as a PeerId\n   */\n  async exportPeerId(name) {\n    const password = 'temporary-password';\n    const pem = await this.exportKey(name, password);\n    const privateKey = await importKey(pem, password);\n    return await peerIdFromKeys(privateKey.public.bytes, privateKey.bytes);\n  }\n  /**\n   * Import a new key from a PEM encoded PKCS #8 string\n   *\n   * @param {string} name - The local key name; must not already exist.\n   * @param {string} pem - The PEM encoded PKCS #8 string\n   * @param {string} password - The password.\n   * @returns {Promise<KeyInfo>}\n   */\n  async importKey(name, pem, password) {\n    if (!validateKeyName(name) || name === 'self') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n    }\n    if (pem == null) {\n      await randomDelay();\n      throw errCode(new Error('PEM encoded key is required'), codes.ERR_PEM_REQUIRED);\n    }\n    const dsname = DsName(name);\n    const exists = await this.components.datastore.has(dsname);\n    if (exists) {\n      await randomDelay();\n      throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n    }\n    let privateKey;\n    try {\n      privateKey = await importKey(pem, password);\n    } catch (err) {\n      await randomDelay();\n      throw errCode(new Error('Cannot read the key, most likely the password is wrong'), codes.ERR_CANNOT_READ_KEY);\n    }\n    let kid;\n    try {\n      kid = await privateKey.id();\n      const cached = privates.get(this);\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n      }\n      const dek = cached.dek;\n      pem = await privateKey.export(dek);\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n    const keyInfo = {\n      name: name,\n      id: kid\n    };\n    const batch = this.components.datastore.batch();\n    batch.put(dsname, uint8ArrayFromString(pem));\n    batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n    await batch.commit();\n    return keyInfo;\n  }\n  /**\n   * Import a peer key\n   */\n  async importPeer(name, peer) {\n    try {\n      if (!validateKeyName(name)) {\n        throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n      }\n      if (peer == null) {\n        throw errCode(new Error('PeerId is required'), codes.ERR_MISSING_PRIVATE_KEY);\n      }\n      if (peer.privateKey == null) {\n        throw errCode(new Error('PeerId.privKey is required'), codes.ERR_MISSING_PRIVATE_KEY);\n      }\n      const privateKey = await unmarshalPrivateKey(peer.privateKey);\n      const dsname = DsName(name);\n      const exists = await this.components.datastore.has(dsname);\n      if (exists) {\n        await randomDelay();\n        throw errCode(new Error(`Key '${name}' already exists`), codes.ERR_KEY_ALREADY_EXISTS);\n      }\n      const cached = privates.get(this);\n      if (cached == null) {\n        throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n      }\n      const dek = cached.dek;\n      const pem = await privateKey.export(dek);\n      const keyInfo = {\n        name: name,\n        id: peer.toString()\n      };\n      const batch = this.components.datastore.batch();\n      batch.put(dsname, uint8ArrayFromString(pem));\n      batch.put(DsInfoName(name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n      await batch.commit();\n      return keyInfo;\n    } catch (err) {\n      await randomDelay();\n      throw err;\n    }\n  }\n  /**\n   * Gets the private key as PEM encoded PKCS #8 string\n   */\n  async getPrivateKey(name) {\n    if (!validateKeyName(name)) {\n      await randomDelay();\n      throw errCode(new Error(`Invalid key name '${name}'`), codes.ERR_INVALID_KEY_NAME);\n    }\n    try {\n      const dsname = DsName(name);\n      const res = await this.components.datastore.get(dsname);\n      return uint8ArrayToString(res);\n    } catch (err) {\n      await randomDelay();\n      log.error(err);\n      throw errCode(new Error(`Key '${name}' does not exist.`), codes.ERR_KEY_NOT_FOUND);\n    }\n  }\n  /**\n   * Rotate keychain password and re-encrypt all associated keys\n   */\n  async rotateKeychainPass(oldPass, newPass) {\n    if (typeof oldPass !== 'string') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid old pass type '${typeof oldPass}'`), codes.ERR_INVALID_OLD_PASS_TYPE);\n    }\n    if (typeof newPass !== 'string') {\n      await randomDelay();\n      throw errCode(new Error(`Invalid new pass type '${typeof newPass}'`), codes.ERR_INVALID_NEW_PASS_TYPE);\n    }\n    if (newPass.length < 20) {\n      await randomDelay();\n      throw errCode(new Error(`Invalid pass length ${newPass.length}`), codes.ERR_INVALID_PASS_LENGTH);\n    }\n    log('recreating keychain');\n    const cached = privates.get(this);\n    if (cached == null) {\n      throw errCode(new Error('dek missing'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const oldDek = cached.dek;\n    this.init.pass = newPass;\n    const newDek = newPass != null && this.init.dek?.salt != null ? pbkdf2(newPass, this.init.dek.salt, this.init.dek?.iterationCount, this.init.dek?.keyLength, this.init.dek?.hash) : '';\n    privates.set(this, {\n      dek: newDek\n    });\n    const keys = await this.listKeys();\n    for (const key of keys) {\n      const res = await this.components.datastore.get(DsName(key.name));\n      const pem = uint8ArrayToString(res);\n      const privateKey = await importKey(pem, oldDek);\n      const password = newDek.toString();\n      const keyAsPEM = await privateKey.export(password);\n      // Update stored key\n      const batch = this.components.datastore.batch();\n      const keyInfo = {\n        name: key.name,\n        id: key.id\n      };\n      batch.put(DsName(key.name), uint8ArrayFromString(keyAsPEM));\n      batch.put(DsInfoName(key.name), uint8ArrayFromString(JSON.stringify(keyInfo)));\n      await batch.commit();\n    }\n    log('keychain reconstructed');\n  }\n}","map":{"version":3,"names":["logger","sanitize","mergeOptions","Key","CMS","errCode","codes","toString","uint8ArrayToString","fromString","uint8ArrayFromString","generateKeyPair","importKey","unmarshalPrivateKey","pbkdf2","randomBytes","peerIdFromKeys","log","keyPrefix","infoPrefix","privates","WeakMap","NIST","minKeyLength","minSaltLength","minIterationCount","defaultOptions","dek","keyLength","iterationCount","salt","hash","validateKeyName","name","trim","length","randomDelay","min","max","delay","Math","random","Promise","resolve","setTimeout","DsName","DsInfoName","KeyChain","constructor","components","init","pass","Error","set","started","isStarted","start","dsname","datastore","has","importPeer","peerId","stop","cms","cached","get","ERR_INVALID_PARAMETERS","generateOptions","options","Object","assign","saltLength","ceil","createKey","type","size","ERR_INVALID_KEY_NAME","ERR_INVALID_KEY_TYPE","exists","ERR_KEY_ALREADY_EXISTS","toLowerCase","Number","isSafeInteger","ERR_INVALID_KEY_SIZE","keyInfo","keypair","kid","id","pem","export","batch","put","JSON","stringify","commit","err","listKeys","query","prefix","info","value","push","parse","findKeyById","keys","find","k","findKeyByName","res","error","ERR_KEY_NOT_FOUND","removeKey","delete","renameKey","oldName","newName","ERR_OLD_KEY_NAME_INVALID","ERR_NEW_KEY_NAME_INVALID","oldDsname","newDsname","oldInfoName","newInfoName","exportKey","password","ERR_PASSWORD_REQUIRED","privateKey","exportPeerId","public","bytes","ERR_PEM_REQUIRED","ERR_CANNOT_READ_KEY","peer","ERR_MISSING_PRIVATE_KEY","getPrivateKey","rotateKeychainPass","oldPass","newPass","ERR_INVALID_OLD_PASS_TYPE","ERR_INVALID_NEW_PASS_TYPE","ERR_INVALID_PASS_LENGTH","oldDek","newDek","key","keyAsPEM"],"sources":["../../../src/keychain/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}