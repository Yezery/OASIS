{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\nimport { getProtocol } from '../protocols-table.js';\nimport Resolver from './dns.js';\nconst {\n  code: dnsaddrCode\n} = getProtocol('dnsaddr');\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\nexport async function dnsaddrResolver(addr, options = {}) {\n  const resolver = new Resolver();\n  if (options.signal != null) {\n    options.signal.addEventListener('abort', () => {\n      resolver.cancel();\n    });\n  }\n  const peerId = addr.getPeerId();\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? [];\n  if (hostname == null) {\n    throw new Error('No hostname found in multiaddr');\n  }\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);\n  let addresses = records.flat().map(a => a.split('=')[1]).filter(Boolean);\n  if (peerId != null) {\n    addresses = addresses.filter(entry => entry.includes(peerId));\n  }\n  return addresses;\n}","map":{"version":3,"names":["getProtocol","Resolver","code","dnsaddrCode","dnsaddrResolver","addr","options","resolver","signal","addEventListener","cancel","peerId","getPeerId","hostname","stringTuples","find","proto","Error","records","resolveTxt","addresses","flat","map","a","split","filter","Boolean","entry","includes"],"sources":["../../../src/resolvers/index.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;AAMA,SAASA,WAAW,QAAQ,uBAAuB;AACnD,OAAOC,QAAQ,MAAM,UAAU;AAG/B,MAAM;EAAEC,IAAI,EAAEC;AAAW,CAAE,GAAGH,WAAW,CAAC,SAAS,CAAC;AAEpD;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,eAAeI,eAAeA,CAAEC,IAAe,EAAEC,OAAA,GAAwB,EAAE;EAChF,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,EAAE;EAE/B,IAAIK,OAAO,CAACE,MAAM,IAAI,IAAI,EAAE;IAC1BF,OAAO,CAACE,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAK;MAC5CF,QAAQ,CAACG,MAAM,EAAE;IACnB,CAAC,CAAC;;EAGJ,MAAMC,MAAM,GAAGN,IAAI,CAACO,SAAS,EAAE;EAC/B,MAAM,GAAGC,QAAQ,CAAC,GAAGR,IAAI,CAACS,YAAY,EAAE,CAACC,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,KAAKA,KAAK,KAAKb,WAAW,CAAC,IAAI,EAAE;EAEvF,IAAIU,QAAQ,IAAI,IAAI,EAAE;IACpB,MAAM,IAAII,KAAK,CAAC,gCAAgC,CAAC;;EAGnD,MAAMC,OAAO,GAAG,MAAMX,QAAQ,CAACY,UAAU,CAAC,YAAYN,QAAQ,EAAE,CAAC;EAEjE,IAAIO,SAAS,GAAGF,OAAO,CAACG,IAAI,EAAE,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC;EAE1E,IAAIf,MAAM,IAAI,IAAI,EAAE;IAClBS,SAAS,GAAGA,SAAS,CAACK,MAAM,CAAEE,KAAK,IAAKA,KAAK,CAACC,QAAQ,CAACjB,MAAM,CAAC,CAAC;;EAGjE,OAAOS,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}