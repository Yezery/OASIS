{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function* rm(cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid];\n    }\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    });\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed);\n    }\n  }\n  return rm;\n});\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface(removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  };\n  if (removed.Error) {\n    out.error = new Error(removed.Error);\n  }\n  return out;\n}","map":{"version":3,"names":["CID","configure","toUrlSearchParams","createRm","api","rm","cid","options","Array","isArray","res","post","signal","searchParams","arg","map","toString","headers","removed","ndjson","toCoreInterface","out","parse","Hash","Error","error"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/block/rm.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/block').API<HTTPClientExtraOptions>} BlockAPI\n * @typedef {import('ipfs-core-types/src/block').RmResult} RmResult\n */\n\nexport const createRm = configure(api => {\n  /**\n   * @type {BlockAPI[\"rm\"]}\n   */\n  async function * rm (cid, options = {}) {\n    if (!Array.isArray(cid)) {\n      cid = [cid]\n    }\n\n    const res = await api.post('block/rm', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: cid.map(cid => cid.toString()),\n        'stream-channels': true,\n        ...options\n      }),\n      headers: options.headers\n    })\n\n    for await (const removed of res.ndjson()) {\n      yield toCoreInterface(removed)\n    }\n  }\n\n  return rm\n})\n\n/**\n * @param {*} removed\n */\nfunction toCoreInterface (removed) {\n  /** @type {RmResult} */\n  const out = {\n    cid: CID.parse(removed.Hash)\n  }\n\n  if (removed.Error) {\n    out.error = new Error(removed.Error)\n  }\n\n  return out\n}\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,kBAAkB;AACtC,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;;AAElE;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;EACvC;AACF;AACA;EACE,gBAAiBC,EAAEA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACtC,IAAI,CAACC,KAAK,CAACC,OAAO,CAACH,GAAG,CAAC,EAAE;MACvBA,GAAG,GAAG,CAACA,GAAG,CAAC;IACb;IAEA,MAAMI,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,UAAU,EAAE;MACrCC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,YAAY,EAAEX,iBAAiB,CAAC;QAC9BY,GAAG,EAAER,GAAG,CAACS,GAAG,CAACT,GAAG,IAAIA,GAAG,CAACU,QAAQ,CAAC,CAAC,CAAC;QACnC,iBAAiB,EAAE,IAAI;QACvB,GAAGT;MACL,CAAC,CAAC;MACFU,OAAO,EAAEV,OAAO,CAACU;IACnB,CAAC,CAAC;IAEF,WAAW,MAAMC,OAAO,IAAIR,GAAG,CAACS,MAAM,CAAC,CAAC,EAAE;MACxC,MAAMC,eAAe,CAACF,OAAO,CAAC;IAChC;EACF;EAEA,OAAOb,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASe,eAAeA,CAAEF,OAAO,EAAE;EACjC;EACA,MAAMG,GAAG,GAAG;IACVf,GAAG,EAAEN,GAAG,CAACsB,KAAK,CAACJ,OAAO,CAACK,IAAI;EAC7B,CAAC;EAED,IAAIL,OAAO,CAACM,KAAK,EAAE;IACjBH,GAAG,CAACI,KAAK,GAAG,IAAID,KAAK,CAACN,OAAO,CAACM,KAAK,CAAC;EACtC;EAEA,OAAOH,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}