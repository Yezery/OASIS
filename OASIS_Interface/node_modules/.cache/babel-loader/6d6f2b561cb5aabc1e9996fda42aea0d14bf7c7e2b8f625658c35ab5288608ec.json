{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\nfunction fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}","map":{"version":3,"names":["env","FromPixels","TextureUsage","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","kernelName","backendName","kernelFunc","fromPixels","fromPixels2DContext","args","inputs","backend","attrs","pixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","width","height","videoWidth","videoHeight","texShape","outShape","document","createElement","getContext","canvas","drawImage","tempPixelHandle","makeTensorInfo","texData","get","dataId","usage","PIXELS","gpgpu","uploadPixelDataToTexture","getTexture","program","getBool","res","runWebGLProgram","disposeData"],"sources":["../../../../../../tfjs-backend-webgl/src/kernels/FromPixels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAG,QAA6C,uBAAuB;AAC/E,SAAQC,UAAU,QAA0C,uBAAuB;AAGnF,SAAQC,YAAY,QAAO,aAAa;AAExC,SAAQC,iBAAiB,QAAO,oCAAoC;AACpE,SAAQC,uBAAuB,QAAO,2CAA2C;AAEjF,OAAO,MAAMC,gBAAgB,GAAiB;EAC5CC,UAAU,EAAEL,UAAU;EACtBM,WAAW,EAAE,OAAO;EACpBC,UAAU,EAAEC;CACb;AAED,IAAIC,mBAA6C;AAEjD,SAASD,UAAUA,CAACE,IAInB;EACC,MAAM;IAACC,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,IAAI;EACrC,IAAI;IAACI;EAAM,CAAC,GAAGH,MAAM;EACrB,MAAM;IAACI;EAAW,CAAC,GAAGF,KAAK;EAE3B,MAAMG,OAAO,GAAG,OAAQC,gBAAiB,KAAK,WAAW,IACrDH,MAAM,YAAYG,gBAAgB;EACtC,MAAMC,OAAO,GAAG,OAAQC,gBAAiB,KAAK,WAAW,IACrDL,MAAM,YAAYK,gBAAgB;EACtC,MAAM,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAGL,OAAO,GAC3B,CACGF,MAA2B,CAACQ,UAAU,EACtCR,MAA2B,CAACS,WAAW,CACzC,GACD,CAACT,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,MAAM,CAAC;EAEjC,MAAMG,QAAQ,GAAqB,CAACH,MAAM,EAAED,KAAK,CAAC;EAClD,MAAMK,QAAQ,GAAG,CAACJ,MAAM,EAAED,KAAK,EAAEL,WAAW,CAAC;EAE7C,IAAIG,OAAO,IAAIF,OAAO,EAAE;IACtB,IAAIP,mBAAmB,IAAI,IAAI,EAAE;MAC/BA,mBAAmB,GAAGiB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC;;IAGzEnB,mBAAmB,CAACoB,MAAM,CAACT,KAAK,GAAGA,KAAK;IACxCX,mBAAmB,CAACoB,MAAM,CAACR,MAAM,GAAGA,MAAM;IAC1CZ,mBAAmB,CAACqB,SAAS,CACzBhB,MAA2D,EAC3D,CAAC,EAAE,CAAC,EAAEM,KAAK,EAAEC,MAAM,CAAC;IACxBP,MAAM,GAAGL,mBAAmB,CAACoB,MAAM;;EAGrC,MAAME,eAAe,GAAGnB,OAAO,CAACoB,cAAc,CAACR,QAAQ,EAAE,OAAO,CAAC;EACjE;EACAZ,OAAO,CAACqB,OAAO,CAACC,GAAG,CAACH,eAAe,CAACI,MAAM,CAAC,CAACC,KAAK,GAAGnC,YAAY,CAACoC,MAAM;EACvEzB,OAAO,CAAC0B,KAAK,CAACC,wBAAwB,CAClC3B,OAAO,CAAC4B,UAAU,CAACT,eAAe,CAACI,MAAM,CAAC,EAAErB,MAAmB,CAAC;EACpE,MAAM2B,OAAO,GAAG1C,GAAG,EAAE,CAAC2C,OAAO,CAAC,YAAY,CAAC,GACvC,IAAIvC,uBAAuB,CAACsB,QAAQ,CAAC,GACrC,IAAIvB,iBAAiB,CAACuB,QAAQ,CAAC;EACnC,MAAMkB,GAAG,GAAG/B,OAAO,CAACgC,eAAe,CAACH,OAAO,EAAE,CAACV,eAAe,CAAC,EAAE,OAAO,CAAC;EACxEnB,OAAO,CAACiC,WAAW,CAACd,eAAe,CAACI,MAAM,CAAC;EAC3C,OAAOQ,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}