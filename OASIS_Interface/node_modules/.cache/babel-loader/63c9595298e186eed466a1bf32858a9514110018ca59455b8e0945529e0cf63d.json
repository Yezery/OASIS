{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { UpSale, DownSale, getNFTStruct } from \"@/api/axios/contract.js\";\nimport ChatMemu from \"@/views/chat/ChatMemu.vue\";\nimport { getOwnerNFTsByAddress, search, postOwnerContractList } from \"@/api/axios/ownerContractLIst\";\nexport default {\n  components: {\n    ChatMemu\n  },\n  data() {\n    return {\n      userBalance: 0,\n      userName: \"\",\n      userAvatar: require(\"@/assets/webAssets/MetaMask.png\"),\n      UserNFTListInf: [],\n      NFTArray: [],\n      nftContractAddressList: [],\n      NFTSeriesnameList: [],\n      isOwnerCheckArray: [],\n      SearchVo: {\n        key: \"\",\n        isActive: false,\n        minPrice: \"\",\n        maxPrice: \"\",\n        minMaxmums: \"\",\n        maxMaxmums: \"\"\n      },\n      MessageShow: false,\n      changeNFT: {},\n      Price: 0,\n      opt: 0\n    };\n  },\n  async mounted() {\n    await this.init();\n    await this.getNFTSeriesnameList(this.$store.state.ownerNFTList);\n    await this.GetNFTContractNFT();\n  },\n  methods: {\n    async init() {\n      let user = this.$store.state.currentAddress;\n      try {\n        this.userBalance = this.$store.state.Web3.utils.fromWei(await this.$store.state.Web3.eth.getBalance(user), \"ether\").slice(0, 4);\n        this.userName = `${user.slice(0, 5)}...${user.slice(37)}`;\n        this.userAvatar = \"data:image/png;base64,\" + new this.Identicon(user, 120).toString();\n      } catch (error) {\n        return;\n      }\n    },\n    async upSale() {\n      if (this.Price > 0) {\n        try {\n          this.changeNFT.price = this.Price.toString();\n          if (await UpSale(this.changeNFT)) {\n            this.$notify({\n              title: \"‰∏äÊû∂ÊàêÂäü üéâ\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200\n            });\n            this.CloseMessageBox(2);\n          }\n        } catch (error) {\n          this.$notify.error({\n            title: \"‰∏äÊû∂ÂºÇÂ∏∏\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      } else {\n        this.$notify({\n          title: `‰ª∑Ê†ºÂ°´ÂÜôÊúâËØØ`,\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n      this.Price = 0;\n      this.UserNFTListInf = await this.$store.state.ownerNFTList;\n    },\n    async downSale() {\n      try {\n        if (await DownSale(this.changeNFT)) {\n          this.$notify({\n            title: \"‰∏ãÊû∂ÊàêÂäü\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.UserNFTListInf = this.$store.state.ownerNFTList;\n          this.CloseMessageBox(2);\n        }\n      } catch (error) {\n        this.$notify.error({\n          title: \"‰∏ãÊû∂Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    async GetNFTContractNFT() {\n      let NFTInfList = [];\n      for (const nftaddress of this.nftContractAddressList) {\n        let nft = {\n          currentowner: this.$store.state.currentAddress,\n          nftAddress: nftaddress\n        };\n        await getOwnerNFTsByAddress(nft).then(re => {\n          NFTInfList.push(re.data.data);\n          console.log(re);\n        });\n      }\n      this.NFTArray = NFTInfList;\n    },\n    async getSetAddressArray(ContractAddressArray) {\n      this.nftContractAddressList = [];\n      for (const nft of ContractAddressArray) {\n        this.nftContractAddressList.push(nft.nftAddress);\n      }\n      this.nftContractAddressList = new Set(this.nftContractAddressList);\n    },\n    async getNFTSeriesnameList(array) {\n      await this.getSetAddressArray(array);\n      for (const key of this.nftContractAddressList) {\n        let SeriesName;\n        let contract = await getNFTStruct(key);\n        await contract.methods.name().call().then(re => {\n          SeriesName = re;\n        });\n        this.NFTSeriesnameList.push(SeriesName);\n        let owner;\n        await contract.methods.owner().call().then(re => {\n          console.log(re);\n          owner = re;\n        });\n        if (this.$store.state.currentAddress.toUpperCase() == owner.toUpperCase()) {\n          this.isOwnerCheckArray.push(true);\n        } else {\n          this.isOwnerCheckArray.push(false);\n        }\n      }\n    },\n    toMint() {\n      this.$router.push(\"/home/ImitNFT\");\n    },\n    SearchNFT() {\n      if (this.SearchVo.key.length > 0 && this.SearchVo.key.replace(/(^s*)|(s*$)/g, \"\").length == 0) {\n        search(this.SearchVo).then(re => {\n          console.log(re);\n          this.getNFTSeriesnameList(re.data.data);\n        });\n        this.$notify({\n          title: `Ê≠£Âú®ÊêúÁ¥¢...`,\n          type: \"success\",\n          position: \"top-left\",\n          offset: 200\n        });\n      } else {\n        this.$notify({\n          title: \"ËæìÂÖ•‰∏çËÉΩ‰∏∫Á©∫\",\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    CloseMessageBox(opt) {\n      this.MessageShow = false;\n      this.changeNFT = {};\n      this.price = \"\";\n      if (opt == 1) {\n        this.$notify({\n          title: `Áî®Êà∑ÂèñÊ∂à${this.opt == 1 ? \"‰∏äÊû∂\" : \"‰∏ãÊû∂\"}`,\n          type: \"warning\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    },\n    OpenMessageBox(NFT, opt) {\n      this.opt = opt;\n      this.changeNFT = NFT;\n      this.MessageShow = true;\n    }\n  }\n};","map":{"version":3,"names":["UpSale","DownSale","getNFTStruct","ChatMemu","getOwnerNFTsByAddress","search","postOwnerContractList","components","data","userBalance","userName","userAvatar","require","UserNFTListInf","NFTArray","nftContractAddressList","NFTSeriesnameList","isOwnerCheckArray","SearchVo","key","isActive","minPrice","maxPrice","minMaxmums","maxMaxmums","MessageShow","changeNFT","Price","opt","mounted","init","getNFTSeriesnameList","$store","state","ownerNFTList","GetNFTContractNFT","methods","user","currentAddress","Web3","utils","fromWei","eth","getBalance","slice","Identicon","toString","error","upSale","price","$notify","title","type","position","offset","CloseMessageBox","downSale","NFTInfList","nftaddress","nft","currentowner","nftAddress","then","re","push","console","log","getSetAddressArray","ContractAddressArray","Set","array","SeriesName","contract","name","call","owner","toUpperCase","toMint","$router","SearchNFT","length","replace","OpenMessageBox","NFT"],"sources":["src/views/user/UserHome.vue"],"sourcesContent":["<template>\n  <div class=\"userHomeMain\">\n    <el-container class=\"userHomeMainBox\">\n      <el-aside\n        style=\"width: auto;\"\n        class=\"animate__animated animate__fadeInLeft\"\n      >\n        <ChatMemu ref=\"ChatMemu\" />\n      </el-aside>\n      <div class=\"inf\">\n        <div class=\"infBox\">\n          <div class=\"content \">\n            <div class=\"contentTop animate__animated animate__fadeInDown\">\n              <div class=\"userInf \">\n                <div class=\"userInfTop\">\n                  <div class=\"userAvatarBox\">\n                    <img\n                      :src=\"userAvatar\"\n                      alt=\"\"\n                    >\n                  </div>\n                  <div class=\"userName\">\n                    {{ userName }}\n                  </div>\n                </div>\n                <div class=\"userInfBottom\">\n                  <div class=\"UserBalance\">\n                    <span style=\"font-size: 4vw;font-weight: 800;\"> {{ userBalance }}</span> ETH\n                  </div>\n                </div>\n              </div>\n              <!-- <div class=\"userPet\" /> -->\n            </div>\n            <div class=\"contentBottom animate__animated animate__fadeInUp\">\n              <div class=\"NFTListBox\">\n                <div\n                  class=\"NFTMenu\"\n                  v-if=\"NFTSeriesnameList.length !== 0\"\n                >\n                  <el-input\n                    placeholder=\"ËØ∑ËæìÂÖ•ÂÜÖÂÆπ\"\n                    v-model=\"SearchVo.key\"\n                  >\n                    <el-button\n                      slot=\"append\"\n                      icon=\"el-icon-search\"\n                      @click=\"SearchNFT\"\n                    />\n                  </el-input>\n                </div>\n                <div class=\"NFTList\">\n                  <el-collapse v-if=\"NFTSeriesnameList.length !== 0\">\n                    <el-collapse-item\n                      v-for=\"address,i in nftContractAddressList\"\n                      :key=\"i\"\n                      :name=\"NFTSeriesnameList[i]\"\n                    >\n                      <template slot=\"title\">\n                        <el-popover\n                          title=\"ÂêàÁ∫¶Âú∞ÂùÄ\"\n                          placement=\"top-start\"\n                          width=\"350\"\n                          trigger=\"hover\"\n                          :content=\"address\"\n                        >\n                          <i\n                            class=\"header-icon el-icon-info\"\n                            slot=\"reference\"\n                          />\n                        </el-popover>\n                        <span style=\"margin-left: 1%;font-weight: 800;font-size: 1vw;\">\n                          {{ NFTSeriesnameList[i] }}\n                        </span>\n                        <span\n                          class=\"ADDNFT\"\n                          v-if=\"isOwnerCheckArray[i]\"\n                        >\n                          <el-popover\n                            title=\"‰∏∫ËØ•ÂêàÁ∫¶Ê∑ªÂä†Êñ∞ÁöÑNFT üéâ\"\n                            placement=\"top-start\"\n                            width=\"200\"\n                            trigger=\"hover\"\n                            content=\"\"\n                          >\n                            <router-link\n                              class=\"addImit\"\n                              :to=\"{ name: 'addImit',query:{nftContract:address} }\"\n                            ><el-button\n                              type=\"success\"\n                              plain\n                            >ÂâçÂæÄ</el-button>\n                            </router-link>\n                            <i\n                              class=\"el-icon-plus\"\n                              slot=\"reference\"\n                            />\n                          </el-popover>\n                        </span>\n                      </template>\n                      <div class=\"collapseInnerBox\">\n                        <template v-for=\"inf in NFTArray\">\n                          <template v-for=\"nft,k in inf\">\n                            <template v-if=\"nft.nftAddress == address\">\n                              <div\n                                class=\"NFTInf\"\n                                :key=\"k\"\n                              >\n                                <div style=\"height:65%;width: 100%;overflow: hidden;\">\n                                  <img\n                                    class=\"NFTImage\"\n                                    :src=\"nft.ipfsPath\"\n                                    alt=\"\"\n                                  >\n                                </div>\n                                <div class=\"Inf\">\n                                  <div class=\"InfTop\">\n                                    <div class=\"NFTName\">\n                                      {{ nft.nftName }}\n                                    </div>\n                                    <div class=\"TokenID\">\n                                      <span style=\"font-size: 25px;\">#{{ nft.tokenId }}</span>\n                                    </div>\n                                  </div>\n                                  <div\n                                    v-if=\"nft.isActive\"\n                                    class=\"priceBox\"\n                                  >\n                                    <span class=\"price\">{{ $store.state.Web3.utils.fromWei(nft.price, 'ether') }}</span> ETH\n                                  </div>\n                                  <div\n                                    v-else\n                                    class=\"priceBox\"\n                                  >\n                                    <span class=\"price\" />\n                                  </div>\n                                  <div\n                                    class=\"InfBottom \"\n                                    style=\"background-color: #d63131e6;\"\n                                    @click=\"OpenMessageBox(nft,2)\"\n                                    v-if=\"nft.isActive\"\n                                  >\n                                    <i class=\"el-icon-sold-out\" />\n                                  </div>\n                                  <div\n                                    class=\"InfBottom\"\n                                    v-else\n                                    @click=\"OpenMessageBox(nft,1)\"\n                                  >\n                                    <i class=\"el-icon-sell\" />\n                                  </div>\n                                </div>\n                              </div>\n                            </template>\n                          </template>\n                        </template>\n                      </div>\n                    </el-collapse-item>\n                  </el-collapse>\n                  <div v-else>\n                    <el-empty>\n                      <template slot=\"description\">\n                        <div>\n                          <span\n                            style=\"font-weight: 800;\n                          margin-bottom: 10%;margin-top: 5%;\"\n                          >Êú™Êü•Âà∞Áõ∏ÂÖ≥ËóèÂìÅ </span>\n                          <el-button\n                            type=\"success\"\n                            round\n                            plain\n                            @click=\"toMint\"\n                          >\n                            ÂâçÂæÄÂàõÈÄ†\n                          </el-button>\n                        </div>\n                      </template>\n                    </el-empty>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </el-container>\n    <div\n      class=\"MessageMask\"\n      v-if=\"MessageShow\"\n    >\n      <div class=\"Message animate__animated animate__fadeInUp\">\n        <div class=\"MessageLeft\">\n          <div class=\"imageBox\">\n            <img\n              :src=\"changeNFT.ipfsPath\"\n              alt=\"\"\n            >\n          </div>\n        </div>\n        <div class=\"MessageRight\">\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Á≥ªÂàóÂêç <span class=\"tipshelp\">Series Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ changeNFT.seriesName }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª£Â∏ÅÁ¨¶Âè∑ <span class=\"tipshelp\">Symbol</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ changeNFT.symbol }}\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ÂêçÁß∞ <span class=\"tipshelp\">NFT Name</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ changeNFT.nftName }}\n              </div>\n            </div>\n            <!-- <el-input\n                v-model=\"FirstNFTName\"\n                placeholder=\"Please enter the name of Genesis NFT\"\n              /> -->\n          </div>\n          <div class=\"select\">\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                Â∫èÂè∑ <span class=\"tipshelp\">Token ID</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                #{{ changeNFT.tokenId }}\n              </div>\n            </div>\n          </div>\n          <div\n            class=\"select\"\n            v-if=\"opt==1\"\n          >\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle2\">\n                <el-divider />\n              </div>\n            </div>\n          </div>\n\n          <div\n            class=\"select\"\n            v-if=\"opt==1\"\n          >\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ËØ∑ËæìÂÖ• <span class=\"tipshelp\">‰ª∑Ê†º</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                <el-input-number\n                  v-model=\"Price\"\n                  :precision=\"3\"\n                  :step=\"0.001\"\n                />\n              </div>\n            </div>\n          </div>\n          <div\n            class=\"select\"\n            v-if=\"opt==2\"\n          >\n            <div class=\"tipsBox\">\n              <div class=\"tipsTitle\">\n                ‰ª∑Ê†º <span class=\"tipshelp\">Price</span>\n              </div>\n              <div class=\"tipsTitle2\">\n                {{ $store.state.Web3.utils.fromWei(changeNFT.price, 'ether') }} ETH\n              </div>\n            </div>\n          </div>\n          <div class=\"select\">\n            <div class=\"sumbitBox\">\n              <el-button\n                @click=\"CloseMessageBox(1)\"\n                class=\"createButton\"\n                type=\"primary\"\n                plain\n              >\n                ÂèñÊ∂à\n              </el-button>\n              <el-button\n                @click=\"upSale\"\n                class=\"createButton\"\n                type=\"success\"\n                plain\n                v-if=\"opt==1\"\n              >\n                ‰∏äÊû∂\n              </el-button>\n              <el-button\n                @click=\"downSale\"\n                class=\"createButton\"\n                type=\"success\"\n                plain\n                v-if=\"opt==2\"\n              >\n                ‰∏ãÊû∂\n              </el-button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { UpSale, DownSale, getNFTStruct } from \"@/api/axios/contract.js\";\n  import ChatMemu from \"@/views/chat/ChatMemu.vue\";\nimport { getOwnerNFTsByAddress, search ,postOwnerContractList} from \"@/api/axios/ownerContractLIst\";\n  export default {\n    components: { ChatMemu },\n    data() {\n      return {\n        userBalance: 0,\n        userName: \"\",\n        userAvatar: require(\"@/assets/webAssets/MetaMask.png\"),\n        UserNFTListInf: [],\n        NFTArray: [],\n        nftContractAddressList: [],\n        NFTSeriesnameList: [],\n        isOwnerCheckArray: [],\n        SearchVo: {\n          key: \"\",\n          isActive: false,\n          minPrice: \"\",\n          maxPrice: \"\",\n          minMaxmums: \"\",\n          maxMaxmums: \"\",\n        },\n\n        MessageShow: false,\n        changeNFT: {},\n        Price: 0,\n        opt: 0,\n      };\n    },\n  async mounted() {\n      await this.init();\n      await this.getNFTSeriesnameList(this.$store.state.ownerNFTList);\n      await this.GetNFTContractNFT();\n    },\n    methods: {\n      async init() {\n        let user = this.$store.state.currentAddress;\n        try {\n          this.userBalance = this.$store.state.Web3.utils\n            .fromWei(await this.$store.state.Web3.eth.getBalance(user), \"ether\")\n            .slice(0, 4);\n          this.userName = `${user.slice(0, 5)}...${user.slice(37)}`;\n          this.userAvatar =\n            \"data:image/png;base64,\" + new this.Identicon(user, 120).toString();\n        } catch (error) {\n          return;\n        }\n      },\n      async upSale() {\n        if (this.Price > 0) {\n          try {\n            this.changeNFT.price = this.Price.toString();\n            if (await UpSale(this.changeNFT)) {\n              this.$notify({\n                title: \"‰∏äÊû∂ÊàêÂäü üéâ\",\n                type: \"success\",\n                position: \"top-left\",\n                offset: 200,\n              });\n              this.CloseMessageBox(2);\n            }\n          } catch (error) {\n            this.$notify.error({\n              title: \"‰∏äÊû∂ÂºÇÂ∏∏\",\n              position: \"top-left\",\n              offset: 200,\n            });\n          }\n        } else {\n              this.$notify({\n            title: `‰ª∑Ê†ºÂ°´ÂÜôÊúâËØØ`,\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n              });\n        }\n        this.Price = 0\n        this.UserNFTListInf = await this.$store.state.ownerNFTList;\n      },\n      async downSale() {\n        try {\n          if (await DownSale(this.changeNFT)) {\n            this.$notify({\n              title: \"‰∏ãÊû∂ÊàêÂäü\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.UserNFTListInf = this.$store.state.ownerNFTList;\n            this.CloseMessageBox(2);\n          }\n        } catch (error) {\n          this.$notify.error({\n            title: \"‰∏ãÊû∂Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      async GetNFTContractNFT() {\n        let NFTInfList = [];\n        for (const nftaddress of this.nftContractAddressList) {\n          let nft = {\n            currentowner: this.$store.state.currentAddress,\n            nftAddress: nftaddress,\n          };\n          await getOwnerNFTsByAddress(nft).then((re) => {\n            NFTInfList.push(re.data.data);\n            console.log(re);\n          });\n        }\n        this.NFTArray = NFTInfList;\n      },\n      async getSetAddressArray(ContractAddressArray) {\n        this.nftContractAddressList=[]\n        for (const nft of ContractAddressArray) {\n          this.nftContractAddressList.push(nft.nftAddress);\n        }\n        this.nftContractAddressList = new Set(this.nftContractAddressList);\n      },\n      async getNFTSeriesnameList(array) {\n        await this.getSetAddressArray(array);\n        for (const key of this.nftContractAddressList) {\n          let SeriesName;\n          let contract = await getNFTStruct(key);\n          await contract.methods\n            .name()\n            .call()\n            .then((re) => {\n              SeriesName = re;\n            });\n          this.NFTSeriesnameList.push(SeriesName);\n          let owner;\n          await contract.methods\n            .owner()\n            .call()\n            .then((re) => {\n              console.log(re);\n              owner = re;\n            });\n          if (\n            this.$store.state.currentAddress.toUpperCase() == owner.toUpperCase()\n          ) {\n            this.isOwnerCheckArray.push(true);\n          } else {\n            this.isOwnerCheckArray.push(false);\n          }\n        }\n      },\n      toMint() {\n        this.$router.push(\"/home/ImitNFT\");\n      },\n      SearchNFT() {\n        if (this.SearchVo.key.length>0 && this.SearchVo.key.replace(/(^s*)|(s*$)/g, \"\").length == 0) {\n          search(this.SearchVo).then((re) => {\n          console.log(re);\n         this.getNFTSeriesnameList(re.data.data) \n          });\n          this.$notify({\n              title: `Ê≠£Âú®ÊêúÁ¥¢...`,\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n        } else {\n          this.$notify({\n            title: \"ËæìÂÖ•‰∏çËÉΩ‰∏∫Á©∫\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      \n      },\n      CloseMessageBox(opt) {\n        this.MessageShow = false;\n        this.changeNFT = {};\n        this.price = \"\";\n        if (opt == 1) {\n          this.$notify({\n            title: `Áî®Êà∑ÂèñÊ∂à${this.opt == 1 ? \"‰∏äÊû∂\" : \"‰∏ãÊû∂\"}`,\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n      OpenMessageBox(NFT, opt) {\n        this.opt = opt;\n        this.changeNFT = NFT;\n        this.MessageShow = true;\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.userHomeMain {\n  width: 100%;\n  background-color: var(--White-eee--);\n  .MessageMask {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.7);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    .Message {\n      transition: all 0.3s ease-in-out;\n      overflow: hidden;\n      width: 70%;\n      height: 70%;\n      border-radius: 30px;\n      background-color: white;\n      display: flex;\n      box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px,\n        rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\n      .MessageLeft {\n        flex: 1;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        .imageBox {\n          width: 75%;\n          height: 75%;\n          border-radius: 30px;\n          overflow: hidden;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          background-color: transparent;\n          img {\n            object-fit: contain;\n            width: 100%;\n            height: 100%;\n          }\n        }\n      }\n      .MessageRight {\n        position: relative;\n        flex: 1;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        flex-direction: column;\n        /deep/ .select {\n          width: 100%;\n          text-align: left;\n          margin-bottom: 10px;\n          .tipsBox {\n            width: 100%;\n            color: rgb(105, 105, 105);\n            text-align: left;\n            transition: all 0.3s ease-in-out;\n            .tipsTitle2 {\n              margin-top: 2%;\n              margin-bottom: 1%;\n              font-size: 20px;\n              font-weight: 800;\n              color: black;\n              transition: all 0.3s ease-in-out;\n              width: 300px;\n            }\n            .tipsTitle {\n              font-size: 25px;\n              color: black;\n              .tipshelp {\n                color: rgb(105, 105, 105);\n                font-size: 20px;\n              }\n            }\n          }\n          .sumbitBox {\n            text-align: left;\n            margin-top: 3%;\n            .createButton {\n              padding: 20px 35px 18px 35px;\n              font-size: 17px;\n              border-radius: 15px;\n              transition: all 0.3s ease-in-out;\n              font-family: \"Transformers_Movie\";\n            }\n          }\n        }\n        .colseButton {\n          margin-right: 10%;\n        }\n      }\n    }\n  }\n\n  .userHomeMainBox {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n  }\n  .inf {\n    width: 100%;\n    height: 100%;\n    overflow: auto;\n    .infBox {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      border-radius: 30px;\n      margin-top: 3%;\n      width: 100%;\n      .content {\n        width: 100%;\n        height: 100%;\n        color: var(--Dark--);\n        margin-left: 3%;\n        background-color: var(--White-eee--);\n\n        .contentTop {\n          width: 100%;\n          display: flex;\n          justify-content: flex-start;\n          align-items: center;\n\n          .userInf {\n            background-color: var(--White--);\n            border-radius: 50px;\n            width: 600px;\n            height: 280px;\n            display: flex;\n            justify-content: center;\n            flex-direction: column;\n            align-content: flex-start;\n            margin-right: 5%;\n            overflow: hidden;\n            padding: 0;\n            transition: all 0.3s ease-in-out;\n            &:hover {\n              box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px,\n                rgba(0, 0, 0, 0.1) 0px 0px 1px 0px;\n              transition: all 0.3s ease-in-out;\n            }\n            .userInfTop {\n              width: 100%;\n              height: 100%;\n              display: flex;\n              justify-content: flex-start;\n              align-items: center;\n              margin-top: 20px;\n              .userAvatarBox {\n                margin-left: 25px;\n                margin-right: 25px;\n                min-width: 95px;\n                min-height: 95px;\n                overflow: hidden;\n                border-radius: 50%;\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                background-color: rgba(230, 230, 230, 1);\n                img {\n                  object-fit: cover;\n                  width: 85px;\n                  height: 85px;\n                }\n              }\n              .userName {\n                font-weight: 800;\n                font-size: 25px;\n              }\n            }\n            .userInfBottom {\n              width: 100%;\n              height: 100%;\n              display: flex;\n              justify-content: flex-end;\n              align-items: center;\n              .UserBalance {\n                margin-right: 35px;\n                font-size: 1vw;\n              }\n            }\n          }\n          .userPet {\n            @extend .userInf;\n            width: 1000px;\n          }\n          .TopBackground {\n            position: relative;\n            width: 100%;\n            height: 30%;\n            .userName {\n              position: absolute;\n              width: 726px;\n              height: 180px;\n              left: 113px;\n              top: 185px;\n              color: rgb(255, 255, 255);\n              font-family: Inter;\n              font-size: 5vw;\n              font-weight: 800;\n              line-height: 90px;\n              letter-spacing: -2px;\n              text-align: left;\n            }\n          }\n        }\n        .contentBottom {\n          width: 95%;\n          height: 90%;\n          margin-top: 5%;\n          display: flex;\n          justify-content: center;\n          .NFTListBox {\n            width: 100%;\n            background-color: var(--White--);\n            border-radius: 50px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            padding: 3%;\n            .NFTList {\n              flex: 2;\n              width: 95%;\n              height: 100%;\n              /deep/ .el-collapse {\n                border: none;\n                .el-collapse-item__header {\n                  background-color: var(--White--) !important;\n                  color: var(--Dark--);\n                }\n                .el-collapse-item__content {\n                  background-color: var(--White--);\n                }\n              }\n\n              // .NFTListArray {\n              //   width: 100%;\n              //   display: flex;\n\n              // }\n              .collapseInnerBox {\n                .NFTInf {\n                  margin: 2%;\n                  background-color: var(--White--);\n                  border-radius: 50px;\n                  width: 350px;\n                  height: 450px;\n                  display: inline-block;\n                  overflow: hidden;\n                  transition: all 0.7s ease-in-out;\n                  box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n                    rgba(17, 17, 26, 0.1) 0px 0px 8px;\n                  .NFTImage {\n                    width: 100%;\n                    height: 100%;\n                    object-fit: cover;\n                    transition: all 0.6s;\n                    cursor: pointer;\n                    background-color: white;\n\n                    &:hover {\n                      transition: all 0.6s;\n                    }\n                  }\n                }\n\n                .NFTInf:hover {\n                  transition: all 0.6s ease-in-out;\n                  transform: translateY(-5px) perspective(1000px);\n                }\n                .NFTInf:hover > * {\n                  transform: none;\n                }\n\n                .Inf {\n                  width: 100%;\n                  height: 60%;\n                  background-color: var(--Dark--);\n\n                  .priceBox {\n                    padding-top: 2%;\n                    text-align: left;\n                    width: 100%;\n                    font-size: 0.5vw;\n                    color: var(--White--);\n                    .price {\n                      margin-left: 15%;\n                      font-size: 1.8vw;\n                    }\n                  }\n                  .InfTop {\n                    width: 100%;\n                    height: 40px;\n                    position: relative;\n                    .TokenID {\n                      position: absolute;\n                      right: 20px;\n                      top: 35px;\n                      width: 100px;\n                      padding: 4px 0px 4px 0px;\n                      border-radius: 10px;\n                      transition: all 0.3s ease-in-out;\n                      background-color: rgba(85, 201, 96, 0.12);\n                      color: #55c960;\n                    }\n                    .NFTName {\n                      position: absolute;\n                      left: -50px;\n                      top:5px;\n                      color: var(--White--);\n                      font-weight: 800;\n                      text-align: left;\n                      font-size: 1.2vw;\n                      margin-left: 20%;\n                    }\n                  }\n                  .InfBottom {\n                    font-size: 30px;\n                    display: flex;\n                    justify-content: center;\n                    align-items: center;\n                    height: 20%;\n                    padding-bottom: 100px;\n                    color: white;\n                    background-color: rgba(0, 149, 255, 0.958);\n                    cursor: pointer;\n                  }\n                }\n              }\n\n              .ADDNFT {\n                margin-left: 1%;\n                // background-color: var(--White--);\n                // border-radius: 50px;\n                // margin-left: 4%;\n                // width: 320px;\n                // height: 400px;\n                // display: inline-block;\n                // transition: all 0.7s ease-in-out;\n                // box-shadow: rgba(17, 17, 26, 0.05) 0px 1px 0px,\n                //   rgba(17, 17, 26, 0.1) 0px 0px 8px;\n                cursor: pointer;\n                div {\n                  display: flex;\n                  justify-content: center;\n                  align-items: center;\n                  width: 40px;\n                  padding: 2% 10% 2% 10%;\n                }\n                // display: flex;\n                // justify-content: center;\n                // align-items: center;\n                i {\n                  font-weight: 800;\n                  color: var(--Dark--);\n                }\n              }\n            }\n            .NFTMenu {\n              margin-right: 3%;\n              height: 100%;\n              display: flex;\n              flex-direction: column;\n              flex: 1;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</style>\n<style lang=\"scss\" scoped>\n@import \"@/style/index.css\";\n</style>\n<style lang=\"scss\" scoped>\n@import \"@/style/MarketShop/index.scss\";\n</style> \n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}