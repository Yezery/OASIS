{"ast":null,"code":"const SEARCH_RESPONSE = 'SEARCH-RESPONSE';\nexport function parseSsdpMessage(ssdp, buffer, remote) {\n  const lines = buffer.toString('utf8').trim().split(/\\r?\\n/);\n  let type = lines.shift();\n  if (type == null) {\n    return;\n  }\n  const message = {\n    remote: () => remote\n  };\n  if (type.endsWith('* HTTP/1.1')) {\n    type = type.split(' ')[0];\n  } else if (type === 'HTTP/1.1 200 OK') {\n    type = SEARCH_RESPONSE;\n  } else {\n    return;\n  }\n  lines.forEach(function (line) {\n    const colon = line.indexOf(':');\n    let key = line.substring(0, colon).toUpperCase();\n    key = key.trim();\n    let value = line.substring(colon + 1);\n    value = value.trim();\n    message[key] = unwrap(value);\n    if (key === 'CACHE-CONTROL') {\n      const ttl = parseInt(value.toLowerCase().split('max-age=')[1], 10);\n      message.ttl = () => ttl * 1000;\n    }\n  });\n  type = type.toLowerCase();\n  if (!['m-search', 'notify', 'search-response'].includes(type)) {\n    // TODO: remove this\n    throw new Error(`unknown ssdp message type ${type}`);\n  }\n  // @ts-expect-error cannot infer message type\n  ssdp.emit(`ssdp:${type}`, message, remote);\n}\nfunction unwrap(string) {\n  const length = string.length;\n  if (string.substring(0, 1) === '\"' && string.substring(length - 1) === '\"') {\n    string = string.substring(1, length - 1);\n  }\n  const asNumber = parseFloat(string);\n  if (!isNaN(asNumber) && asNumber.toString() === string) {\n    return asNumber;\n  }\n  return string.trim();\n}","map":{"version":3,"names":["SEARCH_RESPONSE","parseSsdpMessage","ssdp","buffer","remote","lines","toString","trim","split","type","shift","message","endsWith","forEach","line","colon","indexOf","key","substring","toUpperCase","value","unwrap","ttl","parseInt","toLowerCase","includes","Error","emit","string","length","asNumber","parseFloat","isNaN"],"sources":["../../src/parse-ssdp-message.ts"],"sourcesContent":[null],"mappings":"AAEA,MAAMA,eAAe,GAAG,iBAAiB;AAEzC,OAAM,SAAUC,gBAAgBA,CAAEC,IAAU,EAAEC,MAAc,EAAEC,MAAsB;EAClF,MAAMC,KAAK,GAAGF,MAAM,CAACG,QAAQ,CAAC,MAAM,CAAC,CAACC,IAAI,EAAE,CAACC,KAAK,CAAC,OAAO,CAAC;EAC3D,IAAIC,IAAI,GAAGJ,KAAK,CAACK,KAAK,EAAE;EAExB,IAAID,IAAI,IAAI,IAAI,EAAE;IAChB;;EAGF,MAAME,OAAO,GAAwB;IACnCP,MAAM,EAAEA,CAAA,KAAMA;GACf;EAED,IAAIK,IAAI,CAACG,QAAQ,CAAC,YAAY,CAAC,EAAE;IAC/BH,IAAI,GAAGA,IAAI,CAACD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;GAC1B,MAAM,IAAIC,IAAI,KAAK,iBAAiB,EAAE;IACrCA,IAAI,GAAGT,eAAe;GACvB,MAAM;IACL;;EAGFK,KAAK,CAACQ,OAAO,CAAC,UAAUC,IAAI;IAC1B,MAAMC,KAAK,GAAGD,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC;IAC/B,IAAIC,GAAG,GAAGH,IAAI,CAACI,SAAS,CAAC,CAAC,EAAEH,KAAK,CAAC,CAACI,WAAW,EAAE;IAChDF,GAAG,GAAGA,GAAG,CAACV,IAAI,EAAE;IAChB,IAAIa,KAAK,GAAGN,IAAI,CAACI,SAAS,CAACH,KAAK,GAAG,CAAC,CAAC;IACrCK,KAAK,GAAGA,KAAK,CAACb,IAAI,EAAE;IAEpBI,OAAO,CAACM,GAAG,CAAC,GAAGI,MAAM,CAACD,KAAK,CAAC;IAE5B,IAAIH,GAAG,KAAK,eAAe,EAAE;MAC3B,MAAMK,GAAG,GAAGC,QAAQ,CAACH,KAAK,CAACI,WAAW,EAAE,CAAChB,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;MAElEG,OAAO,CAACW,GAAG,GAAG,MAAMA,GAAG,GAAG,IAAI;;EAElC,CAAC,CAAC;EAEFb,IAAI,GAAGA,IAAI,CAACe,WAAW,EAAE;EAEzB,IAAI,CAAC,CAAC,UAAU,EAAE,QAAQ,EAAE,iBAAiB,CAAC,CAACC,QAAQ,CAAChB,IAAI,CAAC,EAAE;IAC7D;IACA,MAAM,IAAIiB,KAAK,CAAC,6BAA6BjB,IAAI,EAAE,CAAC;;EAGtD;EACAP,IAAI,CAACyB,IAAI,CAAC,QAAQlB,IAAI,EAAE,EAAEE,OAAO,EAAEP,MAAM,CAAC;AAC5C;AAEA,SAASiB,MAAMA,CAAEO,MAAc;EAC7B,MAAMC,MAAM,GAAGD,MAAM,CAACC,MAAM;EAE5B,IAAID,MAAM,CAACV,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG,IAAIU,MAAM,CAACV,SAAS,CAACW,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;IAC1ED,MAAM,GAAGA,MAAM,CAACV,SAAS,CAAC,CAAC,EAAEW,MAAM,GAAG,CAAC,CAAC;;EAG1C,MAAMC,QAAQ,GAAGC,UAAU,CAACH,MAAM,CAAC;EAEnC,IAAI,CAACI,KAAK,CAACF,QAAQ,CAAC,IAAIA,QAAQ,CAACxB,QAAQ,EAAE,KAAKsB,MAAM,EAAE;IACtD,OAAOE,QAAQ;;EAGjB,OAAOF,MAAM,CAACrB,IAAI,EAAE;AACtB"},"metadata":{},"sourceType":"module","externalDependencies":[]}