{"ast":null,"code":"import request from \"@/utils/axiosRequest\";\nimport store from '@/store';\nimport { create } from \"ipfs-http-client\";\nimport Web3 from 'web3';\nimport { updateSaleactive, insertSale, deleteSale } from \"./Sale\";\nimport { postOwnerContractList, getOwnerUpSaleNFTs, updateNFTOwnerListAfterBuy } from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\";\n//  IPFS的根URL\n// const baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI();\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode();\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\n// const peerAddress = ipfsPeerAddress()\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n// 服务器IP\nconst IP = store.state.IP;\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({\n    data: MintNFTContractBytecode,\n    arguments: [Name, Symbol, publicGatewayUrl, Maxmums]\n  }).send({\n    from: store.state.currentAddress\n  });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: `${IP}`,\n        port: \"5001\",\n        protocol: \"http\"\n      }).add(uploadFiles[0].raw, {\n        remote: true,\n        pin: true\n      });\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n\n// \nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0;\n  let ipfsHash = await savetoIPFS(uploadFiles);\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`;\n  if (ipfsHash != null) {\n    try {\n      await NFTContract.methods._currentId().call().then(re => {\n        nftCount = re;\n      });\n    } catch (error) {\n      console.log(error);\n      console.log(NFTContract.methods);\n    }\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({\n      from: store.state.currentAddress\n    });\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        // postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n        //   store.commit(\"setOwnerNFTList\", re.data.data);\n        // });\n        return;\n      } else {\n        return;\n      }\n    });\n  }\n}\nexport async function addMint(to, nftAddress, NFTName, description, uploadFiles, seriesName, symbol, maxmums) {\n  let nftCount = 0;\n  let ipfsHash = await savetoIPFS(uploadFiles);\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`;\n  let contract = await getNFTStruct(nftAddress);\n  if (ipfsHash != null) {\n    try {\n      await contract.methods._currentId().call().then(re => {\n        nftCount = re;\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    await contract.methods.giveMint(to, NFTName, description, ipfsHash).send({\n      from: store.state.currentAddress\n    });\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": to,\n        \"nftAddress\": contract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": seriesName,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        // postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n        //   store.commit(\"setOwnerNFTList\", re.data.data);\n        // });\n        return;\n      } else {\n        return;\n      }\n    });\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles);\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\n\nconsole.log(\"初始化WEB3......\");\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n  store.commit(\"setWEB3\", new Web3(window.ethereum));\n  console.log(\"初始化WEB3(MetaMask)完毕\");\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n  store.commit(\"setWEB3\", new Web3(rpcUrl()));\n  console.log(\"初始化WEB3(RPC)完毕\");\n}\nMarketContract = new marketUseWeb3.eth.Contract(MarketContractABI, MarketContractAddress);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = [];\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re;\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList;\n}\nexport async function UpSale(NFT) {\n  let SaleId;\n  try {\n    //授权\n    let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NFT.nftAddress);\n    await NFTContract.methods.approve(MarketContractAddress, NFT.tokenId).send({\n      from: store.state.currentAddress\n    });\n    await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether'), \"\").send({\n      from: store.state.currentAddress\n    });\n    await MarketContract.methods.getSalesId().call().then(re => {\n      SaleId = re;\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  };\n  try {\n    await insertSale(Sale);\n    NFT.isActive = true;\n    NFT.price = store.state.Web3.utils.toWei(NFT.price, 'ether');\n    await updateSaleactive(NFT);\n    // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n    //   store.commit(\"setOwnerNFTList\", re.data.data);\n    // });\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport async function Buy(NFT) {\n  try {\n    await MarketContract.methods.buy(NFT.saleId - 1).send({\n      from: store.state.currentAddress,\n      value: store.state.Web3.utils.toWei(NFT.price, 'ether')\n    });\n    NFT.isActive = false;\n    NFT.currentOwner = store.state.currentAddress;\n    await updateNFTOwnerListAfterBuy(NFT);\n    await deleteSale(NFT);\n    // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n    //   store.commit(\"setOwnerNFTList\", re.data.data);\n    // });\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => {\n    FeePercentage = re;\n  });\n  return FeePercentage;\n}\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => {\n      SaleId = re.data.data.saleId;\n    });\n    if (SaleId != undefined) {\n      await MarketContract.methods.cancelSale(SaleId).send({\n        from: store.state.currentAddress\n      });\n      await deleteSale(NFT);\n      // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n      //   store.commit(\"setOwnerNFTList\", re.data.data);\n      // });\n    } else {\n      return;\n    }\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n}","map":{"version":3,"names":["request","store","create","Web3","updateSaleactive","insertSale","deleteSale","postOwnerContractList","getOwnerUpSaleNFTs","updateNFTOwnerListAfterBuy","mintNFTContractABI","mintNFTContractBytecode","marketContractAddress","marketContractABI","ipfsPublicGatewayUrl","rpcUrl","MintNFTContractABI","MintNFTContractBytecode","MarketContractAddress","MarketContractABI","publicGatewayUrl","IP","state","deployNFTContract","Name","Symbol","Maxmums","contract","eth","Contract","NewNFTContractAddress","deploy","data","arguments","send","from","currentAddress","console","log","_address","NFTContract","savetoIPFS","uploadFiles","length","results","host","port","protocol","add","raw","remote","pin","path","err","error","mintNFT","name","symbol","maxmums","NFTName","description","nftCount","ipfsHash","ipfsPath","methods","_currentId","call","then","re","mint","url","method","Number","res","status","addMint","to","nftAddress","seriesName","getNFTStruct","giveMint","MakeNFT","FirstNFTName","Description","MarketContract","marketUseWeb3","window","ethereum","undefined","commit","getSaleList","SaleList","getSales","UpSale","NFT","SaleId","approve","tokenId","createSale","utils","toWei","price","getSalesId","Sale","saleId","NFTOwnerList","isActive","Buy","buy","value","currentOwner","getFeePercentage","FeePercentage","feePercentage","DownSale","cancelSale"],"sources":["/Users/yezery/Oasis/OASIS/src/api/axios/contract.js"],"sourcesContent":["import request from \"@/utils/axiosRequest\"\nimport store from '@/store';\n\nimport { create } from \"ipfs-http-client\"\nimport Web3 from 'web3'\nimport { updateSaleactive, insertSale, deleteSale, } from \"./Sale\"\nimport { postOwnerContractList, getOwnerUpSaleNFTs,updateNFTOwnerListAfterBuy } from \"./ownerContractLIst\";\nimport { mintNFTContractABI, mintNFTContractBytecode, marketContractAddress, marketContractABI, ipfsPublicGatewayUrl, rpcUrl } from \"@/contract/Contract\"\n//  IPFS的根URL\n// const baseURL = ipfsBaseURI();\n//  铸币合约ABI\nconst MintNFTContractABI = mintNFTContractABI()\n//  铸币合约ByteCode\nconst MintNFTContractBytecode = mintNFTContractBytecode()\n//  市场合约地址\nconst MarketContractAddress = marketContractAddress();\n//  市场合约ABI\nconst MarketContractABI = marketContractABI();\n// 指定其他节点的 IP 和端口\n// const peerAddress = ipfsPeerAddress()\n//  IPFS网关\nconst publicGatewayUrl = ipfsPublicGatewayUrl();\n// 服务器IP\nconst IP = store.state.IP\n\n//====================  部署铸造NFT合约，返回NFT合约实例 \nasync function deployNFTContract(Name, Symbol, Maxmums) {\n  let contract = new store.state.Web3.eth.Contract(MintNFTContractABI);\n  //  部署合约\n  let NewNFTContractAddress = await contract.deploy({ data: MintNFTContractBytecode, arguments: [Name, Symbol, publicGatewayUrl, Maxmums] })\n    .send({\n      from: store.state.currentAddress\n    });\n  console.log(NewNFTContractAddress._address);\n  //  通过部署合约返回的合约地址，与合约ABI产生合约实例\n  let NFTContract = await new store.state.Web3.eth.Contract(MintNFTContractABI, NewNFTContractAddress._address);\n  return NFTContract;\n}\n//====================  保存到IPFS，返回IPFS哈希值\nasync function savetoIPFS(uploadFiles) {\n  try {\n    if (uploadFiles.length != 0) {\n      //ipfs的add方法是将东西添加到ipfs网络上\n      let results = await create({\n        host: `${IP}`,\n        port: \"5001\",\n        protocol: \"http\",\n      }).add(\n        uploadFiles[0].raw,\n        { remote: true, pin: true, }\n      );\n      return results.path;\n    }\n  } catch (err) {\n    console.error(err);\n    return null\n  }\n}\n\n// \nasync function mintNFT(NFTContract, name, symbol, maxmums, NFTName, description, uploadFiles) {\n  let nftCount = 0\n  let ipfsHash = await savetoIPFS(uploadFiles)\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`\n  if (ipfsHash != null) {\n    try {\n      await NFTContract.methods._currentId().call().then(re => { nftCount = re })\n    } catch (error) {\n      console.log(error);\n      console.log(NFTContract.methods);\n    }\n    await NFTContract.methods.mint(NFTName, description, ipfsHash).send({ from: store.state.currentAddress })\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": store.state.currentAddress,\n        \"currentOwner\": store.state.currentAddress,\n        \"nftAddress\": NFTContract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": name,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        // postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n        //   store.commit(\"setOwnerNFTList\", re.data.data);\n        // });\n        return\n      } else {\n        return\n      }\n    })\n  }\n}\nexport async function addMint(to, nftAddress, NFTName, description, uploadFiles, seriesName, symbol, maxmums) {\n  let nftCount = 0\n  let ipfsHash = await savetoIPFS(uploadFiles)\n  let ipfsPath = `ipfs/${ipfsHash}?filename=${NFTName}`\n  let contract = await getNFTStruct(nftAddress)\n  if (ipfsHash != null) {\n    try {\n      await contract.methods._currentId().call().then(re => { nftCount = re })\n    } catch (error) {\n      console.log(error);\n    }\n    await contract.methods.giveMint(to, NFTName, description, ipfsHash).send({ from: store.state.currentAddress })\n    // // ====================  信息存储到数据库中\n    await request({\n      url: '/createNFT',\n      method: 'post',\n      data: {\n        \"ownerAddress\": to,\n        \"nftAddress\": contract._address,\n        \"ipfsPath\": `${publicGatewayUrl}${ipfsPath}`,\n        \"isActive\": false,\n        \"price\": \"0\",\n        \"seriesName\": seriesName,\n        \"symbol\": symbol,\n        \"nftName\": NFTName,\n        \"maxmums\": Number(maxmums),\n        \"description\": description,\n        \"tokenId\": Number(nftCount)\n      }\n    }).then(res => {\n      if (res.status == 200) {\n        // postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n        //   store.commit(\"setOwnerNFTList\", re.data.data);\n        // });\n        return\n      } else {\n        return\n      }\n    })\n  }\n}\n\n//====================  生成NFT合约实例\nexport async function getNFTStruct(nftAddress) {\n  return await new store.state.Web3.eth.Contract(MintNFTContractABI, nftAddress);\n}\n\n//==================== NFT总控\nexport async function MakeNFT(Name, Symbol, uploadFiles, Maxmums, FirstNFTName, Description) {\n  console.log(\"部署合约\");\n  const NFTContract = await deployNFTContract(Name, Symbol, Maxmums);\n  console.log(\"铸造\");\n  await mintNFT(NFTContract, Name, Symbol, Maxmums, FirstNFTName, Description, uploadFiles)\n}\n//====================  市场合约\nlet MarketContract;\nlet marketUseWeb3;\n// 实例化市场合约\n\nconsole.log(\"初始化WEB3......\");\nif (window.ethereum != undefined) {\n  marketUseWeb3 = new Web3(window.ethereum);\n  store.commit(\"setWEB3\", new Web3(window.ethereum));\n  console.log(\"初始化WEB3(MetaMask)完毕\");\n} else {\n  marketUseWeb3 = new Web3(rpcUrl());\n  store.commit(\"setWEB3\", new Web3(rpcUrl()));\n  console.log(\"初始化WEB3(RPC)完毕\");\n}\n\nMarketContract = new marketUseWeb3.eth.Contract(\n  MarketContractABI,\n  MarketContractAddress\n);\n//====================  上架NFT\nexport async function getSaleList() {\n  let SaleList = []\n  try {\n    await MarketContract.methods.getSales().call().then(re => {\n      SaleList = re\n    });\n  } catch (error) {\n    console.log(error);\n  }\n  return SaleList\n}\n\nexport async function UpSale(NFT) {\n  let SaleId;\n  try {\n    //授权\n    let NFTContract = await new store.state.Web3.eth.Contract(\n      MintNFTContractABI,\n      NFT.nftAddress\n    );\n    await NFTContract.methods\n      .approve(MarketContractAddress, NFT.tokenId)\n      .send({ from: store.state.currentAddress });\n\n    await MarketContract.methods.createSale(NFT.nftAddress, NFT.tokenId, store.state.Web3.utils.toWei(NFT.price, 'ether')\n      , \"\").send({ from: store.state.currentAddress })\n    await MarketContract.methods.getSalesId().call().then(re => {\n      SaleId = re\n    })\n  } catch (error) {\n    console.log(error);\n  }\n  var Sale = {\n    saleId: Number(SaleId),\n    NFTOwnerList: NFT\n  }\n  try {\n    await insertSale(Sale)\n    NFT.isActive = true\n    NFT.price = store.state.Web3.utils.toWei(NFT.price, 'ether')\n    await updateSaleactive(NFT)\n    // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n    //   store.commit(\"setOwnerNFTList\", re.data.data);\n    // });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function Buy(NFT) {\n\n  try {\n    await MarketContract.methods.buy(NFT.saleId-1)\n      .send({\n        from: store.state.currentAddress,\n        value: store.state.Web3.utils.toWei(NFT.price, 'ether'),\n      });\n      NFT.isActive = false\n      NFT.currentOwner = store.state.currentAddress\n    await updateNFTOwnerListAfterBuy(NFT)\n    await deleteSale(NFT)\n      // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n      //   store.commit(\"setOwnerNFTList\", re.data.data);\n      // });\n    \n  } catch (error) {\n    console.log(error);\n    return\n  }\n\n}\n\nexport async function getFeePercentage() {\n  let FeePercentage;\n  await MarketContract.methods.feePercentage().call().then(re => { FeePercentage = re })\n  return FeePercentage;\n}\n\nexport async function DownSale(NFT) {\n  let SaleId;\n  try {\n    await getOwnerUpSaleNFTs(NFT).then(re => { SaleId = re.data.data.saleId; })\n    if (SaleId != undefined) {\n      await MarketContract.methods.cancelSale(SaleId)\n        .send({\n          from: store.state.currentAddress\n        });\n      await deleteSale(NFT)\n      // await postOwnerContractList({ ownerAddress: store.state.currentAddress }).then((re) => {\n      //   store.commit(\"setOwnerNFTList\", re.data.data);\n      // });\n    } else {\n      return\n    }\n  } catch (error) {\n    console.log(error);\n    return\n  }\n\n}\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}