{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport process from 'node:process';\nimport path from 'node:path';\nimport url from 'node:url';\nimport pathKey from 'path-key';\nexport function npmRunPath(options = {}) {\n  const {\n    cwd = process.cwd(),\n    path: path_ = process.env[pathKey()],\n    execPath = process.execPath\n  } = options;\n  let previous;\n  const cwdString = cwd instanceof URL ? url.fileURLToPath(cwd) : cwd;\n  let cwdPath = path.resolve(cwdString);\n  const result = [];\n  while (previous !== cwdPath) {\n    result.push(path.join(cwdPath, 'node_modules/.bin'));\n    previous = cwdPath;\n    cwdPath = path.resolve(cwdPath, '..');\n  }\n\n  // Ensure the running `node` binary is used.\n  result.push(path.resolve(cwdString, execPath, '..'));\n  return [...result, path_].join(path.delimiter);\n}\nexport function npmRunPathEnv({\n  env = process.env,\n  ...options\n} = {}) {\n  env = {\n    ...env\n  };\n  const path = pathKey({\n    env\n  });\n  options.path = env[path];\n  env[path] = npmRunPath(options);\n  return env;\n}","map":{"version":3,"names":["process","path","url","pathKey","npmRunPath","options","cwd","path_","env","execPath","previous","cwdString","URL","fileURLToPath","cwdPath","resolve","result","push","join","delimiter","npmRunPathEnv"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/npm-run-path@5.1.0/node_modules/npm-run-path/index.js"],"sourcesContent":["import process from 'node:process';\nimport path from 'node:path';\nimport url from 'node:url';\nimport pathKey from 'path-key';\n\nexport function npmRunPath(options = {}) {\n\tconst {\n\t\tcwd = process.cwd(),\n\t\tpath: path_ = process.env[pathKey()],\n\t\texecPath = process.execPath,\n\t} = options;\n\n\tlet previous;\n\tconst cwdString = cwd instanceof URL ? url.fileURLToPath(cwd) : cwd;\n\tlet cwdPath = path.resolve(cwdString);\n\tconst result = [];\n\n\twhile (previous !== cwdPath) {\n\t\tresult.push(path.join(cwdPath, 'node_modules/.bin'));\n\t\tprevious = cwdPath;\n\t\tcwdPath = path.resolve(cwdPath, '..');\n\t}\n\n\t// Ensure the running `node` binary is used.\n\tresult.push(path.resolve(cwdString, execPath, '..'));\n\n\treturn [...result, path_].join(path.delimiter);\n}\n\nexport function npmRunPathEnv({env = process.env, ...options} = {}) {\n\tenv = {...env};\n\n\tconst path = pathKey({env});\n\toptions.path = env[path];\n\tenv[path] = npmRunPath(options);\n\n\treturn env;\n}\n"],"mappings":";;;;AAAA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,GAAG,MAAM,UAAU;AAC1B,OAAOC,OAAO,MAAM,UAAU;AAE9B,OAAO,SAASC,UAAUA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACxC,MAAM;IACLC,GAAG,GAAGN,OAAO,CAACM,GAAG,CAAC,CAAC;IACnBL,IAAI,EAAEM,KAAK,GAAGP,OAAO,CAACQ,GAAG,CAACL,OAAO,CAAC,CAAC,CAAC;IACpCM,QAAQ,GAAGT,OAAO,CAACS;EACpB,CAAC,GAAGJ,OAAO;EAEX,IAAIK,QAAQ;EACZ,MAAMC,SAAS,GAAGL,GAAG,YAAYM,GAAG,GAAGV,GAAG,CAACW,aAAa,CAACP,GAAG,CAAC,GAAGA,GAAG;EACnE,IAAIQ,OAAO,GAAGb,IAAI,CAACc,OAAO,CAACJ,SAAS,CAAC;EACrC,MAAMK,MAAM,GAAG,EAAE;EAEjB,OAAON,QAAQ,KAAKI,OAAO,EAAE;IAC5BE,MAAM,CAACC,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAACJ,OAAO,EAAE,mBAAmB,CAAC,CAAC;IACpDJ,QAAQ,GAAGI,OAAO;IAClBA,OAAO,GAAGb,IAAI,CAACc,OAAO,CAACD,OAAO,EAAE,IAAI,CAAC;EACtC;;EAEA;EACAE,MAAM,CAACC,IAAI,CAAChB,IAAI,CAACc,OAAO,CAACJ,SAAS,EAAEF,QAAQ,EAAE,IAAI,CAAC,CAAC;EAEpD,OAAO,CAAC,GAAGO,MAAM,EAAET,KAAK,CAAC,CAACW,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAAC;AAC/C;AAEA,OAAO,SAASC,aAAaA,CAAC;EAACZ,GAAG,GAAGR,OAAO,CAACQ,GAAG;EAAE,GAAGH;AAAO,CAAC,GAAG,CAAC,CAAC,EAAE;EACnEG,GAAG,GAAG;IAAC,GAAGA;EAAG,CAAC;EAEd,MAAMP,IAAI,GAAGE,OAAO,CAAC;IAACK;EAAG,CAAC,CAAC;EAC3BH,OAAO,CAACJ,IAAI,GAAGO,GAAG,CAACP,IAAI,CAAC;EACxBO,GAAG,CAACP,IAAI,CAAC,GAAGG,UAAU,CAACC,OAAO,CAAC;EAE/B,OAAOG,GAAG;AACX"},"metadata":{},"sourceType":"module","externalDependencies":[]}