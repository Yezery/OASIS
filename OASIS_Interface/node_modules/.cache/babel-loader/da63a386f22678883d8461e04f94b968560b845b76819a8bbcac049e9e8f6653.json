{"ast":null,"code":"import { findLevelJs } from '../../utils.js';\nimport { fromString } from 'uint8arrays/from-string';\nimport { toString } from 'uint8arrays/to-string';\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary(name, store, onProgress = () => {}) {\n  const db = findLevelJs(store);\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`);\n    return;\n  }\n  onProgress(`Upgrading ${name}`);\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: fromString(key),\n      value: value\n    }];\n  };\n  await withEach(db, upgrade);\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings(name, store, onProgress = () => {}) {\n  const db = findLevelJs(store);\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`);\n    return;\n  }\n  onProgress(`Downgrading ${name}`);\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [{\n      type: 'del',\n      key: key\n    }, {\n      type: 'put',\n      key: toString(key),\n      value: value\n    }];\n  };\n  await withEach(db, downgrade);\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap(store) {\n  if (store.child) {\n    return unwrap(store.child);\n  }\n  return store;\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process(backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends).map(([key, backend]) => ({\n    key,\n    backend: unwrap(backend)\n  })).filter(({\n    key,\n    backend\n  }) => backend.constructor.name === 'LevelDatastore').map(({\n    key,\n    backend\n  }) => ({\n    name: key,\n    store: backend\n  }));\n  onProgress(0, `Migrating ${datastores.length} dbs`);\n  let migrated = 0;\n\n  /**\n   * @param {string} message\n   */\n  const progress = message => {\n    onProgress(Math.round(migrated / datastores.length * 100), message);\n  };\n  for (const {\n    name,\n    store\n  } of datastores) {\n    await store.open();\n    try {\n      await fn(name, store, progress);\n    } finally {\n      migrated++;\n      await store.close();\n    }\n  }\n  onProgress(100, `Migrated ${datastores.length} dbs`);\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary);\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings);\n  }\n};\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach(db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch(operations, next) {\n    const store = db.store('readwrite');\n    const transaction = store.transaction;\n    let index = 0;\n    /** @type {Error | undefined} */\n    let error;\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'));\n    transaction.oncomplete = () => next();\n    function loop() {\n      const op = operations[index++];\n      const key = op.key;\n      let req;\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key);\n      } catch ( /** @type {any} */err) {\n        error = err;\n        transaction.abort();\n        return;\n      }\n      if (index < operations.length) {\n        req.onsuccess = loop;\n      }\n    }\n    loop();\n  }\n  return new Promise((resolve, reject) => {\n    const it = db.iterator();\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = data => data;\n    it._deserializeKey = it._deserializeValue = id;\n    next();\n    function next() {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = err2 => {\n            if (err2) {\n              reject(err2);\n              return;\n            }\n            resolve();\n          };\n          it.end(handleEnd);\n          return;\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next);\n      };\n      it.next(handleNext);\n    }\n  });\n}","map":{"version":3,"names":["findLevelJs","fromString","toString","keysToBinary","name","store","onProgress","db","upgrade","key","value","type","withEach","keysToStrings","downgrade","unwrap","child","process","backends","fn","datastores","Object","entries","map","backend","filter","constructor","length","migrated","progress","message","Math","round","open","close","migration","version","description","migrate","revert","batch","operations","next","transaction","index","error","onabort","Error","oncomplete","loop","op","req","delete","put","err","abort","onsuccess","Promise","resolve","reject","it","iterator","id","data","_deserializeKey","_deserializeValue","handleNext","undefined","handleEnd","err2","end"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo-migrations@15.0.0/node_modules/ipfs-repo-migrations/src/migrations/migration-10/index.js"],"sourcesContent":["\nimport { findLevelJs } from '../../utils.js'\nimport { fromString } from 'uint8arrays/from-string'\nimport { toString } from 'uint8arrays/to-string'\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../types').MigrationProgressCallback} MigrationProgressCallback\n *\n * @typedef {{ type: 'del', key: string | Uint8Array } | { type: 'put', key: string | Uint8Array, value: Uint8Array }} Operation\n * @typedef {function (string, Uint8Array): Operation[]} UpgradeFunction\n * @typedef {function (Uint8Array, Uint8Array): Operation[]} DowngradeFunction\n */\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToBinary (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need an upgrade`)\n\n    return\n  }\n\n  onProgress(`Upgrading ${name}`)\n\n  /**\n   * @type {UpgradeFunction}\n   */\n  const upgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: fromString(key), value: value }\n    ]\n  }\n\n  await withEach(db, upgrade)\n}\n\n/**\n * @param {string} name\n * @param {Datastore} store\n * @param {(message: string) => void} onProgress\n */\nasync function keysToStrings (name, store, onProgress = () => {}) {\n  const db = findLevelJs(store)\n\n  // only interested in level-js\n  if (!db) {\n    onProgress(`${name} did not need a downgrade`)\n\n    return\n  }\n\n  onProgress(`Downgrading ${name}`)\n\n  /**\n   * @type {DowngradeFunction}\n   */\n  const downgrade = (key, value) => {\n    return [\n      { type: 'del', key: key },\n      { type: 'put', key: toString(key), value: value }\n    ]\n  }\n\n  await withEach(db, downgrade)\n}\n\n/**\n * @param {any} store\n * @returns {Datastore}\n */\nfunction unwrap (store) {\n  if (store.child) {\n    return unwrap(store.child)\n  }\n\n  return store\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {MigrationProgressCallback} onProgress\n * @param {*} fn\n */\nasync function process (backends, onProgress, fn) {\n  /**\n   * @type {{ name: string, store: Datastore }[]}\n   */\n  const datastores = Object.entries(backends)\n    .map(([key, backend]) => ({ key, backend: unwrap(backend) }))\n    .filter(({ key, backend }) => backend.constructor.name === 'LevelDatastore')\n    .map(({ key, backend }) => ({\n      name: key,\n      store: backend\n    }))\n\n  onProgress(0, `Migrating ${datastores.length} dbs`)\n  let migrated = 0\n\n  /**\n   * @param {string} message\n   */\n  const progress = (message) => {\n    onProgress(Math.round((migrated / datastores.length) * 100), message)\n  }\n\n  for (const { name, store } of datastores) {\n    await store.open()\n\n    try {\n      await fn(name, store, progress)\n    } finally {\n      migrated++\n      await store.close()\n    }\n  }\n\n  onProgress(100, `Migrated ${datastores.length} dbs`)\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 10,\n  description: 'Migrates datastore-level keys to binary',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToBinary)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keysToStrings)\n  }\n}\n\n/**\n * Uses the upgrade strategy from level-js@5.x.x - note we can't call the `.upgrade` command\n * directly because it will be removed in level-js@6.x.x and we can't guarantee users will\n * have migrated by then - e.g. they may jump from level-js@4.x.x straight to level-js@6.x.x\n * so we have to duplicate the code here.\n *\n * @param {any} db\n * @param {UpgradeFunction | DowngradeFunction} fn\n * @returns {Promise<void>}\n */\nfunction withEach (db, fn) {\n  /**\n   * @param {Operation[]} operations\n   * @param {(error?: Error) => void} next\n   */\n  function batch (operations, next) {\n    const store = db.store('readwrite')\n    const transaction = store.transaction\n    let index = 0\n    /** @type {Error | undefined} */\n    let error\n\n    transaction.onabort = () => next(error || transaction.error || new Error('aborted by user'))\n    transaction.oncomplete = () => next()\n\n    function loop () {\n      const op = operations[index++]\n      const key = op.key\n      let req\n\n      try {\n        req = op.type === 'del' ? store.delete(key) : store.put(op.value, key)\n      } catch (/** @type {any} */ err) {\n        error = err\n        transaction.abort()\n        return\n      }\n\n      if (index < operations.length) {\n        req.onsuccess = loop\n      }\n    }\n\n    loop()\n  }\n\n  return new Promise((resolve, reject) => {\n    const it = db.iterator()\n    // raw keys and values only\n    /**\n     * @template T\n     * @param {T} data\n     */\n    const id = (data) => data\n    it._deserializeKey = it._deserializeValue = id\n    next()\n\n    function next () {\n      /**\n       * @param {Error | undefined} err\n       * @param {string | undefined} key\n       * @param {Uint8Array} value\n       */\n      const handleNext = (err, key, value) => {\n        if (err || key === undefined) {\n          /**\n           * @param {Error | undefined} err2\n           */\n          const handleEnd = (err2) => {\n            if (err2) {\n              reject(err2)\n              return\n            }\n\n            resolve()\n          }\n\n          it.end(handleEnd)\n\n          return\n        }\n\n        // @ts-ignore\n        batch(fn(key, value), next)\n      }\n      it.next(handleNext)\n    }\n  })\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}