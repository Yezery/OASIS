{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getOnSaleNFTByNFTAddress } from \"@/api/axios/Sale\";\nimport { getSeriesByNFTAddress } from \"@/api/axios/ownerContractLIst\";\nimport { getNFTStruct, Buy } from \"@/api/axios/contract\";\nexport default {\n  data() {\n    return {\n      // ======= vuex\n      saleId: null,\n      image: null,\n      nftName: null,\n      description: null,\n      nftAddress: null,\n      tokenId: null,\n      isActive: null,\n      seller: null,\n      price: null,\n      // ======== ÂêàÁ∫¶\n      maxmums: 0,\n      symbol: null,\n      currentId: 0,\n      seriesName: null,\n      nftContract: null,\n      // ======== ÈÖçÁΩÆ\n      imgHeight: \"\",\n      bgHeight: \"\",\n      // ======== ÊúçÂä°Âô®\n      onSaleNFTList: [],\n      seriesNFTList: []\n      // NFTInf: null,\n      // NFTMetaData: null,\n      // NFTContract: null,\n      // NFTContractAddress: null,\n      // NFTSaleId: 0,\n      // NFTTokenId: 0,\n      // NFTPrice: 0,\n      // NFTSeller: \"\",\n      // NFTIsActive: false,\n      // NFTImage: \"\",\n      // NFTName: \"\",\n\n      // supplyer: \"\",\n      // symbol: null,\n      // NFTSeries: \"\",\n      // description: \"\",\n      // maxmums: 0,\n      // currentId: 0,\n      // activeTab: \"first\",\n\n      // sale: {},\n      // bought: false,\n\n      // MessageShow: false,\n      // changeNFT: {},\n      // opt: 0,\n      // isChanging: false,\n    };\n  },\n\n  watch: {},\n  mounted() {\n    this.init();\n    // ÁõëÂê¨Á™óÂè£ÂèòÂåñÔºå‰ΩøÂæóËΩÆÊí≠ÂõæÈ´òÂ∫¶Ëá™ÈÄÇÂ∫îÂõæÁâáÈ´òÂ∫¶\n    window.addEventListener(\"resize\", () => {\n      this.imgHeight = String(window.innerWidth / 12);\n      this.bgHeight = String(window.innerHeight / 80);\n    });\n  },\n  methods: {\n    async getOnSaleNFT() {\n      var NFTDto = {\n        nftAddress: this.nftAddress\n      };\n      await getOnSaleNFTByNFTAddress(NFTDto).then(re => {\n        this.onSaleNFTList = re.data.data;\n      });\n    },\n    async getSeriesByNFTAddress() {\n      var NFTDto = {\n        nftAddress: this.nftAddress\n      };\n      await getSeriesByNFTAddress(NFTDto).then(re => {\n        this.seriesNFTList = re.data.data;\n      });\n    },\n    async init() {\n      try {\n        this.NFTInf = this.$store.state.NFTInf;\n        console.log(this.NFTInf);\n        this.saleId = this.NFTInf.saleId;\n        this.image = this.NFTInf.image;\n        this.nftName = this.NFTInf.nftName;\n        this.description = this.NFTInf.description;\n        this.nftAddress = this.NFTInf.nftAddress;\n        this.tokenId = this.NFTInf.tokenId;\n        this.isActive = this.NFTInf.isActive;\n        this.seller = this.NFTInf.seller;\n        this.price = this.NFTInf.price;\n        await this.getSeriesByNFTAddress();\n        await this.getOnSaleNFT();\n        await getNFTStruct(this.nftAddress).then(re => {\n          this.nftContract = re;\n        });\n        await this.nftContract.methods._currentId().call().then(re => {\n          this.currentId = re;\n        });\n        await this.nftContract.methods.symbol().call().then(re => {\n          this.symbol = re;\n        });\n        await this.nftContract.methods.name().call().then(re => {\n          this.seriesName = re;\n        });\n        await this.nftContract.methods._maximums().call().then(re => {\n          this.maxmums = re;\n        });\n      } catch (error) {\n        console.log(error);\n        this.$router.push(\"/\");\n      }\n    },\n    async Buy(NFT) {\n      try {\n        NFT.symbol = this.symbol;\n        this.changeNFT.image = this.NFTImage;\n        let isSuccess = false;\n        this.isChanging = true;\n        await Buy(this.changeNFT).then(re => {\n          isSuccess = re;\n        });\n        if (isSuccess) {\n          this.isChanging = false;\n          this.$notify({\n            title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n            type: \"success\",\n            position: \"top-left\",\n            offset: 200\n          });\n          this.bought = true;\n          this.changeNFT = {};\n        } else {\n          this.isChanging = false;\n          this.changeNFT = {};\n          this.$notify({\n            title: \"ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞\",\n            type: \"warning\",\n            position: \"top-left\",\n            offset: 200\n          });\n        }\n      } catch (error) {\n        this.isChanging = false;\n        this.$notify.error({\n          title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n          position: \"top-left\",\n          offset: 200\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["getOnSaleNFTByNFTAddress","getSeriesByNFTAddress","getNFTStruct","Buy","data","saleId","image","nftName","description","nftAddress","tokenId","isActive","seller","price","maxmums","symbol","currentId","seriesName","nftContract","imgHeight","bgHeight","onSaleNFTList","seriesNFTList","watch","mounted","init","window","addEventListener","String","innerWidth","innerHeight","methods","getOnSaleNFT","NFTDto","then","re","NFTInf","$store","state","console","log","_currentId","call","name","_maximums","error","$router","push","NFT","changeNFT","NFTImage","isSuccess","isChanging","$notify","title","type","position","offset","bought"],"sources":["src/components/infPage/NFTInf.vue"],"sourcesContent":["<template>\n  <div class=\"NFTInfMainBox animate__animated animate__fadeInRight\" v-loading.fullscreen.lock=\"isChanging\" element-loading-text=\"‰∫§ÊòìËøõË°å‰∏≠\" element-loading-spinner=\"el-icon-loading\" element-loading-background=\"rgba(0, 0, 0, 0.8)\">\n    <el-carousel indicator-position=\"none\" arrow=\"never\" :height=\"bgHeight\">\n      <el-carousel-item v-for=\"image in onSaleNFTList\" :key=\"image.ipfsPath\">\n        <div class=\"NFTInfMain_Bg\" :style=\"{ backgroundImage: `url('${encodeURI(image.ipfsPath)}')`}\" />\n      </el-carousel-item>\n    </el-carousel>\n\n    <div class=\"NFTInfMain_Avatar\">\n      <el-carousel class=\"NFTInfMain_AvatarBorder\" indicator-position=\"none\" arrow=\"never\" :height=\"imgHeight\">\n        <el-carousel-item v-for=\"image in onSaleNFTList\" :key=\"image.ipfsPath\">\n          <img style=\"width: 100%; object-fit: contain;\" :src=\"image.ipfsPath\">\n        </el-carousel-item>\n      </el-carousel>\n    </div>\n    <div class=\"NFTInfMain_Top\">\n      <div class=\"NFTInfMain_Top_Inf\">\n        <div class=\"NFTName\">\n          {{ NFTName }}\n        </div>\n        <div class=\"NFTContract\">\n          <div class=\"NFTSupplyer\">\n            Áî± <span style=\"font-weight: 800;font-size:16px;\">{{ `${this.seller.slice(\n            0,\n            5\n            )}...${this.seller.slice(37)}` }}</span>\n          </div>\n          <div class=\"NFTInf\">\n            <div class=\"NFTCounts\">\n              Á≥ªÂàó<span style=\"font-weight: 800;\">{{ NFTSeries }}</span> ¬∑\n              ‰ª£Â∏ÅÁ¨¶Âè∑<span style=\"font-weight: 800;\">{{ symbol }}</span> ¬∑\n              ÈôêÈáèÈì∏ÈÄ†<span style=\"font-weight: 800;\">{{ maxmums }}</span> ¬∑\n              ÁõÆÂâçÂ∑≤Èì∏ÈÄ†Êï∞Èáè<span style=\"font-weight: 800;\">{{ currentId }}</span>\n            </div>\n            <div class=\"NFTdescription\">\n              {{ description }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"NFTInfMain_Bootom\">\n      <div class=\"selectBox\">\n        <div class=\"selectBox-Button\">\n          <el-tabs v-model=\"activeTab\">\n            <el-tab-pane label=\"Ê≠£Âú®ÂîÆÂçñ\" name=\"first\">\n              <div class=\"SeriesNFT\">\n                <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 15px;\" v-if=\"onSaleNFTList.filter(inf => inf.isActive).length == 0\">\n                  <el-empty description=\"Êó†Âú®ÂîÆ\" />\n                </div>\n                <template v-for=\"inf in onSaleNFTList.filter(inf => inf.isActive)\">\n                  <div class=\"NFTInf\" :key=\"inf.image\">\n                    <div class=\"imageBox\">\n                      <img class=\"NFTImage\" :src=\"inf.ipfsPath\" alt=\"\">\n                    </div>\n                    <div class=\"Inf\">\n                      <div class=\"NFTName\">\n                        {{ inf.nftName }}\n                      </div>\n                      <div class=\"ownerAndToSell\">\n                        <div class=\"ToSellBox\">\n                          #{{ inf.tokenId }}\n                        </div>\n                        <div style=\"margin-left: 2%;\">\n                          <span style=\"font-weight: 800;font-size: 25px;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                        </div>\n\n                      </div>\n                    </div>\n                    <div  class=\"SellBox\" @click=\"Buy(inf)\" v-if=\"$store.state.isconnect && NFTSeller.toUpperCase() != $store.state.currentAddress.toUpperCase()\">\n                       Buy now\n                    </div>\n                  </div>\n\n                </template>\n              </div>\n            </el-tab-pane>\n            <el-tab-pane label=\"ÊöÇÊú™ÂèëÂîÆ\" name=\"second\">\n              <div class=\"SeriesNFT\">\n                <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 15px;\" v-if=\"seriesNFTList.filter(inf => !inf.isActive).length == 0\">\n                  <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                </div>\n                <template v-else>\n                  <div class=\"NFTInf\" v-for=\"inf in seriesNFTList.filter(inf => !inf.isActive)\" :key=\"inf.image\">\n\n                    <div class=\"imageBox\">\n                      <img class=\"NFTImage\" :src=\"inf.image\" alt=\"\">\n                    </div>\n                    <div class=\"Inf\">\n                      <div class=\"NFTName\">\n                        {{ inf.name }}\n                      </div>\n                      <div class=\"ownerAndToSell\">\n                        <div class=\"ToSellBox\" />\n                      </div>\n                    </div>\n                  </div>\n                </template>\n              </div>\n            </el-tab-pane>\n            <el-tab-pane label=\"Á≥ªÂàóNFT\" name=\"third\">\n              <div class=\"SeriesNFT\">\n                <div style=\"margin-top: 10%;margin-bottom: 10%;font-weight: 800;font-size: 15px;\" v-if=\"seriesNFTList.length == 0\">\n                  <el-empty description=\"Êó†Êï∞ÊçÆ\" />\n                </div>\n                <div class=\"NFTInf\" v-for=\"inf in seriesNFTList\" :key=\"inf.image\">\n                  <div class=\"imageBox\">\n                    <img class=\"NFTImage\" :src=\"inf.ipfsPath\" alt=\"\">\n                  </div>\n                  <div class=\"Inf\">\n                    <div class=\"NFTName\">\n                      {{ inf.nftName }}\n                    </div>\n                    <div class=\"ownerAndToSell\">\n                      <div class=\"ToSellBox\">\n                        #{{ inf.tokenId }}\n                      </div>\n                      <div style=\"margin-left: 2%;\">\n                        <span style=\"font-weight: 800;font-size:25px;\">{{ $store.state.Web3.utils.fromWei(inf.price, 'ether') }} </span> ETH\n                      </div>\n\n                    </div>\n                  </div>\n\n                </div>\n              </div>\n            </el-tab-pane>\n          </el-tabs>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { getOnSaleNFTByNFTAddress } from \"@/api/axios/Sale\";\n  import {getSeriesByNFTAddress}from \"@/api/axios/ownerContractLIst\"\nimport { getNFTStruct,Buy } from \"@/api/axios/contract\";\n\n  export default {\n    data() {\n      return {\n        // ======= vuex\n        saleId: null,\n        image: null,\n        nftName: null,\n        description: null,\n        nftAddress: null,\n        tokenId: null,\n        isActive: null,\n        seller: null,\n        price: null,\n        // ======== ÂêàÁ∫¶\n        maxmums: 0,\n        symbol: null,\n        currentId: 0,\n        seriesName: null,\n        nftContract:null,\n        // ======== ÈÖçÁΩÆ\n        imgHeight: \"\",\n        bgHeight: \"\",\n        // ======== ÊúçÂä°Âô®\n        onSaleNFTList: [],\n        seriesNFTList:[],\n        // NFTInf: null,\n        // NFTMetaData: null,\n        // NFTContract: null,\n        // NFTContractAddress: null,\n        // NFTSaleId: 0,\n        // NFTTokenId: 0,\n        // NFTPrice: 0,\n        // NFTSeller: \"\",\n        // NFTIsActive: false,\n        // NFTImage: \"\",\n        // NFTName: \"\",\n\n        // supplyer: \"\",\n        // symbol: null,\n        // NFTSeries: \"\",\n        // description: \"\",\n        // maxmums: 0,\n        // currentId: 0,\n        // activeTab: \"first\",\n \n        // sale: {},\n        // bought: false,\n\n        // MessageShow: false,\n        // changeNFT: {},\n        // opt: 0,\n        // isChanging: false,\n        \n      };\n    },\n    watch: {},\n    mounted() {\n      this.init();\n      // ÁõëÂê¨Á™óÂè£ÂèòÂåñÔºå‰ΩøÂæóËΩÆÊí≠ÂõæÈ´òÂ∫¶Ëá™ÈÄÇÂ∫îÂõæÁâáÈ´òÂ∫¶\n      window.addEventListener(\"resize\", () => {\n        this.imgHeight = String(window.innerWidth / 12);\n        this.bgHeight = String(window.innerHeight / 80);\n      });\n    },\n  methods: {\n      async getOnSaleNFT() {\n        var NFTDto = {\n          nftAddress: this.nftAddress,\n        };\n        await getOnSaleNFTByNFTAddress(NFTDto).then((re) => {\n          this.onSaleNFTList = re.data.data;\n        });\n      },\n      async getSeriesByNFTAddress() {\n        var NFTDto = {\n          nftAddress: this.nftAddress,\n        };\n        await getSeriesByNFTAddress(NFTDto).then((re) => {\n          this.seriesNFTList = re.data.data;\n        });\n      },\n      async init() {\n        try {\n          this.NFTInf = this.$store.state.NFTInf;\n          console.log(this.NFTInf);\n          this.saleId = this.NFTInf.saleId\n          this.image = this.NFTInf.image\n          this.nftName = this.NFTInf.nftName\n          this.description = this.NFTInf.description\n          this.nftAddress = this.NFTInf.nftAddress\n          this.tokenId = this.NFTInf.tokenId\n          this.isActive = this.NFTInf.isActive\n          this.seller = this.NFTInf.seller\n          this.price = this.NFTInf.price\n\n          await this.getSeriesByNFTAddress();\n          await this.getOnSaleNFT() \n         \n          await getNFTStruct(this.nftAddress).then((re) => {\n            this.nftContract = re;\n          });\n          await this.nftContract.methods\n            ._currentId()\n            .call()\n            .then((re) => {\n              this.currentId = re;\n            });\n          await this.nftContract.methods\n            .symbol()\n            .call()\n            .then((re) => {\n              this.symbol = re;\n            });\n          await this.nftContract.methods\n            .name()\n            .call()\n            .then((re) => {\n              this.seriesName = re;\n            });\n          await this.nftContract.methods\n            ._maximums()\n            .call()\n            .then((re) => {\n              this.maxmums = re;\n            });\n        } catch (error) {\n          console.log(error);\n          this.$router.push(\"/\")\n        }\n      },\n      async Buy(NFT) {\n        try {\n          NFT.symbol = this.symbol;\n          this.changeNFT.image = this.NFTImage;\n          let isSuccess = false;\n          this.isChanging = true;\n          await Buy(this.changeNFT).then((re) => {\n            isSuccess = re;\n          });\n          if (isSuccess) {\n            this.isChanging = false;\n            this.$notify({\n              title: \"üíñ ÊÑüË∞¢Ë¥≠‰π∞\",\n              type: \"success\",\n              position: \"top-left\",\n              offset: 200,\n            });\n            this.bought = true;\n            this.changeNFT={}\n          } else {\n            this.isChanging = false;\n            this.changeNFT={}\n            this.$notify({\n              title: \"ÊÇ®Â∑≤ÂèñÊ∂àË¥≠‰π∞\",\n              type: \"warning\",\n              position: \"top-left\",\n              offset: 200,\n            });\n     \n          }\n        } catch (error) {\n          this.isChanging = false;\n          this.$notify.error({\n            title: \"Ë¥≠‰π∞Â§±Ë¥•\",\n            position: \"top-left\",\n            offset: 200,\n          });\n        }\n      },\n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"@/style/components/NFTInf.scss\";\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}