{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createDisconnect({\n  network\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"disconnect\"]}\n   */\n  async function disconnect(addr, options = {}) {\n    const {\n      libp2p\n    } = await network.use(options);\n    await libp2p.hangUp(addr);\n  }\n  return withTimeoutOption(disconnect);\n}","map":{"version":3,"names":["withTimeoutOption","createDisconnect","network","disconnect","addr","options","libp2p","use","hangUp"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/swarm/disconnect.js"],"sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createDisconnect ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"disconnect\"]}\n   */\n  async function disconnect (addr, options = {}) {\n    const { libp2p } = await network.use(options)\n    await libp2p.hangUp(addr)\n  }\n\n  return withTimeoutOption(disconnect)\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,qCAAqC;;AAEvE;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgBA,CAAE;EAAEC;AAAQ,CAAC,EAAE;EAC7C;AACF;AACA;EACE,eAAeC,UAAUA,CAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC7C,MAAM;MAAEC;IAAO,CAAC,GAAG,MAAMJ,OAAO,CAACK,GAAG,CAACF,OAAO,CAAC;IAC7C,MAAMC,MAAM,CAACE,MAAM,CAACJ,IAAI,CAAC;EAC3B;EAEA,OAAOJ,iBAAiB,CAACG,UAAU,CAAC;AACtC"},"metadata":{},"sourceType":"module","externalDependencies":[]}