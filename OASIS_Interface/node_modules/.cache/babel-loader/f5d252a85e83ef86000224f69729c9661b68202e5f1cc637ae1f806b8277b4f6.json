{"ast":null,"code":"import debug from 'debug';\nimport { createUnsafe } from 'multiformats/block';\nconst log = debug('ipfs:repo:utils:walk-dag');\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function* walkDag(cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options);\n    const codec = await loadCodec(cid.code);\n    const block = createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n    for (const [, childCid] of block.links()) {\n      yield childCid;\n      yield* walkDag(childCid, blockstore, loadCodec, options);\n    }\n  } catch ( /** @type {any} */err) {\n    log('Could not walk DAG for CID', cid.toString(), err);\n    throw err;\n  }\n}","map":{"version":3,"names":["debug","createUnsafe","log","walkDag","cid","blockstore","loadCodec","options","bytes","get","codec","code","block","childCid","links","err","toString"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-repo@17.0.0/node_modules/ipfs-repo/src/utils/walk-dag.js"],"sourcesContent":["import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,oBAAoB;AAEjD,MAAMC,GAAG,GAAGF,KAAK,CAAC,0BAA0B,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,gBAAiBG,OAAOA,CAAEC,GAAG,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAE;EACpE,IAAI;IACF,MAAMC,KAAK,GAAG,MAAMH,UAAU,CAACI,GAAG,CAACL,GAAG,EAAEG,OAAO,CAAC;IAChD,MAAMG,KAAK,GAAG,MAAMJ,SAAS,CAACF,GAAG,CAACO,IAAI,CAAC;IACvC,MAAMC,KAAK,GAAGX,YAAY,CAAC;MAAEO,KAAK;MAAEJ,GAAG;MAAEM;IAAM,CAAC,CAAC;IAEjD,KAAK,MAAM,GAAGG,QAAQ,CAAC,IAAID,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE;MACxC,MAAMD,QAAQ;MACd,OAAQV,OAAO,CAACU,QAAQ,EAAER,UAAU,EAAEC,SAAS,EAAEC,OAAO,CAAC;IAC3D;EACF,CAAC,CAAC,QAAO,kBAAmBQ,GAAG,EAAE;IAC/Bb,GAAG,CAAC,4BAA4B,EAAEE,GAAG,CAACY,QAAQ,CAAC,CAAC,EAAED,GAAG,CAAC;IAEtD,MAAMA,GAAG;EACX;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}