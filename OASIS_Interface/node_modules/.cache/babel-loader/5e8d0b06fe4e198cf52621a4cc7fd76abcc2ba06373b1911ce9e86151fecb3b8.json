{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { addLink } from './add-link.js';\nimport { decode } from '@ipld/dag-pb';\nconst log = logger('ipfs:mfs:utils:update-tree');\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree(context, trail, options) {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block);\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      };\n      continue;\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    });\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    };\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const {\n    cid\n  } = child;\n  log(`Final CID ${cid}`);\n  return cid;\n}","map":{"version":3,"names":["logger","addLink","decode","log","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","child","block","repo","blocks","getMany","map","node","cid","name","size","length","result","parent","flush","hashAlg","cidVersion"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/update-tree.js"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { addLink } from './add-link.js'\nimport {\n  decode\n} from '@ipld/dag-pb'\n\nconst log = logger('ipfs:mfs:utils:update-tree')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree (context, trail, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,SAASC,OAAO,QAAQ,eAAe;AACvC,SACEC,MAAM,QACD,cAAc;AAErB,MAAMC,GAAG,GAAGH,MAAM,CAAC,4BAA4B,CAAC;AAEhD,MAAMI,cAAc,GAAG;EACrBC,mBAAmB,EAAE;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,UAAUA,CAAEC,OAAO,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACzDA,OAAO,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,cAAc,EAAEK,OAAO,CAAC;EAEpDN,GAAG,CAAC,OAAO,EAAEK,KAAK,CAAC;EACnBA,KAAK,GAAGA,KAAK,CAACI,KAAK,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAE/B,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK;EAET,WAAW,MAAMC,KAAK,IAAIT,OAAO,CAACU,IAAI,CAACC,MAAM,CAACC,OAAO,CAACX,KAAK,CAACY,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE;IAClF,MAAMD,IAAI,GAAGnB,MAAM,CAACc,KAAK,CAAC;IAC1B,MAAMM,GAAG,GAAGd,KAAK,CAACM,KAAK,CAAC,CAACQ,GAAG;IAC5B,MAAMC,IAAI,GAAGf,KAAK,CAACM,KAAK,CAAC,CAACS,IAAI;IAC9BT,KAAK,EAAE;IAEP,IAAI,CAACC,KAAK,EAAE;MACVA,KAAK,GAAG;QACNO,GAAG;QACHC,IAAI;QACJC,IAAI,EAAER,KAAK,CAACS;MACd,CAAC;MAED;IACF;;IAEA;IACA,MAAMC,MAAM,GAAG,MAAMzB,OAAO,CAACM,OAAO,EAAE;MACpCoB,MAAM,EAAEN,IAAI;MACZE,IAAI,EAAER,KAAK,CAACQ,IAAI;MAChBD,GAAG,EAAEP,KAAK,CAACO,GAAG;MACd;MACAE,IAAI,EAAET,KAAK,CAACS,IAAI;MAChBI,KAAK,EAAEnB,OAAO,CAACmB,KAAK;MACpBvB,mBAAmB,EAAEI,OAAO,CAACJ,mBAAmB;MAChDwB,OAAO,EAAEpB,OAAO,CAACoB,OAAO;MACxBC,UAAU,EAAErB,OAAO,CAACqB;IACtB,CAAC,CAAC;;IAEF;IACAf,KAAK,GAAG;MACNO,GAAG,EAAEI,MAAM,CAACJ,GAAG;MACfC,IAAI;MACJ;MACAC,IAAI,EAAEE,MAAM,CAACF;IACf,CAAC;EACH;;EAEA;EACA,MAAM;IAAEF;EAAI,CAAC,GAAGP,KAAK;EACrBZ,GAAG,CAAE,aAAYmB,GAAI,EAAC,CAAC;EAEvB,OAAOA,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}