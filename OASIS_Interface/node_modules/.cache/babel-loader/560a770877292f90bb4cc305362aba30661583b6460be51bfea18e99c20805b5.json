{"ast":null,"code":"import errCode from 'err-code';\nimport { logger } from '@libp2p/logger';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nconst log = logger('ipfs:mfs:utils:to-async-iterator');\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator(content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = uint8ArrayFromString(content.toString());\n  }\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    return browserStreamToIt(content.stream());\n  }\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n}","map":{"version":3,"names":["errCode","logger","fromString","uint8ArrayFromString","browserStreamToIt","log","toAsyncIterator","content","Error","String","toString","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","stream"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js"],"sourcesContent":["import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n    return browserStreamToIt(content.stream())\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;AAC9B,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,UAAU,IAAIC,oBAAoB,QAAQ,yBAAyB;AAC5E,OAAOC,iBAAiB,MAAM,8BAA8B;AAE5D,MAAMC,GAAG,GAAGJ,MAAM,CAAC,kCAAkC,CAAC;;AAEtD;AACA;AACA;AACA,OAAO,SAASK,eAAeA,CAAEC,OAAO,EAAE;EACxC,IAAI,CAACA,OAAO,EAAE;IACZ,MAAMP,OAAO,CAAC,IAAIQ,KAAK,CAAC,uCAAuC,CAAC,EAAE,kBAAkB,CAAC;EACvF;EAEA,IAAI,OAAOD,OAAO,KAAK,QAAQ,IAAIA,OAAO,YAAYE,MAAM,EAAE;IAC5DJ,GAAG,CAAC,sBAAsB,CAAC;IAE3BE,OAAO,GAAGJ,oBAAoB,CAACI,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;EACpD;EAEA,IAAIH,OAAO,CAACI,MAAM,EAAE;IAClBN,GAAG,CAAC,wBAAwB,CAAC;IAE7B,OAAO;MACL,CAACO,MAAM,CAACC,aAAa,GAAG,UAAWC,aAAaA,CAAA,EAAI;QAClD,MAAMP,OAAO;MACf;IACF,CAAC;EACH;EAEA,IAAIA,OAAO,CAACK,MAAM,CAACC,aAAa,CAAC,EAAE;IACjCR,GAAG,CAAC,+BAA+B,CAAC;IACpC,OAAOE,OAAO;EAChB;EAEA,IAAIA,OAAO,CAACK,MAAM,CAACG,QAAQ,CAAC,EAAE;IAC5BV,GAAG,CAAC,yBAAyB,CAAC;IAC9B,OAAOE,OAAO;EAChB;EAEA,IAAIS,MAAM,CAACC,IAAI,IAAIV,OAAO,YAAYS,MAAM,CAACC,IAAI,EAAE;IACjD;IACAZ,GAAG,CAAC,2BAA2B,CAAC;IAChC,OAAOD,iBAAiB,CAACG,OAAO,CAACW,MAAM,CAAC,CAAC,CAAC;EAC5C;EAEA,MAAMlB,OAAO,CAAC,IAAIQ,KAAK,CAAE,6BAA4BD,OAAQ,yBAAwB,CAAC,EAAE,oBAAoB,CAAC;AAC/G"},"metadata":{},"sourceType":"module","externalDependencies":[]}