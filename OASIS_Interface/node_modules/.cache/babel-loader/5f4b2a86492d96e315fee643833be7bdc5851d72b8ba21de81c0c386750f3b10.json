{"ast":null,"code":"import { UpSale, DownSale } from \"@/api/axios/contract\";\nexport default {\n  data() {\n    return {\n      UserNFTList: [],\n      UserNFTListInf: [],\n      MintNFTContractAbi: this.$store.state.MintNFTContractAbi,\n      contractAddress: \"\",\n      NTFList: [],\n      contract: null,\n      value: 1\n    };\n  },\n  mounted() {\n    this.UserNFTListInf = this.$store.state.ownerNFTList;\n  },\n  methods: {\n    async downSale(NFT) {\n      await DownSale(NFT);\n      this.UserNFTListInf = this.$store.state.ownerNFTList;\n    },\n    // async GETNFTContract(contractAddress) {\n    //   let NewContract = await new this.$store.state.Web3.eth.Contract(\n    //     this.MintNFTContractAbi,\n    //     contractAddress\n    //   );\n    //   this.contractAddress = contractAddress;\n    //   await NewContract.methods\n    //     .getNFTsByOwner(this.$store.state.currentAddress)\n    //     .call()\n    //     .then((re) => {\n    //       this.UserNFTList = re;\n    //     });\n    //   return NewContract;\n    // },\n    // async GetNFTInf() {\n    //   let Contract = await this.GETNFTContract(this.contractAddress);\n    //   for (let index = 0; index < this.UserNFTList.length; index++) {\n    //     var NFTURI;\n    //     var NFTNAME;\n    //     await Contract.methods\n    //       .tokenURI(Number(this.UserNFTList[index]))\n    //       .call()\n    //       .then((res) => {\n    //         NFTURI = res;\n    //       });\n    //     await Contract.methods\n    //       .name()\n    //       .call()\n    //       .then((res) => {\n    //         NFTNAME = res;\n    //       });\n    //     let web3 = new this.Web3(window.ethereum);\n    //     this.contract = new web3.eth.Contract(\n    //       this.$store.state.MarketContractAbi,\n    //       this.$store.state.MarketContractAddress\n    //     );\n    //     await this.contract.methods\n    //       .fetchMyNFTs()\n    //       .call()\n    //       .then((res) => {\n    //         this.NTFList = res;\n    //       });\n    //     console.log(await this.contract.methods.fetchMyNFTs().call());\n    //     var NFT = {\n    //       NFTURI: NFTURI,\n    //       NFTNAME: NFTNAME,\n    //       NFTAddress: Contract._address,\n    //       NFTTokenId: this.UserNFTList[index],\n    //     };\n\n    //     this.UserNFTListInf.push(NFT);\n    //   }\n    // },\n    // async upSale(NFT) {\n    //   this.$prompt(\"请输入价格\", \"上架提醒\", {\n    //     confirmButtonText: \"确定\",\n    //     cancelButtonText: \"取消\",\n    //     inputPattern: /^[1-9]\\d*$/,\n    //     inputErrorMessage: \"不能为0\",\n    //   })\n    //     .then(async ({ value }) => {\n\n    //       let NFTContract = await this.GETNFTContract(NFT.NFTAddress);\n    //       let MarketContract = this.$store.state.MarketContract;\n    //       //授权\n    //       NFTContract.methods\n    //         .approve(this.$store.state.MarketContractAddress, NFT.NFTTokenId)\n    //         .send({ from: this.$store.state.currentAddress });\n\n    //       // 上架\n    //       let Value;\n    //       await MarketContract.methods\n    //         .getListingPrice()\n    //         .call()\n    //         .then((res) => {\n    //           Value = res;\n    //         });\n    //       await MarketContract.methods\n    //         .createMarketplaceItem(NFT.NFTAddress, 1, 1)\n    //         .send({\n    //           from: this.$store.state.currentAddress,\n    //           // value: Value\n    //           value: this.$store.state.Web3.utils.toWei(Value, \"wei\"),\n    //         });\n    //       this.$message({\n    //         type: \"success\",\n    //         message: \"你的邮箱是: \" + value,\n    //       });\n    //     })\n    //     .catch((res) => {\n    //       this.$message({\n    //         type: \"info\",\n    //         message: \"取消输入\",\n    //       });\n    //       console.log(res);\n    //     });\n    // },\n    async UpSale(NFT) {\n      if (Number(NFT.price) == 0 || NFT.price == \"\") {\n        return;\n      }\n      await UpSale(NFT);\n      this.UserNFTListInf = await this.$store.state.ownerNFTList;\n    }\n  }\n};","map":{"version":3,"names":["UpSale","DownSale","data","UserNFTList","UserNFTListInf","MintNFTContractAbi","$store","state","contractAddress","NTFList","contract","value","mounted","ownerNFTList","methods","downSale","NFT","Number","price"],"sources":["src/views/user/ToSellView.vue"],"sourcesContent":["<template>\n  <div class=\"ToSellMain animate__animated animate__fadeInRight\">\n    \n    <div class=\"ToSellHeaderBox\">\n      <div class=\"ToSellHeader\">\n        <router-link :to=\"{ name: 'MarketShop' }\"><i class=\"el-icon-arrow-left\"></i>\n        </router-link>\n      </div>\n    </div>\n\n\n    <div class=\"ToSellMain\">\n      <div class=\"NFTInf\" v-for=\"inf in UserNFTListInf\" :key=\"inf.ipfsPath\">\n        <div class=\"imageBox\">\n          <img class=\"NFTImage\" :src=\"inf.ipfsPath\" alt=\"\" />\n        </div>\n        <div class=\"Inf\">\n          <template v-if=\"inf.isActive\">\n            <div class=\"NFTName\">{{ inf.nftName }}</div>\n            <div class=\"ownerAndToSell\">\n              <div class=\"ToSellBox\">\n                <div v-if=\"!inf.isActive\" class=\"ToSellinnerBox animate__animated animate__fadeInUp\">\n                  <i class=\"el-icon-sort\"></i>\n                  <span class=\"apporve \" @click=\"inf.isActive = !inf.isActive\"> 上架 </span>\n\n                </div>\n                <div v-else class=\"downSale animate__animated animate__fadeInUp\" @click=\"downSale(inf)\">\n                  <i class=\"el-icon-sort\"></i>\n                  <span class=\"apporve \"> 下架 </span>\n                </div>\n\n              </div>\n\n            </div>\n          </template>\n          <template v-else>\n            <div class=\"NFTName animate__animated animate__fadeIn\"><el-input v-model=\"inf.price\" placeholder=\"请输入内容\"></el-input>\n             ETH\n            </div>\n            <div class=\"ownerAndToSell animate__animated animate__fadeInDown\">\n              <div class=\"ToSellBox\">\n                <div class=\"ToSellinnerBox\">\n                  <i class=\"el-icon-sort\"></i>\n                  <span class=\"apporve\" @click=\"UpSale(inf)\"> 确认 </span>\n                </div>\n                <div class=\"ToSellinnerBox \" style=\"background-color: rgba(225, 44, 44, 0.7);\">\n                  <i class=\"el-icon-sort\" style=\"color: white;\"></i>\n                  <span class=\"apporve\" style=\"color: white;\" @click=\"inf.isActive = !inf.isActive\"> 取消 </span>\n                </div>\n              </div>\n\n            </div>\n          </template>\n\n        </div>\n\n      </div>\n      <!-- absolute -->\n    \n    \n    </div>\n  \n  </div>\n\n</template>\n\n<script>\n  import { UpSale ,DownSale} from \"@/api/axios/contract\";\n  export default {\n    data() {\n      return {\n        UserNFTList: [],\n        UserNFTListInf: [],\n        MintNFTContractAbi: this.$store.state.MintNFTContractAbi,\n        contractAddress: \"\",\n        NTFList: [],\n        contract: null,\n        value: 1,\n       \n      };\n    },\n  mounted() {\n    this.UserNFTListInf = this.$store.state.ownerNFTList;\n    },\n  methods: {\n    async downSale(NFT) {\n      await DownSale(NFT)\n      this.UserNFTListInf = this.$store.state.ownerNFTList;\n    },\n      // async GETNFTContract(contractAddress) {\n      //   let NewContract = await new this.$store.state.Web3.eth.Contract(\n      //     this.MintNFTContractAbi,\n      //     contractAddress\n      //   );\n      //   this.contractAddress = contractAddress;\n      //   await NewContract.methods\n      //     .getNFTsByOwner(this.$store.state.currentAddress)\n      //     .call()\n      //     .then((re) => {\n      //       this.UserNFTList = re;\n      //     });\n      //   return NewContract;\n      // },\n      // async GetNFTInf() {\n      //   let Contract = await this.GETNFTContract(this.contractAddress);\n      //   for (let index = 0; index < this.UserNFTList.length; index++) {\n      //     var NFTURI;\n      //     var NFTNAME;\n      //     await Contract.methods\n      //       .tokenURI(Number(this.UserNFTList[index]))\n      //       .call()\n      //       .then((res) => {\n      //         NFTURI = res;\n      //       });\n      //     await Contract.methods\n      //       .name()\n      //       .call()\n      //       .then((res) => {\n      //         NFTNAME = res;\n      //       });\n      //     let web3 = new this.Web3(window.ethereum);\n      //     this.contract = new web3.eth.Contract(\n      //       this.$store.state.MarketContractAbi,\n      //       this.$store.state.MarketContractAddress\n      //     );\n      //     await this.contract.methods\n      //       .fetchMyNFTs()\n      //       .call()\n      //       .then((res) => {\n      //         this.NTFList = res;\n      //       });\n      //     console.log(await this.contract.methods.fetchMyNFTs().call());\n      //     var NFT = {\n      //       NFTURI: NFTURI,\n      //       NFTNAME: NFTNAME,\n      //       NFTAddress: Contract._address,\n      //       NFTTokenId: this.UserNFTList[index],\n      //     };\n\n      //     this.UserNFTListInf.push(NFT);\n      //   }\n      // },\n      // async upSale(NFT) {\n      //   this.$prompt(\"请输入价格\", \"上架提醒\", {\n      //     confirmButtonText: \"确定\",\n      //     cancelButtonText: \"取消\",\n      //     inputPattern: /^[1-9]\\d*$/,\n      //     inputErrorMessage: \"不能为0\",\n      //   })\n      //     .then(async ({ value }) => {\n\n      //       let NFTContract = await this.GETNFTContract(NFT.NFTAddress);\n      //       let MarketContract = this.$store.state.MarketContract;\n      //       //授权\n      //       NFTContract.methods\n      //         .approve(this.$store.state.MarketContractAddress, NFT.NFTTokenId)\n      //         .send({ from: this.$store.state.currentAddress });\n\n      //       // 上架\n      //       let Value;\n      //       await MarketContract.methods\n      //         .getListingPrice()\n      //         .call()\n      //         .then((res) => {\n      //           Value = res;\n      //         });\n      //       await MarketContract.methods\n      //         .createMarketplaceItem(NFT.NFTAddress, 1, 1)\n      //         .send({\n      //           from: this.$store.state.currentAddress,\n      //           // value: Value\n      //           value: this.$store.state.Web3.utils.toWei(Value, \"wei\"),\n      //         });\n      //       this.$message({\n      //         type: \"success\",\n      //         message: \"你的邮箱是: \" + value,\n      //       });\n      //     })\n      //     .catch((res) => {\n      //       this.$message({\n      //         type: \"info\",\n      //         message: \"取消输入\",\n      //       });\n      //       console.log(res);\n      //     });\n      // },\n      async UpSale(NFT) {\n        if (Number(NFT.price) == 0 || NFT.price == \"\") {\n          return;\n        }\n        await UpSale(NFT);\n        this.UserNFTListInf = await this.$store.state.ownerNFTList;\n      },\n      \n    },\n  };\n</script>\n\n<style lang=\"scss\" scoped>\n.ToSellMain {\n  height: 100%;\n  text-align: center;\n  width: 100%;\n  font-family: Arial, Helvetica, sans-serif;\n\n  .NFTInf {\n    background-color: var(--White--);\n    border-radius: 30px;\n    width: 315px;\n    height: 390px;\n    display: inline-block;\n    overflow: hidden;\n    transition: all 0.3s ease-in-out;\n    &:hover {\n      box-shadow: rgba(14, 30, 37, 0.12) 0px 2px 4px 0px,\n        rgba(14, 30, 37, 0.32) 0px 2px 16px 0px;\n      transition: all 0.3s ease-in-out;\n    }\n  }\n  @media screen and (max-width: 1600px) and (min-width: 1600px) {\n    .ToSellMain {\n      width: 100%;\n      justify-content: center;\n      align-items: center;\n      // flex-direction: column;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n    }\n  }\n  .imageBox {\n    width: 100%;\n    height: 63%;\n    border-radius: 30px;\n\n    z-index: 1;\n    overflow: hidden;\n  }\n  .Inf {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n  .NFTImage {\n    object-fit: cover;\n    width: 100%;\n    transition: all 0.6s;\n    cursor: pointer;\n\n    overflow: hidden;\n    &:hover {\n      transform: scale(1.1);\n\n      transition: all 0.6s;\n    }\n  }\n  .NFTName {\n    display: inline-block;\n    color: var(--Dark--);\n    font-weight: 800;\n    text-align: left;\n    margin-top: 20px;\n    font-size: 13px;\n  }\n  .ownerAndToSell {\n    width: 100%;\n    display: flex;\n    margin-top: 18px;\n    justify-content: center;\n    align-items: center;\n  }\n  .ToSellBox {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n  }\n\n  .ToSellinnerBox {\n    margin: 2%;\n    width: 82.79px;\n    padding: 8px 0px 8px 0px;\n    color: #55c960;\n    background-color: rgba(85, 201, 96, 0.12);\n    border-radius: 10px;\n    cursor: pointer;\n    transition: all 0.3s ease-in-out;\n    &:hover {\n      background-color: rgba(85, 201, 96, 0.24);\n      transition: all 0.3s ease-in-out;\n    }\n  }\n  .downSale{\n    @extend .ToSellinnerBox;\n    background-color: #d63131e5;\n    color: white;\n    &:hover {\n      background-color: rgb(255, 0, 0);\n      transition: all 0.3s ease-in-out;\n    }\n  }\n  .apporve {\n    font-size: 12px;\n    font-weight: 800;\n  }\n  .ToSellHeader {\n    display: flex;\n    justify-content: space-between;\n    width: 95%;\n    height: 10%;\n    font-size: 25px;\n    margin-top: 3%;\n    border-radius: 30px;\n    padding: 3.5% 0;\n    font-weight: 800;\n    color: var(--Dark--);\n  }\n  .ToSellHeaderBox {\n    width: 100%;\n    text-align: center;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n  }\n}\n</style>\n"],"mappings":"AAmEA,SAAAA,MAAA,EAAAC,QAAA;AACA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,cAAA;MACAC,kBAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,kBAAA;MACAG,eAAA;MACAC,OAAA;MACAC,QAAA;MACAC,KAAA;IAEA;EACA;EACAC,QAAA;IACA,KAAAR,cAAA,QAAAE,MAAA,CAAAC,KAAA,CAAAM,YAAA;EACA;EACAC,OAAA;IACA,MAAAC,SAAAC,GAAA;MACA,MAAAf,QAAA,CAAAe,GAAA;MACA,KAAAZ,cAAA,QAAAE,MAAA,CAAAC,KAAA,CAAAM,YAAA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAAb,OAAAgB,GAAA;MACA,IAAAC,MAAA,CAAAD,GAAA,CAAAE,KAAA,UAAAF,GAAA,CAAAE,KAAA;QACA;MACA;MACA,MAAAlB,MAAA,CAAAgB,GAAA;MACA,KAAAZ,cAAA,cAAAE,MAAA,CAAAC,KAAA,CAAAM,YAAA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}