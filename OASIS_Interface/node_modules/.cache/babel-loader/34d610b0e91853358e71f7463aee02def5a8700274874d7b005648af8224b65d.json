{"ast":null,"code":"import { parseIP } from \"@chainsafe/is-ip/parse\";\nimport { cidrMask, parseCidr } from \"./cidr.js\";\nimport { containsIp, maskIp } from \"./ip.js\";\nimport { ipToString, maskToHex, simpleMaskLength } from \"./util.js\";\nexport class IpNet {\n  /**\n   *\n   * @param ipOrCidr either network ip or full cidr address\n   * @param mask in case ipOrCidr is network this can be either mask in decimal format or as ip address\n   */\n  constructor(ipOrCidr, mask) {\n    if (mask == null) {\n      ({\n        network: this.network,\n        mask: this.mask\n      } = parseCidr(ipOrCidr));\n    } else {\n      const ipResult = parseIP(ipOrCidr);\n      if (ipResult == null) {\n        throw new Error(\"Failed to parse network\");\n      }\n      mask = String(mask);\n      const m = parseInt(mask, 10);\n      if (Number.isNaN(m) || String(m).length !== mask.length || m < 0 || m > ipResult.length * 8) {\n        const maskResult = parseIP(mask);\n        if (maskResult == null) {\n          throw new Error(\"Failed to parse mask\");\n        }\n        this.mask = maskResult;\n      } else {\n        this.mask = cidrMask(m, 8 * ipResult.length);\n      }\n      this.network = maskIp(ipResult, this.mask);\n    }\n  }\n  /**\n   * Checks if netmask contains ip address\n   * @param ip\n   * @returns\n   */\n  contains(ip) {\n    return containsIp({\n      network: this.network,\n      mask: this.mask\n    }, ip);\n  }\n  /**Serializes back to string format */\n  toString() {\n    const l = simpleMaskLength(this.mask);\n    const mask = l !== -1 ? String(l) : maskToHex(this.mask);\n    return ipToString(this.network) + \"/\" + mask;\n  }\n}","map":{"version":3,"names":["parseIP","cidrMask","parseCidr","containsIp","maskIp","ipToString","maskToHex","simpleMaskLength","IpNet","constructor","ipOrCidr","mask","network","ipResult","Error","String","m","parseInt","Number","isNaN","length","maskResult","contains","ip","toString","l"],"sources":["../../src/ipnet.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,WAAW;AAC/C,SAASC,UAAU,EAAEC,MAAM,QAAQ,SAAS;AAC5C,SAASC,UAAU,EAAEC,SAAS,EAAEC,gBAAgB,QAAQ,WAAW;AAEnE,OAAM,MAAOC,KAAK;EAIhB;;;;;EAKAC,YAAYC,QAAgB,EAAEC,IAAsB;IAClD,IAAIA,IAAI,IAAI,IAAI,EAAE;MAChB,CAAC;QAAEC,OAAO,EAAE,IAAI,CAACA,OAAO;QAAED,IAAI,EAAE,IAAI,CAACA;MAAI,CAAE,GAAGT,SAAS,CAACQ,QAAQ,CAAC;KAClE,MAAM;MACL,MAAMG,QAAQ,GAAGb,OAAO,CAACU,QAAQ,CAAC;MAClC,IAAIG,QAAQ,IAAI,IAAI,EAAE;QACpB,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;;MAE5CH,IAAI,GAAGI,MAAM,CAACJ,IAAI,CAAC;MACnB,MAAMK,CAAC,GAAGC,QAAQ,CAACN,IAAI,EAAE,EAAE,CAAC;MAC5B,IACEO,MAAM,CAACC,KAAK,CAACH,CAAC,CAAC,IACfD,MAAM,CAACC,CAAC,CAAC,CAACI,MAAM,KAAKT,IAAI,CAACS,MAAM,IAChCJ,CAAC,GAAG,CAAC,IACLA,CAAC,GAAGH,QAAQ,CAACO,MAAM,GAAG,CAAC,EACvB;QACA,MAAMC,UAAU,GAAGrB,OAAO,CAACW,IAAI,CAAC;QAChC,IAAIU,UAAU,IAAI,IAAI,EAAE;UACtB,MAAM,IAAIP,KAAK,CAAC,sBAAsB,CAAC;;QAEzC,IAAI,CAACH,IAAI,GAAGU,UAAU;OACvB,MAAM;QACL,IAAI,CAACV,IAAI,GAAGV,QAAQ,CAACe,CAAC,EAAE,CAAC,GAAGH,QAAQ,CAACO,MAAM,CAAC;;MAE9C,IAAI,CAACR,OAAO,GAAGR,MAAM,CAACS,QAAQ,EAAE,IAAI,CAACF,IAAI,CAAC;;EAE9C;EAEA;;;;;EAKAW,QAAQA,CAACC,EAAkC;IACzC,OAAOpB,UAAU,CAAC;MAAES,OAAO,EAAE,IAAI,CAACA,OAAO;MAAED,IAAI,EAAE,IAAI,CAACA;IAAI,CAAE,EAAEY,EAAE,CAAC;EACnE;EAEA;EACAC,QAAQA,CAAA;IACN,MAAMC,CAAC,GAAGlB,gBAAgB,CAAC,IAAI,CAACI,IAAI,CAAC;IACrC,MAAMA,IAAI,GAAGc,CAAC,KAAK,CAAC,CAAC,GAAGV,MAAM,CAACU,CAAC,CAAC,GAAGnB,SAAS,CAAC,IAAI,CAACK,IAAI,CAAC;IACxD,OAAON,UAAU,CAAC,IAAI,CAACO,OAAO,CAAC,GAAG,GAAG,GAAGD,IAAI;EAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}