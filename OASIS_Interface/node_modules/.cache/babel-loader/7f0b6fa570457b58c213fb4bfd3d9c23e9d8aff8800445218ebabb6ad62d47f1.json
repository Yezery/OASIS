{"ast":null,"code":"import varint from 'varint';\nimport { Uint8ArrayList } from 'uint8arraylist';\nimport { allocUnsafe } from './alloc-unsafe.js';\nimport { MessageTypes } from './message-types.js';\nimport batchedBytes from 'it-batched-bytes';\nconst POOL_SIZE = 10 * 1024;\nclass Encoder {\n  constructor() {\n    this._pool = allocUnsafe(POOL_SIZE);\n    this._poolOffset = 0;\n  }\n  /**\n   * Encodes the given message and adds it to the passed list\n   */\n  write(msg, list) {\n    const pool = this._pool;\n    let offset = this._poolOffset;\n    varint.encode(msg.id << 3 | msg.type, pool, offset);\n    offset += varint.encode.bytes ?? 0;\n    if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n      varint.encode(msg.data.length, pool, offset);\n    } else {\n      varint.encode(0, pool, offset);\n    }\n    offset += varint.encode.bytes ?? 0;\n    const header = pool.subarray(this._poolOffset, offset);\n    if (POOL_SIZE - offset < 100) {\n      this._pool = allocUnsafe(POOL_SIZE);\n      this._poolOffset = 0;\n    } else {\n      this._poolOffset = offset;\n    }\n    list.append(header);\n    if ((msg.type === MessageTypes.NEW_STREAM || msg.type === MessageTypes.MESSAGE_INITIATOR || msg.type === MessageTypes.MESSAGE_RECEIVER) && msg.data != null) {\n      list.append(msg.data);\n    }\n  }\n}\nconst encoder = new Encoder();\n/**\n * Encode and yield one or more messages\n */\nexport async function* encode(source, minSendBytes = 0) {\n  if (minSendBytes == null || minSendBytes === 0) {\n    // just send the messages\n    for await (const messages of source) {\n      const list = new Uint8ArrayList();\n      for (const msg of messages) {\n        encoder.write(msg, list);\n      }\n      yield list.subarray();\n    }\n    return;\n  }\n  // batch messages up for sending\n  yield* batchedBytes(source, {\n    size: minSendBytes,\n    serialize: (obj, list) => {\n      for (const m of obj) {\n        encoder.write(m, list);\n      }\n    }\n  });\n}","map":{"version":3,"names":["varint","Uint8ArrayList","allocUnsafe","MessageTypes","batchedBytes","POOL_SIZE","Encoder","constructor","_pool","_poolOffset","write","msg","list","pool","offset","encode","id","type","bytes","NEW_STREAM","MESSAGE_INITIATOR","MESSAGE_RECEIVER","data","length","header","subarray","append","encoder","source","minSendBytes","messages","size","serialize","obj","m"],"sources":["../../src/encode.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}