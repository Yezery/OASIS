{"ast":null,"code":"/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js';\nimport { logger } from '@libp2p/logger';\nimport PQueue from 'p-queue';\nconst log = logger('ipfs:preload');\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue;\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({\n  concurrency: 4\n});\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload(url, options = {}) {\n  log(url);\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, {\n      signal: options.signal\n    });\n\n    // @ts-expect-error\n    const reader = res.body.getReader();\n    try {\n      while (true) {\n        const {\n          done\n        } = await reader.read();\n        if (done) return;\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}","map":{"version":3,"names":["HTTP","logger","PQueue","log","Queue","default","httpQueue","concurrency","preload","url","options","add","res","post","signal","reader","body","getReader","done","read","releaseLock"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-config@0.7.1/node_modules/ipfs-core-config/src/preload.browser.js"],"sourcesContent":["/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"],"mappings":"AAAA;;AAEA,OAAOA,IAAI,MAAM,wBAAwB;AACzC,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAOC,MAAM,MAAM,SAAS;AAE5B,MAAMC,GAAG,GAAGF,MAAM,CAAC,cAAc,CAAC;;AAElC;AACA,MAAMG,KAAK,GAAGF,MAAM,CAACG,OAAO,GAAGH,MAAM,CAACG,OAAO,GAAGH,MAAM;;AAEtD;AACA;AACA,MAAMI,SAAS,GAAG,IAAIF,KAAK,CAAC;EAAEG,WAAW,EAAE;AAAE,CAAC,CAAC;;AAE/C;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAAEC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC1CP,GAAG,CAACM,GAAG,CAAC;EAER,OAAOH,SAAS,CAACK,GAAG,CAAC,YAAY;IAC/B,MAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACa,IAAI,CAACJ,GAAG,EAAE;MAAEK,MAAM,EAAEJ,OAAO,CAACI;IAAO,CAAC,CAAC;;IAE5D;IACA,MAAMC,MAAM,GAAGH,GAAG,CAACI,IAAI,CAACC,SAAS,CAAC,CAAC;IAEnC,IAAI;MACF,OAAO,IAAI,EAAE;QACX,MAAM;UAAEC;QAAK,CAAC,GAAG,MAAMH,MAAM,CAACI,IAAI,CAAC,CAAC;QACpC,IAAID,IAAI,EAAE;QACV;MACF;IACF,CAAC,SAAS;MACRH,MAAM,CAACK,WAAW,CAAC,CAAC;IACtB;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}