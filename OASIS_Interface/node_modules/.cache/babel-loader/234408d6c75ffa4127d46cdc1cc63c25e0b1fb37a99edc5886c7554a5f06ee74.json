{"ast":null,"code":"'use strict';\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nconst MAX_BYTES = 65536;\n\n/**\n * @param {number} size\n */\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size);\n  let generated = 0;\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(bytes.subarray(generated, generated + (size - generated)));\n          generated += size - generated;\n        } else {\n          crypto.getRandomValues(bytes.subarray(generated, generated + MAX_BYTES));\n          generated += MAX_BYTES;\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes);\n    }\n  }\n  return bytes;\n}\nmodule.exports = randomBytes;","map":{"version":3,"names":["require","MAX_BYTES","randomBytes","size","bytes","Uint8Array","generated","crypto","getRandomValues","subarray","module","exports"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/iso-random-stream@2.0.2/node_modules/iso-random-stream/src/random.browser.js"],"sourcesContent":["'use strict'\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536\n\n/**\n * @param {number} size\n */\nfunction randomBytes(size) {\n  const bytes = new Uint8Array(size)\n  let generated = 0\n\n  if (size > 0) {\n    // getRandomValues fails on IE if size == 0\n    if (size > MAX_BYTES) {\n      while (generated < size) {\n        if (generated + MAX_BYTES > size) {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + (size - generated))\n          )\n          generated += size - generated\n        } else {\n          crypto.getRandomValues(\n            bytes.subarray(generated, generated + MAX_BYTES)\n          )\n          generated += MAX_BYTES\n        }\n      }\n    } else {\n      crypto.getRandomValues(bytes)\n    }\n  }\n\n  return bytes\n}\n\nmodule.exports = randomBytes\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AAAAA,OAAA;AAAAA,OAAA;AAAAA,OAAA;AACA,MAAMC,SAAS,GAAG,KAAK;;AAEvB;AACA;AACA;AACA,SAASC,WAAWA,CAACC,IAAI,EAAE;EACzB,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACF,IAAI,CAAC;EAClC,IAAIG,SAAS,GAAG,CAAC;EAEjB,IAAIH,IAAI,GAAG,CAAC,EAAE;IACZ;IACA,IAAIA,IAAI,GAAGF,SAAS,EAAE;MACpB,OAAOK,SAAS,GAAGH,IAAI,EAAE;QACvB,IAAIG,SAAS,GAAGL,SAAS,GAAGE,IAAI,EAAE;UAChCI,MAAM,CAACC,eAAe,CACpBJ,KAAK,CAACK,QAAQ,CAACH,SAAS,EAAEA,SAAS,IAAIH,IAAI,GAAGG,SAAS,CAAC,CAC1D,CAAC;UACDA,SAAS,IAAIH,IAAI,GAAGG,SAAS;QAC/B,CAAC,MAAM;UACLC,MAAM,CAACC,eAAe,CACpBJ,KAAK,CAACK,QAAQ,CAACH,SAAS,EAAEA,SAAS,GAAGL,SAAS,CACjD,CAAC;UACDK,SAAS,IAAIL,SAAS;QACxB;MACF;IACF,CAAC,MAAM;MACLM,MAAM,CAACC,eAAe,CAACJ,KAAK,CAAC;IAC/B;EACF;EAEA,OAAOA,KAAK;AACd;AAEAM,MAAM,CAACC,OAAO,GAAGT,WAAW"},"metadata":{},"sourceType":"script","externalDependencies":[]}