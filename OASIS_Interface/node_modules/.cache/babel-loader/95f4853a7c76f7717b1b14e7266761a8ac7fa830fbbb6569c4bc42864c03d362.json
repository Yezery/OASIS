{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nconst PBData = Pb.Data;\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 0xFFF;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF;\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF;\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime;\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n   // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n     mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor(options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options;\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode() {\n    return this._mode;\n  }\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize() {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (this.data) {\n      sum += this.data.length;\n    }\n    return sum;\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal() {\n    let type;\n    switch (this.type) {\n      case 'raw':\n        type = PBData.DataType.Raw;\n        break;\n      case 'directory':\n        type = PBData.DataType.Directory;\n        break;\n      case 'file':\n        type = PBData.DataType.File;\n        break;\n      case 'metadata':\n        type = PBData.DataType.Metadata;\n        break;\n      case 'symlink':\n        type = PBData.DataType.Symlink;\n        break;\n      case 'hamt-sharded-directory':\n        type = PBData.DataType.HAMTShard;\n        break;\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let mode;\n    if (this.mode != null) {\n      mode = this._originalMode & 0xFFFFF000 | (parseMode(this.mode) || 0);\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n    let mtime;\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n}\nexport { UnixFS };","map":{"version":3,"names":["errcode","Pb","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error","UnixFS","unmarshal","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects","data","type","Type","blockSizes","blocksizes","_originalMode","constructor","options","hashType","fanout","includes","_mode","isDirectory","parsedMode","Boolean","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","filesize","encode","finish"],"sources":["/Users/yezery/OASIS/OASIS_Interface/node_modules/.store/ipfs-unixfs@9.0.1/node_modules/ipfs-unixfs/src/index.js"],"sourcesContent":["import errcode from 'err-code'\nimport * as Pb from './unixfs.js'\nconst PBData = Pb.Data\n\n/**\n * @typedef {import('./types').Mtime} Mtime\n * @typedef {import('./types').MtimeLike} MtimeLike\n */\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nconst DEFAULT_FILE_MODE = parseInt('0644', 8)\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8)\n\n/**\n * @param {string | number | undefined} [mode]\n */\nexport function parseMode (mode) {\n  if (mode == null) {\n    return undefined\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 0xFFF\n  }\n\n  mode = mode.toString()\n\n  if (mode.substring(0, 1) === '0') {\n    // octal string\n    return parseInt(mode, 8) & 0xFFF\n  }\n\n  // decimal string\n  return parseInt(mode, 10) & 0xFFF\n}\n\n/**\n * @param {any} input\n */\nexport function parseMtime (input) {\n  if (input == null) {\n    return undefined\n  }\n\n  /** @type {Mtime | undefined} */\n  let mtime\n\n  // { secs, nsecs }\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    }\n  }\n\n  // UnixFS TimeSpec\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    }\n  }\n\n  // process.hrtime()\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    }\n  }\n\n  // Javascript Date\n  if (input instanceof Date) {\n    const ms = input.getTime()\n    const secs = Math.floor(ms / 1000)\n\n    mtime = {\n      secs: secs,\n      nsecs: (ms - (secs * 1000)) * 1000\n    }\n  }\n\n  /*\n  TODO: https://github.com/ipfs/aegir/issues/487\n\n  // process.hrtime.bigint()\n  if (input instanceof BigInt) {\n    const secs = input / BigInt(1e9)\n    const nsecs = input - (secs * BigInt(1e9))\n\n    mtime = {\n      secs: parseInt(secs.toString()),\n      nsecs: parseInt(nsecs.toString())\n    }\n  }\n  */\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS')\n  }\n\n  return mtime\n}\n\nclass UnixFS {\n  /**\n   * Decode from protobuf https://github.com/ipfs/specs/blob/master/UNIXFS.md\n   *\n   * @param {Uint8Array} marshaled\n   */\n  static unmarshal (marshaled) {\n    const message = PBData.decode(marshaled)\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    })\n\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime\n        ? {\n            secs: decoded.mtime.Seconds,\n            nsecs: decoded.mtime.FractionalNanoseconds\n          }\n        : undefined\n    })\n\n    // make sure we honour the original mode\n    data._originalMode = decoded.mode || 0\n\n    return data\n  }\n\n  /**\n   * @param {object} [options]\n   * @param {string} [options.type='file']\n   * @param {Uint8Array} [options.data]\n   * @param {number[]} [options.blockSizes]\n   * @param {number} [options.hashType]\n   * @param {number} [options.fanout]\n   * @param {MtimeLike | null} [options.mtime]\n   * @param {number | string} [options.mode]\n   */\n  constructor (options = {\n    type: 'file'\n  }) {\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    this.type = type || 'file'\n    this.data = data\n    this.hashType = hashType\n    this.fanout = fanout\n\n    /** @type {number[]} */\n    this.blockSizes = blockSizes || []\n    this._originalMode = 0\n    this.mode = parseMode(mode)\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime)\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0\n      }\n    }\n  }\n\n  /**\n   * @param {number | undefined} mode\n   */\n  set mode (mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE\n\n    const parsedMode = parseMode(mode)\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode\n    }\n  }\n\n  /**\n   * @returns {number | undefined}\n   */\n  get mode () {\n    return this._mode\n  }\n\n  isDirectory () {\n    return Boolean(this.type && dirTypes.includes(this.type))\n  }\n\n  /**\n   * @param {number} size\n   */\n  addBlockSize (size) {\n    this.blockSizes.push(size)\n  }\n\n  /**\n   * @param {number} index\n   */\n  removeBlockSize (index) {\n    this.blockSizes.splice(index, 1)\n  }\n\n  /**\n   * Returns `0` for directories or `data.length + sum(blockSizes)` for everything else\n   */\n  fileSize () {\n    if (this.isDirectory()) {\n      // dirs don't have file size\n      return 0\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n\n    if (this.data) {\n      sum += this.data.length\n    }\n\n    return sum\n  }\n\n  /**\n   * encode to protobuf Uint8Array\n   */\n  marshal () {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = PBData.DataType.Raw; break\n      case 'directory': type = PBData.DataType.Directory; break\n      case 'file': type = PBData.DataType.File; break\n      case 'metadata': type = PBData.DataType.Metadata; break\n      case 'symlink': type = PBData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = PBData.DataType.HAMTShard; break\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE')\n    }\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let mode\n\n    if (this.mode != null) {\n      mode = (this._originalMode & 0xFFFFF000) | (parseMode(this.mode) || 0)\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined\n      }\n    }\n\n    let mtime\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime)\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        }\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    }\n\n    return PBData.encode(pbData).finish()\n  }\n}\n\nexport { UnixFS }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}