{"ast":null,"code":"import { Uint8ArrayList } from 'uint8arraylist';\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function* fixedSizeChunker(source, options) {\n  let list = new Uint8ArrayList();\n  let currentLength = 0;\n  let emitted = false;\n  const maxChunkSize = options.maxChunkSize;\n  for await (const buffer of source) {\n    list.append(buffer);\n    currentLength += buffer.length;\n    while (currentLength >= maxChunkSize) {\n      yield list.slice(0, maxChunkSize);\n      emitted = true;\n\n      // throw away consumed bytes\n      if (maxChunkSize === list.length) {\n        list = new Uint8ArrayList();\n        currentLength = 0;\n      } else {\n        const newBl = new Uint8ArrayList();\n        newBl.append(list.sublist(maxChunkSize));\n        list = newBl;\n\n        // update our offset\n        currentLength -= maxChunkSize;\n      }\n    }\n  }\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield list.subarray(0, currentLength);\n  }\n}\nexport default fixedSizeChunker;","map":{"version":3,"names":["Uint8ArrayList","fixedSizeChunker","source","options","list","currentLength","emitted","maxChunkSize","buffer","append","length","slice","newBl","sublist","subarray"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-unixfs-importer@12.0.1/node_modules/ipfs-unixfs-importer/src/chunker/fixed-size.js"],"sourcesContent":["import { Uint8ArrayList } from 'uint8arraylist'\n\n/**\n * @type {import('../types').Chunker}\n */\nasync function * fixedSizeChunker (source, options) {\n  let list = new Uint8ArrayList()\n  let currentLength = 0\n  let emitted = false\n  const maxChunkSize = options.maxChunkSize\n\n  for await (const buffer of source) {\n    list.append(buffer)\n\n    currentLength += buffer.length\n\n    while (currentLength >= maxChunkSize) {\n      yield list.slice(0, maxChunkSize)\n      emitted = true\n\n      // throw away consumed bytes\n      if (maxChunkSize === list.length) {\n        list = new Uint8ArrayList()\n        currentLength = 0\n      } else {\n        const newBl = new Uint8ArrayList()\n        newBl.append(list.sublist(maxChunkSize))\n        list = newBl\n\n        // update our offset\n        currentLength -= maxChunkSize\n      }\n    }\n  }\n\n  if (!emitted || currentLength) {\n    // return any remaining bytes or an empty buffer\n    yield list.subarray(0, currentLength)\n  }\n}\n\nexport default fixedSizeChunker\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,gBAAgB;;AAE/C;AACA;AACA;AACA,gBAAiBC,gBAAgBA,CAAEC,MAAM,EAAEC,OAAO,EAAE;EAClD,IAAIC,IAAI,GAAG,IAAIJ,cAAc,CAAC,CAAC;EAC/B,IAAIK,aAAa,GAAG,CAAC;EACrB,IAAIC,OAAO,GAAG,KAAK;EACnB,MAAMC,YAAY,GAAGJ,OAAO,CAACI,YAAY;EAEzC,WAAW,MAAMC,MAAM,IAAIN,MAAM,EAAE;IACjCE,IAAI,CAACK,MAAM,CAACD,MAAM,CAAC;IAEnBH,aAAa,IAAIG,MAAM,CAACE,MAAM;IAE9B,OAAOL,aAAa,IAAIE,YAAY,EAAE;MACpC,MAAMH,IAAI,CAACO,KAAK,CAAC,CAAC,EAAEJ,YAAY,CAAC;MACjCD,OAAO,GAAG,IAAI;;MAEd;MACA,IAAIC,YAAY,KAAKH,IAAI,CAACM,MAAM,EAAE;QAChCN,IAAI,GAAG,IAAIJ,cAAc,CAAC,CAAC;QAC3BK,aAAa,GAAG,CAAC;MACnB,CAAC,MAAM;QACL,MAAMO,KAAK,GAAG,IAAIZ,cAAc,CAAC,CAAC;QAClCY,KAAK,CAACH,MAAM,CAACL,IAAI,CAACS,OAAO,CAACN,YAAY,CAAC,CAAC;QACxCH,IAAI,GAAGQ,KAAK;;QAEZ;QACAP,aAAa,IAAIE,YAAY;MAC/B;IACF;EACF;EAEA,IAAI,CAACD,OAAO,IAAID,aAAa,EAAE;IAC7B;IACA,MAAMD,IAAI,CAACU,QAAQ,CAAC,CAAC,EAAET,aAAa,CAAC;EACvC;AACF;AAEA,eAAeJ,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}