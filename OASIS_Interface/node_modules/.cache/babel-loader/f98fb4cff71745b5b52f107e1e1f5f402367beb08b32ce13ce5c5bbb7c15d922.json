{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomStringForEntropy = exports.randomString = exports.randomUint32 = exports.randomBytes = exports.defaultRandomSource = void 0;\nconst system_1 = require(\"./source/system\");\nconst binary_1 = require(\"@stablelib/binary\");\nconst wipe_1 = require(\"@stablelib/wipe\");\nexports.defaultRandomSource = new system_1.SystemRandomSource();\nfunction randomBytes(length, prng = exports.defaultRandomSource) {\n  return prng.randomBytes(length);\n}\nexports.randomBytes = randomBytes;\n/**\n * Returns a uniformly random unsigned 32-bit integer.\n */\nfunction randomUint32(prng = exports.defaultRandomSource) {\n  // Generate 4-byte random buffer.\n  const buf = randomBytes(4, prng);\n  // Convert bytes from buffer into a 32-bit integer.\n  // It's not important which byte order to use, since\n  // the result is random.\n  const result = (0, binary_1.readUint32LE)(buf);\n  // Clean the buffer.\n  (0, wipe_1.wipe)(buf);\n  return result;\n}\nexports.randomUint32 = randomUint32;\n/** 62 alphanumeric characters for default charset of randomString() */\nconst ALPHANUMERIC = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\";\n/**\n * Returns a uniform random string of the given length\n * with characters from the given charset.\n *\n * Charset must not have more than 256 characters.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomString(length, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n  if (charset.length < 2) {\n    throw new Error(\"randomString charset is too short\");\n  }\n  if (charset.length > 256) {\n    throw new Error(\"randomString charset is too long\");\n  }\n  let out = '';\n  const charsLen = charset.length;\n  const maxByte = 256 - 256 % charsLen;\n  while (length > 0) {\n    const buf = randomBytes(Math.ceil(length * 256 / maxByte), prng);\n    for (let i = 0; i < buf.length && length > 0; i++) {\n      const randomByte = buf[i];\n      if (randomByte < maxByte) {\n        out += charset.charAt(randomByte % charsLen);\n        length--;\n      }\n    }\n    (0, wipe_1.wipe)(buf);\n  }\n  return out;\n}\nexports.randomString = randomString;\n/**\n * Returns uniform random string containing at least the given\n * number of bits of entropy.\n *\n * For example, randomStringForEntropy(128) will return a 22-character\n * alphanumeric string, while randomStringForEntropy(128, \"0123456789\")\n * will return a 39-character numeric string, both will contain at\n * least 128 bits of entropy.\n *\n * Default charset generates case-sensitive alphanumeric\n * strings (0-9, A-Z, a-z).\n */\nfunction randomStringForEntropy(bits, charset = ALPHANUMERIC, prng = exports.defaultRandomSource) {\n  const length = Math.ceil(bits / (Math.log(charset.length) / Math.LN2));\n  return randomString(length, charset, prng);\n}\nexports.randomStringForEntropy = randomStringForEntropy;","map":{"version":3,"names":["system_1","require","binary_1","wipe_1","exports","defaultRandomSource","SystemRandomSource","randomBytes","length","prng","randomUint32","buf","result","readUint32LE","wipe","ALPHANUMERIC","randomString","charset","Error","out","charsLen","maxByte","Math","ceil","i","randomByte","charAt","randomStringForEntropy","bits","log","LN2"],"sources":["../random.ts"],"sourcesContent":[null],"mappings":";;AAAA;AACA;;;;;AAQA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AACA,MAAAE,MAAA,GAAAF,OAAA;AAIaG,OAAA,CAAAC,mBAAmB,GAAG,IAAIL,QAAA,CAAAM,kBAAkB,EAAE;AAE3D,SAAgBC,WAAWA,CAACC,MAAc,EAAEC,IAAA,GAAqBL,OAAA,CAAAC,mBAAmB;EAChF,OAAOI,IAAI,CAACF,WAAW,CAACC,MAAM,CAAC;AACnC;AAFAJ,OAAA,CAAAG,WAAA,GAAAA,WAAA;AAIA;;;AAGA,SAAgBG,YAAYA,CAACD,IAAA,GAAqBL,OAAA,CAAAC,mBAAmB;EACjE;EACA,MAAMM,GAAG,GAAGJ,WAAW,CAAC,CAAC,EAAEE,IAAI,CAAC;EAEhC;EACA;EACA;EACA,MAAMG,MAAM,GAAG,IAAAV,QAAA,CAAAW,YAAY,EAACF,GAAG,CAAC;EAEhC;EACA,IAAAR,MAAA,CAAAW,IAAI,EAACH,GAAG,CAAC;EAET,OAAOC,MAAM;AACjB;AAbAR,OAAA,CAAAM,YAAA,GAAAA,YAAA;AAeA;AACA,MAAMK,YAAY,GAAG,gEAAgE;AAErF;;;;;;;;;AASA,SAAgBC,YAAYA,CACxBR,MAAc,EACdS,OAAO,GAAGF,YAAY,EACtBN,IAAA,GAAqBL,OAAA,CAAAC,mBAAmB;EAExC,IAAIY,OAAO,CAACT,MAAM,GAAG,CAAC,EAAE;IACpB,MAAM,IAAIU,KAAK,CAAC,mCAAmC,CAAC;;EAExD,IAAID,OAAO,CAACT,MAAM,GAAG,GAAG,EAAE;IACtB,MAAM,IAAIU,KAAK,CAAC,kCAAkC,CAAC;;EAEvD,IAAIC,GAAG,GAAG,EAAE;EACZ,MAAMC,QAAQ,GAAGH,OAAO,CAACT,MAAM;EAC/B,MAAMa,OAAO,GAAG,GAAG,GAAI,GAAG,GAAGD,QAAS;EACtC,OAAOZ,MAAM,GAAG,CAAC,EAAE;IACf,MAAMG,GAAG,GAAGJ,WAAW,CAACe,IAAI,CAACC,IAAI,CAACf,MAAM,GAAG,GAAG,GAAGa,OAAO,CAAC,EAAEZ,IAAI,CAAC;IAChE,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,GAAG,CAACH,MAAM,IAAIA,MAAM,GAAG,CAAC,EAAEgB,CAAC,EAAE,EAAE;MAC/C,MAAMC,UAAU,GAAGd,GAAG,CAACa,CAAC,CAAC;MACzB,IAAIC,UAAU,GAAGJ,OAAO,EAAE;QACtBF,GAAG,IAAIF,OAAO,CAACS,MAAM,CAACD,UAAU,GAAGL,QAAQ,CAAC;QAC5CZ,MAAM,EAAE;;;IAGhB,IAAAL,MAAA,CAAAW,IAAI,EAACH,GAAG,CAAC;;EAEb,OAAOQ,GAAG;AACd;AA1BAf,OAAA,CAAAY,YAAA,GAAAA,YAAA;AA4BA;;;;;;;;;;;;AAYA,SAAgBW,sBAAsBA,CAClCC,IAAY,EACZX,OAAO,GAAGF,YAAY,EACtBN,IAAA,GAAqBL,OAAA,CAAAC,mBAAmB;EAExC,MAAMG,MAAM,GAAGc,IAAI,CAACC,IAAI,CAACK,IAAI,IAAIN,IAAI,CAACO,GAAG,CAACZ,OAAO,CAACT,MAAM,CAAC,GAAGc,IAAI,CAACQ,GAAG,CAAC,CAAC;EACtE,OAAOd,YAAY,CAACR,MAAM,EAAES,OAAO,EAAER,IAAI,CAAC;AAC9C;AAPAL,OAAA,CAAAuB,sBAAA,GAAAA,sBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}