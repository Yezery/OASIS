{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { createUnsafe } from 'multiformats/block';\nimport { CarWriter } from '@ipld/car/writer';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { logger } from '@libp2p/logger';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as json from 'multiformats/codecs/json';\nimport { walk } from 'multiformats/traversal';\nconst log = logger('ipfs:components:dag:import');\n\n// blocks that we're OK with not inspecting for links\n/** @type {number[]} */\nconst NO_LINKS_CODECS = [raw.code,\n// raw\njson.code // JSON\n];\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('@ipld/car/api').BlockWriter} BlockWriter\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template T\n * @template C\n * @template A\n * @template V\n * @typedef {import('multiformats/block').Block<T, C, A, V>} Block\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Preload} config.preload\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createExport({\n  repo,\n  preload,\n  codecs\n}) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"export\"]}\n   */\n  async function* dagExport(root, options = {}) {\n    if (options.preload !== false) {\n      preload(root);\n    }\n    const cid = CID.asCID(root);\n    if (!cid) {\n      throw new Error(`Unexpected error converting CID type: ${root}`);\n    }\n    log(`Exporting ${cid} as car`);\n    const {\n      writer,\n      out\n    } = await CarWriter.create([cid]);\n\n    // we need to write with one async channel and send the CarWriter output\n    // with another to the caller, but if the write causes an error we capture\n    // that and make sure it gets propagated\n    /** @type {Error|null} */\n    let err = null;\n    (async () => {\n      try {\n        const load = makeLoader(repo, writer, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs);\n        await walk({\n          cid,\n          load\n        });\n      } catch ( /** @type {any} */e) {\n        err = e;\n      } finally {\n        writer.close();\n      }\n    })();\n    for await (const chunk of out) {\n      if (err) {\n        break;\n      }\n      yield chunk;\n    }\n    if (err) {\n      throw err;\n    }\n  }\n  return withTimeoutOption(dagExport);\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {BlockWriter} writer\n * @param {AbortOptions} options\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @returns {(cid:CID)=>Promise<ReturnType<createUnsafe>|null>}\n */\nfunction makeLoader(repo, writer, options, codecs) {\n  return async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`);\n    }\n    const bytes = await repo.blocks.get(cid, options);\n    log(`Adding block ${cid} to car`);\n    await writer.put({\n      cid,\n      bytes\n    });\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null; // skip this block, no need to look inside\n    }\n\n    return createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n  };\n}","map":{"version":3,"names":["CID","createUnsafe","CarWriter","withTimeoutOption","logger","raw","json","walk","log","NO_LINKS_CODECS","code","createExport","repo","preload","codecs","dagExport","root","options","cid","asCID","Error","writer","out","create","err","load","makeLoader","signal","timeout","e","close","chunk","codec","getCodec","toString","bytes","blocks","get","put","includes"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/components/dag/export.js"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { createUnsafe } from 'multiformats/block'\nimport { CarWriter } from '@ipld/car/writer'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as json from 'multiformats/codecs/json'\nimport { walk } from 'multiformats/traversal'\n\nconst log = logger('ipfs:components:dag:import')\n\n// blocks that we're OK with not inspecting for links\n/** @type {number[]} */\nconst NO_LINKS_CODECS = [\n  raw.code, // raw\n  json.code // JSON\n]\n\n/**\n * @typedef {import('../../types').Preload} Preload\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('@ipld/car/api').BlockWriter} BlockWriter\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n */\n\n/**\n * @template T\n * @template C\n * @template A\n * @template V\n * @typedef {import('multiformats/block').Block<T, C, A, V>} Block\n */\n\n/**\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Preload} config.preload\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createExport ({ repo, preload, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"export\"]}\n   */\n  async function * dagExport (root, options = {}) {\n    if (options.preload !== false) {\n      preload(root)\n    }\n\n    const cid = CID.asCID(root)\n    if (!cid) {\n      throw new Error(`Unexpected error converting CID type: ${root}`)\n    }\n\n    log(`Exporting ${cid} as car`)\n    const { writer, out } = await CarWriter.create([cid])\n\n    // we need to write with one async channel and send the CarWriter output\n    // with another to the caller, but if the write causes an error we capture\n    // that and make sure it gets propagated\n    /** @type {Error|null} */\n    let err = null\n    ;(async () => {\n      try {\n        const load = makeLoader(repo, writer, {\n          signal: options.signal,\n          timeout: options.timeout\n        }, codecs)\n        await walk({ cid, load })\n      } catch (/** @type {any} */ e) {\n        err = e\n      } finally {\n        writer.close()\n      }\n    })()\n\n    for await (const chunk of out) {\n      if (err) {\n        break\n      }\n      yield chunk\n    }\n    if (err) {\n      throw err\n    }\n  }\n\n  return withTimeoutOption(dagExport)\n}\n\n/**\n * @param {IPFSRepo} repo\n * @param {BlockWriter} writer\n * @param {AbortOptions} options\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @returns {(cid:CID)=>Promise<ReturnType<createUnsafe>|null>}\n */\nfunction makeLoader (repo, writer, options, codecs) {\n  return async (cid) => {\n    const codec = await codecs.getCodec(cid.code)\n\n    if (!codec) {\n      throw new Error(`Can't decode links in block with codec 0x${cid.code.toString(16)} to form complete DAG`)\n    }\n\n    const bytes = await repo.blocks.get(cid, options)\n\n    log(`Adding block ${cid} to car`)\n    await writer.put({ cid, bytes })\n\n    if (NO_LINKS_CODECS.includes(cid.code)) {\n      return null // skip this block, no need to look inside\n    }\n\n    return createUnsafe({ bytes, cid, codec })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}