{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2':\n      {\n        const keyDType = getParamValue('keyDType', node, tensorMap, context);\n        const valueDType = getParamValue('valueDType', node, tensorMap, context);\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.import(keys, values)];\n      }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.find(keys, defaultValue)];\n      }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [hashTable.tensorSize()];\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'hash_table';","map":{"version":3,"names":["HashTable","getParamValue","executeOp","node","tensorMap","context","resourceManager","op","keyDType","valueDType","hashTable","addHashTable","name","handle","keys","values","getHashTableById","id","import","defaultValue","find","tensorSize","TypeError","CATEGORY"],"sources":["../../../../../../../tfjs-converter/src/operations/executors/hash_table_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAqBA,SAAQA,SAAS,QAAO,2BAA2B;AAInD,SAAQC,aAAa,QAAO,SAAS;AAErC,OAAO,MAAMC,SAAS,GAA4B,MAAAA,CAC9CC,IAAU,EAAEC,SAA0B,EAAEC,OAAyB,EACjEC,eAAgC,KAAuB;EACzD,QAAQH,IAAI,CAACI,EAAE;IACb,KAAK,WAAW;IAChB,KAAK,aAAa;MAAE;QAClB,MAAMC,QAAQ,GACVP,aAAa,CAAC,UAAU,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa;QACnE,MAAMI,UAAU,GACZR,aAAa,CAAC,YAAY,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAa;QAErE,MAAMK,SAAS,GAAG,IAAIV,SAAS,CAACQ,QAAQ,EAAEC,UAAU,CAAC;QACrDH,eAAe,CAACK,YAAY,CAACR,IAAI,CAACS,IAAI,EAAEF,SAAS,CAAC;QAClD,OAAO,CAACA,SAAS,CAACG,MAAM,CAAC;;IAE3B,KAAK,mBAAmB;IACxB,KAAK,qBAAqB;MAAE;QAC1B,MAAMA,MAAM,GAAGZ,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;QAC7C,MAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QACtE,MAAMU,MAAM,GACRd,aAAa,CAAC,QAAQ,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAE/D,MAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAgB,CAACH,MAAM,CAACI,EAAE,CAAC;QAE7D,OAAO,CAAC,MAAMP,SAAS,CAACQ,MAAM,CAACJ,IAAI,EAAEC,MAAM,CAAC,CAAC;;IAE/C,KAAK,iBAAiB;IACtB,KAAK,mBAAmB;MAAE;QACxB,MAAMF,MAAM,GAAGZ,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;QAC7C,MAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAM,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QACtE,MAAMc,YAAY,GACdlB,aAAa,CAAC,cAAc,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAW;QAErE,MAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAgB,CAACH,MAAM,CAACI,EAAE,CAAC;QAC7D,OAAO,CAAC,MAAMP,SAAS,CAACU,IAAI,CAACN,IAAI,EAAEK,YAAY,CAAC,CAAC;;IAEnD,KAAK,iBAAiB;IACtB,KAAK,mBAAmB;MAAE;QACxB,MAAMN,MAAM,GAAGZ,aAAa,CACT,aAAa,EAAEE,IAAI,EAAEC,SAAS,EAAEC,OAAO,EACvCC,eAAe,CAAW;QAE7C,MAAMI,SAAS,GAAGJ,eAAe,CAACU,gBAAgB,CAACH,MAAM,CAACI,EAAE,CAAC;QAC7D,OAAO,CAACP,SAAS,CAACW,UAAU,EAAE,CAAC;;IAEjC;MACE,MAAMC,SAAS,CAAC,aAAanB,IAAI,CAACI,EAAE,qBAAqB,CAAC;;AAEhE,CAAC;AAED,OAAO,MAAMgB,QAAQ,GAAG,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}