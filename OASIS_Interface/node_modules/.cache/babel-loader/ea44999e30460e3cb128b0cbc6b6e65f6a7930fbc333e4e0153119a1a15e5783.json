{"ast":null,"code":"import _defineProperty from \"/Users/yezery/Oasis/OASIS/node_modules/.store/@babel+runtime@7.22.15/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/* eslint-disable @typescript-eslint/no-unsafe-return */\nexport class Parser {\n  constructor() {\n    _defineProperty(this, \"index\", 0);\n    _defineProperty(this, \"input\", \"\");\n  }\n  new(input) {\n    this.index = 0;\n    this.input = input;\n    return this;\n  }\n  /** Run a parser, and restore the pre-parse state if it fails. */\n  readAtomically(fn) {\n    const index = this.index;\n    const result = fn();\n    if (result === undefined) {\n      this.index = index;\n    }\n    return result;\n  }\n  /** Run a parser, but fail if the entire input wasn't consumed. Doesn't run atomically. */\n  parseWith(fn) {\n    const result = fn();\n    if (this.index !== this.input.length) {\n      return undefined;\n    }\n    return result;\n  }\n  /** Peek the next character from the input */\n  peekChar() {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index];\n  }\n  /** Read the next character from the input */\n  readChar() {\n    if (this.index >= this.input.length) {\n      return undefined;\n    }\n    return this.input[this.index++];\n  }\n  /** Read the next character from the input if it matches the target. */\n  readGivenChar(target) {\n    return this.readAtomically(() => {\n      const char = this.readChar();\n      if (char !== target) {\n        return undefined;\n      }\n      return char;\n    });\n  }\n  /**\n   * Helper for reading separators in an indexed loop. Reads the separator\n   * character iff index > 0, then runs the parser. When used in a loop,\n   * the separator character will only be read on index > 0 (see\n   * readIPv4Addr for an example)\n   */\n  readSeparator(sep, index, inner) {\n    return this.readAtomically(() => {\n      if (index > 0) {\n        if (this.readGivenChar(sep) === undefined) {\n          return undefined;\n        }\n      }\n      return inner();\n    });\n  }\n  /**\n   * Read a number off the front of the input in the given radix, stopping\n   * at the first non-digit character or eof. Fails if the number has more\n   * digits than max_digits or if there is no number.\n   */\n  readNumber(radix, maxDigits, allowZeroPrefix, maxBytes) {\n    return this.readAtomically(() => {\n      let result = 0;\n      let digitCount = 0;\n      const leadingChar = this.peekChar();\n      if (leadingChar === undefined) {\n        return undefined;\n      }\n      const hasLeadingZero = leadingChar === \"0\";\n      const maxValue = 2 ** (8 * maxBytes) - 1;\n      // eslint-disable-next-line no-constant-condition\n      while (true) {\n        const digit = this.readAtomically(() => {\n          const char = this.readChar();\n          if (char === undefined) {\n            return undefined;\n          }\n          const num = Number.parseInt(char, radix);\n          if (Number.isNaN(num)) {\n            return undefined;\n          }\n          return num;\n        });\n        if (digit === undefined) {\n          break;\n        }\n        result *= radix;\n        result += digit;\n        if (result > maxValue) {\n          return undefined;\n        }\n        digitCount += 1;\n        if (maxDigits !== undefined) {\n          if (digitCount > maxDigits) {\n            return undefined;\n          }\n        }\n      }\n      if (digitCount === 0) {\n        return undefined;\n      } else if (!allowZeroPrefix && hasLeadingZero && digitCount > 1) {\n        return undefined;\n      } else {\n        return result;\n      }\n    });\n  }\n  /** Read an IPv4 address. */\n  readIPv4Addr() {\n    return this.readAtomically(() => {\n      const out = new Uint8Array(4);\n      for (let i = 0; i < out.length; i++) {\n        const ix = this.readSeparator(\".\", i, () => this.readNumber(10, 3, false, 1));\n        if (ix === undefined) {\n          return undefined;\n        }\n        out[i] = ix;\n      }\n      return out;\n    });\n  }\n  /** Read an IPv6 Address. */\n  readIPv6Addr() {\n    /**\n     * Read a chunk of an IPv6 address into `groups`. Returns the number\n     * of groups read, along with a bool indicating if an embedded\n     * trailing IPv4 address was read. Specifically, read a series of\n     * colon-separated IPv6 groups (0x0000 - 0xFFFF), with an optional\n     * trailing embedded IPv4 address.\n     */\n    const readGroups = groups => {\n      for (let i = 0; i < groups.length / 2; i++) {\n        const ix = i * 2;\n        // Try to read a trailing embedded IPv4 address. There must be at least 4 groups left.\n        if (i < groups.length - 3) {\n          const ipv4 = this.readSeparator(\":\", i, () => this.readIPv4Addr());\n          if (ipv4 !== undefined) {\n            groups[ix] = ipv4[0];\n            groups[ix + 1] = ipv4[1];\n            groups[ix + 2] = ipv4[2];\n            groups[ix + 3] = ipv4[3];\n            return [ix + 4, true];\n          }\n        }\n        const group = this.readSeparator(\":\", i, () => this.readNumber(16, 4, true, 2));\n        if (group === undefined) {\n          return [ix, false];\n        }\n        groups[ix] = group >> 8;\n        groups[ix + 1] = group & 255;\n      }\n      return [groups.length, false];\n    };\n    return this.readAtomically(() => {\n      // Read the front part of the address; either the whole thing, or up to the first ::\n      const head = new Uint8Array(16);\n      const [headSize, headIp4] = readGroups(head);\n      if (headSize === 16) {\n        return head;\n      }\n      // IPv4 part is not allowed before `::`\n      if (headIp4) {\n        return undefined;\n      }\n      // Read `::` if previous code parsed less than 8 groups.\n      // `::` indicates one or more groups of 16 bits of zeros.\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n      if (this.readGivenChar(\":\") === undefined) {\n        return undefined;\n      }\n      // Read the back part of the address. The :: must contain at least one\n      // set of zeroes, so our max length is 7.\n      const tail = new Uint8Array(14);\n      const limit = 16 - (headSize + 2);\n      const [tailSize] = readGroups(tail.subarray(0, limit));\n      // Concat the head and tail of the IP address\n      head.set(tail.subarray(0, tailSize), 16 - tailSize);\n      return head;\n    });\n  }\n  /** Read an IP Address, either IPv4 or IPv6. */\n  readIPAddr() {\n    return this.readIPv4Addr() ?? this.readIPv6Addr();\n  }\n}","map":{"version":3,"names":["Parser","constructor","_defineProperty","new","input","index","readAtomically","fn","result","undefined","parseWith","length","peekChar","readChar","readGivenChar","target","char","readSeparator","sep","inner","readNumber","radix","maxDigits","allowZeroPrefix","maxBytes","digitCount","leadingChar","hasLeadingZero","maxValue","digit","num","Number","parseInt","isNaN","readIPv4Addr","out","Uint8Array","i","ix","readIPv6Addr","readGroups","groups","ipv4","group","head","headSize","headIp4","tail","limit","tailSize","subarray","set","readIPAddr"],"sources":["../src/parser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}