{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish(topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    });\n\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(await multipartRequest([data], controller, options.headers))\n    });\n    await res.text();\n  }\n  return publish;\n});","map":{"version":3,"names":["configure","toUrlSearchParams","multipartRequest","abortSignal","textToUrlSafeRpc","createPublish","api","publish","topic","data","options","searchParams","arg","controller","AbortController","signal","res","post","headers","text"],"sources":["/Users/yezery/Desktop/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/pubsub/publish.js"],"sourcesContent":["import { configure } from '../lib/configure.js'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { abortSignal } from '../lib/abort-signal.js'\nimport { textToUrlSafeRpc } from '../lib/http-rpc-wire-format.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions>} PubsubAPI\n */\n\nexport const createPublish = configure(api => {\n  /**\n   * @type {PubsubAPI[\"publish\"]}\n   */\n  async function publish (topic, data, options = {}) {\n    const searchParams = toUrlSearchParams({\n      arg: textToUrlSafeRpc(topic),\n      ...options\n    })\n\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('pubsub/pub', {\n      signal,\n      searchParams,\n      ...(\n        await multipartRequest([data], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return publish\n})\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,QAAQ,gCAAgC;;AAEjE;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAGL,SAAS,CAACM,GAAG,IAAI;EAC5C;AACF;AACA;EACE,eAAeC,OAAOA,CAAEC,KAAK,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjD,MAAMC,YAAY,GAAGV,iBAAiB,CAAC;MACrCW,GAAG,EAAER,gBAAgB,CAACI,KAAK,CAAC;MAC5B,GAAGE;IACL,CAAC,CAAC;;IAEF;IACA,MAAMG,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGZ,WAAW,CAACU,UAAU,CAACE,MAAM,EAAEL,OAAO,CAACK,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,YAAY,EAAE;MACvCF,MAAM;MACNJ,YAAY;MACZ,IACE,MAAMT,gBAAgB,CAAC,CAACO,IAAI,CAAC,EAAEI,UAAU,EAAEH,OAAO,CAACQ,OAAO,CAAC;IAE/D,CAAC,CAAC;IAEF,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAClB;EACA,OAAOZ,OAAO;AAChB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}