{"ast":null,"code":"import { modeToString } from '../lib/mode-to-string.js';\nimport { parseMtime } from '../lib/parse-mtime.js';\nimport { configure } from '../lib/configure.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { abortSignal } from '../lib/abort-signal.js';\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write(path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(await multipartRequest([{\n        content: input,\n        path: 'arg',\n        mode: modeToString(options.mode),\n        mtime: parseMtime(options.mtime)\n      }], controller, options.headers))\n    });\n    await res.text();\n  }\n  return write;\n});","map":{"version":3,"names":["modeToString","parseMtime","configure","multipartRequest","toUrlSearchParams","abortSignal","createWrite","api","write","path","input","options","controller","AbortController","signal","res","post","searchParams","arg","streamChannels","count","length","content","mode","mtime","headers","text"],"sources":["/Users/yezery/Documents/大学素材/毕业设计/OASIS/OASIS_Interface/node_modules/.store/ipfs-http-client@60.0.1/node_modules/ipfs-http-client/src/files/write.js"],"sourcesContent":["import { modeToString } from '../lib/mode-to-string.js'\nimport { parseMtime } from '../lib/parse-mtime.js'\nimport { configure } from '../lib/configure.js'\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request'\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js'\nimport { abortSignal } from '../lib/abort-signal.js'\n\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/files').API<HTTPClientExtraOptions>} FilesAPI\n */\n\nexport const createWrite = configure(api => {\n  /**\n   * @type {FilesAPI[\"write\"]}\n   */\n  async function write (path, input, options = {}) {\n    // allow aborting requests on body errors\n    const controller = new AbortController()\n    const signal = abortSignal(controller.signal, options.signal)\n\n    const res = await api.post('files/write', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        streamChannels: true,\n        count: options.length,\n        ...options\n      }),\n      ...(\n        await multipartRequest([{\n          content: input,\n          path: 'arg',\n          mode: modeToString(options.mode),\n          mtime: parseMtime(options.mtime)\n        }], controller, options.headers)\n      )\n    })\n\n    await res.text()\n  }\n  return write\n})\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,0BAA0B;AACvD,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,iBAAiB,QAAQ,gCAAgC;AAClE,SAASC,WAAW,QAAQ,wBAAwB;;AAEpD;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,WAAW,GAAGJ,SAAS,CAACK,GAAG,IAAI;EAC1C;AACF;AACA;EACE,eAAeC,KAAKA,CAAEC,IAAI,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;IAC/C;IACA,MAAMC,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;IACxC,MAAMC,MAAM,GAAGT,WAAW,CAACO,UAAU,CAACE,MAAM,EAAEH,OAAO,CAACG,MAAM,CAAC;IAE7D,MAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,aAAa,EAAE;MACxCF,MAAM;MACNG,YAAY,EAAEb,iBAAiB,CAAC;QAC9Bc,GAAG,EAAET,IAAI;QACTU,cAAc,EAAE,IAAI;QACpBC,KAAK,EAAET,OAAO,CAACU,MAAM;QACrB,GAAGV;MACL,CAAC,CAAC;MACF,IACE,MAAMR,gBAAgB,CAAC,CAAC;QACtBmB,OAAO,EAAEZ,KAAK;QACdD,IAAI,EAAE,KAAK;QACXc,IAAI,EAAEvB,YAAY,CAACW,OAAO,CAACY,IAAI,CAAC;QAChCC,KAAK,EAAEvB,UAAU,CAACU,OAAO,CAACa,KAAK;MACjC,CAAC,CAAC,EAAEZ,UAAU,EAAED,OAAO,CAACc,OAAO,CAAC;IAEpC,CAAC,CAAC;IAEF,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;EAClB;EACA,OAAOlB,KAAK;AACd,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}