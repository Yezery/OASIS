{"ast":null,"code":"import drain from 'it-drain';\nimport { notFoundError } from 'datastore-core/errors';\nimport { logger } from '@libp2p/logger';\nconst log = logger('ipfs:ipns:dht-datastore');\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor(dht) {\n    this._dht = dht;\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put(key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options));\n    } catch ( /** @type {any} */err) {\n      log.error(err);\n      throw err;\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get(key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value;\n      }\n    }\n    throw notFoundError();\n  }\n}","map":{"version":3,"names":["drain","notFoundError","logger","log","DHTDatastore","constructor","dht","_dht","put","key","value","options","err","error","get","event","name"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core@0.18.1/node_modules/ipfs-core/src/ipns/routing/dht-datastore.js"],"sourcesContent":["import drain from 'it-drain'\nimport { notFoundError } from 'datastore-core/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:ipns:dht-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw notFoundError()\n  }\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,UAAU;AAC5B,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SAASC,MAAM,QAAQ,gBAAgB;AAEvC,MAAMC,GAAG,GAAGD,MAAM,CAAC,yBAAyB,CAAC;;AAE7C;AACA;AACA;;AAEA,OAAO,MAAME,YAAY,CAAC;EACxB;AACF;AACA;AACA;EACEC,WAAWA,CAAEC,GAAG,EAAE;IAChB,IAAI,CAACC,IAAI,GAAGD,GAAG;EACjB;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAME,GAAGA,CAAEC,GAAG,EAAEC,KAAK,EAAEC,OAAO,EAAE;IAC9B,IAAI;MACF,MAAMX,KAAK,CAAC,IAAI,CAACO,IAAI,CAACC,GAAG,CAACC,GAAG,EAAEC,KAAK,EAAEC,OAAO,CAAC,CAAC;IACjD,CAAC,CAAC,QAAO,kBAAmBC,GAAG,EAAE;MAC/BT,GAAG,CAACU,KAAK,CAACD,GAAG,CAAC;MACd,MAAMA,GAAG;IACX;EACF;;EAEA;AACF;AACA;AACA;EACE,MAAME,GAAGA,CAAEL,GAAG,EAAEE,OAAO,EAAE;IACvB,WAAW,MAAMI,KAAK,IAAI,IAAI,CAACR,IAAI,CAACO,GAAG,CAACL,GAAG,EAAEE,OAAO,CAAC,EAAE;MACrD,IAAII,KAAK,CAACC,IAAI,KAAK,OAAO,EAAE;QAC1B,OAAOD,KAAK,CAACL,KAAK;MACpB;IACF;IAEA,MAAMT,aAAa,CAAC,CAAC;EACvB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}