{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isTopology } from '@libp2p/interface-registrar';\nimport merge from 'merge-options';\nconst log = logger('libp2p:registrar');\nexport const DEFAULT_MAX_INBOUND_STREAMS = 32;\nexport const DEFAULT_MAX_OUTBOUND_STREAMS = 64;\n/**\n * Responsible for notifying registered protocols of events in the network.\n */\nexport class DefaultRegistrar {\n  constructor(components) {\n    this.topologies = new Map();\n    this.handlers = new Map();\n    this.components = components;\n    this._onDisconnect = this._onDisconnect.bind(this);\n    this._onProtocolChange = this._onProtocolChange.bind(this);\n    this._onConnect = this._onConnect.bind(this);\n    this.components.connectionManager.addEventListener('peer:disconnect', this._onDisconnect);\n    this.components.connectionManager.addEventListener('peer:connect', this._onConnect);\n    // happens after identify\n    this.components.peerStore.addEventListener('change:protocols', this._onProtocolChange);\n  }\n  getProtocols() {\n    return Array.from(new Set([...this.topologies.keys(), ...this.handlers.keys()])).sort();\n  }\n  getHandler(protocol) {\n    const handler = this.handlers.get(protocol);\n    if (handler == null) {\n      throw errCode(new Error(`No handler registered for protocol ${protocol}`), codes.ERR_NO_HANDLER_FOR_PROTOCOL);\n    }\n    return handler;\n  }\n  getTopologies(protocol) {\n    const topologies = this.topologies.get(protocol);\n    if (topologies == null) {\n      return [];\n    }\n    return [...topologies.values()];\n  }\n  /**\n   * Registers the `handler` for each protocol\n   */\n  async handle(protocol, handler, opts) {\n    if (this.handlers.has(protocol)) {\n      throw errCode(new Error(`Handler already registered for protocol ${protocol}`), codes.ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED);\n    }\n    const options = merge.bind({\n      ignoreUndefined: true\n    })({\n      maxInboundStreams: DEFAULT_MAX_INBOUND_STREAMS,\n      maxOutboundStreams: DEFAULT_MAX_OUTBOUND_STREAMS\n    }, opts);\n    this.handlers.set(protocol, {\n      handler,\n      options\n    });\n    // Add new protocols to self protocols in the Protobook\n    await this.components.peerStore.protoBook.add(this.components.peerId, [protocol]);\n  }\n  /**\n   * Removes the handler for each protocol. The protocol\n   * will no longer be supported on streams.\n   */\n  async unhandle(protocols) {\n    const protocolList = Array.isArray(protocols) ? protocols : [protocols];\n    protocolList.forEach(protocol => {\n      this.handlers.delete(protocol);\n    });\n    // Remove protocols from self protocols in the Protobook\n    await this.components.peerStore.protoBook.remove(this.components.peerId, protocolList);\n  }\n  /**\n   * Register handlers for a set of multicodecs given\n   */\n  async register(protocol, topology) {\n    if (!isTopology(topology)) {\n      log.error('topology must be an instance of interfaces/topology');\n      throw errCode(new Error('topology must be an instance of interfaces/topology'), codes.ERR_INVALID_PARAMETERS);\n    }\n    // Create topology\n    const id = `${(Math.random() * 1e9).toString(36)}${Date.now()}`;\n    let topologies = this.topologies.get(protocol);\n    if (topologies == null) {\n      topologies = new Map();\n      this.topologies.set(protocol, topologies);\n    }\n    topologies.set(id, topology);\n    // Set registrar\n    await topology.setRegistrar(this);\n    return id;\n  }\n  /**\n   * Unregister topology\n   */\n  unregister(id) {\n    for (const [protocol, topologies] of this.topologies.entries()) {\n      if (topologies.has(id)) {\n        topologies.delete(id);\n        if (topologies.size === 0) {\n          this.topologies.delete(protocol);\n        }\n      }\n    }\n  }\n  /**\n   * Remove a disconnected peer from the record\n   */\n  _onDisconnect(evt) {\n    const connection = evt.detail;\n    void this.components.peerStore.protoBook.get(connection.remotePeer).then(peerProtocols => {\n      for (const protocol of peerProtocols) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n          // no topologies are interested in this protocol\n          continue;\n        }\n        for (const topology of topologies.values()) {\n          topology.onDisconnect(connection.remotePeer);\n        }\n      }\n    }).catch(err => {\n      log.error(err);\n    });\n  }\n  /**\n   * On peer connected if we already have their protocols. Usually used for reconnects\n   * as change:protocols event won't be emitted due to identical protocols.\n   */\n  _onConnect(evt) {\n    const connection = evt.detail;\n    void this.components.peerStore.protoBook.get(connection.remotePeer).then(peerProtocols => {\n      for (const protocol of peerProtocols) {\n        const topologies = this.topologies.get(protocol);\n        if (topologies == null) {\n          // no topologies are interested in this protocol\n          continue;\n        }\n        for (const topology of topologies.values()) {\n          topology.onConnect(connection.remotePeer, connection);\n        }\n      }\n    }).catch(err => {\n      log.error(err);\n    });\n  }\n  /**\n   * Check if a new peer support the multicodecs for this topology\n   */\n  _onProtocolChange(evt) {\n    const {\n      peerId,\n      protocols,\n      oldProtocols\n    } = evt.detail;\n    const removed = oldProtocols.filter(protocol => !protocols.includes(protocol));\n    const added = protocols.filter(protocol => !oldProtocols.includes(protocol));\n    for (const protocol of removed) {\n      const topologies = this.topologies.get(protocol);\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue;\n      }\n      for (const topology of topologies.values()) {\n        topology.onDisconnect(peerId);\n      }\n    }\n    for (const protocol of added) {\n      const topologies = this.topologies.get(protocol);\n      if (topologies == null) {\n        // no topologies are interested in this protocol\n        continue;\n      }\n      for (const topology of topologies.values()) {\n        const connection = this.components.connectionManager.getConnections(peerId)[0];\n        if (connection == null) {\n          continue;\n        }\n        topology.onConnect(peerId, connection);\n      }\n    }\n  }\n}","map":{"version":3,"names":["logger","errCode","codes","isTopology","merge","log","DEFAULT_MAX_INBOUND_STREAMS","DEFAULT_MAX_OUTBOUND_STREAMS","DefaultRegistrar","constructor","components","topologies","Map","handlers","_onDisconnect","bind","_onProtocolChange","_onConnect","connectionManager","addEventListener","peerStore","getProtocols","Array","from","Set","keys","sort","getHandler","protocol","handler","get","Error","ERR_NO_HANDLER_FOR_PROTOCOL","getTopologies","values","handle","opts","has","ERR_PROTOCOL_HANDLER_ALREADY_REGISTERED","options","ignoreUndefined","maxInboundStreams","maxOutboundStreams","set","protoBook","add","peerId","unhandle","protocols","protocolList","isArray","forEach","delete","remove","register","topology","error","ERR_INVALID_PARAMETERS","id","Math","random","toString","Date","now","setRegistrar","unregister","entries","size","evt","connection","detail","remotePeer","then","peerProtocols","onDisconnect","catch","err","onConnect","oldProtocols","removed","filter","includes","added","getConnections"],"sources":["../../src/registrar.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}