{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport mergeOptions from 'merge-options';\nimport { LatencyMonitor } from './latency-monitor.js';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { codes } from '../errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\nimport { setMaxListeners } from 'events';\nimport * as STATUS from '@libp2p/interface-connection/status';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { PeerMap } from '@libp2p/peer-collections';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { KEEP_ALIVE } from '@libp2p/interface-peer-store/tags';\nimport { RateLimiterMemory } from 'rate-limiter-flexible';\nimport { getPeerAddress } from '../get-peer.js';\nconst log = logger('libp2p:connection-manager');\nconst defaultOptions = {\n  maxConnections: Infinity,\n  minConnections: 0,\n  maxEventLoopDelay: Infinity,\n  pollInterval: 2000,\n  autoDialInterval: 10000,\n  inboundConnectionThreshold: 5,\n  maxIncomingPendingConnections: 10\n};\nconst STARTUP_RECONNECT_TIMEOUT = 60000;\n/**\n * Responsible for managing known connections.\n */\nexport class DefaultConnectionManager extends EventEmitter {\n  constructor(components, init) {\n    super();\n    this.opts = mergeOptions.call({\n      ignoreUndefined: true\n    }, defaultOptions, init);\n    if (this.opts.maxConnections < this.opts.minConnections) {\n      throw errCode(new Error('Connection Manager maxConnections must be greater than minConnections'), codes.ERR_INVALID_PARAMETERS);\n    }\n    log('options: %o', this.opts);\n    this.components = components;\n    /**\n     * Map of connections per peer\n     */\n    this.connections = new Map();\n    this.started = false;\n    if (init.maxEventLoopDelay != null && init.maxEventLoopDelay > 0 && init.maxEventLoopDelay !== Infinity) {\n      this.latencyMonitor = new LatencyMonitor({\n        latencyCheckIntervalMs: init.pollInterval,\n        dataEmitIntervalMs: init.pollInterval\n      });\n    }\n    try {\n      // This emitter gets listened to a lot\n      setMaxListeners?.(Infinity, this);\n    } catch {}\n    this.onConnect = this.onConnect.bind(this);\n    this.onDisconnect = this.onDisconnect.bind(this);\n    this.startupReconnectTimeout = init.startupReconnectTimeout ?? STARTUP_RECONNECT_TIMEOUT;\n    this.dialTimeout = init.dialTimeout ?? 30000;\n    this.allow = (init.allow ?? []).map(ma => multiaddr(ma));\n    this.deny = (init.deny ?? []).map(ma => multiaddr(ma));\n    this.inboundConnectionRateLimiter = new RateLimiterMemory({\n      points: this.opts.inboundConnectionThreshold,\n      duration: 1\n    });\n    this.incomingPendingConnections = 0;\n  }\n  isStarted() {\n    return this.started;\n  }\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n  async start() {\n    // track inbound/outbound connections\n    this.components.metrics?.registerMetricGroup('libp2p_connection_manager_connections', {\n      calculate: () => {\n        const metric = {\n          inbound: 0,\n          outbound: 0\n        };\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            if (conn.stat.direction === 'inbound') {\n              metric.inbound++;\n            } else {\n              metric.outbound++;\n            }\n          }\n        }\n        return metric;\n      }\n    });\n    // track total number of streams per protocol\n    this.components.metrics?.registerMetricGroup('libp2p_protocol_streams_total', {\n      label: 'protocol',\n      calculate: () => {\n        const metric = {};\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            for (const stream of conn.streams) {\n              const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n              metric[key] = (metric[key] ?? 0) + 1;\n            }\n          }\n        }\n        return metric;\n      }\n    });\n    // track 90th percentile of streams per protocol\n    this.components.metrics?.registerMetricGroup('libp2p_connection_manager_protocol_streams_per_connection_90th_percentile', {\n      label: 'protocol',\n      calculate: () => {\n        const allStreams = {};\n        for (const conns of this.connections.values()) {\n          for (const conn of conns) {\n            const streams = {};\n            for (const stream of conn.streams) {\n              const key = `${stream.stat.direction} ${stream.stat.protocol ?? 'unnegotiated'}`;\n              streams[key] = (streams[key] ?? 0) + 1;\n            }\n            for (const [protocol, count] of Object.entries(streams)) {\n              allStreams[protocol] = allStreams[protocol] ?? [];\n              allStreams[protocol].push(count);\n            }\n          }\n        }\n        const metric = {};\n        for (let [protocol, counts] of Object.entries(allStreams)) {\n          counts = counts.sort((a, b) => a - b);\n          const index = Math.floor(counts.length * 0.9);\n          metric[protocol] = counts[index];\n        }\n        return metric;\n      }\n    });\n    // latency monitor\n    this.latencyMonitor?.start();\n    this._onLatencyMeasure = this._onLatencyMeasure.bind(this);\n    this.latencyMonitor?.addEventListener('data', this._onLatencyMeasure);\n    this.started = true;\n    log('started');\n  }\n  async afterStart() {\n    this.components.upgrader.addEventListener('connection', this.onConnect);\n    this.components.upgrader.addEventListener('connectionEnd', this.onDisconnect);\n    // re-connect to any peers with the KEEP_ALIVE tag\n    void Promise.resolve().then(async () => {\n      const keepAlivePeers = [];\n      for (const peer of await this.components.peerStore.all()) {\n        const tags = await this.components.peerStore.getTags(peer.id);\n        const hasKeepAlive = tags.filter(tag => tag.name === KEEP_ALIVE).length > 0;\n        if (hasKeepAlive) {\n          keepAlivePeers.push(peer.id);\n        }\n      }\n      this.connectOnStartupController?.clear();\n      this.connectOnStartupController = new TimeoutController(this.startupReconnectTimeout);\n      try {\n        // fails on node < 15.4\n        setMaxListeners?.(Infinity, this.connectOnStartupController.signal);\n      } catch {}\n      await Promise.all(keepAlivePeers.map(async peer => {\n        await this.openConnection(peer, {\n          signal: this.connectOnStartupController?.signal\n        }).catch(err => {\n          log.error(err);\n        });\n      }));\n    }).catch(err => {\n      log.error(err);\n    }).finally(() => {\n      this.connectOnStartupController?.clear();\n    });\n  }\n  async beforeStop() {\n    // if we are still dialing KEEP_ALIVE peers, abort those dials\n    this.connectOnStartupController?.abort();\n    this.components.upgrader.removeEventListener('connection', this.onConnect);\n    this.components.upgrader.removeEventListener('connectionEnd', this.onDisconnect);\n  }\n  /**\n   * Stops the Connection Manager\n   */\n  async stop() {\n    this.latencyMonitor?.removeEventListener('data', this._onLatencyMeasure);\n    this.latencyMonitor?.stop();\n    this.started = false;\n    await this._close();\n    log('stopped');\n  }\n  /**\n   * Cleans up the connections\n   */\n  async _close() {\n    // Close all connections we're tracking\n    const tasks = [];\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push((async () => {\n          try {\n            await connection.close();\n          } catch (err) {\n            log.error(err);\n          }\n        })());\n      }\n    }\n    log('closing %d connections', tasks.length);\n    await Promise.all(tasks);\n    this.connections.clear();\n  }\n  onConnect(evt) {\n    void this._onConnect(evt).catch(err => {\n      log.error(err);\n    });\n  }\n  /**\n   * Tracks the incoming connection and check the connection limit\n   */\n  async _onConnect(evt) {\n    const {\n      detail: connection\n    } = evt;\n    if (!this.started) {\n      // This can happen when we are in the process of shutting down the node\n      await connection.close();\n      return;\n    }\n    const peerId = connection.remotePeer;\n    const peerIdStr = peerId.toString();\n    const storedConns = this.connections.get(peerIdStr);\n    if (storedConns != null) {\n      storedConns.push(connection);\n    } else {\n      this.connections.set(peerIdStr, [connection]);\n    }\n    if (peerId.publicKey != null) {\n      await this.components.peerStore.keyBook.set(peerId, peerId.publicKey);\n    }\n    const numConnections = this.getConnections().length;\n    const toPrune = numConnections - this.opts.maxConnections;\n    await this._checkMaxLimit('maxConnections', numConnections, toPrune);\n    this.dispatchEvent(new CustomEvent('peer:connect', {\n      detail: connection\n    }));\n  }\n  /**\n   * Removes the connection from tracking\n   */\n  onDisconnect(evt) {\n    const {\n      detail: connection\n    } = evt;\n    if (!this.started) {\n      // This can happen when we are in the process of shutting down the node\n      return;\n    }\n    const peerId = connection.remotePeer.toString();\n    let storedConn = this.connections.get(peerId);\n    if (storedConn != null && storedConn.length > 1) {\n      storedConn = storedConn.filter(conn => conn.id !== connection.id);\n      this.connections.set(peerId, storedConn);\n    } else if (storedConn != null) {\n      this.connections.delete(peerId);\n      this.dispatchEvent(new CustomEvent('peer:disconnect', {\n        detail: connection\n      }));\n    }\n  }\n  getConnections(peerId) {\n    if (peerId != null) {\n      return this.connections.get(peerId.toString()) ?? [];\n    }\n    let conns = [];\n    for (const c of this.connections.values()) {\n      conns = conns.concat(c);\n    }\n    return conns;\n  }\n  async openConnection(peerIdOrMultiaddr, options = {}) {\n    const {\n      peerId,\n      multiaddr\n    } = getPeerAddress(peerIdOrMultiaddr);\n    if (peerId == null && multiaddr == null) {\n      throw errCode(new TypeError('Can only open connections to PeerIds or Multiaddrs'), codes.ERR_INVALID_PARAMETERS);\n    }\n    if (peerId != null) {\n      log('dial to', peerId);\n      const existingConnections = this.getConnections(peerId);\n      if (existingConnections.length > 0) {\n        log('had an existing connection to %p', peerId);\n        return existingConnections[0];\n      }\n    }\n    let timeoutController;\n    if (options?.signal == null) {\n      timeoutController = new TimeoutController(this.dialTimeout);\n      options.signal = timeoutController.signal;\n      try {\n        // fails on node < 15.4\n        setMaxListeners?.(Infinity, timeoutController.signal);\n      } catch {}\n    }\n    try {\n      const connection = await this.components.dialer.dial(peerIdOrMultiaddr, options);\n      let peerConnections = this.connections.get(connection.remotePeer.toString());\n      if (peerConnections == null) {\n        peerConnections = [];\n        this.connections.set(connection.remotePeer.toString(), peerConnections);\n      }\n      // we get notified of connections via the Upgrader emitting \"connection\"\n      // events, double check we aren't already tracking this connection before\n      // storing it\n      let trackedConnection = false;\n      for (const conn of peerConnections) {\n        if (conn.id === connection.id) {\n          trackedConnection = true;\n        }\n      }\n      if (!trackedConnection) {\n        peerConnections.push(connection);\n      }\n      return connection;\n    } finally {\n      if (timeoutController != null) {\n        timeoutController.clear();\n      }\n    }\n  }\n  async closeConnections(peerId) {\n    const connections = this.connections.get(peerId.toString()) ?? [];\n    await Promise.all(connections.map(async connection => {\n      return await connection.close();\n    }));\n  }\n  /**\n   * Get all open connections with a peer\n   */\n  getAll(peerId) {\n    if (!isPeerId(peerId)) {\n      throw errCode(new Error('peerId must be an instance of peer-id'), codes.ERR_INVALID_PARAMETERS);\n    }\n    const id = peerId.toString();\n    const connections = this.connections.get(id);\n    // Return all open connections\n    if (connections != null) {\n      return connections.filter(connection => connection.stat.status === STATUS.OPEN);\n    }\n    return [];\n  }\n  /**\n   * If the event loop is slow, maybe close a connection\n   */\n  _onLatencyMeasure(evt) {\n    const {\n      detail: summary\n    } = evt;\n    this._checkMaxLimit('maxEventLoopDelay', summary.avgMs, 1).catch(err => {\n      log.error(err);\n    });\n  }\n  /**\n   * If the `value` of `name` has exceeded its limit, maybe close a connection\n   */\n  async _checkMaxLimit(name, value, toPrune = 1) {\n    const limit = this.opts[name];\n    if (limit == null) {\n      log.trace('limit %s was not set so it cannot be applied', name);\n      return;\n    }\n    log.trace('checking limit of %s. current value: %d of %d', name, value, limit);\n    if (value > limit) {\n      log('%s: limit exceeded: %p, %d/%d, pruning %d connection(s)', this.components.peerId, name, value, limit, toPrune);\n      await this._pruneConnections(toPrune);\n    }\n  }\n  /**\n   * If we have more connections than our maximum, select some excess connections\n   * to prune based on peer value\n   */\n  async _pruneConnections(toPrune) {\n    const connections = this.getConnections();\n    const peerValues = new PeerMap();\n    // work out peer values\n    for (const connection of connections) {\n      const remotePeer = connection.remotePeer;\n      if (peerValues.has(remotePeer)) {\n        continue;\n      }\n      const tags = await this.components.peerStore.getTags(remotePeer);\n      // sum all tag values\n      peerValues.set(remotePeer, tags.reduce((acc, curr) => {\n        return acc + curr.value;\n      }, 0));\n    }\n    // sort by value, lowest to highest\n    const sortedConnections = connections.sort((a, b) => {\n      const peerAValue = peerValues.get(a.remotePeer) ?? 0;\n      const peerBValue = peerValues.get(b.remotePeer) ?? 0;\n      if (peerAValue > peerBValue) {\n        return 1;\n      }\n      if (peerAValue < peerBValue) {\n        return -1;\n      }\n      // if the peers have an equal tag value then we want to close short-lived connections first\n      const connectionALifespan = a.stat.timeline.open;\n      const connectionBLifespan = b.stat.timeline.open;\n      if (connectionALifespan < connectionBLifespan) {\n        return 1;\n      }\n      if (connectionALifespan > connectionBLifespan) {\n        return -1;\n      }\n      return 0;\n    });\n    // close some connections\n    const toClose = [];\n    for (const connection of sortedConnections) {\n      log('too many connections open - closing a connection to %p', connection.remotePeer);\n      toClose.push(connection);\n      if (toClose.length === toPrune) {\n        break;\n      }\n    }\n    // close connections\n    await Promise.all(toClose.map(async connection => {\n      try {\n        await connection.close();\n      } catch (err) {\n        log.error(err);\n      }\n      // TODO: should not need to invoke this manually\n      this.onDisconnect(new CustomEvent('connectionEnd', {\n        detail: connection\n      }));\n    }));\n  }\n  async acceptIncomingConnection(maConn) {\n    // check deny list\n    const denyConnection = this.deny.some(ma => {\n      return maConn.remoteAddr.toString().startsWith(ma.toString());\n    });\n    if (denyConnection) {\n      log('connection from %s refused - connection remote address was in deny list', maConn.remoteAddr);\n      return false;\n    }\n    // check allow list\n    const allowConnection = this.allow.some(ma => {\n      return maConn.remoteAddr.toString().startsWith(ma.toString());\n    });\n    if (allowConnection) {\n      this.incomingPendingConnections++;\n      return true;\n    }\n    // check pending connections\n    if (this.incomingPendingConnections === this.opts.maxIncomingPendingConnections) {\n      log('connection from %s refused - incomingPendingConnections exceeded by peer %s', maConn.remoteAddr);\n      return false;\n    }\n    if (maConn.remoteAddr.isThinWaistAddress()) {\n      const host = maConn.remoteAddr.nodeAddress().address;\n      try {\n        await this.inboundConnectionRateLimiter.consume(host, 1);\n      } catch {\n        log('connection from %s refused - inboundConnectionThreshold exceeded by host %s', host, maConn.remoteAddr);\n        return false;\n      }\n    }\n    if (this.getConnections().length < this.opts.maxConnections) {\n      this.incomingPendingConnections++;\n      return true;\n    }\n    log('connection from %s refused - maxConnections exceeded', maConn.remoteAddr);\n    return false;\n  }\n  afterUpgradeInbound() {\n    this.incomingPendingConnections--;\n  }\n}","map":{"version":3,"names":["logger","errCode","mergeOptions","LatencyMonitor","CustomEvent","EventEmitter","codes","isPeerId","setMaxListeners","STATUS","multiaddr","PeerMap","TimeoutController","KEEP_ALIVE","RateLimiterMemory","getPeerAddress","log","defaultOptions","maxConnections","Infinity","minConnections","maxEventLoopDelay","pollInterval","autoDialInterval","inboundConnectionThreshold","maxIncomingPendingConnections","STARTUP_RECONNECT_TIMEOUT","DefaultConnectionManager","constructor","components","init","opts","call","ignoreUndefined","Error","ERR_INVALID_PARAMETERS","connections","Map","started","latencyMonitor","latencyCheckIntervalMs","dataEmitIntervalMs","onConnect","bind","onDisconnect","startupReconnectTimeout","dialTimeout","allow","map","ma","deny","inboundConnectionRateLimiter","points","duration","incomingPendingConnections","isStarted","start","metrics","registerMetricGroup","calculate","metric","inbound","outbound","conns","values","conn","stat","direction","label","stream","streams","key","protocol","allStreams","count","Object","entries","push","counts","sort","a","b","index","Math","floor","length","_onLatencyMeasure","addEventListener","afterStart","upgrader","Promise","resolve","then","keepAlivePeers","peer","peerStore","all","tags","getTags","id","hasKeepAlive","filter","tag","name","connectOnStartupController","clear","signal","openConnection","catch","err","error","finally","beforeStop","abort","removeEventListener","stop","_close","tasks","connectionList","connection","close","evt","_onConnect","detail","peerId","remotePeer","peerIdStr","toString","storedConns","get","set","publicKey","keyBook","numConnections","getConnections","toPrune","_checkMaxLimit","dispatchEvent","storedConn","delete","c","concat","peerIdOrMultiaddr","options","TypeError","existingConnections","timeoutController","dialer","dial","peerConnections","trackedConnection","closeConnections","getAll","status","OPEN","summary","avgMs","value","limit","trace","_pruneConnections","peerValues","has","reduce","acc","curr","sortedConnections","peerAValue","peerBValue","connectionALifespan","timeline","open","connectionBLifespan","toClose","acceptIncomingConnection","maConn","denyConnection","some","remoteAddr","startsWith","allowConnection","isThinWaistAddress","host","nodeAddress","address","consume","afterUpgradeInbound"],"sources":["../../../src/connection-manager/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}