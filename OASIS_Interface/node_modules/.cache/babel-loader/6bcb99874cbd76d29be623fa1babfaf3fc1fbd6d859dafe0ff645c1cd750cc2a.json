{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { bytes } from 'multiformats';\nimport { from } from 'multiformats/hashes/hasher';\n// @ts-expect-error no types\nimport mur from 'murmurhash3js-revisited';\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nfunction fromNumberTo32BitBuf(number) {\n  const bytes = new Array(4);\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff;\n    number = number >> 8;\n  }\n  return new Uint8Array(bytes);\n}\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: input => fromNumberTo32BitBuf(mur.x86.hash32(input))\n});\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: input => bytes.fromHex(mur.x64.hash128(input))\n});\n\n// A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: input => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n});","map":{"version":3,"names":["bytes","from","mur","fromNumberTo32BitBuf","number","Array","i","Uint8Array","murmur332","name","code","encode","input","x86","hash32","murmur3128","fromHex","x64","hash128","murmur364","subarray"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/@multiformats+murmur3@2.1.6/node_modules/@multiformats/murmur3/src/index.js"],"sourcesContent":["import { bytes } from 'multiformats'\nimport { from } from 'multiformats/hashes/hasher'\n// @ts-expect-error no types\nimport mur from 'murmurhash3js-revisited'\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nfunction fromNumberTo32BitBuf (number) {\n  const bytes = new Array(4)\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n  return new Uint8Array(bytes)\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: (input) => fromNumberTo32BitBuf(mur.x86.hash32(input))\n})\n\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input))\n})\n\n// A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n})\n"],"mappings":";;;AAAA,SAASA,KAAK,QAAQ,cAAc;AACpC,SAASC,IAAI,QAAQ,4BAA4B;AACjD;AACA,OAAOC,GAAG,MAAM,yBAAyB;;AAEzC;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAAEC,MAAM,EAAE;EACrC,MAAMJ,KAAK,GAAG,IAAIK,KAAK,CAAC,CAAC,CAAC;EAC1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1BN,KAAK,CAACM,CAAC,CAAC,GAAGF,MAAM,GAAG,IAAI;IACxBA,MAAM,GAAGA,MAAM,IAAI,CAAC;EACtB;EACA,OAAO,IAAIG,UAAU,CAACP,KAAK,CAAC;AAC9B;AAEA,OAAO,MAAMQ,SAAS,GAAGP,IAAI,CAAC;EAC5BQ,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAGC,KAAK,IAAKT,oBAAoB,CAACD,GAAG,CAACW,GAAG,CAACC,MAAM,CAACF,KAAK,CAAC;AAC/D,CAAC,CAAC;AAEF,OAAO,MAAMG,UAAU,GAAGd,IAAI,CAAC;EAC7BQ,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAGC,KAAK,IAAKZ,KAAK,CAACgB,OAAO,CAACd,GAAG,CAACe,GAAG,CAACC,OAAO,CAACN,KAAK,CAAC;AACzD,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMO,SAAS,GAAGlB,IAAI,CAAC;EAC5BQ,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,IAAI;EACVC,MAAM,EAAGC,KAAK,IAAKZ,KAAK,CAACgB,OAAO,CAACd,GAAG,CAACe,GAAG,CAACC,OAAO,CAACN,KAAK,CAAC,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC;AACxE,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}