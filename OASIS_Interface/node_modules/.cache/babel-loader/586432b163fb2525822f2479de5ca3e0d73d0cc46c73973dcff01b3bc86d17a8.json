{"ast":null,"code":"// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nexport default function lowerBound(array, value, comparator) {\n  let first = 0;\n  let count = array.length;\n  while (count > 0) {\n    const step = Math.trunc(count / 2);\n    let it = first + step;\n    if (comparator(array[it], value) <= 0) {\n      first = ++it;\n      count -= step + 1;\n    } else {\n      count = step;\n    }\n  }\n  return first;\n}","map":{"version":3,"names":["lowerBound","array","value","comparator","first","count","length","step","Math","trunc","it"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/p-queue@7.4.1/node_modules/p-queue/dist/lower-bound.js"],"sourcesContent":["// Port of lower_bound from https://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nexport default function lowerBound(array, value, comparator) {\n    let first = 0;\n    let count = array.length;\n    while (count > 0) {\n        const step = Math.trunc(count / 2);\n        let it = first + step;\n        if (comparator(array[it], value) <= 0) {\n            first = ++it;\n            count -= step + 1;\n        }\n        else {\n            count = step;\n        }\n    }\n    return first;\n}\n"],"mappings":"AAAA;AACA;AACA,eAAe,SAASA,UAAUA,CAACC,KAAK,EAAEC,KAAK,EAAEC,UAAU,EAAE;EACzD,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,KAAK,GAAGJ,KAAK,CAACK,MAAM;EACxB,OAAOD,KAAK,GAAG,CAAC,EAAE;IACd,MAAME,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,KAAK,GAAG,CAAC,CAAC;IAClC,IAAIK,EAAE,GAAGN,KAAK,GAAGG,IAAI;IACrB,IAAIJ,UAAU,CAACF,KAAK,CAACS,EAAE,CAAC,EAAER,KAAK,CAAC,IAAI,CAAC,EAAE;MACnCE,KAAK,GAAG,EAAEM,EAAE;MACZL,KAAK,IAAIE,IAAI,GAAG,CAAC;IACrB,CAAC,MACI;MACDF,KAAK,GAAGE,IAAI;IAChB;EACJ;EACA,OAAOH,KAAK;AAChB"},"metadata":{},"sourceType":"module","externalDependencies":[]}