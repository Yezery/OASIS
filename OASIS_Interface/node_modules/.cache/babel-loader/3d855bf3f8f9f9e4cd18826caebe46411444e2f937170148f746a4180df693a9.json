{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n\n    /** @type {any} value **/\n    const {\n      value,\n      done\n    } = await peekable.peek();\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield {\n        content: []\n      };\n      return;\n    }\n    peekable.push(value);\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject(input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}","map":{"version":3,"names":["errCode","browserStreamToIt","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","content","push","Number","isInteger","path","mode","mtime","file"],"sources":["/Users/yezery/Oasis/OASIS/node_modules/.store/ipfs-core-utils@0.18.1/node_modules/ipfs-core-utils/src/files/normalise-candidate-single.js"],"sourcesContent":["import errCode from 'err-code'\nimport browserStreamToIt from 'browser-readablestream-to-it'\nimport itPeekable from 'it-peekable'\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js'\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs'\n\n/**\n * @typedef {import('ipfs-core-types/src/utils').ToContent} ToContent\n * @typedef {import('ipfs-unixfs-importer').ImportCandidate} ImporterImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidate} ImportCandidate\n * @typedef {import('ipfs-core-types/src/utils').ImportCandidateStream} ImportCandidateStream\n */\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\n// eslint-disable-next-line complexity\nexport async function * normaliseCandidateSingle (input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // String\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent)\n    return\n  }\n\n  // Uint8Array|ArrayBuffer|TypedArray\n  // Blob|File\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  // Browser ReadableStream\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input)\n  }\n\n  // Iterable<?>\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input)\n\n    /** @type {any} value **/\n    const { value, done } = await peekable.peek()\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield { content: [] }\n      return\n    }\n\n    peekable.push(value)\n\n    // (Async)Iterable<Number>\n    // (Async)Iterable<Bytes>\n    // (Async)Iterable<String>\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent)\n      return\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT')\n  }\n\n  // { path, content: ? }\n  // Note: Detected _after_ (Async)Iterable<?> because Node.js fs.ReadStreams have a\n  // `path` property that passes this check.\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent)\n    return\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT')\n}\n\n/**\n * @param {ImportCandidate} input\n * @param {(content:ToContent) => Promise<AsyncIterable<Uint8Array>>} normaliseContent\n */\nasync function toFileObject (input, normaliseContent) {\n  // @ts-expect-error - Those properties don't exist on most input types\n  const { path, mode, mtime, content } = input\n\n  /** @type {ImporterImportCandidate} */\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  }\n\n  if (content) {\n    file.content = await normaliseContent(content)\n  } else if (!path) { // Not already a file object with path or content prop\n    // @ts-expect-error - input still can be different ToContent\n    file.content = await normaliseContent(input)\n  }\n\n  return file\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}