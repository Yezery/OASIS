{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { connect } from 'socket.io-client';\nimport pDefer from 'p-defer';\nimport { WebRTCReceiver } from '@libp2p/webrtc-peer';\nimport { toMultiaddrConnection } from './socket-to-conn.js';\nimport { cleanUrlSIO } from './utils.js';\nimport { CODE_P2P } from './constants.js';\nimport { EventEmitter, CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:webrtc-star:listener');\nconst sioOptions = {\n  transports: ['websocket'],\n  path: '/socket.io-next/' // This should be removed when socket.io@2 support is removed\n};\n\nclass SigServer extends EventEmitter {\n  constructor(signallingUrl, signallingAddr, upgrader, handler, channelOptions) {\n    super();\n    this.signallingAddr = signallingAddr;\n    this.socket = connect(signallingUrl, sioOptions);\n    this.connections = [];\n    this.channels = new Map();\n    this.pendingSignals = new Map();\n    this.upgrader = upgrader;\n    this.handler = handler;\n    this.channelOptions = channelOptions;\n    this.handleWsHandshake = this.handleWsHandshake.bind(this);\n    let previouslyConnected = false;\n    this.socket.on('connect_error', err => {\n      // @ts-expect-error `.type` is missing from the types\n      if (previouslyConnected && err.type === 'TransportError') {\n        // if we've had an open connection before, and this is a\n        // transport error, let socket.io's reconnect logic take over\n        return;\n      }\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: err\n      }));\n    });\n    this.socket.on('error', err => {\n      this.dispatchEvent(new CustomEvent('error', {\n        detail: err\n      }));\n    });\n    this.socket.on('ws-handshake', this.handleWsHandshake);\n    this.socket.on('ws-peer', maStr => {\n      this.dispatchEvent(new CustomEvent('peer', {\n        detail: maStr\n      }));\n    });\n    this.socket.on('connect', () => {\n      this.socket.emit('ss-join', this.signallingAddr.toString());\n      if (previouslyConnected) {\n        this.dispatchEvent(new CustomEvent('reconnect'));\n      }\n    });\n    this.socket.once('connect', () => {\n      // make sure we can reconnect in future\n      previouslyConnected = true;\n      this.dispatchEvent(new CustomEvent('listening'));\n    });\n    this.socket.on('disconnect', () => {\n      this.dispatchEvent(new CustomEvent('disconnect'));\n    });\n  }\n  _createChannel(intentId, srcMultiaddr, dstMultiaddr) {\n    const channelOptions = {\n      ...this.channelOptions\n    };\n    const channel = new WebRTCReceiver(channelOptions);\n    const onError = evt => {\n      const err = evt.detail;\n      log.error('incoming connection errored', err);\n    };\n    channel.addEventListener('error', onError);\n    channel.addEventListener('close', () => {\n      channel.removeEventListener('error', onError);\n    }, {\n      once: true\n    });\n    channel.addEventListener('signal', evt => {\n      const signal = evt.detail;\n      this.socket.emit('ss-handshake', {\n        intentId,\n        srcMultiaddr,\n        dstMultiaddr,\n        answer: true,\n        signal\n      });\n    });\n    channel.addEventListener('ready', () => {\n      const maConn = toMultiaddrConnection(channel, {\n        remoteAddr: this.signallingAddr\n      });\n      log('new inbound connection %s', maConn.remoteAddr);\n      try {\n        this.upgrader.upgradeInbound(maConn).then(conn => {\n          log('inbound connection %s upgraded', maConn.remoteAddr);\n          this.connections.push(maConn);\n          const untrackConn = () => {\n            this.connections = this.connections.filter(c => c !== maConn);\n            this.channels.delete(intentId);\n            this.pendingSignals.delete(intentId);\n          };\n          channel.addEventListener('close', untrackConn, {\n            once: true\n          });\n          this.dispatchEvent(new CustomEvent('connection', {\n            detail: conn\n          }));\n          this.handler(conn);\n        }).catch(err => {\n          log.error('inbound connection failed to upgrade', err);\n          maConn.close().catch(err => {\n            log.error('inbound connection failed to close after failing to upgrade', err);\n          });\n        });\n      } catch (err) {\n        log.error('inbound connection failed to upgrade', err);\n        maConn.close().catch(err => {\n          log.error('inbound connection failed to close after failing to upgrade', err);\n        });\n      }\n    }, {\n      once: true\n    });\n    return channel;\n  }\n  handleWsHandshake(offer) {\n    log('incoming handshake. signal type \"%s\" is answer %s', offer.signal.type, offer.answer);\n    if (offer.answer === true || offer.err != null || offer.intentId == null) {\n      return;\n    }\n    const intentId = offer.intentId;\n    let pendingSignals = this.pendingSignals.get(intentId);\n    if (pendingSignals == null) {\n      pendingSignals = [];\n      this.pendingSignals.set(intentId, pendingSignals);\n    }\n    pendingSignals.push(offer);\n    let channel = this.channels.get(intentId);\n    if (channel == null) {\n      if (offer.signal.type !== 'offer') {\n        log('handshake is not an offer and channel does not exist, buffering until we receive an offer');\n        return;\n      }\n      log('creating new channel to handle offer handshake');\n      channel = this._createChannel(offer.intentId, offer.srcMultiaddr, offer.dstMultiaddr);\n      this.channels.set(intentId, channel);\n    } else {\n      log('channel already exists, using it to handle handshake');\n    }\n    while (pendingSignals.length > 0) {\n      const handshake = pendingSignals.shift();\n      if (handshake?.signal != null) {\n        channel.handleSignal(handshake.signal);\n      }\n    }\n  }\n  async close() {\n    // Close listener\n    this.socket.emit('ss-leave', this.signallingAddr.toString());\n    this.socket.removeAllListeners();\n    this.socket.close();\n    await Promise.all([...this.connections.map(async maConn => await maConn.close()), ...Array.from(this.channels.values()).map(async channel => await channel.close())]);\n    this.dispatchEvent(new CustomEvent('close'));\n  }\n}\nclass WebRTCListener extends EventEmitter {\n  constructor(upgrader, handler, peerId, transport, options) {\n    super();\n    this.upgrader = upgrader;\n    this.handler = handler;\n    this.peerId = peerId;\n    this.transport = transport;\n    this.options = options;\n  }\n  async listen(ma) {\n    // Should only be used if not already listening\n    if (this.listeningAddr != null) {\n      throw errCode(new Error('listener already in use'), 'ERR_ALREADY_LISTENING');\n    }\n    const defer = pDefer(); // eslint-disable-line @typescript-eslint/no-invalid-void-type\n    // Should be kept unmodified\n    this.listeningAddr = ma;\n    let signallingAddr;\n    if (!ma.protoCodes().includes(CODE_P2P)) {\n      signallingAddr = ma.encapsulate(`/p2p/${this.peerId.toString()}`);\n    } else {\n      signallingAddr = ma;\n    }\n    const signallingUrl = this.signallingUrl = cleanUrlSIO(ma);\n    log('connecting to signalling server on: %s', this.signallingUrl);\n    const server = new SigServer(this.signallingUrl, signallingAddr, this.upgrader, this.handler, this.options.channelOptions);\n    server.addEventListener('error', evt => {\n      const err = evt.detail;\n      log('error connecting to signalling server %o', err);\n      server.close().catch(err => {\n        log.error('error closing server after error', err);\n      });\n      defer.reject(err);\n    });\n    server.addEventListener('listening', () => {\n      log('connected to signalling server');\n      this.dispatchEvent(new CustomEvent('listening'));\n      defer.resolve();\n    });\n    server.addEventListener('peer', evt => {\n      this.transport.peerDiscovered(evt.detail);\n    });\n    server.addEventListener('connection', evt => {\n      const conn = evt.detail;\n      if (conn.remoteAddr == null) {\n        try {\n          conn.remoteAddr = ma.decapsulateCode(CODE_P2P).encapsulate(`/p2p/${conn.remotePeer.toString()}`);\n        } catch (err) {\n          log.error('could not determine remote address', err);\n        }\n      }\n      this.dispatchEvent(new CustomEvent('connection', {\n        detail: conn\n      }));\n    });\n    server.addEventListener('disconnect', () => {\n      // Ensure we error if we try to dial while we are disconnected from\n      // the signalling server\n      this.transport.sigServers.delete(signallingUrl);\n    });\n    server.addEventListener('reconnect', () => {\n      // We can dial via the signalling server again\n      this.transport.sigServers.set(signallingUrl, server);\n    });\n    // Store listen and signal reference addresses\n    this.transport.sigServers.set(this.signallingUrl, server);\n    return await defer.promise;\n  }\n  async close() {\n    if (this.signallingUrl != null) {\n      const server = this.transport.sigServers.get(this.signallingUrl);\n      if (server != null) {\n        await server.close();\n        this.transport.sigServers.delete(this.signallingUrl);\n      }\n    }\n    this.dispatchEvent(new CustomEvent('close'));\n    // Reset state\n    this.listeningAddr = undefined;\n  }\n  getAddrs() {\n    if (this.listeningAddr != null) {\n      return [this.listeningAddr];\n    }\n    return [];\n  }\n}\nexport function createListener(upgrader, handler, peerId, transport, options) {\n  return new WebRTCListener(upgrader, handler, peerId, transport, options);\n}","map":{"version":3,"names":["logger","errCode","connect","pDefer","WebRTCReceiver","toMultiaddrConnection","cleanUrlSIO","CODE_P2P","EventEmitter","CustomEvent","log","sioOptions","transports","path","SigServer","constructor","signallingUrl","signallingAddr","upgrader","handler","channelOptions","socket","connections","channels","Map","pendingSignals","handleWsHandshake","bind","previouslyConnected","on","err","type","dispatchEvent","detail","maStr","emit","toString","once","_createChannel","intentId","srcMultiaddr","dstMultiaddr","channel","onError","evt","error","addEventListener","removeEventListener","signal","answer","maConn","remoteAddr","upgradeInbound","then","conn","push","untrackConn","filter","c","delete","catch","close","offer","get","set","length","handshake","shift","handleSignal","removeAllListeners","Promise","all","map","Array","from","values","WebRTCListener","peerId","transport","options","listen","ma","listeningAddr","Error","defer","protoCodes","includes","encapsulate","server","reject","resolve","peerDiscovered","decapsulateCode","remotePeer","sigServers","promise","undefined","getAddrs","createListener"],"sources":["../../src/listener.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}