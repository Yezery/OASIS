{"ast":null,"code":"\"use strict\";\n\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nrequire(\"core-js/modules/es.typed-array.to-reversed.js\");\nrequire(\"core-js/modules/es.typed-array.to-sorted.js\");\nrequire(\"core-js/modules/es.typed-array.with.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar chacha_1 = require(\"@stablelib/chacha\");\nvar poly1305_1 = require(\"@stablelib/poly1305\");\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar binary_1 = require(\"@stablelib/binary\");\nvar constant_time_1 = require(\"@stablelib/constant-time\");\nexports.KEY_LENGTH = 32;\nexports.NONCE_LENGTH = 12;\nexports.TAG_LENGTH = 16;\nvar ZEROS = new Uint8Array(16);\n/**\n * ChaCha20-Poly1305 Authenticated Encryption with Associated Data.\n *\n * Defined in RFC7539.\n */\nvar ChaCha20Poly1305 = /** @class */function () {\n  /**\n   * Creates a new instance with the given 32-byte key.\n   */\n  function ChaCha20Poly1305(key) {\n    this.nonceLength = exports.NONCE_LENGTH;\n    this.tagLength = exports.TAG_LENGTH;\n    if (key.length !== exports.KEY_LENGTH) {\n      throw new Error(\"ChaCha20Poly1305 needs 32-byte key\");\n    }\n    // Copy key.\n    this._key = new Uint8Array(key);\n  }\n  /**\n   * Encrypts and authenticates plaintext, authenticates associated data,\n   * and returns sealed ciphertext, which includes authentication tag.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If dst is given (it must be the size of plaintext + the size of tag\n   * length) the result will be put into it. Dst and plaintext must not\n   * overlap.\n   */\n  ChaCha20Poly1305.prototype.seal = function (nonce, plaintext, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    // We pass full counter, which has 12-byte nonce and 4-byte block counter,\n    // and it will get incremented after generating the block, which is\n    // exactly what we need: we only use the first 32 bytes of 64-byte\n    // ChaCha block and discard the next 32 bytes.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Allocate space for sealed ciphertext.\n    var resultLength = plaintext.length + this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Encrypt plaintext.\n    chacha_1.streamXOR(this._key, counter, plaintext, result, 4);\n    // Authenticate.\n    // XXX: can \"simplify\" here: pass full result (which is already padded\n    // due to zeroes prepared for tag), and ciphertext length instead of\n    // subarray of result.\n    this._authenticate(result.subarray(result.length - this.tagLength, result.length), authKey, result.subarray(0, result.length - this.tagLength), associatedData);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  /**\n   * Authenticates sealed ciphertext (which includes authentication tag) and\n   * associated data, decrypts ciphertext and returns decrypted plaintext.\n   *\n   * RFC7539 specifies 12 bytes for nonce. It may be this 12-byte nonce\n   * (\"IV\"), or full 16-byte counter (called \"32-bit fixed-common part\")\n   * and nonce.\n   *\n   * If authentication fails, it returns null.\n   *\n   * If dst is given (it must be of ciphertext length minus tag length),\n   * the result will be put into it. Dst and plaintext must not overlap.\n   */\n  ChaCha20Poly1305.prototype.open = function (nonce, sealed, associatedData, dst) {\n    if (nonce.length > 16) {\n      throw new Error(\"ChaCha20Poly1305: incorrect nonce length\");\n    }\n    // Sealed ciphertext should at least contain tag.\n    if (sealed.length < this.tagLength) {\n      // TODO(dchest): should we throw here instead?\n      return null;\n    }\n    // Allocate space for counter, and set nonce as last bytes of it.\n    var counter = new Uint8Array(16);\n    counter.set(nonce, counter.length - nonce.length);\n    // Generate authentication key by taking first 32-bytes of stream.\n    var authKey = new Uint8Array(32);\n    chacha_1.stream(this._key, counter, authKey, 4);\n    // Authenticate.\n    // XXX: can simplify and avoid allocation: since authenticate()\n    // already allocates tag (from Poly1305.digest(), it can return)\n    // it instead of copying to calculatedTag. But then in seal()\n    // we'll need to copy it.\n    var calculatedTag = new Uint8Array(this.tagLength);\n    this._authenticate(calculatedTag, authKey, sealed.subarray(0, sealed.length - this.tagLength), associatedData);\n    // Constant-time compare tags and return null if they differ.\n    if (!constant_time_1.equal(calculatedTag, sealed.subarray(sealed.length - this.tagLength, sealed.length))) {\n      return null;\n    }\n    // Allocate space for decrypted plaintext.\n    var resultLength = sealed.length - this.tagLength;\n    var result;\n    if (dst) {\n      if (dst.length !== resultLength) {\n        throw new Error(\"ChaCha20Poly1305: incorrect destination length\");\n      }\n      result = dst;\n    } else {\n      result = new Uint8Array(resultLength);\n    }\n    // Decrypt.\n    chacha_1.streamXOR(this._key, counter, sealed.subarray(0, sealed.length - this.tagLength), result, 4);\n    // Cleanup.\n    wipe_1.wipe(counter);\n    return result;\n  };\n  ChaCha20Poly1305.prototype.clean = function () {\n    wipe_1.wipe(this._key);\n    return this;\n  };\n  ChaCha20Poly1305.prototype._authenticate = function (tagOut, authKey, ciphertext, associatedData) {\n    // Initialize Poly1305 with authKey.\n    var h = new poly1305_1.Poly1305(authKey);\n    // Authenticate padded associated data.\n    if (associatedData) {\n      h.update(associatedData);\n      if (associatedData.length % 16 > 0) {\n        h.update(ZEROS.subarray(associatedData.length % 16));\n      }\n    }\n    // Authenticate padded ciphertext.\n    h.update(ciphertext);\n    if (ciphertext.length % 16 > 0) {\n      h.update(ZEROS.subarray(ciphertext.length % 16));\n    }\n    // Authenticate length of associated data.\n    // XXX: can avoid allocation here?\n    var length = new Uint8Array(8);\n    if (associatedData) {\n      binary_1.writeUint64LE(associatedData.length, length);\n    }\n    h.update(length);\n    // Authenticate length of ciphertext.\n    binary_1.writeUint64LE(ciphertext.length, length);\n    h.update(length);\n    // Get tag and copy it into tagOut.\n    var tag = h.digest();\n    for (var i = 0; i < tag.length; i++) {\n      tagOut[i] = tag[i];\n    }\n    // Cleanup.\n    h.clean();\n    wipe_1.wipe(tag);\n    wipe_1.wipe(length);\n  };\n  return ChaCha20Poly1305;\n}();\nexports.ChaCha20Poly1305 = ChaCha20Poly1305;","map":{"version":3,"names":["require","chacha_1","poly1305_1","wipe_1","binary_1","constant_time_1","exports","KEY_LENGTH","NONCE_LENGTH","TAG_LENGTH","ZEROS","Uint8Array","ChaCha20Poly1305","key","nonceLength","tagLength","length","Error","_key","prototype","seal","nonce","plaintext","associatedData","dst","counter","set","authKey","stream","resultLength","result","streamXOR","_authenticate","subarray","wipe","open","sealed","calculatedTag","equal","clean","tagOut","ciphertext","h","Poly1305","update","writeUint64LE","tag","digest","i"],"sources":["../chacha20poly1305.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}