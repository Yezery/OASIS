{"ast":null,"code":"import \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport { concat } from 'uint8arrays/concat';\nimport { fromString } from 'uint8arrays/from-string';\nimport webcrypto from '../webcrypto.js';\n// WebKit on Linux does not support deriving a key from an empty PBKDF2 key.\n// So, as a workaround, we provide the generated key as a constant. We test that\n// this generated key is accurate in test/workaround.spec.ts\n// Generated via:\n// await crypto.subtle.exportKey('jwk',\n//   await crypto.subtle.deriveKey(\n//     { name: 'PBKDF2', salt: new Uint8Array(16), iterations: 32767, hash: { name: 'SHA-256' } },\n//     await crypto.subtle.importKey('raw', new Uint8Array(0), { name: 'PBKDF2' }, false, ['deriveKey']),\n//     { name: 'AES-GCM', length: 128 }, true, ['encrypt', 'decrypt'])\n// )\nexport const derivedEmptyPasswordKey = {\n  alg: 'A128GCM',\n  ext: true,\n  k: 'scm9jmO_4BJAgdwWGVulLg',\n  key_ops: ['encrypt', 'decrypt'],\n  kty: 'oct'\n};\n// Based off of code from https://github.com/luke-park/SecureCompatibleEncryptionExamples\nexport function create(opts) {\n  const algorithm = opts?.algorithm ?? 'AES-GCM';\n  let keyLength = opts?.keyLength ?? 16;\n  const nonceLength = opts?.nonceLength ?? 12;\n  const digest = opts?.digest ?? 'SHA-256';\n  const saltLength = opts?.saltLength ?? 16;\n  const iterations = opts?.iterations ?? 32767;\n  const crypto = webcrypto.get();\n  keyLength *= 8; // Browser crypto uses bits instead of bytes\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to encrypt the data.\n   */\n  async function encrypt(data, password) {\n    const salt = crypto.getRandomValues(new Uint8Array(saltLength));\n    const nonce = crypto.getRandomValues(new Uint8Array(nonceLength));\n    const aesGcm = {\n      name: algorithm,\n      iv: nonce\n    };\n    if (typeof password === 'string') {\n      password = fromString(password);\n    }\n    let cryptoKey;\n    if (password.length === 0) {\n      cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, {\n        name: 'AES-GCM'\n      }, true, ['encrypt']);\n      try {\n        const deriveParams = {\n          name: 'PBKDF2',\n          salt,\n          iterations,\n          hash: {\n            name: digest\n          }\n        };\n        const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, {\n          name: 'PBKDF2'\n        }, false, ['deriveKey']);\n        cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, {\n          name: algorithm,\n          length: keyLength\n        }, true, ['encrypt']);\n      } catch {\n        cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, {\n          name: 'AES-GCM'\n        }, true, ['encrypt']);\n      }\n    } else {\n      // Derive a key using PBKDF2.\n      const deriveParams = {\n        name: 'PBKDF2',\n        salt,\n        iterations,\n        hash: {\n          name: digest\n        }\n      };\n      const rawKey = await crypto.subtle.importKey('raw', password, {\n        name: 'PBKDF2'\n      }, false, ['deriveKey']);\n      cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {\n        name: algorithm,\n        length: keyLength\n      }, true, ['encrypt']);\n    }\n    // Encrypt the string.\n    const ciphertext = await crypto.subtle.encrypt(aesGcm, cryptoKey, data);\n    return concat([salt, aesGcm.iv, new Uint8Array(ciphertext)]);\n  }\n  /**\n   * Uses the provided password to derive a pbkdf2 key. The key\n   * will then be used to decrypt the data. The options used to create\n   * this decryption cipher must be the same as those used to create\n   * the encryption cipher.\n   */\n  async function decrypt(data, password) {\n    const salt = data.subarray(0, saltLength);\n    const nonce = data.subarray(saltLength, saltLength + nonceLength);\n    const ciphertext = data.subarray(saltLength + nonceLength);\n    const aesGcm = {\n      name: algorithm,\n      iv: nonce\n    };\n    if (typeof password === 'string') {\n      password = fromString(password);\n    }\n    let cryptoKey;\n    if (password.length === 0) {\n      try {\n        const deriveParams = {\n          name: 'PBKDF2',\n          salt,\n          iterations,\n          hash: {\n            name: digest\n          }\n        };\n        const runtimeDerivedEmptyPassword = await crypto.subtle.importKey('raw', password, {\n          name: 'PBKDF2'\n        }, false, ['deriveKey']);\n        cryptoKey = await crypto.subtle.deriveKey(deriveParams, runtimeDerivedEmptyPassword, {\n          name: algorithm,\n          length: keyLength\n        }, true, ['decrypt']);\n      } catch {\n        cryptoKey = await crypto.subtle.importKey('jwk', derivedEmptyPasswordKey, {\n          name: 'AES-GCM'\n        }, true, ['decrypt']);\n      }\n    } else {\n      // Derive the key using PBKDF2.\n      const deriveParams = {\n        name: 'PBKDF2',\n        salt,\n        iterations,\n        hash: {\n          name: digest\n        }\n      };\n      const rawKey = await crypto.subtle.importKey('raw', password, {\n        name: 'PBKDF2'\n      }, false, ['deriveKey']);\n      cryptoKey = await crypto.subtle.deriveKey(deriveParams, rawKey, {\n        name: algorithm,\n        length: keyLength\n      }, true, ['decrypt']);\n    }\n    // Decrypt the string.\n    const plaintext = await crypto.subtle.decrypt(aesGcm, cryptoKey, ciphertext);\n    return new Uint8Array(plaintext);\n  }\n  const cipher = {\n    encrypt,\n    decrypt\n  };\n  return cipher;\n}","map":{"version":3,"names":["concat","fromString","webcrypto","derivedEmptyPasswordKey","alg","ext","k","key_ops","kty","create","opts","algorithm","keyLength","nonceLength","digest","saltLength","iterations","crypto","get","encrypt","data","password","salt","getRandomValues","Uint8Array","nonce","aesGcm","name","iv","cryptoKey","length","subtle","importKey","deriveParams","hash","runtimeDerivedEmptyPassword","deriveKey","rawKey","ciphertext","decrypt","subarray","plaintext","cipher"],"sources":["../../../src/ciphers/aes-gcm.browser.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}