import peek from 'it-peekable';
function isAsyncIterable(thing) {
    return thing[Symbol.asyncIterator] != null;
}
function forEach(source, fn) {
    if (isAsyncIterable(source)) {
        return (async function* () {
            for await (const thing of source) {
                await fn(thing);
                yield thing;
            }
        })();
    }
    // if fn function returns a promise we have to return an async generator
    const peekable = peek(source);
    const { value, done } = peekable.next();
    if (done === true) {
        return (function* () { }());
    }
    const res = fn(value);
    if (typeof res?.then === 'function') {
        return (async function* () {
            yield value;
            for await (const val of peekable) {
                await fn(val);
                yield val;
            }
        })();
    }
    const func = fn;
    return (function* () {
        yield value;
        for (const val of peekable) {
            func(val);
            yield val;
        }
    })();
}
export default forEach;
//# sourceMappingURL=index.js.map