interface Peek<T> {
    peek: () => IteratorResult<T, undefined>;
}
interface AsyncPeek<T> {
    peek: () => Promise<IteratorResult<T, undefined>>;
}
interface Push<T> {
    push: (value: T) => void;
}
type Peekable<T> = Iterable<T> & Peek<T> & Push<T> & Iterator<T>;
type AsyncPeekable<T> = AsyncIterable<T> & AsyncPeek<T> & Push<T> & AsyncIterator<T>;
declare function peekable<T>(iterable: Iterable<T>): Peekable<T>;
declare function peekable<T>(iterable: AsyncIterable<T>): AsyncPeekable<T>;
export default peekable;
//# sourceMappingURL=index.d.ts.map